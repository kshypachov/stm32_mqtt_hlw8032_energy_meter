
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000218d8  080101a0  080101a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003738  08031a78  08031a78  00022a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080351b0  080351b0  000272f8  2**0
                  CONTENTS
  4 .ARM          00000008  080351b0  080351b0  000261b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080351b8  080351b8  000272f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080351b8  080351b8  000261b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080351bc  080351bc  000261bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  080351c0  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d81c  200002f8  080354b8  000272f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000db14  080354b8  00027b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000272f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f35b  00000000  00000000  00027328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c8c  00000000  00000000  00056683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af0  00000000  00000000  0005e310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000022cf  00000000  00000000  00060e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe09  00000000  00000000  000630cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033f55  00000000  00000000  00082ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa440  00000000  00000000  000b6e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016126d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cb04  00000000  00000000  001612b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0016ddb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	@ (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	@ (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08031a60 	.word	0x08031a60

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	@ (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	@ (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	@ (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	08031a60 	.word	0x08031a60

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	@ 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9b4 	b.w	8011038 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	@ 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	@ 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	@ 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	@ 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	@ (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	@ (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9d08      	ldr	r5, [sp, #32]
 8010d82:	460c      	mov	r4, r1
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d14e      	bne.n	8010e26 <__udivmoddi4+0xaa>
 8010d88:	4694      	mov	ip, r2
 8010d8a:	458c      	cmp	ip, r1
 8010d8c:	4686      	mov	lr, r0
 8010d8e:	fab2 f282 	clz	r2, r2
 8010d92:	d962      	bls.n	8010e5a <__udivmoddi4+0xde>
 8010d94:	b14a      	cbz	r2, 8010daa <__udivmoddi4+0x2e>
 8010d96:	f1c2 0320 	rsb	r3, r2, #32
 8010d9a:	4091      	lsls	r1, r2
 8010d9c:	fa20 f303 	lsr.w	r3, r0, r3
 8010da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8010da4:	4319      	orrs	r1, r3
 8010da6:	fa00 fe02 	lsl.w	lr, r0, r2
 8010daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010dae:	fa1f f68c 	uxth.w	r6, ip
 8010db2:	fbb1 f4f7 	udiv	r4, r1, r7
 8010db6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010dba:	fb07 1114 	mls	r1, r7, r4, r1
 8010dbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010dc2:	fb04 f106 	mul.w	r1, r4, r6
 8010dc6:	4299      	cmp	r1, r3
 8010dc8:	d90a      	bls.n	8010de0 <__udivmoddi4+0x64>
 8010dca:	eb1c 0303 	adds.w	r3, ip, r3
 8010dce:	f104 30ff 	add.w	r0, r4, #4294967295
 8010dd2:	f080 8112 	bcs.w	8010ffa <__udivmoddi4+0x27e>
 8010dd6:	4299      	cmp	r1, r3
 8010dd8:	f240 810f 	bls.w	8010ffa <__udivmoddi4+0x27e>
 8010ddc:	3c02      	subs	r4, #2
 8010dde:	4463      	add	r3, ip
 8010de0:	1a59      	subs	r1, r3, r1
 8010de2:	fa1f f38e 	uxth.w	r3, lr
 8010de6:	fbb1 f0f7 	udiv	r0, r1, r7
 8010dea:	fb07 1110 	mls	r1, r7, r0, r1
 8010dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010df2:	fb00 f606 	mul.w	r6, r0, r6
 8010df6:	429e      	cmp	r6, r3
 8010df8:	d90a      	bls.n	8010e10 <__udivmoddi4+0x94>
 8010dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8010dfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8010e02:	f080 80fc 	bcs.w	8010ffe <__udivmoddi4+0x282>
 8010e06:	429e      	cmp	r6, r3
 8010e08:	f240 80f9 	bls.w	8010ffe <__udivmoddi4+0x282>
 8010e0c:	4463      	add	r3, ip
 8010e0e:	3802      	subs	r0, #2
 8010e10:	1b9b      	subs	r3, r3, r6
 8010e12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8010e16:	2100      	movs	r1, #0
 8010e18:	b11d      	cbz	r5, 8010e22 <__udivmoddi4+0xa6>
 8010e1a:	40d3      	lsrs	r3, r2
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	e9c5 3200 	strd	r3, r2, [r5]
 8010e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e26:	428b      	cmp	r3, r1
 8010e28:	d905      	bls.n	8010e36 <__udivmoddi4+0xba>
 8010e2a:	b10d      	cbz	r5, 8010e30 <__udivmoddi4+0xb4>
 8010e2c:	e9c5 0100 	strd	r0, r1, [r5]
 8010e30:	2100      	movs	r1, #0
 8010e32:	4608      	mov	r0, r1
 8010e34:	e7f5      	b.n	8010e22 <__udivmoddi4+0xa6>
 8010e36:	fab3 f183 	clz	r1, r3
 8010e3a:	2900      	cmp	r1, #0
 8010e3c:	d146      	bne.n	8010ecc <__udivmoddi4+0x150>
 8010e3e:	42a3      	cmp	r3, r4
 8010e40:	d302      	bcc.n	8010e48 <__udivmoddi4+0xcc>
 8010e42:	4290      	cmp	r0, r2
 8010e44:	f0c0 80f0 	bcc.w	8011028 <__udivmoddi4+0x2ac>
 8010e48:	1a86      	subs	r6, r0, r2
 8010e4a:	eb64 0303 	sbc.w	r3, r4, r3
 8010e4e:	2001      	movs	r0, #1
 8010e50:	2d00      	cmp	r5, #0
 8010e52:	d0e6      	beq.n	8010e22 <__udivmoddi4+0xa6>
 8010e54:	e9c5 6300 	strd	r6, r3, [r5]
 8010e58:	e7e3      	b.n	8010e22 <__udivmoddi4+0xa6>
 8010e5a:	2a00      	cmp	r2, #0
 8010e5c:	f040 8090 	bne.w	8010f80 <__udivmoddi4+0x204>
 8010e60:	eba1 040c 	sub.w	r4, r1, ip
 8010e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010e68:	fa1f f78c 	uxth.w	r7, ip
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8010e72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8010e76:	fb08 4416 	mls	r4, r8, r6, r4
 8010e7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010e7e:	fb07 f006 	mul.w	r0, r7, r6
 8010e82:	4298      	cmp	r0, r3
 8010e84:	d908      	bls.n	8010e98 <__udivmoddi4+0x11c>
 8010e86:	eb1c 0303 	adds.w	r3, ip, r3
 8010e8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8010e8e:	d202      	bcs.n	8010e96 <__udivmoddi4+0x11a>
 8010e90:	4298      	cmp	r0, r3
 8010e92:	f200 80cd 	bhi.w	8011030 <__udivmoddi4+0x2b4>
 8010e96:	4626      	mov	r6, r4
 8010e98:	1a1c      	subs	r4, r3, r0
 8010e9a:	fa1f f38e 	uxth.w	r3, lr
 8010e9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8010ea2:	fb08 4410 	mls	r4, r8, r0, r4
 8010ea6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010eaa:	fb00 f707 	mul.w	r7, r0, r7
 8010eae:	429f      	cmp	r7, r3
 8010eb0:	d908      	bls.n	8010ec4 <__udivmoddi4+0x148>
 8010eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8010eb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8010eba:	d202      	bcs.n	8010ec2 <__udivmoddi4+0x146>
 8010ebc:	429f      	cmp	r7, r3
 8010ebe:	f200 80b0 	bhi.w	8011022 <__udivmoddi4+0x2a6>
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	1bdb      	subs	r3, r3, r7
 8010ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010eca:	e7a5      	b.n	8010e18 <__udivmoddi4+0x9c>
 8010ecc:	f1c1 0620 	rsb	r6, r1, #32
 8010ed0:	408b      	lsls	r3, r1
 8010ed2:	fa22 f706 	lsr.w	r7, r2, r6
 8010ed6:	431f      	orrs	r7, r3
 8010ed8:	fa20 fc06 	lsr.w	ip, r0, r6
 8010edc:	fa04 f301 	lsl.w	r3, r4, r1
 8010ee0:	ea43 030c 	orr.w	r3, r3, ip
 8010ee4:	40f4      	lsrs	r4, r6
 8010ee6:	fa00 f801 	lsl.w	r8, r0, r1
 8010eea:	0c38      	lsrs	r0, r7, #16
 8010eec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8010ef0:	fbb4 fef0 	udiv	lr, r4, r0
 8010ef4:	fa1f fc87 	uxth.w	ip, r7
 8010ef8:	fb00 441e 	mls	r4, r0, lr, r4
 8010efc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010f00:	fb0e f90c 	mul.w	r9, lr, ip
 8010f04:	45a1      	cmp	r9, r4
 8010f06:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0a:	d90a      	bls.n	8010f22 <__udivmoddi4+0x1a6>
 8010f0c:	193c      	adds	r4, r7, r4
 8010f0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8010f12:	f080 8084 	bcs.w	801101e <__udivmoddi4+0x2a2>
 8010f16:	45a1      	cmp	r9, r4
 8010f18:	f240 8081 	bls.w	801101e <__udivmoddi4+0x2a2>
 8010f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8010f20:	443c      	add	r4, r7
 8010f22:	eba4 0409 	sub.w	r4, r4, r9
 8010f26:	fa1f f983 	uxth.w	r9, r3
 8010f2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8010f2e:	fb00 4413 	mls	r4, r0, r3, r4
 8010f32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8010f36:	fb03 fc0c 	mul.w	ip, r3, ip
 8010f3a:	45a4      	cmp	ip, r4
 8010f3c:	d907      	bls.n	8010f4e <__udivmoddi4+0x1d2>
 8010f3e:	193c      	adds	r4, r7, r4
 8010f40:	f103 30ff 	add.w	r0, r3, #4294967295
 8010f44:	d267      	bcs.n	8011016 <__udivmoddi4+0x29a>
 8010f46:	45a4      	cmp	ip, r4
 8010f48:	d965      	bls.n	8011016 <__udivmoddi4+0x29a>
 8010f4a:	3b02      	subs	r3, #2
 8010f4c:	443c      	add	r4, r7
 8010f4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8010f52:	fba0 9302 	umull	r9, r3, r0, r2
 8010f56:	eba4 040c 	sub.w	r4, r4, ip
 8010f5a:	429c      	cmp	r4, r3
 8010f5c:	46ce      	mov	lr, r9
 8010f5e:	469c      	mov	ip, r3
 8010f60:	d351      	bcc.n	8011006 <__udivmoddi4+0x28a>
 8010f62:	d04e      	beq.n	8011002 <__udivmoddi4+0x286>
 8010f64:	b155      	cbz	r5, 8010f7c <__udivmoddi4+0x200>
 8010f66:	ebb8 030e 	subs.w	r3, r8, lr
 8010f6a:	eb64 040c 	sbc.w	r4, r4, ip
 8010f6e:	fa04 f606 	lsl.w	r6, r4, r6
 8010f72:	40cb      	lsrs	r3, r1
 8010f74:	431e      	orrs	r6, r3
 8010f76:	40cc      	lsrs	r4, r1
 8010f78:	e9c5 6400 	strd	r6, r4, [r5]
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	e750      	b.n	8010e22 <__udivmoddi4+0xa6>
 8010f80:	f1c2 0320 	rsb	r3, r2, #32
 8010f84:	fa20 f103 	lsr.w	r1, r0, r3
 8010f88:	fa0c fc02 	lsl.w	ip, ip, r2
 8010f8c:	fa24 f303 	lsr.w	r3, r4, r3
 8010f90:	4094      	lsls	r4, r2
 8010f92:	430c      	orrs	r4, r1
 8010f94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8010f98:	fa00 fe02 	lsl.w	lr, r0, r2
 8010f9c:	fa1f f78c 	uxth.w	r7, ip
 8010fa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8010fa4:	fb08 3110 	mls	r1, r8, r0, r3
 8010fa8:	0c23      	lsrs	r3, r4, #16
 8010faa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010fae:	fb00 f107 	mul.w	r1, r0, r7
 8010fb2:	4299      	cmp	r1, r3
 8010fb4:	d908      	bls.n	8010fc8 <__udivmoddi4+0x24c>
 8010fb6:	eb1c 0303 	adds.w	r3, ip, r3
 8010fba:	f100 36ff 	add.w	r6, r0, #4294967295
 8010fbe:	d22c      	bcs.n	801101a <__udivmoddi4+0x29e>
 8010fc0:	4299      	cmp	r1, r3
 8010fc2:	d92a      	bls.n	801101a <__udivmoddi4+0x29e>
 8010fc4:	3802      	subs	r0, #2
 8010fc6:	4463      	add	r3, ip
 8010fc8:	1a5b      	subs	r3, r3, r1
 8010fca:	b2a4      	uxth	r4, r4
 8010fcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8010fd0:	fb08 3311 	mls	r3, r8, r1, r3
 8010fd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010fd8:	fb01 f307 	mul.w	r3, r1, r7
 8010fdc:	42a3      	cmp	r3, r4
 8010fde:	d908      	bls.n	8010ff2 <__udivmoddi4+0x276>
 8010fe0:	eb1c 0404 	adds.w	r4, ip, r4
 8010fe4:	f101 36ff 	add.w	r6, r1, #4294967295
 8010fe8:	d213      	bcs.n	8011012 <__udivmoddi4+0x296>
 8010fea:	42a3      	cmp	r3, r4
 8010fec:	d911      	bls.n	8011012 <__udivmoddi4+0x296>
 8010fee:	3902      	subs	r1, #2
 8010ff0:	4464      	add	r4, ip
 8010ff2:	1ae4      	subs	r4, r4, r3
 8010ff4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010ff8:	e739      	b.n	8010e6e <__udivmoddi4+0xf2>
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	e6f0      	b.n	8010de0 <__udivmoddi4+0x64>
 8010ffe:	4608      	mov	r0, r1
 8011000:	e706      	b.n	8010e10 <__udivmoddi4+0x94>
 8011002:	45c8      	cmp	r8, r9
 8011004:	d2ae      	bcs.n	8010f64 <__udivmoddi4+0x1e8>
 8011006:	ebb9 0e02 	subs.w	lr, r9, r2
 801100a:	eb63 0c07 	sbc.w	ip, r3, r7
 801100e:	3801      	subs	r0, #1
 8011010:	e7a8      	b.n	8010f64 <__udivmoddi4+0x1e8>
 8011012:	4631      	mov	r1, r6
 8011014:	e7ed      	b.n	8010ff2 <__udivmoddi4+0x276>
 8011016:	4603      	mov	r3, r0
 8011018:	e799      	b.n	8010f4e <__udivmoddi4+0x1d2>
 801101a:	4630      	mov	r0, r6
 801101c:	e7d4      	b.n	8010fc8 <__udivmoddi4+0x24c>
 801101e:	46d6      	mov	lr, sl
 8011020:	e77f      	b.n	8010f22 <__udivmoddi4+0x1a6>
 8011022:	4463      	add	r3, ip
 8011024:	3802      	subs	r0, #2
 8011026:	e74d      	b.n	8010ec4 <__udivmoddi4+0x148>
 8011028:	4606      	mov	r6, r0
 801102a:	4623      	mov	r3, r4
 801102c:	4608      	mov	r0, r1
 801102e:	e70f      	b.n	8010e50 <__udivmoddi4+0xd4>
 8011030:	3e02      	subs	r6, #2
 8011032:	4463      	add	r3, ip
 8011034:	e730      	b.n	8010e98 <__udivmoddi4+0x11c>
 8011036:	bf00      	nop

08011038 <__aeabi_idiv0>:
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop

0801103c <configureTimerForRunTimeStats>:
void vApplicationTickHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 801103c:	b480      	push	{r7}
 801103e:	af00      	add	r7, sp, #0

}
 8011040:	bf00      	nop
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr

0801104a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 801104a:	b480      	push	{r7}
 801104c:	af00      	add	r7, sp, #0
return 0;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr

0801105a <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 801105a:	b580      	push	{r7, lr}
 801105c:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	mqtt_1ms_tik();
 801105e:	f003 fab1 	bl	80145c4 <mqtt_1ms_tik>
}
 8011062:	bf00      	nop
 8011064:	bd80      	pop	{r7, pc}
	...

08011068 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a0e      	ldr	r2, [pc, #56]	@ (80110b4 <HAL_UARTEx_RxEventCallback+0x4c>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d116      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801107e:	887b      	ldrh	r3, [r7, #2]
 8011080:	2b18      	cmp	r3, #24
 8011082:	d113      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011084:	4b0c      	ldr	r3, [pc, #48]	@ (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f00f fbff 	bl	802088c <osMessageQueueGetCount>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8011094:	4b08      	ldr	r3, [pc, #32]	@ (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	2300      	movs	r3, #0
 801109a:	2200      	movs	r2, #0
 801109c:	4907      	ldr	r1, [pc, #28]	@ (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 801109e:	f00f fb37 	bl	8020710 <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110a2:	2218      	movs	r2, #24
 80110a4:	4905      	ldr	r1, [pc, #20]	@ (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 80110a6:	4806      	ldr	r0, [pc, #24]	@ (80110c0 <HAL_UARTEx_RxEventCallback+0x58>)
 80110a8:	f006 fd06 	bl	8017ab8 <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	40004400 	.word	0x40004400
 80110b8:	20000448 	.word	0x20000448
 80110bc:	20000474 	.word	0x20000474
 80110c0:	200003d8 	.word	0x200003d8

080110c4 <EthMutexTake>:

void EthMutexTake(void){
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110c8:	4b04      	ldr	r3, [pc, #16]	@ (80110dc <EthMutexTake+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f04f 31ff 	mov.w	r1, #4294967295
 80110d0:	4618      	mov	r0, r3
 80110d2:	f00f fa22 	bl	802051a <osMutexAcquire>
}
 80110d6:	bf00      	nop
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000464 	.word	0x20000464

080110e0 <EthMutexRelease>:

void EthMutexRelease(void){
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110e4:	4b03      	ldr	r3, [pc, #12]	@ (80110f4 <EthMutexRelease+0x14>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f00f fa61 	bl	80205b0 <osMutexRelease>
}
 80110ee:	bf00      	nop
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000464 	.word	0x20000464

080110f8 <LfsMutexTake>:

void LfsMutexTake(void){
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80110fc:	4b04      	ldr	r3, [pc, #16]	@ (8011110 <LfsMutexTake+0x18>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f04f 31ff 	mov.w	r1, #4294967295
 8011104:	4618      	mov	r0, r3
 8011106:	f00f fa08 	bl	802051a <osMutexAcquire>
}
 801110a:	bf00      	nop
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000468 	.word	0x20000468

08011114 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011118:	4b03      	ldr	r3, [pc, #12]	@ (8011128 <LfsMutexRelease+0x14>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f00f fa47 	bl	80205b0 <osMutexRelease>
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20000468 	.word	0x20000468

0801112c <SocketMutexTake>:

void SocketMutexTake(void){
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 8011130:	4b04      	ldr	r3, [pc, #16]	@ (8011144 <SocketMutexTake+0x18>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f04f 31ff 	mov.w	r1, #4294967295
 8011138:	4618      	mov	r0, r3
 801113a:	f00f f9ee 	bl	802051a <osMutexAcquire>
}
 801113e:	bf00      	nop
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	2000046c 	.word	0x2000046c

08011148 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 801114c:	4b03      	ldr	r3, [pc, #12]	@ (801115c <SocketMutexRelease+0x14>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4618      	mov	r0, r3
 8011152:	f00f fa2d 	bl	80205b0 <osMutexRelease>
}
 8011156:	bf00      	nop
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	2000046c 	.word	0x2000046c

08011160 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8011160:	b580      	push	{r7, lr}
 8011162:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011164:	4b04      	ldr	r3, [pc, #16]	@ (8011178 <ServiceSockMutexTake+0x18>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f04f 31ff 	mov.w	r1, #4294967295
 801116c:	4618      	mov	r0, r3
 801116e:	f00f f9d4 	bl	802051a <osMutexAcquire>
}
 8011172:	bf00      	nop
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	20000470 	.word	0x20000470

0801117c <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8011180:	4b03      	ldr	r3, [pc, #12]	@ (8011190 <ServiceSockMutexRelease+0x14>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f00f fa13 	bl	80205b0 <osMutexRelease>
}
 801118a:	bf00      	nop
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	20000470 	.word	0x20000470

08011194 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 8011198:	2200      	movs	r2, #0
 801119a:	2102      	movs	r1, #2
 801119c:	4802      	ldr	r0, [pc, #8]	@ (80111a8 <PowerON_HLW8032+0x14>)
 801119e:	f004 febb 	bl	8015f18 <HAL_GPIO_WritePin>
}
 80111a2:	bf00      	nop
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	40020000 	.word	0x40020000

080111ac <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111b0:	2201      	movs	r2, #1
 80111b2:	2102      	movs	r1, #2
 80111b4:	4802      	ldr	r0, [pc, #8]	@ (80111c0 <PowerOFF_HLW8032+0x14>)
 80111b6:	f004 feaf 	bl	8015f18 <HAL_GPIO_WritePin>
}
 80111ba:	bf00      	nop
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	40020000 	.word	0x40020000

080111c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
}
 80111ca:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111cc:	4b60      	ldr	r3, [pc, #384]	@ (8011350 <main+0x18c>)
 80111ce:	4a61      	ldr	r2, [pc, #388]	@ (8011354 <main+0x190>)
 80111d0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111d2:	b662      	cpsie	i
}
 80111d4:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111d6:	f004 fb25 	bl	8015824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111da:	f000 f927 	bl	801142c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111de:	485e      	ldr	r0, [pc, #376]	@ (8011358 <main+0x194>)
 80111e0:	f00b fcf2 	bl	801cbc8 <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111e4:	f000 fa54 	bl	8011690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111e8:	f000 fa26 	bl	8011638 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111ec:	f000 f9b8 	bl	8011560 <MX_SPI1_Init>
  MX_SPI3_Init();
 80111f0:	f000 f9ec 	bl	80115cc <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 80111f4:	f00e ff8a 	bl	802010c <MX_MBEDTLS_Init>
  MX_CRC_Init();
 80111f8:	f000 f984 	bl	8011504 <MX_CRC_Init>
  MX_IWDG_Init();
 80111fc:	f000 f996 	bl	801152c <MX_IWDG_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8011200:	f00e ff84 	bl	802010c <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011204:	f00e ffce 	bl	80201a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011208:	4854      	ldr	r0, [pc, #336]	@ (801135c <main+0x198>)
 801120a:	f00f f900 	bl	802040e <osMutexNew>
 801120e:	4603      	mov	r3, r0
 8011210:	4a53      	ldr	r2, [pc, #332]	@ (8011360 <main+0x19c>)
 8011212:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011214:	4853      	ldr	r0, [pc, #332]	@ (8011364 <main+0x1a0>)
 8011216:	f00f f8fa 	bl	802040e <osMutexNew>
 801121a:	4603      	mov	r3, r0
 801121c:	4a52      	ldr	r2, [pc, #328]	@ (8011368 <main+0x1a4>)
 801121e:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 8011220:	4852      	ldr	r0, [pc, #328]	@ (801136c <main+0x1a8>)
 8011222:	f00f f8f4 	bl	802040e <osMutexNew>
 8011226:	4603      	mov	r3, r0
 8011228:	4a51      	ldr	r2, [pc, #324]	@ (8011370 <main+0x1ac>)
 801122a:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 801122c:	4851      	ldr	r0, [pc, #324]	@ (8011374 <main+0x1b0>)
 801122e:	f00f f8ee 	bl	802040e <osMutexNew>
 8011232:	4603      	mov	r3, r0
 8011234:	4a50      	ldr	r2, [pc, #320]	@ (8011378 <main+0x1b4>)
 8011236:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011238:	4a50      	ldr	r2, [pc, #320]	@ (801137c <main+0x1b8>)
 801123a:	211e      	movs	r1, #30
 801123c:	2001      	movs	r0, #1
 801123e:	f00f f9f4 	bl	802062a <osMessageQueueNew>
 8011242:	4603      	mov	r3, r0
 8011244:	4a4e      	ldr	r2, [pc, #312]	@ (8011380 <main+0x1bc>)
 8011246:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011248:	4a4e      	ldr	r2, [pc, #312]	@ (8011384 <main+0x1c0>)
 801124a:	2120      	movs	r1, #32
 801124c:	2001      	movs	r0, #1
 801124e:	f00f f9ec 	bl	802062a <osMessageQueueNew>
 8011252:	4603      	mov	r3, r0
 8011254:	4a4c      	ldr	r2, [pc, #304]	@ (8011388 <main+0x1c4>)
 8011256:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011258:	4a4c      	ldr	r2, [pc, #304]	@ (801138c <main+0x1c8>)
 801125a:	2124      	movs	r1, #36	@ 0x24
 801125c:	2001      	movs	r0, #1
 801125e:	f00f f9e4 	bl	802062a <osMessageQueueNew>
 8011262:	4603      	mov	r3, r0
 8011264:	4a4a      	ldr	r2, [pc, #296]	@ (8011390 <main+0x1cc>)
 8011266:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011268:	4a4a      	ldr	r2, [pc, #296]	@ (8011394 <main+0x1d0>)
 801126a:	2108      	movs	r1, #8
 801126c:	2001      	movs	r0, #1
 801126e:	f00f f9dc 	bl	802062a <osMessageQueueNew>
 8011272:	4603      	mov	r3, r0
 8011274:	4a48      	ldr	r2, [pc, #288]	@ (8011398 <main+0x1d4>)
 8011276:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011278:	4a48      	ldr	r2, [pc, #288]	@ (801139c <main+0x1d8>)
 801127a:	21c6      	movs	r1, #198	@ 0xc6
 801127c:	2001      	movs	r0, #1
 801127e:	f00f f9d4 	bl	802062a <osMessageQueueNew>
 8011282:	4603      	mov	r3, r0
 8011284:	4a46      	ldr	r2, [pc, #280]	@ (80113a0 <main+0x1dc>)
 8011286:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011288:	4a46      	ldr	r2, [pc, #280]	@ (80113a4 <main+0x1e0>)
 801128a:	2102      	movs	r1, #2
 801128c:	2001      	movs	r0, #1
 801128e:	f00f f9cc 	bl	802062a <osMessageQueueNew>
 8011292:	4603      	mov	r3, r0
 8011294:	4a44      	ldr	r2, [pc, #272]	@ (80113a8 <main+0x1e4>)
 8011296:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 8011298:	4a44      	ldr	r2, [pc, #272]	@ (80113ac <main+0x1e8>)
 801129a:	2104      	movs	r1, #4
 801129c:	2001      	movs	r0, #1
 801129e:	f00f f9c4 	bl	802062a <osMessageQueueNew>
 80112a2:	4603      	mov	r3, r0
 80112a4:	4a42      	ldr	r2, [pc, #264]	@ (80113b0 <main+0x1ec>)
 80112a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112a8:	4a42      	ldr	r2, [pc, #264]	@ (80113b4 <main+0x1f0>)
 80112aa:	2100      	movs	r1, #0
 80112ac:	4842      	ldr	r0, [pc, #264]	@ (80113b8 <main+0x1f4>)
 80112ae:	f00e ffc3 	bl	8020238 <osThreadNew>
 80112b2:	4603      	mov	r3, r0
 80112b4:	4a41      	ldr	r2, [pc, #260]	@ (80113bc <main+0x1f8>)
 80112b6:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112b8:	4a41      	ldr	r2, [pc, #260]	@ (80113c0 <main+0x1fc>)
 80112ba:	2100      	movs	r1, #0
 80112bc:	4841      	ldr	r0, [pc, #260]	@ (80113c4 <main+0x200>)
 80112be:	f00e ffbb 	bl	8020238 <osThreadNew>
 80112c2:	4603      	mov	r3, r0
 80112c4:	4a40      	ldr	r2, [pc, #256]	@ (80113c8 <main+0x204>)
 80112c6:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112c8:	4a40      	ldr	r2, [pc, #256]	@ (80113cc <main+0x208>)
 80112ca:	2100      	movs	r1, #0
 80112cc:	4840      	ldr	r0, [pc, #256]	@ (80113d0 <main+0x20c>)
 80112ce:	f00e ffb3 	bl	8020238 <osThreadNew>
 80112d2:	4603      	mov	r3, r0
 80112d4:	4a3f      	ldr	r2, [pc, #252]	@ (80113d4 <main+0x210>)
 80112d6:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112d8:	4a3f      	ldr	r2, [pc, #252]	@ (80113d8 <main+0x214>)
 80112da:	2100      	movs	r1, #0
 80112dc:	483f      	ldr	r0, [pc, #252]	@ (80113dc <main+0x218>)
 80112de:	f00e ffab 	bl	8020238 <osThreadNew>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4a3e      	ldr	r2, [pc, #248]	@ (80113e0 <main+0x21c>)
 80112e6:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112e8:	4a3e      	ldr	r2, [pc, #248]	@ (80113e4 <main+0x220>)
 80112ea:	2100      	movs	r1, #0
 80112ec:	483e      	ldr	r0, [pc, #248]	@ (80113e8 <main+0x224>)
 80112ee:	f00e ffa3 	bl	8020238 <osThreadNew>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4a3d      	ldr	r2, [pc, #244]	@ (80113ec <main+0x228>)
 80112f6:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 80112f8:	4a3d      	ldr	r2, [pc, #244]	@ (80113f0 <main+0x22c>)
 80112fa:	2100      	movs	r1, #0
 80112fc:	483d      	ldr	r0, [pc, #244]	@ (80113f4 <main+0x230>)
 80112fe:	f00e ff9b 	bl	8020238 <osThreadNew>
 8011302:	4603      	mov	r3, r0
 8011304:	4a3c      	ldr	r2, [pc, #240]	@ (80113f8 <main+0x234>)
 8011306:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011308:	4a3c      	ldr	r2, [pc, #240]	@ (80113fc <main+0x238>)
 801130a:	2100      	movs	r1, #0
 801130c:	483c      	ldr	r0, [pc, #240]	@ (8011400 <main+0x23c>)
 801130e:	f00e ff93 	bl	8020238 <osThreadNew>
 8011312:	4603      	mov	r3, r0
 8011314:	4a3b      	ldr	r2, [pc, #236]	@ (8011404 <main+0x240>)
 8011316:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011318:	4a3b      	ldr	r2, [pc, #236]	@ (8011408 <main+0x244>)
 801131a:	2100      	movs	r1, #0
 801131c:	483b      	ldr	r0, [pc, #236]	@ (801140c <main+0x248>)
 801131e:	f00e ff8b 	bl	8020238 <osThreadNew>
 8011322:	4603      	mov	r3, r0
 8011324:	4a3a      	ldr	r2, [pc, #232]	@ (8011410 <main+0x24c>)
 8011326:	6013      	str	r3, [r2, #0]

  /* creation of resetWatchDog */
  resetWatchDogHandle = osThreadNew(vResetWatchDog, NULL, &resetWatchDog_attributes);
 8011328:	4a3a      	ldr	r2, [pc, #232]	@ (8011414 <main+0x250>)
 801132a:	2100      	movs	r1, #0
 801132c:	483a      	ldr	r0, [pc, #232]	@ (8011418 <main+0x254>)
 801132e:	f00e ff83 	bl	8020238 <osThreadNew>
 8011332:	4603      	mov	r3, r0
 8011334:	4a39      	ldr	r2, [pc, #228]	@ (801141c <main+0x258>)
 8011336:	6013      	str	r3, [r2, #0]

  /* creation of SendBroadcast */
  SendBroadcastHandle = osThreadNew(vSendBroadcast, NULL, &SendBroadcast_attributes);
 8011338:	4a39      	ldr	r2, [pc, #228]	@ (8011420 <main+0x25c>)
 801133a:	2100      	movs	r1, #0
 801133c:	4839      	ldr	r0, [pc, #228]	@ (8011424 <main+0x260>)
 801133e:	f00e ff7b 	bl	8020238 <osThreadNew>
 8011342:	4603      	mov	r3, r0
 8011344:	4a38      	ldr	r2, [pc, #224]	@ (8011428 <main+0x264>)
 8011346:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011348:	f00e ff50 	bl	80201ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 801134c:	bf00      	nop
 801134e:	e7fd      	b.n	801134c <main+0x188>
 8011350:	e000ed00 	.word	0xe000ed00
 8011354:	08010000 	.word	0x08010000
 8011358:	0801ff11 	.word	0x0801ff11
 801135c:	080343d8 	.word	0x080343d8
 8011360:	20000464 	.word	0x20000464
 8011364:	080343e8 	.word	0x080343e8
 8011368:	20000468 	.word	0x20000468
 801136c:	080343f8 	.word	0x080343f8
 8011370:	2000046c 	.word	0x2000046c
 8011374:	08034408 	.word	0x08034408
 8011378:	20000470 	.word	0x20000470
 801137c:	08034330 	.word	0x08034330
 8011380:	20000448 	.word	0x20000448
 8011384:	08034348 	.word	0x08034348
 8011388:	2000044c 	.word	0x2000044c
 801138c:	08034360 	.word	0x08034360
 8011390:	20000450 	.word	0x20000450
 8011394:	08034378 	.word	0x08034378
 8011398:	20000454 	.word	0x20000454
 801139c:	08034390 	.word	0x08034390
 80113a0:	20000458 	.word	0x20000458
 80113a4:	080343a8 	.word	0x080343a8
 80113a8:	2000045c 	.word	0x2000045c
 80113ac:	080343c0 	.word	0x080343c0
 80113b0:	20000460 	.word	0x20000460
 80113b4:	080341c8 	.word	0x080341c8
 80113b8:	08011785 	.word	0x08011785
 80113bc:	20000420 	.word	0x20000420
 80113c0:	080341ec 	.word	0x080341ec
 80113c4:	08011795 	.word	0x08011795
 80113c8:	20000424 	.word	0x20000424
 80113cc:	08034210 	.word	0x08034210
 80113d0:	08011929 	.word	0x08011929
 80113d4:	20000428 	.word	0x20000428
 80113d8:	08034234 	.word	0x08034234
 80113dc:	08011c95 	.word	0x08011c95
 80113e0:	2000042c 	.word	0x2000042c
 80113e4:	08034258 	.word	0x08034258
 80113e8:	08011cd5 	.word	0x08011cd5
 80113ec:	20000430 	.word	0x20000430
 80113f0:	0803427c 	.word	0x0803427c
 80113f4:	08012251 	.word	0x08012251
 80113f8:	20000434 	.word	0x20000434
 80113fc:	080342a0 	.word	0x080342a0
 8011400:	080122fd 	.word	0x080122fd
 8011404:	20000438 	.word	0x20000438
 8011408:	080342c4 	.word	0x080342c4
 801140c:	08012495 	.word	0x08012495
 8011410:	2000043c 	.word	0x2000043c
 8011414:	080342e8 	.word	0x080342e8
 8011418:	08012751 	.word	0x08012751
 801141c:	20000440 	.word	0x20000440
 8011420:	0803430c 	.word	0x0803430c
 8011424:	08012771 	.word	0x08012771
 8011428:	20000444 	.word	0x20000444

0801142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b094      	sub	sp, #80	@ 0x50
 8011430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011432:	f107 0320 	add.w	r3, r7, #32
 8011436:	2230      	movs	r2, #48	@ 0x30
 8011438:	2100      	movs	r1, #0
 801143a:	4618      	mov	r0, r3
 801143c:	f01c fba8 	bl	802db90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011440:	f107 030c 	add.w	r3, r7, #12
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
 8011448:	605a      	str	r2, [r3, #4]
 801144a:	609a      	str	r2, [r3, #8]
 801144c:	60da      	str	r2, [r3, #12]
 801144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011450:	2300      	movs	r3, #0
 8011452:	60bb      	str	r3, [r7, #8]
 8011454:	4b29      	ldr	r3, [pc, #164]	@ (80114fc <SystemClock_Config+0xd0>)
 8011456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011458:	4a28      	ldr	r2, [pc, #160]	@ (80114fc <SystemClock_Config+0xd0>)
 801145a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801145e:	6413      	str	r3, [r2, #64]	@ 0x40
 8011460:	4b26      	ldr	r3, [pc, #152]	@ (80114fc <SystemClock_Config+0xd0>)
 8011462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011468:	60bb      	str	r3, [r7, #8]
 801146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801146c:	2300      	movs	r3, #0
 801146e:	607b      	str	r3, [r7, #4]
 8011470:	4b23      	ldr	r3, [pc, #140]	@ (8011500 <SystemClock_Config+0xd4>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8011478:	4a21      	ldr	r2, [pc, #132]	@ (8011500 <SystemClock_Config+0xd4>)
 801147a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	4b1f      	ldr	r3, [pc, #124]	@ (8011500 <SystemClock_Config+0xd4>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011488:	607b      	str	r3, [r7, #4]
 801148a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801148c:	2309      	movs	r3, #9
 801148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011490:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011494:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8011496:	2301      	movs	r3, #1
 8011498:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801149a:	2302      	movs	r3, #2
 801149c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801149e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80114a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80114a4:	2304      	movs	r3, #4
 80114a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80114a8:	2354      	movs	r3, #84	@ 0x54
 80114aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80114ac:	2302      	movs	r3, #2
 80114ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80114b0:	2304      	movs	r3, #4
 80114b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114b4:	f107 0320 	add.w	r3, r7, #32
 80114b8:	4618      	mov	r0, r3
 80114ba:	f004 fd99 	bl	8015ff0 <HAL_RCC_OscConfig>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80114c4:	f001 f9f2 	bl	80128ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114c8:	230f      	movs	r3, #15
 80114ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114cc:	2302      	movs	r3, #2
 80114ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114d0:	2300      	movs	r3, #0
 80114d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80114d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80114d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114da:	2300      	movs	r3, #0
 80114dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80114de:	f107 030c 	add.w	r3, r7, #12
 80114e2:	2102      	movs	r1, #2
 80114e4:	4618      	mov	r0, r3
 80114e6:	f004 fffb 	bl	80164e0 <HAL_RCC_ClockConfig>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80114f0:	f001 f9dc 	bl	80128ac <Error_Handler>
  }
}
 80114f4:	bf00      	nop
 80114f6:	3750      	adds	r7, #80	@ 0x50
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	40023800 	.word	0x40023800
 8011500:	40007000 	.word	0x40007000

08011504 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8011508:	4b06      	ldr	r3, [pc, #24]	@ (8011524 <MX_CRC_Init+0x20>)
 801150a:	4a07      	ldr	r2, [pc, #28]	@ (8011528 <MX_CRC_Init+0x24>)
 801150c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801150e:	4805      	ldr	r0, [pc, #20]	@ (8011524 <MX_CRC_Init+0x20>)
 8011510:	f004 fad0 	bl	8015ab4 <HAL_CRC_Init>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d001      	beq.n	801151e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 801151a:	f001 f9c7 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801151e:	bf00      	nop
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	20000314 	.word	0x20000314
 8011528:	40023000 	.word	0x40023000

0801152c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011530:	4b09      	ldr	r3, [pc, #36]	@ (8011558 <MX_IWDG_Init+0x2c>)
 8011532:	4a0a      	ldr	r2, [pc, #40]	@ (801155c <MX_IWDG_Init+0x30>)
 8011534:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8011536:	4b08      	ldr	r3, [pc, #32]	@ (8011558 <MX_IWDG_Init+0x2c>)
 8011538:	2206      	movs	r2, #6
 801153a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 801153c:	4b06      	ldr	r3, [pc, #24]	@ (8011558 <MX_IWDG_Init+0x2c>)
 801153e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8011542:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011544:	4804      	ldr	r0, [pc, #16]	@ (8011558 <MX_IWDG_Init+0x2c>)
 8011546:	f004 fd00 	bl	8015f4a <HAL_IWDG_Init>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8011550:	f001 f9ac 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011554:	bf00      	nop
 8011556:	bd80      	pop	{r7, pc}
 8011558:	2000031c 	.word	0x2000031c
 801155c:	40003000 	.word	0x40003000

08011560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011564:	4b17      	ldr	r3, [pc, #92]	@ (80115c4 <MX_SPI1_Init+0x64>)
 8011566:	4a18      	ldr	r2, [pc, #96]	@ (80115c8 <MX_SPI1_Init+0x68>)
 8011568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801156a:	4b16      	ldr	r3, [pc, #88]	@ (80115c4 <MX_SPI1_Init+0x64>)
 801156c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8011570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011572:	4b14      	ldr	r3, [pc, #80]	@ (80115c4 <MX_SPI1_Init+0x64>)
 8011574:	2200      	movs	r2, #0
 8011576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011578:	4b12      	ldr	r3, [pc, #72]	@ (80115c4 <MX_SPI1_Init+0x64>)
 801157a:	2200      	movs	r2, #0
 801157c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801157e:	4b11      	ldr	r3, [pc, #68]	@ (80115c4 <MX_SPI1_Init+0x64>)
 8011580:	2202      	movs	r2, #2
 8011582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011584:	4b0f      	ldr	r3, [pc, #60]	@ (80115c4 <MX_SPI1_Init+0x64>)
 8011586:	2201      	movs	r2, #1
 8011588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801158a:	4b0e      	ldr	r3, [pc, #56]	@ (80115c4 <MX_SPI1_Init+0x64>)
 801158c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011592:	4b0c      	ldr	r3, [pc, #48]	@ (80115c4 <MX_SPI1_Init+0x64>)
 8011594:	2200      	movs	r2, #0
 8011596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011598:	4b0a      	ldr	r3, [pc, #40]	@ (80115c4 <MX_SPI1_Init+0x64>)
 801159a:	2200      	movs	r2, #0
 801159c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801159e:	4b09      	ldr	r3, [pc, #36]	@ (80115c4 <MX_SPI1_Init+0x64>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115a4:	4b07      	ldr	r3, [pc, #28]	@ (80115c4 <MX_SPI1_Init+0x64>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80115aa:	4b06      	ldr	r3, [pc, #24]	@ (80115c4 <MX_SPI1_Init+0x64>)
 80115ac:	220a      	movs	r2, #10
 80115ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80115b0:	4804      	ldr	r0, [pc, #16]	@ (80115c4 <MX_SPI1_Init+0x64>)
 80115b2:	f005 f9e7 	bl	8016984 <HAL_SPI_Init>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80115bc:	f001 f976 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80115c0:	bf00      	nop
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20000328 	.word	0x20000328
 80115c8:	40013000 	.word	0x40013000

080115cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80115d0:	4b17      	ldr	r3, [pc, #92]	@ (8011630 <MX_SPI3_Init+0x64>)
 80115d2:	4a18      	ldr	r2, [pc, #96]	@ (8011634 <MX_SPI3_Init+0x68>)
 80115d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80115d6:	4b16      	ldr	r3, [pc, #88]	@ (8011630 <MX_SPI3_Init+0x64>)
 80115d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80115dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80115de:	4b14      	ldr	r3, [pc, #80]	@ (8011630 <MX_SPI3_Init+0x64>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80115e4:	4b12      	ldr	r3, [pc, #72]	@ (8011630 <MX_SPI3_Init+0x64>)
 80115e6:	2200      	movs	r2, #0
 80115e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80115ea:	4b11      	ldr	r3, [pc, #68]	@ (8011630 <MX_SPI3_Init+0x64>)
 80115ec:	2202      	movs	r2, #2
 80115ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80115f0:	4b0f      	ldr	r3, [pc, #60]	@ (8011630 <MX_SPI3_Init+0x64>)
 80115f2:	2201      	movs	r2, #1
 80115f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80115f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011630 <MX_SPI3_Init+0x64>)
 80115f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80115fe:	4b0c      	ldr	r3, [pc, #48]	@ (8011630 <MX_SPI3_Init+0x64>)
 8011600:	2200      	movs	r2, #0
 8011602:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011604:	4b0a      	ldr	r3, [pc, #40]	@ (8011630 <MX_SPI3_Init+0x64>)
 8011606:	2200      	movs	r2, #0
 8011608:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 801160a:	4b09      	ldr	r3, [pc, #36]	@ (8011630 <MX_SPI3_Init+0x64>)
 801160c:	2200      	movs	r2, #0
 801160e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011610:	4b07      	ldr	r3, [pc, #28]	@ (8011630 <MX_SPI3_Init+0x64>)
 8011612:	2200      	movs	r2, #0
 8011614:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011616:	4b06      	ldr	r3, [pc, #24]	@ (8011630 <MX_SPI3_Init+0x64>)
 8011618:	220a      	movs	r2, #10
 801161a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801161c:	4804      	ldr	r0, [pc, #16]	@ (8011630 <MX_SPI3_Init+0x64>)
 801161e:	f005 f9b1 	bl	8016984 <HAL_SPI_Init>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011628:	f001 f940 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801162c:	bf00      	nop
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20000380 	.word	0x20000380
 8011634:	40003c00 	.word	0x40003c00

08011638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801163c:	4b12      	ldr	r3, [pc, #72]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 801163e:	4a13      	ldr	r2, [pc, #76]	@ (801168c <MX_USART2_UART_Init+0x54>)
 8011640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8011642:	4b11      	ldr	r3, [pc, #68]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 8011644:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8011648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 801164a:	4b0f      	ldr	r3, [pc, #60]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 801164c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8011650:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011652:	4b0d      	ldr	r3, [pc, #52]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 8011654:	2200      	movs	r2, #0
 8011656:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8011658:	4b0b      	ldr	r3, [pc, #44]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 801165a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8011660:	4b09      	ldr	r3, [pc, #36]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 8011662:	2204      	movs	r2, #4
 8011664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011666:	4b08      	ldr	r3, [pc, #32]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 8011668:	2200      	movs	r2, #0
 801166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801166c:	4b06      	ldr	r3, [pc, #24]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 801166e:	2200      	movs	r2, #0
 8011670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011672:	4805      	ldr	r0, [pc, #20]	@ (8011688 <MX_USART2_UART_Init+0x50>)
 8011674:	f006 f9d0 	bl	8017a18 <HAL_UART_Init>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	d001      	beq.n	8011682 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 801167e:	f001 f915 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011682:	bf00      	nop
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	200003d8 	.word	0x200003d8
 801168c:	40004400 	.word	0x40004400

08011690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011696:	f107 030c 	add.w	r3, r7, #12
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	605a      	str	r2, [r3, #4]
 80116a0:	609a      	str	r2, [r3, #8]
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116a6:	2300      	movs	r3, #0
 80116a8:	60bb      	str	r3, [r7, #8]
 80116aa:	4b33      	ldr	r3, [pc, #204]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116ae:	4a32      	ldr	r2, [pc, #200]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80116b6:	4b30      	ldr	r3, [pc, #192]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116be:	60bb      	str	r3, [r7, #8]
 80116c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116c2:	2300      	movs	r3, #0
 80116c4:	607b      	str	r3, [r7, #4]
 80116c6:	4b2c      	ldr	r3, [pc, #176]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116ca:	4a2b      	ldr	r2, [pc, #172]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116cc:	f043 0301 	orr.w	r3, r3, #1
 80116d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80116d2:	4b29      	ldr	r3, [pc, #164]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116d6:	f003 0301 	and.w	r3, r3, #1
 80116da:	607b      	str	r3, [r7, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116de:	2300      	movs	r3, #0
 80116e0:	603b      	str	r3, [r7, #0]
 80116e2:	4b25      	ldr	r3, [pc, #148]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116e6:	4a24      	ldr	r2, [pc, #144]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116e8:	f043 0302 	orr.w	r3, r3, #2
 80116ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80116ee:	4b22      	ldr	r3, [pc, #136]	@ (8011778 <MX_GPIO_Init+0xe8>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80116f2:	f003 0302 	and.w	r3, r3, #2
 80116f6:	603b      	str	r3, [r7, #0]
 80116f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 80116fa:	2201      	movs	r2, #1
 80116fc:	2112      	movs	r1, #18
 80116fe:	481f      	ldr	r0, [pc, #124]	@ (801177c <MX_GPIO_Init+0xec>)
 8011700:	f004 fc0a 	bl	8015f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 8011704:	2200      	movs	r2, #0
 8011706:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801170a:	481c      	ldr	r0, [pc, #112]	@ (801177c <MX_GPIO_Init+0xec>)
 801170c:	f004 fc04 	bl	8015f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 8011710:	2200      	movs	r2, #0
 8011712:	2140      	movs	r1, #64	@ 0x40
 8011714:	481a      	ldr	r0, [pc, #104]	@ (8011780 <MX_GPIO_Init+0xf0>)
 8011716:	f004 fbff 	bl	8015f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 801171a:	f248 0302 	movw	r3, #32770	@ 0x8002
 801171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011720:	2301      	movs	r3, #1
 8011722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011724:	2300      	movs	r3, #0
 8011726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011728:	2300      	movs	r3, #0
 801172a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801172c:	f107 030c 	add.w	r3, r7, #12
 8011730:	4619      	mov	r1, r3
 8011732:	4812      	ldr	r0, [pc, #72]	@ (801177c <MX_GPIO_Init+0xec>)
 8011734:	f004 fa6c 	bl	8015c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 8011738:	2310      	movs	r3, #16
 801173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801173c:	2301      	movs	r3, #1
 801173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011740:	2300      	movs	r3, #0
 8011742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011744:	2303      	movs	r3, #3
 8011746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 8011748:	f107 030c 	add.w	r3, r7, #12
 801174c:	4619      	mov	r1, r3
 801174e:	480b      	ldr	r0, [pc, #44]	@ (801177c <MX_GPIO_Init+0xec>)
 8011750:	f004 fa5e 	bl	8015c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8011754:	2340      	movs	r3, #64	@ 0x40
 8011756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011758:	2301      	movs	r3, #1
 801175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801175c:	2300      	movs	r3, #0
 801175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011760:	2300      	movs	r3, #0
 8011762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8011764:	f107 030c 	add.w	r3, r7, #12
 8011768:	4619      	mov	r1, r3
 801176a:	4805      	ldr	r0, [pc, #20]	@ (8011780 <MX_GPIO_Init+0xf0>)
 801176c:	f004 fa50 	bl	8015c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8011770:	bf00      	nop
 8011772:	3720      	adds	r7, #32
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	40023800 	.word	0x40023800
 801177c:	40020000 	.word	0x40020000
 8011780:	40020400 	.word	0x40020400

08011784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801178c:	2001      	movs	r0, #1
 801178e:	f00e fe23 	bl	80203d8 <osDelay>
 8011792:	e7fb      	b.n	801178c <StartDefaultTask+0x8>

08011794 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b098      	sub	sp, #96	@ 0x60
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float				old_resistance;


	PowerSett.resistance = 0.001;
 80117a0:	4b57      	ldr	r3, [pc, #348]	@ (8011900 <vSensorsTask+0x16c>)
 80117a2:	60fb      	str	r3, [r7, #12]
	PowerSett.save = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	723b      	strb	r3, [r7, #8]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 80117a8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80117ac:	f00e fe14 	bl	80203d8 <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80117b0:	4b54      	ldr	r3, [pc, #336]	@ (8011904 <vSensorsTask+0x170>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f107 0108 	add.w	r1, r7, #8
 80117b8:	2200      	movs	r2, #0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f00f fefe 	bl	80215bc <xQueuePeek>
	old_resistance = PowerSett.resistance;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	65bb      	str	r3, [r7, #88]	@ 0x58
	PowerOFF_HLW8032();
 80117c4:	f7ff fcf2 	bl	80111ac <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 80117c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80117cc:	f00e fe04 	bl	80203d8 <osDelay>
	USART2->DR; //read data from register if exist
 80117d0:	4b4d      	ldr	r3, [pc, #308]	@ (8011908 <vSensorsTask+0x174>)
 80117d2:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80117d4:	2218      	movs	r2, #24
 80117d6:	494d      	ldr	r1, [pc, #308]	@ (801190c <vSensorsTask+0x178>)
 80117d8:	484d      	ldr	r0, [pc, #308]	@ (8011910 <vSensorsTask+0x17c>)
 80117da:	f006 f96d 	bl	8017ab8 <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 80117de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80117e2:	f00e fdf9 	bl	80203d8 <osDelay>
	PowerON_HLW8032();
 80117e6:	f7ff fcd5 	bl	8011194 <PowerON_HLW8032>

	sens_task_start:


	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80117ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80117ee:	eeb0 0a67 	vmov.f32	s0, s15
 80117f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80117f6:	4847      	ldr	r0, [pc, #284]	@ (8011914 <vSensorsTask+0x180>)
 80117f8:	f003 f9f0 	bl	8014bdc <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 80117fc:	4b46      	ldr	r3, [pc, #280]	@ (8011918 <vSensorsTask+0x184>)
 80117fe:	6818      	ldr	r0, [r3, #0]
 8011800:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011808:	2200      	movs	r2, #0
 801180a:	f00e ffe1 	bl	80207d0 <osMessageQueueGet>
 801180e:	4603      	mov	r3, r0
 8011810:	f113 0f02 	cmn.w	r3, #2
 8011814:	d04c      	beq.n	80118b0 <vSensorsTask+0x11c>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 8011816:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801181a:	4618      	mov	r0, r3
 801181c:	f003 fa50 	bl	8014cc0 <RecvRawString>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d155      	bne.n	80118d2 <vSensorsTask+0x13e>
			test_kWh_from_read 				= GetKWh();
 8011826:	f003 fc7b 	bl	8015120 <GetKWh>
 801182a:	eef0 7a40 	vmov.f32	s15, s0
 801182e:	4b3b      	ldr	r3, [pc, #236]	@ (801191c <vSensorsTask+0x188>)
 8011830:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 8011834:	f003 fc74 	bl	8015120 <GetKWh>
 8011838:	eeb0 7a40 	vmov.f32	s14, s0
 801183c:	4b38      	ldr	r3, [pc, #224]	@ (8011920 <vSensorsTask+0x18c>)
 801183e:	edd3 7a00 	vldr	s15, [r3]
 8011842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011846:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.Voltage 				= GetVoltage();
 801184a:	f003 fb2f 	bl	8014eac <GetVoltage>
 801184e:	eef0 7a40 	vmov.f32	s15, s0
 8011852:	edc7 7a04 	vstr	s15, [r7, #16]
			PowerData.ApparPower 			= GetApparentPower();
 8011856:	f003 fbd9 	bl	801500c <GetApparentPower>
 801185a:	eef0 7a40 	vmov.f32	s15, s0
 801185e:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.ActivePower 			= GetActivePower();
 8011862:	f003 fb95 	bl	8014f90 <GetActivePower>
 8011866:	eef0 7a40 	vmov.f32	s15, s0
 801186a:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Current 				= GetCurrent();
 801186e:	f003 fb69 	bl	8014f44 <GetCurrent>
 8011872:	eef0 7a40 	vmov.f32	s15, s0
 8011876:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.PowerFactor			= PowerFactor();
 801187a:	f003 fbef 	bl	801505c <PowerFactor>
 801187e:	eef0 7a40 	vmov.f32	s15, s0
 8011882:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			PowerData.test_pulse_counter 	= GetTestPulse();
 8011886:	f003 fc25 	bl	80150d4 <GetTestPulse>
 801188a:	4603      	mov	r3, r0
 801188c:	62bb      	str	r3, [r7, #40]	@ 0x28
			PowerData.readed_counter 		= GetCountedPulse();
 801188e:	f003 fc2d 	bl	80150ec <GetCountedPulse>
 8011892:	4603      	mov	r3, r0
 8011894:	62fb      	str	r3, [r7, #44]	@ 0x2c
			PowerData.PF_reg				= GetPFReg();
 8011896:	f003 fc35 	bl	8015104 <GetPFReg>
 801189a:	4603      	mov	r3, r0
 801189c:	633b      	str	r3, [r7, #48]	@ 0x30
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 801189e:	4b21      	ldr	r3, [pc, #132]	@ (8011924 <vSensorsTask+0x190>)
 80118a0:	6818      	ldr	r0, [r3, #0]
 80118a2:	f107 0110 	add.w	r1, r7, #16
 80118a6:	2302      	movs	r3, #2
 80118a8:	2200      	movs	r2, #0
 80118aa:	f00f faf5 	bl	8020e98 <xQueueGenericSend>
 80118ae:	e010      	b.n	80118d2 <vSensorsTask+0x13e>
		}
	}else{
		count++;
 80118b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118b2:	3301      	adds	r3, #1
 80118b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118b6:	e004      	b.n	80118c2 <vSensorsTask+0x12e>
			temp = USART2->DR;
 80118b8:	4b13      	ldr	r3, [pc, #76]	@ (8011908 <vSensorsTask+0x174>)
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	657b      	str	r3, [r7, #84]	@ 0x54
			osThreadYield();
 80118be:	f00e fd6b 	bl	8020398 <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118c2:	2218      	movs	r2, #24
 80118c4:	4911      	ldr	r1, [pc, #68]	@ (801190c <vSensorsTask+0x178>)
 80118c6:	4812      	ldr	r0, [pc, #72]	@ (8011910 <vSensorsTask+0x17c>)
 80118c8:	f006 f8f6 	bl	8017ab8 <HAL_UARTEx_ReceiveToIdle_IT>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d0f2      	beq.n	80118b8 <vSensorsTask+0x124>
		}
	}
	osThreadYield
 80118d2:	f00e fd61 	bl	8020398 <osThreadYield>
	();
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80118d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011904 <vSensorsTask+0x170>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f107 0108 	add.w	r1, r7, #8
 80118de:	2200      	movs	r2, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f00f fe6b 	bl	80215bc <xQueuePeek>
    if (PowerSett.resistance != old_resistance){
 80118e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80118ea:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80118ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	d081      	beq.n	80117fc <vSensorsTask+0x68>
    	old_resistance = PowerSett.resistance;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    	goto sens_task_start;
 80118fc:	e775      	b.n	80117ea <vSensorsTask+0x56>
 80118fe:	bf00      	nop
 8011900:	3a83126f 	.word	0x3a83126f
 8011904:	20000454 	.word	0x20000454
 8011908:	40004400 	.word	0x40004400
 801190c:	20000474 	.word	0x20000474
 8011910:	200003d8 	.word	0x200003d8
 8011914:	001cafc0 	.word	0x001cafc0
 8011918:	20000448 	.word	0x20000448
 801191c:	20000498 	.word	0x20000498
 8011920:	20000494 	.word	0x20000494
 8011924:	20000450 	.word	0x20000450

08011928 <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 8011928:	b590      	push	{r4, r7, lr}
 801192a:	f2ad 4d5c 	subw	sp, sp, #1116	@ 0x45c
 801192e:	af12      	add	r7, sp, #72	@ 0x48
 8011930:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011934:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8011938:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 801193a:	2314      	movs	r3, #20
 801193c:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8011940:	2300      	movs	r3, #0
 8011942:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	f207 4204 	addw	r2, r7, #1028	@ 0x404
 801194e:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 8011950:	4cbd      	ldr	r4, [pc, #756]	@ (8011c48 <vRW_Settings_Tas+0x320>)
 8011952:	4668      	mov	r0, sp
 8011954:	f104 0310 	add.w	r3, r4, #16
 8011958:	2248      	movs	r2, #72	@ 0x48
 801195a:	4619      	mov	r1, r3
 801195c:	f01c faed 	bl	802df3a <memcpy>
 8011960:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011964:	f003 ff0a 	bl	801577c <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8011968:	4bb8      	ldr	r3, [pc, #736]	@ (8011c4c <vRW_Settings_Tas+0x324>)
 801196a:	4ab9      	ldr	r2, [pc, #740]	@ (8011c50 <vRW_Settings_Tas+0x328>)
 801196c:	49b9      	ldr	r1, [pc, #740]	@ (8011c54 <vRW_Settings_Tas+0x32c>)
 801196e:	48ba      	ldr	r0, [pc, #744]	@ (8011c58 <vRW_Settings_Tas+0x330>)
 8011970:	f003 fc60 	bl	8015234 <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011974:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8011978:	f507 7101 	add.w	r1, r7, #516	@ 0x204
 801197c:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 8011980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011984:	f019 fb1a 	bl	802afbc <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8011988:	49b4      	ldr	r1, [pc, #720]	@ (8011c5c <vRW_Settings_Tas+0x334>)
 801198a:	48b5      	ldr	r0, [pc, #724]	@ (8011c60 <vRW_Settings_Tas+0x338>)
 801198c:	f019 fafa 	bl	802af84 <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 8011990:	f019 fb4c 	bl	802b02c <spi_fs_mount>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	da05      	bge.n	80119a6 <vRW_Settings_Tas+0x7e>
		sFLASH_EraseBulk();
 801199a:	f003 fd5f 	bl	801545c <sFLASH_EraseBulk>
		spi_fs_format();
 801199e:	f019 fb6d 	bl	802b07c <spi_fs_format>
		spi_fs_mount();
 80119a2:	f019 fb43 	bl	802b02c <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 80119a6:	48af      	ldr	r0, [pc, #700]	@ (8011c64 <vRW_Settings_Tas+0x33c>)
 80119a8:	f019 fbf0 	bl	802b18c <spi_fs_file_size>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	dd0f      	ble.n	80119d2 <vRW_Settings_Tas+0xaa>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 80119b2:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 80119b6:	2308      	movs	r3, #8
 80119b8:	2200      	movs	r2, #0
 80119ba:	48aa      	ldr	r0, [pc, #680]	@ (8011c64 <vRW_Settings_Tas+0x33c>)
 80119bc:	f019 fb6a 	bl	802b094 <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119c0:	4ba9      	ldr	r3, [pc, #676]	@ (8011c68 <vRW_Settings_Tas+0x340>)
 80119c2:	6818      	ldr	r0, [r3, #0]
 80119c4:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 80119c8:	2302      	movs	r3, #2
 80119ca:	2200      	movs	r2, #0
 80119cc:	f00f fa64 	bl	8020e98 <xQueueGenericSend>
 80119d0:	e013      	b.n	80119fa <vRW_Settings_Tas+0xd2>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 80119d2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80119d6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80119da:	4aa4      	ldr	r2, [pc, #656]	@ (8011c6c <vRW_Settings_Tas+0x344>)
 80119dc:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 80119de:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80119e2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 80119e6:	2201      	movs	r2, #1
 80119e8:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119ea:	4b9f      	ldr	r3, [pc, #636]	@ (8011c68 <vRW_Settings_Tas+0x340>)
 80119ec:	6818      	ldr	r0, [r3, #0]
 80119ee:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 80119f2:	2302      	movs	r3, #2
 80119f4:	2200      	movs	r2, #0
 80119f6:	f00f fa4f 	bl	8020e98 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 80119fa:	489d      	ldr	r0, [pc, #628]	@ (8011c70 <vRW_Settings_Tas+0x348>)
 80119fc:	f019 fbc6 	bl	802b18c <spi_fs_file_size>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	dd0f      	ble.n	8011a26 <vRW_Settings_Tas+0xfe>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8011a06:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011a0a:	23c6      	movs	r3, #198	@ 0xc6
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	4898      	ldr	r0, [pc, #608]	@ (8011c70 <vRW_Settings_Tas+0x348>)
 8011a10:	f019 fb40 	bl	802b094 <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a14:	4b97      	ldr	r3, [pc, #604]	@ (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a16:	6818      	ldr	r0, [r3, #0]
 8011a18:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011a1c:	2302      	movs	r3, #2
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f00f fa3a 	bl	8020e98 <xQueueGenericSend>
 8011a24:	e027      	b.n	8011a76 <vRW_Settings_Tas+0x14e>
	}else{
		MQTT_cred.save 			= 1;
 8011a26:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011a2a:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8011a2e:	2201      	movs	r2, #1
 8011a30:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 8011a32:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011a36:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 8011a3e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011a42:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8011a46:	2200      	movs	r2, #0
 8011a48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
		MQTT_cred.pass[0]		= '\0';
 8011a4c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011a50:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8011a54:	2200      	movs	r2, #0
 8011a56:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
		MQTT_cred.uri[0]		= '\0';
 8011a5a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011a5e:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8011a62:	2200      	movs	r2, #0
 8011a64:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a66:	4b83      	ldr	r3, [pc, #524]	@ (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a68:	6818      	ldr	r0, [r3, #0]
 8011a6a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011a6e:	2302      	movs	r3, #2
 8011a70:	2200      	movs	r2, #0
 8011a72:	f00f fa11 	bl	8020e98 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 8011a76:	4880      	ldr	r0, [pc, #512]	@ (8011c78 <vRW_Settings_Tas+0x350>)
 8011a78:	f019 fb88 	bl	802b18c <spi_fs_file_size>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	dd0f      	ble.n	8011aa2 <vRW_Settings_Tas+0x17a>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a82:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011a86:	2302      	movs	r3, #2
 8011a88:	2200      	movs	r2, #0
 8011a8a:	487b      	ldr	r0, [pc, #492]	@ (8011c78 <vRW_Settings_Tas+0x350>)
 8011a8c:	f019 fb02 	bl	802b094 <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a90:	4b7a      	ldr	r3, [pc, #488]	@ (8011c7c <vRW_Settings_Tas+0x354>)
 8011a92:	6818      	ldr	r0, [r3, #0]
 8011a94:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011a98:	2302      	movs	r3, #2
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	f00f f9fc 	bl	8020e98 <xQueueGenericSend>
 8011aa0:	e00b      	b.n	8011aba <vRW_Settings_Tas+0x192>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011aa2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011aa6:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8011aaa:	2200      	movs	r2, #0
 8011aac:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011aae:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011ab2:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011aba:	4871      	ldr	r0, [pc, #452]	@ (8011c80 <vRW_Settings_Tas+0x358>)
 8011abc:	f019 fb66 	bl	802b18c <spi_fs_file_size>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	dd0b      	ble.n	8011ade <vRW_Settings_Tas+0x1b6>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011ac6:	2304      	movs	r3, #4
 8011ac8:	2200      	movs	r2, #0
 8011aca:	496e      	ldr	r1, [pc, #440]	@ (8011c84 <vRW_Settings_Tas+0x35c>)
 8011acc:	486c      	ldr	r0, [pc, #432]	@ (8011c80 <vRW_Settings_Tas+0x358>)
 8011ace:	f019 fae1 	bl	802b094 <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011ad2:	4b6c      	ldr	r3, [pc, #432]	@ (8011c84 <vRW_Settings_Tas+0x35c>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f207 4204 	addw	r2, r7, #1028	@ 0x404
 8011ada:	6013      	str	r3, [r2, #0]
 8011adc:	e00d      	b.n	8011afa <vRW_Settings_Tas+0x1d2>
	}else{
		test_kWh_from_flash = 0.0;
 8011ade:	4b69      	ldr	r3, [pc, #420]	@ (8011c84 <vRW_Settings_Tas+0x35c>)
 8011ae0:	f04f 0200 	mov.w	r2, #0
 8011ae4:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011ae6:	f04f 0300 	mov.w	r3, #0
 8011aea:	f207 4204 	addw	r2, r7, #1028	@ 0x404
 8011aee:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011af0:	2204      	movs	r2, #4
 8011af2:	4964      	ldr	r1, [pc, #400]	@ (8011c84 <vRW_Settings_Tas+0x35c>)
 8011af4:	4862      	ldr	r0, [pc, #392]	@ (8011c80 <vRW_Settings_Tas+0x358>)
 8011af6:	f019 fb11 	bl	802b11c <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011afa:	4863      	ldr	r0, [pc, #396]	@ (8011c88 <vRW_Settings_Tas+0x360>)
 8011afc:	f019 fbc2 	bl	802b284 <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011b00:	4862      	ldr	r0, [pc, #392]	@ (8011c8c <vRW_Settings_Tas+0x364>)
 8011b02:	f019 fca3 	bl	802b44c <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011b06:	4861      	ldr	r0, [pc, #388]	@ (8011c8c <vRW_Settings_Tas+0x364>)
 8011b08:	f019 fbbc 	bl	802b284 <spi_fs_mkdir>
	/* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011b0c:	4b56      	ldr	r3, [pc, #344]	@ (8011c68 <vRW_Settings_Tas+0x340>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8011b14:	2200      	movs	r2, #0
 8011b16:	4618      	mov	r0, r3
 8011b18:	f00f fd50 	bl	80215bc <xQueuePeek>
	  if (PowerSett.save){
 8011b1c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011b20:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d014      	beq.n	8011b54 <vRW_Settings_Tas+0x22c>
		  PowerSett.save = 0;
 8011b2a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011b2e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 8011b32:	2200      	movs	r2, #0
 8011b34:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011b36:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8011b3a:	2208      	movs	r2, #8
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	4849      	ldr	r0, [pc, #292]	@ (8011c64 <vRW_Settings_Tas+0x33c>)
 8011b40:	f019 faec 	bl	802b11c <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011b44:	4b48      	ldr	r3, [pc, #288]	@ (8011c68 <vRW_Settings_Tas+0x340>)
 8011b46:	6818      	ldr	r0, [r3, #0]
 8011b48:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8011b4c:	2302      	movs	r3, #2
 8011b4e:	2200      	movs	r2, #0
 8011b50:	f00f f9a2 	bl	8020e98 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011b54:	4b47      	ldr	r3, [pc, #284]	@ (8011c74 <vRW_Settings_Tas+0x34c>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f00f fd2c 	bl	80215bc <xQueuePeek>
	  if (MQTT_cred.save){
 8011b64:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011b68:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d014      	beq.n	8011b9c <vRW_Settings_Tas+0x274>
		  MQTT_cred.save = 0;
 8011b72:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011b76:	f5a3 7377 	sub.w	r3, r3, #988	@ 0x3dc
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b7e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b82:	22c6      	movs	r2, #198	@ 0xc6
 8011b84:	4619      	mov	r1, r3
 8011b86:	483a      	ldr	r0, [pc, #232]	@ (8011c70 <vRW_Settings_Tas+0x348>)
 8011b88:	f019 fac8 	bl	802b11c <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b8c:	4b39      	ldr	r3, [pc, #228]	@ (8011c74 <vRW_Settings_Tas+0x34c>)
 8011b8e:	6818      	ldr	r0, [r3, #0]
 8011b90:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8011b94:	2302      	movs	r3, #2
 8011b96:	2200      	movs	r2, #0
 8011b98:	f00f f97e 	bl	8020e98 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011b9c:	4b37      	ldr	r3, [pc, #220]	@ (8011c7c <vRW_Settings_Tas+0x354>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f00f fd08 	bl	80215bc <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011bac:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011bb0:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d00c      	beq.n	8011bd4 <vRW_Settings_Tas+0x2ac>
		  mb_tcp_sett.save = 0;
 8011bba:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011bbe:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011bc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011bca:	2202      	movs	r2, #2
 8011bcc:	4619      	mov	r1, r3
 8011bce:	482a      	ldr	r0, [pc, #168]	@ (8011c78 <vRW_Settings_Tas+0x350>)
 8011bd0:	f019 faa4 	bl	802b11c <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8011c90 <vRW_Settings_Tas+0x368>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	f107 010c 	add.w	r1, r7, #12
 8011bdc:	2200      	movs	r2, #0
 8011bde:	4618      	mov	r0, r3
 8011be0:	f00f fcec 	bl	80215bc <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011be4:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8011be8:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d312      	bcc.n	8011c16 <vRW_Settings_Tas+0x2ee>
 8011bf0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8011bf4:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8011bf8:	ed93 7a02 	vldr	s14, [r3, #8]
 8011bfc:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8011c00:	edd3 7a00 	vldr	s15, [r3]
 8011c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c14:	dd0d      	ble.n	8011c32 <vRW_Settings_Tas+0x30a>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011c16:	f107 030c 	add.w	r3, r7, #12
 8011c1a:	3308      	adds	r3, #8
 8011c1c:	2204      	movs	r2, #4
 8011c1e:	4619      	mov	r1, r3
 8011c20:	4817      	ldr	r0, [pc, #92]	@ (8011c80 <vRW_Settings_Tas+0x358>)
 8011c22:	f019 fa7b 	bl	802b11c <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011c26:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8011c2a:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 8011c2e:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
	  }

	  time_counter ++;
 8011c32:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8011c36:	3301      	adds	r3, #1
 8011c38:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
    osDelay(delay1s);
 8011c3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011c40:	f00e fbca 	bl	80203d8 <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011c44:	e762      	b.n	8011b0c <vRW_Settings_Tas+0x1e4>
 8011c46:	bf00      	nop
 8011c48:	20000328 	.word	0x20000328
 8011c4c:	080157d1 	.word	0x080157d1
 8011c50:	080157ad 	.word	0x080157ad
 8011c54:	0801580d 	.word	0x0801580d
 8011c58:	080157f5 	.word	0x080157f5
 8011c5c:	08011115 	.word	0x08011115
 8011c60:	080110f9 	.word	0x080110f9
 8011c64:	08031b9c 	.word	0x08031b9c
 8011c68:	20000454 	.word	0x20000454
 8011c6c:	3a83126f 	.word	0x3a83126f
 8011c70:	08031bac 	.word	0x08031bac
 8011c74:	20000458 	.word	0x20000458
 8011c78:	08031bbc 	.word	0x08031bbc
 8011c7c:	2000045c 	.word	0x2000045c
 8011c80:	08031bd0 	.word	0x08031bd0
 8011c84:	20000494 	.word	0x20000494
 8011c88:	08031be4 	.word	0x08031be4
 8011c8c:	08031bec 	.word	0x08031bec
 8011c90:	20000450 	.word	0x20000450

08011c94 <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011ca6:	f00a fa6b 	bl	801c180 <DHCP_time_handler>
	httpServer_time_handler();
 8011caa:	f00d fea1 	bl	801f9f0 <httpServer_time_handler>
	dns_service_increment_second();
 8011cae:	f00a fff3 	bl	801cc98 <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011cb2:	4b07      	ldr	r3, [pc, #28]	@ (8011cd0 <vOneSecondTickTask+0x3c>)
 8011cb4:	6818      	ldr	r0, [r3, #0]
 8011cb6:	f107 010c 	add.w	r1, r7, #12
 8011cba:	2302      	movs	r3, #2
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	f00f f8eb 	bl	8020e98 <xQueueGenericSend>
    osDelay(delay1s);
 8011cc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011cc6:	f00e fb87 	bl	80203d8 <osDelay>
	seconds++ ;
 8011cca:	bf00      	nop
 8011ccc:	e7e8      	b.n	8011ca0 <vOneSecondTickTask+0xc>
 8011cce:	bf00      	nop
 8011cd0:	20000460 	.word	0x20000460

08011cd4 <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011cd4:	b590      	push	{r4, r7, lr}
 8011cd6:	f5ad 5d84 	sub.w	sp, sp, #4224	@ 0x1080
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af12      	add	r7, sp, #72	@ 0x48
 8011cde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011ce2:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011ce6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8011cea:	f103 0308 	add.w	r3, r3, #8
 8011cee:	2220      	movs	r2, #32
 8011cf0:	2100      	movs	r1, #0
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f01b ff4c 	bl	802db90 <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011cf8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011cfc:	f103 0308 	add.w	r3, r3, #8
 8011d00:	2217      	movs	r2, #23
 8011d02:	2100      	movs	r1, #0
 8011d04:	4618      	mov	r0, r3
 8011d06:	f01b ff43 	bl	802db90 <memset>

	  NetInfo.mac[0]	= 0x40;
 8011d0a:	2340      	movs	r3, #64	@ 0x40
 8011d0c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d10:	f102 0208 	add.w	r2, r2, #8
 8011d14:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011d16:	2308      	movs	r3, #8
 8011d18:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d1c:	f102 0209 	add.w	r2, r2, #9
 8011d20:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011d22:	4bdc      	ldr	r3, [pc, #880]	@ (8012094 <vMaintEthTask+0x3c0>)
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d2a:	f102 020a 	add.w	r2, r2, #10
 8011d2e:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011d30:	4bd9      	ldr	r3, [pc, #868]	@ (8012098 <vMaintEthTask+0x3c4>)
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d38:	f102 020b 	add.w	r2, r2, #11
 8011d3c:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011d3e:	4bd7      	ldr	r3, [pc, #860]	@ (801209c <vMaintEthTask+0x3c8>)
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d46:	f102 020c 	add.w	r2, r2, #12
 8011d4a:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011d4c:	4bd4      	ldr	r3, [pc, #848]	@ (80120a0 <vMaintEthTask+0x3cc>)
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d54:	f102 020d 	add.w	r2, r2, #13
 8011d58:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011d5a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8011d5e:	f103 030b 	add.w	r3, r3, #11
 8011d62:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d66:	f102 0208 	add.w	r2, r2, #8
 8011d6a:	6810      	ldr	r0, [r2, #0]
 8011d6c:	6018      	str	r0, [r3, #0]
 8011d6e:	8892      	ldrh	r2, [r2, #4]
 8011d70:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011d72:	2302      	movs	r3, #2
 8011d74:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011d78:	f102 021e 	add.w	r2, r2, #30
 8011d7c:	7013      	strb	r3, [r2, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d7e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011d82:	f103 030e 	add.w	r3, r3, #14
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8011d8c:	f102 0211 	add.w	r2, r2, #17
 8011d90:	6013      	str	r3, [r2, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011d92:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011d96:	f103 0312 	add.w	r3, r3, #18
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8011da0:	f102 0215 	add.w	r2, r2, #21
 8011da4:	6013      	str	r3, [r2, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011da6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011daa:	f103 0316 	add.w	r3, r3, #22
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8011db4:	f102 0219 	add.w	r2, r2, #25
 8011db8:	6013      	str	r3, [r2, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011dba:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011dbe:	f103 031a 	add.w	r3, r3, #26
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8011dc8:	f102 021d 	add.w	r2, r2, #29
 8011dcc:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011dce:	4cb5      	ldr	r4, [pc, #724]	@ (80120a4 <vMaintEthTask+0x3d0>)
 8011dd0:	4668      	mov	r0, sp
 8011dd2:	f104 0310 	add.w	r3, r4, #16
 8011dd6:	2248      	movs	r2, #72	@ 0x48
 8011dd8:	4619      	mov	r1, r3
 8011dda:	f01c f8ae 	bl	802df3a <memcpy>
 8011dde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011de2:	f00e f957 	bl	8020094 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011de6:	49b0      	ldr	r1, [pc, #704]	@ (80120a8 <vMaintEthTask+0x3d4>)
 8011de8:	48b0      	ldr	r0, [pc, #704]	@ (80120ac <vMaintEthTask+0x3d8>)
 8011dea:	f00e f8ff 	bl	801ffec <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011dee:	48b0      	ldr	r0, [pc, #704]	@ (80120b0 <vMaintEthTask+0x3dc>)
 8011df0:	f00e f8e4 	bl	801ffbc <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011df4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011df8:	f103 0308 	add.w	r3, r3, #8
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f00d ffe1 	bl	801fdc4 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011e02:	49ac      	ldr	r1, [pc, #688]	@ (80120b4 <vMaintEthTask+0x3e0>)
 8011e04:	48ac      	ldr	r0, [pc, #688]	@ (80120b8 <vMaintEthTask+0x3e4>)
 8011e06:	f008 f929 	bl	801a05c <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011e0a:	49ac      	ldr	r1, [pc, #688]	@ (80120bc <vMaintEthTask+0x3e8>)
 8011e0c:	48ac      	ldr	r0, [pc, #688]	@ (80120c0 <vMaintEthTask+0x3ec>)
 8011e0e:	f008 f8ff 	bl	801a010 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011e12:	49ac      	ldr	r1, [pc, #688]	@ (80120c4 <vMaintEthTask+0x3f0>)
 8011e14:	48ac      	ldr	r0, [pc, #688]	@ (80120c8 <vMaintEthTask+0x3f4>)
 8011e16:	f008 f8d5 	bl	8019fc4 <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011e1a:	4aac      	ldr	r2, [pc, #688]	@ (80120cc <vMaintEthTask+0x3f8>)
 8011e1c:	49ac      	ldr	r1, [pc, #688]	@ (80120d0 <vMaintEthTask+0x3fc>)
 8011e1e:	48ac      	ldr	r0, [pc, #688]	@ (80120d0 <vMaintEthTask+0x3fc>)
 8011e20:	f008 fe7c 	bl	801ab1c <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011e24:	f107 0320 	add.w	r3, r7, #32
 8011e28:	3b18      	subs	r3, #24
 8011e2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011e2e:	4619      	mov	r1, r3
 8011e30:	2004      	movs	r0, #4
 8011e32:	f00a fedb 	bl	801cbec <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011e36:	48a7      	ldr	r0, [pc, #668]	@ (80120d4 <vMaintEthTask+0x400>)
 8011e38:	f00a fec6 	bl	801cbc8 <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011e3c:	49a6      	ldr	r1, [pc, #664]	@ (80120d8 <vMaintEthTask+0x404>)
 8011e3e:	48a7      	ldr	r0, [pc, #668]	@ (80120dc <vMaintEthTask+0x408>)
 8011e40:	f00a fea6 	bl	801cb90 <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011e44:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011e48:	f103 031e 	add.w	r3, r3, #30
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011e52:	f102 0201 	add.w	r2, r2, #1
 8011e56:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8011e5e:	f102 0208 	add.w	r2, r2, #8
 8011e62:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011e64:	f00e f86c 	bl	801ff40 <w5500_init>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f040 81eb 	bne.w	8012246 <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011e70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8011e74:	f010 f88c 	bl	8021f90 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e78:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011e7c:	f103 0308 	add.w	r3, r3, #8
 8011e80:	2206      	movs	r2, #6
 8011e82:	4619      	mov	r1, r3
 8011e84:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8011e88:	f006 fe6a 	bl	8018b60 <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e8c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011e90:	f103 031e 	add.w	r3, r3, #30
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	2b02      	cmp	r3, #2
 8011e98:	d106      	bne.n	8011ea8 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e9a:	f607 0308 	addw	r3, r7, #2056	@ 0x808
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	2000      	movs	r0, #0
 8011ea2:	f00a f8c3 	bl	801c02c <DHCP_init>
 8011ea6:	e003      	b.n	8011eb0 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011ea8:	f00d ff9c 	bl	801fde4 <network_init>
			set_ip_aasigned();
 8011eac:	f00e f83c 	bl	801ff28 <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011eb0:	f7ff f93c 	bl	801112c <SocketMutexTake>
			dhcp_rutine();
 8011eb4:	f00d ffe6 	bl	801fe84 <dhcp_rutine>

			if (!link_status()){
 8011eb8:	f00d fffc 	bl	801feb4 <link_status>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f040 80e0 	bne.w	8012084 <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011eca:	f102 020e 	add.w	r2, r2, #14
 8011ece:	7013      	strb	r3, [r2, #0]
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011ed6:	f102 020f 	add.w	r2, r2, #15
 8011eda:	7013      	strb	r3, [r2, #0]
 8011edc:	2300      	movs	r3, #0
 8011ede:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011ee2:	f102 0210 	add.w	r2, r2, #16
 8011ee6:	7013      	strb	r3, [r2, #0]
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011eee:	f102 0211 	add.w	r2, r2, #17
 8011ef2:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011efa:	f102 0212 	add.w	r2, r2, #18
 8011efe:	7013      	strb	r3, [r2, #0]
 8011f00:	2300      	movs	r3, #0
 8011f02:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f06:	f102 0213 	add.w	r2, r2, #19
 8011f0a:	7013      	strb	r3, [r2, #0]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f12:	f102 0214 	add.w	r2, r2, #20
 8011f16:	7013      	strb	r3, [r2, #0]
 8011f18:	2300      	movs	r3, #0
 8011f1a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f1e:	f102 0215 	add.w	r2, r2, #21
 8011f22:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011f24:	2300      	movs	r3, #0
 8011f26:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f2a:	f102 0216 	add.w	r2, r2, #22
 8011f2e:	7013      	strb	r3, [r2, #0]
 8011f30:	2300      	movs	r3, #0
 8011f32:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f36:	f102 0217 	add.w	r2, r2, #23
 8011f3a:	7013      	strb	r3, [r2, #0]
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f42:	f102 0218 	add.w	r2, r2, #24
 8011f46:	7013      	strb	r3, [r2, #0]
 8011f48:	2300      	movs	r3, #0
 8011f4a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f4e:	f102 0219 	add.w	r2, r2, #25
 8011f52:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011f54:	2300      	movs	r3, #0
 8011f56:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f5a:	f102 021a 	add.w	r2, r2, #26
 8011f5e:	7013      	strb	r3, [r2, #0]
 8011f60:	2300      	movs	r3, #0
 8011f62:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f66:	f102 021b 	add.w	r2, r2, #27
 8011f6a:	7013      	strb	r3, [r2, #0]
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f72:	f102 021c 	add.w	r2, r2, #28
 8011f76:	7013      	strb	r3, [r2, #0]
 8011f78:	2300      	movs	r3, #0
 8011f7a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f7e:	f102 021d 	add.w	r2, r2, #29
 8011f82:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f84:	f7ff f8e0 	bl	8011148 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f88:	2300      	movs	r3, #0
 8011f8a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8011f8e:	f102 021f 	add.w	r2, r2, #31
 8011f92:	7013      	strb	r3, [r2, #0]
 8011f94:	e05a      	b.n	801204c <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f96:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011f9a:	f103 031f 	add.w	r3, r3, #31
 8011f9e:	781a      	ldrb	r2, [r3, #0]
 8011fa0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011fa4:	f103 031f 	add.w	r3, r3, #31
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 8011fae:	443a      	add	r2, r7
 8011fb0:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011fb4:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8011fb8:	443b      	add	r3, r7
 8011fba:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011fbe:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011fc2:	f103 031f 	add.w	r3, r3, #31
 8011fc6:	781a      	ldrb	r2, [r3, #0]
 8011fc8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011fcc:	f103 031f 	add.w	r3, r3, #31
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 8011fd6:	443a      	add	r2, r7
 8011fd8:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011fdc:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8011fe0:	443b      	add	r3, r7
 8011fe2:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011fe6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011fea:	f103 031f 	add.w	r3, r3, #31
 8011fee:	781a      	ldrb	r2, [r3, #0]
 8011ff0:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8011ff4:	f103 031f 	add.w	r3, r3, #31
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 8011ffe:	443a      	add	r2, r7
 8012000:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8012004:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8012008:	443b      	add	r3, r7
 801200a:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 801200e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012012:	f103 031f 	add.w	r3, r3, #31
 8012016:	781a      	ldrb	r2, [r3, #0]
 8012018:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 801201c:	f103 031f 	add.w	r3, r3, #31
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 8012026:	443a      	add	r2, r7
 8012028:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 801202c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8012030:	443b      	add	r3, r7
 8012032:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 8012036:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 801203a:	f103 031f 	add.w	r3, r3, #31
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	3301      	adds	r3, #1
 8012042:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8012046:	f102 021f 	add.w	r2, r2, #31
 801204a:	7013      	strb	r3, [r2, #0]
 801204c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012050:	f103 031f 	add.w	r3, r3, #31
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	2b03      	cmp	r3, #3
 8012058:	d99d      	bls.n	8011f96 <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 801205a:	2300      	movs	r3, #0
 801205c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012060:	f102 0208 	add.w	r2, r2, #8
 8012064:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012066:	4b1e      	ldr	r3, [pc, #120]	@ (80120e0 <vMaintEthTask+0x40c>)
 8012068:	6818      	ldr	r0, [r3, #0]
 801206a:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 801206e:	f101 0108 	add.w	r1, r1, #8
 8012072:	2302      	movs	r3, #2
 8012074:	2200      	movs	r2, #0
 8012076:	f00e ff0f 	bl	8020e98 <xQueueGenericSend>
				break;
 801207a:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 801207c:	2001      	movs	r0, #1
 801207e:	f00e f9ab 	bl	80203d8 <osDelay>
 8012082:	e6df      	b.n	8011e44 <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012084:	2300      	movs	r3, #0
 8012086:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 801208a:	f102 021f 	add.w	r2, r2, #31
 801208e:	7013      	strb	r3, [r2, #0]
 8012090:	e083      	b.n	801219a <vMaintEthTask+0x4c6>
 8012092:	bf00      	nop
 8012094:	1fff7a10 	.word	0x1fff7a10
 8012098:	1fff7a11 	.word	0x1fff7a11
 801209c:	1fff7a12 	.word	0x1fff7a12
 80120a0:	1fff7a13 	.word	0x1fff7a13
 80120a4:	20000380 	.word	0x20000380
 80120a8:	0802004d 	.word	0x0802004d
 80120ac:	08020035 	.word	0x08020035
 80120b0:	080203d9 	.word	0x080203d9
 80120b4:	080200c5 	.word	0x080200c5
 80120b8:	080200e9 	.word	0x080200e9
 80120bc:	0802007d 	.word	0x0802007d
 80120c0:	08020065 	.word	0x08020065
 80120c4:	080110e1 	.word	0x080110e1
 80120c8:	080110c5 	.word	0x080110c5
 80120cc:	0801fe19 	.word	0x0801fe19
 80120d0:	0801fe31 	.word	0x0801fe31
 80120d4:	0801ff11 	.word	0x0801ff11
 80120d8:	0801117d 	.word	0x0801117d
 80120dc:	08011161 	.word	0x08011161
 80120e0:	2000044c 	.word	0x2000044c
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 80120e4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80120e8:	f103 031f 	add.w	r3, r3, #31
 80120ec:	781a      	ldrb	r2, [r3, #0]
 80120ee:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80120f2:	f103 031f 	add.w	r3, r3, #31
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 80120fc:	443a      	add	r2, r7
 80120fe:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8012102:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8012106:	443b      	add	r3, r7
 8012108:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 801210c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012110:	f103 031f 	add.w	r3, r3, #31
 8012114:	781a      	ldrb	r2, [r3, #0]
 8012116:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 801211a:	f103 031f 	add.w	r3, r3, #31
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 8012124:	443a      	add	r2, r7
 8012126:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 801212a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 801212e:	443b      	add	r3, r7
 8012130:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8012134:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012138:	f103 031f 	add.w	r3, r3, #31
 801213c:	781a      	ldrb	r2, [r3, #0]
 801213e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012142:	f103 031f 	add.w	r3, r3, #31
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 801214c:	443a      	add	r2, r7
 801214e:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8012152:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8012156:	443b      	add	r3, r7
 8012158:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 801215c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012160:	f103 031f 	add.w	r3, r3, #31
 8012164:	781a      	ldrb	r2, [r3, #0]
 8012166:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 801216a:	f103 031f 	add.w	r3, r3, #31
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	f502 5282 	add.w	r2, r2, #4160	@ 0x1040
 8012174:	443a      	add	r2, r7
 8012176:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 801217a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 801217e:	443b      	add	r3, r7
 8012180:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012184:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012188:	f103 031f 	add.w	r3, r3, #31
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	3301      	adds	r3, #1
 8012190:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8012194:	f102 021f 	add.w	r2, r2, #31
 8012198:	7013      	strb	r3, [r2, #0]
 801219a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 801219e:	f103 031f 	add.w	r3, r3, #31
 80121a2:	781b      	ldrb	r3, [r3, #0]
 80121a4:	2b03      	cmp	r3, #3
 80121a6:	d99d      	bls.n	80120e4 <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 80121a8:	2301      	movs	r3, #1
 80121aa:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80121ae:	f102 0208 	add.w	r2, r2, #8
 80121b2:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 80121b4:	f00d fea0 	bl	801fef8 <link_speed>
 80121b8:	4603      	mov	r3, r0
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80121c0:	f102 020a 	add.w	r2, r2, #10
 80121c4:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 80121c6:	f00d fe8b 	bl	801fee0 <link_duplex>
 80121ca:	4603      	mov	r3, r0
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80121d2:	f102 0209 	add.w	r2, r2, #9
 80121d6:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 80121d8:	f00a f860 	bl	801c29c <getDHCPLeasetime>
 80121dc:	4603      	mov	r3, r0
 80121de:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80121e2:	f102 0204 	add.w	r2, r2, #4
 80121e6:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 80121e8:	f7fe ffae 	bl	8011148 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 80121ec:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80121f0:	f103 030e 	add.w	r3, r3, #14
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d10e      	bne.n	8012218 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121fa:	4b14      	ldr	r3, [pc, #80]	@ (801224c <vMaintEthTask+0x578>)
 80121fc:	6818      	ldr	r0, [r3, #0]
 80121fe:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8012202:	f101 0108 	add.w	r1, r1, #8
 8012206:	2302      	movs	r3, #2
 8012208:	2200      	movs	r2, #0
 801220a:	f00e fe45 	bl	8020e98 <xQueueGenericSend>
				osDelay(delay1s);
 801220e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012212:	f00e f8e1 	bl	80203d8 <osDelay>
				continue;
 8012216:	e015      	b.n	8012244 <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 8012218:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801221c:	f103 0308 	add.w	r3, r3, #8
 8012220:	3315      	adds	r3, #21
 8012222:	4618      	mov	r0, r3
 8012224:	f00a fcfc 	bl	801cc20 <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012228:	4b08      	ldr	r3, [pc, #32]	@ (801224c <vMaintEthTask+0x578>)
 801222a:	6818      	ldr	r0, [r3, #0]
 801222c:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 8012230:	f101 0108 	add.w	r1, r1, #8
 8012234:	2302      	movs	r3, #2
 8012236:	2200      	movs	r2, #0
 8012238:	f00e fe2e 	bl	8020e98 <xQueueGenericSend>
			osDelay(delay1s);
 801223c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012240:	f00e f8ca 	bl	80203d8 <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 8012244:	e634      	b.n	8011eb0 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 8012246:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 8012248:	e5fc      	b.n	8011e44 <vMaintEthTask+0x170>
 801224a:	bf00      	nop
 801224c:	2000044c 	.word	0x2000044c

08012250 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b084      	sub	sp, #16
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8012258:	4b1f      	ldr	r3, [pc, #124]	@ (80122d8 <vDebugMemUsage+0x88>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	4618      	mov	r0, r3
 801225e:	f00e f87d 	bl	802035c <osThreadGetStackSpace>
 8012262:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 8012264:	4b1d      	ldr	r3, [pc, #116]	@ (80122dc <vDebugMemUsage+0x8c>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4618      	mov	r0, r3
 801226a:	f00e f877 	bl	802035c <osThreadGetStackSpace>
 801226e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8012270:	4b1b      	ldr	r3, [pc, #108]	@ (80122e0 <vDebugMemUsage+0x90>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	4618      	mov	r0, r3
 8012276:	f00e f871 	bl	802035c <osThreadGetStackSpace>
 801227a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 801227c:	4b19      	ldr	r3, [pc, #100]	@ (80122e4 <vDebugMemUsage+0x94>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4618      	mov	r0, r3
 8012282:	f00e f86b 	bl	802035c <osThreadGetStackSpace>
 8012286:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8012288:	4b17      	ldr	r3, [pc, #92]	@ (80122e8 <vDebugMemUsage+0x98>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	4618      	mov	r0, r3
 801228e:	f00e f865 	bl	802035c <osThreadGetStackSpace>
 8012292:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 8012294:	4b15      	ldr	r3, [pc, #84]	@ (80122ec <vDebugMemUsage+0x9c>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4618      	mov	r0, r3
 801229a:	f00e f85f 	bl	802035c <osThreadGetStackSpace>
 801229e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 80122a0:	4b13      	ldr	r3, [pc, #76]	@ (80122f0 <vDebugMemUsage+0xa0>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	4618      	mov	r0, r3
 80122a6:	f00e f859 	bl	802035c <osThreadGetStackSpace>
 80122aa:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(mqttClientTaskHandle);
 80122ac:	4b11      	ldr	r3, [pc, #68]	@ (80122f4 <vDebugMemUsage+0xa4>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4618      	mov	r0, r3
 80122b2:	f00e f853 	bl	802035c <osThreadGetStackSpace>
 80122b6:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SendBroadcastHandle);
 80122b8:	4b0f      	ldr	r3, [pc, #60]	@ (80122f8 <vDebugMemUsage+0xa8>)
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	4618      	mov	r0, r3
 80122be:	f00e f84d 	bl	802035c <osThreadGetStackSpace>
 80122c2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122c4:	2000      	movs	r0, #0
 80122c6:	f00e f849 	bl	802035c <osThreadGetStackSpace>
 80122ca:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 80122cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80122d0:	f00e f882 	bl	80203d8 <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80122d4:	bf00      	nop
 80122d6:	e7bf      	b.n	8012258 <vDebugMemUsage+0x8>
 80122d8:	20000420 	.word	0x20000420
 80122dc:	20000424 	.word	0x20000424
 80122e0:	20000428 	.word	0x20000428
 80122e4:	2000042c 	.word	0x2000042c
 80122e8:	20000430 	.word	0x20000430
 80122ec:	20000434 	.word	0x20000434
 80122f0:	20000438 	.word	0x20000438
 80122f4:	2000043c 	.word	0x2000043c
 80122f8:	20000444 	.word	0x20000444

080122fc <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8012302:	b084      	sub	sp, #16
 8012304:	af00      	add	r7, sp, #0
 8012306:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801230a:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 801230e:	4a51      	ldr	r2, [pc, #324]	@ (8012454 <httpServ+0x158>)
 8012310:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012314:	f103 0308 	add.w	r3, r3, #8
 8012318:	6812      	ldr	r2, [r2, #0]
 801231a:	4611      	mov	r1, r2
 801231c:	8019      	strh	r1, [r3, #0]
 801231e:	3302      	adds	r3, #2
 8012320:	0c12      	lsrs	r2, r2, #16
 8012322:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 8012324:	2303      	movs	r3, #3
 8012326:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 801232a:	f102 020e 	add.w	r2, r2, #14
 801232e:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 8012330:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012334:	f103 0308 	add.w	r3, r3, #8
 8012338:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 801233c:	f102 020e 	add.w	r2, r2, #14
 8012340:	7812      	ldrb	r2, [r2, #0]
 8012342:	f607 0108 	addw	r1, r7, #2056	@ 0x808
 8012346:	f107 0010 	add.w	r0, r7, #16
 801234a:	3808      	subs	r0, #8
 801234c:	f00c fd78 	bl	801ee40 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 8012350:	4841      	ldr	r0, [pc, #260]	@ (8012458 <httpServ+0x15c>)
 8012352:	f00d fce7 	bl	801fd24 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 8012356:	4841      	ldr	r0, [pc, #260]	@ (801245c <httpServ+0x160>)
 8012358:	f00d fcfc 	bl	801fd54 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 801235c:	4b40      	ldr	r3, [pc, #256]	@ (8012460 <httpServ+0x164>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2103      	movs	r1, #3
 8012362:	4618      	mov	r0, r3
 8012364:	f000 fe2e 	bl	8012fc4 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 8012368:	4b3e      	ldr	r3, [pc, #248]	@ (8012464 <httpServ+0x168>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2104      	movs	r1, #4
 801236e:	4618      	mov	r0, r3
 8012370:	f000 fe28 	bl	8012fc4 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 8012374:	4b3c      	ldr	r3, [pc, #240]	@ (8012468 <httpServ+0x16c>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2100      	movs	r1, #0
 801237a:	4618      	mov	r0, r3
 801237c:	f000 fe22 	bl	8012fc4 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8012380:	4b3a      	ldr	r3, [pc, #232]	@ (801246c <httpServ+0x170>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2102      	movs	r1, #2
 8012386:	4618      	mov	r0, r3
 8012388:	f000 fe1c 	bl	8012fc4 <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 801238c:	4b38      	ldr	r3, [pc, #224]	@ (8012470 <httpServ+0x174>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2105      	movs	r1, #5
 8012392:	4618      	mov	r0, r3
 8012394:	f000 fe16 	bl	8012fc4 <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 8012398:	4936      	ldr	r1, [pc, #216]	@ (8012474 <httpServ+0x178>)
 801239a:	4837      	ldr	r0, [pc, #220]	@ (8012478 <httpServ+0x17c>)
 801239c:	f00d fb44 	bl	801fa28 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 80123a0:	4936      	ldr	r1, [pc, #216]	@ (801247c <httpServ+0x180>)
 80123a2:	4837      	ldr	r0, [pc, #220]	@ (8012480 <httpServ+0x184>)
 80123a4:	f00d fb40 	bl	801fa28 <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 80123a8:	4936      	ldr	r1, [pc, #216]	@ (8012484 <httpServ+0x188>)
 80123aa:	4837      	ldr	r0, [pc, #220]	@ (8012488 <httpServ+0x18c>)
 80123ac:	f00d fb3c 	bl	801fa28 <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 80123b0:	4b36      	ldr	r3, [pc, #216]	@ (801248c <httpServ+0x190>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f507 5180 	add.w	r1, r7, #4096	@ 0x1000
 80123b8:	f101 010c 	add.w	r1, r1, #12
 80123bc:	2200      	movs	r2, #0
 80123be:	4618      	mov	r0, r3
 80123c0:	f00f f8fc 	bl	80215bc <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123c4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80123c8:	f103 030c 	add.w	r3, r3, #12
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d037      	beq.n	8012442 <httpServ+0x146>
 80123d2:	f00d fd9d 	bl	801ff10 <assigned_ip>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d132      	bne.n	8012442 <httpServ+0x146>
		  for(i = 0 ; i < http_nsockets; i++){
 80123dc:	2300      	movs	r3, #0
 80123de:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80123e2:	f102 020f 	add.w	r2, r2, #15
 80123e6:	7013      	strb	r3, [r2, #0]
 80123e8:	e01e      	b.n	8012428 <httpServ+0x12c>
			  SocketMutexTake();
 80123ea:	f7fe fe9f 	bl	801112c <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 80123ee:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80123f2:	f103 030f 	add.w	r3, r3, #15
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	4618      	mov	r0, r3
 80123fa:	f00c fd3d 	bl	801ee78 <httpServer_run>
			  SocketMutexRelease();
 80123fe:	f7fe fea3 	bl	8011148 <SocketMutexRelease>
			  //osDelay(delay0_1s);
			  taskYIELD();
 8012402:	4b23      	ldr	r3, [pc, #140]	@ (8012490 <httpServ+0x194>)
 8012404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012408:	601a      	str	r2, [r3, #0]
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	f3bf 8f6f 	isb	sy
		  for(i = 0 ; i < http_nsockets; i++){
 8012412:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012416:	f103 030f 	add.w	r3, r3, #15
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	3301      	adds	r3, #1
 801241e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8012422:	f102 020f 	add.w	r2, r2, #15
 8012426:	7013      	strb	r3, [r2, #0]
 8012428:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 801242c:	f103 030f 	add.w	r3, r3, #15
 8012430:	781a      	ldrb	r2, [r3, #0]
 8012432:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8012436:	f103 030e 	add.w	r3, r3, #14
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	429a      	cmp	r2, r3
 801243e:	d3d4      	bcc.n	80123ea <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012440:	e003      	b.n	801244a <httpServ+0x14e>

		  }
	  }else{
		  osDelay(delay1s);
 8012442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012446:	f00d ffc7 	bl	80203d8 <osDelay>
	  }
	  osDelay(delay0_1s);
 801244a:	2064      	movs	r0, #100	@ 0x64
 801244c:	f00d ffc4 	bl	80203d8 <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012450:	e7ae      	b.n	80123b0 <httpServ+0xb4>
 8012452:	bf00      	nop
 8012454:	0803280c 	.word	0x0803280c
 8012458:	08013d5d 	.word	0x08013d5d
 801245c:	08013e71 	.word	0x08013e71
 8012460:	20000450 	.word	0x20000450
 8012464:	20000454 	.word	0x20000454
 8012468:	20000458 	.word	0x20000458
 801246c:	2000045c 	.word	0x2000045c
 8012470:	20000460 	.word	0x20000460
 8012474:	08031bf8 	.word	0x08031bf8
 8012478:	08031f14 	.word	0x08031f14
 801247c:	08031f20 	.word	0x08031f20
 8012480:	08032254 	.word	0x08032254
 8012484:	08032268 	.word	0x08032268
 8012488:	08032800 	.word	0x08032800
 801248c:	2000044c 	.word	0x2000044c
 8012490:	e000ed04 	.word	0xe000ed04

08012494 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	f5ad 6d22 	sub.w	sp, sp, #2592	@ 0xa20
 801249a:	af02      	add	r7, sp, #8
 801249c:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80124a0:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 80124a4:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 80124a6:	499e      	ldr	r1, [pc, #632]	@ (8012720 <vMQTT_Task+0x28c>)
 80124a8:	489e      	ldr	r0, [pc, #632]	@ (8012724 <vMQTT_Task+0x290>)
 80124aa:	f001 fdb1 	bl	8014010 <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 80124ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80124b2:	f00d ff91 	bl	80203d8 <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 80124b6:	4b9c      	ldr	r3, [pc, #624]	@ (8012728 <vMQTT_Task+0x294>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 80124be:	2200      	movs	r2, #0
 80124c0:	4618      	mov	r0, r3
 80124c2:	f00f f87b 	bl	80215bc <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 80124c6:	f897 39f8 	ldrb.w	r3, [r7, #2552]	@ 0x9f8
 80124ca:	f083 0301 	eor.w	r3, r3, #1
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	f040 811a 	bne.w	801270a <vMQTT_Task+0x276>
 80124d6:	f00d fd1b 	bl	801ff10 <assigned_ip>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b01      	cmp	r3, #1
 80124de:	f040 8114 	bne.w	801270a <vMQTT_Task+0x276>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124e2:	4b92      	ldr	r3, [pc, #584]	@ (801272c <vMQTT_Task+0x298>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f507 6113 	add.w	r1, r7, #2352	@ 0x930
 80124ea:	2200      	movs	r2, #0
 80124ec:	4618      	mov	r0, r3
 80124ee:	f00f f865 	bl	80215bc <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124f2:	e00b      	b.n	801250c <vMQTT_Task+0x78>
			osDelay(delay1s);
 80124f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80124f8:	f00d ff6e 	bl	80203d8 <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124fc:	4b8b      	ldr	r3, [pc, #556]	@ (801272c <vMQTT_Task+0x298>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	f507 6113 	add.w	r1, r7, #2352	@ 0x930
 8012504:	2200      	movs	r2, #0
 8012506:	4618      	mov	r0, r3
 8012508:	f00f f858 	bl	80215bc <xQueuePeek>
		while (MQTT_cred.enable == 0){
 801250c:	f897 3931 	ldrb.w	r3, [r7, #2353]	@ 0x931
 8012510:	f083 0301 	eor.w	r3, r3, #1
 8012514:	b2db      	uxtb	r3, r3
 8012516:	2b00      	cmp	r3, #0
 8012518:	d1ec      	bne.n	80124f4 <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 801251a:	f897 3931 	ldrb.w	r3, [r7, #2353]	@ 0x931
 801251e:	f083 0301 	eor.w	r3, r3, #1
 8012522:	b2db      	uxtb	r3, r3
 8012524:	2b00      	cmp	r3, #0
 8012526:	f040 80f2 	bne.w	801270e <vMQTT_Task+0x27a>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 801252a:	f207 520c 	addw	r2, r7, #1292	@ 0x50c
 801252e:	f507 6113 	add.w	r1, r7, #2352	@ 0x930
 8012532:	f607 10f8 	addw	r0, r7, #2552	@ 0x9f8
 8012536:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801253a:	9301      	str	r3, [sp, #4]
 801253c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012546:	f001 fd7f 	bl	8014048 <mqtt_client_init>
 801254a:	4603      	mov	r3, r0
 801254c:	2b00      	cmp	r3, #0
 801254e:	f040 80e0 	bne.w	8012712 <vMQTT_Task+0x27e>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 8012552:	f001 fe65 	bl	8014220 <mqtt_client_connect>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	f2c0 80dc 	blt.w	8012716 <vMQTT_Task+0x282>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 801255e:	f001 feaf 	bl	80142c0 <mqtt_client_reg_dev_on_home_assist>
 8012562:	4603      	mov	r3, r0
 8012564:	2b00      	cmp	r3, #0
 8012566:	f040 80d8 	bne.w	801271a <vMQTT_Task+0x286>

		generate_status_topik(topik_name, 0);
 801256a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801256e:	2100      	movs	r1, #0
 8012570:	4618      	mov	r0, r3
 8012572:	f002 fae1 	bl	8014b38 <generate_status_topik>
		while (1){
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 8012576:	4b6d      	ldr	r3, [pc, #436]	@ (801272c <vMQTT_Task+0x298>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	f507 6113 	add.w	r1, r7, #2352	@ 0x930
 801257e:	2200      	movs	r2, #0
 8012580:	4618      	mov	r0, r3
 8012582:	f00f f81b 	bl	80215bc <xQueuePeek>
			if (MQTT_cred.enable == 0){
 8012586:	f897 3931 	ldrb.w	r3, [r7, #2353]	@ 0x931
 801258a:	f083 0301 	eor.w	r3, r3, #1
 801258e:	b2db      	uxtb	r3, r3
 8012590:	2b00      	cmp	r3, #0
 8012592:	d002      	beq.n	801259a <vMQTT_Task+0x106>
				mqtt_disconnect();
 8012594:	f002 f81c 	bl	80145d0 <mqtt_disconnect>
				break;
 8012598:	e0b2      	b.n	8012700 <vMQTT_Task+0x26c>
			}
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801259a:	4b65      	ldr	r3, [pc, #404]	@ (8012730 <vMQTT_Task+0x29c>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f607 110c 	addw	r1, r7, #2316	@ 0x90c
 80125a2:	2200      	movs	r2, #0
 80125a4:	4618      	mov	r0, r3
 80125a6:	f00f f809 	bl	80215bc <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 80125aa:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80125ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80125b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80125b6:	f107 030c 	add.w	r3, r7, #12
 80125ba:	eeb0 0a67 	vmov.f32	s0, s15
 80125be:	495d      	ldr	r1, [pc, #372]	@ (8012734 <vMQTT_Task+0x2a0>)
 80125c0:	4618      	mov	r0, r3
 80125c2:	f002 faf1 	bl	8014ba8 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125c6:	f107 020c 	add.w	r2, r7, #12
 80125ca:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80125ce:	4611      	mov	r1, r2
 80125d0:	4618      	mov	r0, r3
 80125d2:	f001 ffc7 	bl	8014564 <send_data_to_topik>
 80125d6:	4603      	mov	r3, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	f040 8086 	bne.w	80126ea <vMQTT_Task+0x256>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 80125de:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80125e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80125e6:	edd3 7a00 	vldr	s15, [r3]
 80125ea:	f107 030c 	add.w	r3, r7, #12
 80125ee:	eeb0 0a67 	vmov.f32	s0, s15
 80125f2:	4951      	ldr	r1, [pc, #324]	@ (8012738 <vMQTT_Task+0x2a4>)
 80125f4:	4618      	mov	r0, r3
 80125f6:	f002 fad7 	bl	8014ba8 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125fa:	f107 020c 	add.w	r2, r7, #12
 80125fe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8012602:	4611      	mov	r1, r2
 8012604:	4618      	mov	r0, r3
 8012606:	f001 ffad 	bl	8014564 <send_data_to_topik>
 801260a:	4603      	mov	r3, r0
 801260c:	2b00      	cmp	r3, #0
 801260e:	d16e      	bne.n	80126ee <vMQTT_Task+0x25a>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 8012610:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8012614:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012618:	edd3 7a01 	vldr	s15, [r3, #4]
 801261c:	f107 030c 	add.w	r3, r7, #12
 8012620:	eeb0 0a67 	vmov.f32	s0, s15
 8012624:	4945      	ldr	r1, [pc, #276]	@ (801273c <vMQTT_Task+0x2a8>)
 8012626:	4618      	mov	r0, r3
 8012628:	f002 fabe 	bl	8014ba8 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801262c:	f107 020c 	add.w	r2, r7, #12
 8012630:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8012634:	4611      	mov	r1, r2
 8012636:	4618      	mov	r0, r3
 8012638:	f001 ff94 	bl	8014564 <send_data_to_topik>
 801263c:	4603      	mov	r3, r0
 801263e:	2b00      	cmp	r3, #0
 8012640:	d157      	bne.n	80126f2 <vMQTT_Task+0x25e>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 8012642:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8012646:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801264a:	edd3 7a05 	vldr	s15, [r3, #20]
 801264e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8012740 <vMQTT_Task+0x2ac>
 8012652:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012656:	f107 030c 	add.w	r3, r7, #12
 801265a:	eeb0 0a67 	vmov.f32	s0, s15
 801265e:	4939      	ldr	r1, [pc, #228]	@ (8012744 <vMQTT_Task+0x2b0>)
 8012660:	4618      	mov	r0, r3
 8012662:	f002 faa1 	bl	8014ba8 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012666:	f107 020c 	add.w	r2, r7, #12
 801266a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801266e:	4611      	mov	r1, r2
 8012670:	4618      	mov	r0, r3
 8012672:	f001 ff77 	bl	8014564 <send_data_to_topik>
 8012676:	4603      	mov	r3, r0
 8012678:	2b00      	cmp	r3, #0
 801267a:	d13c      	bne.n	80126f6 <vMQTT_Task+0x262>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ActivePower);
 801267c:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8012680:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8012684:	edd3 7a03 	vldr	s15, [r3, #12]
 8012688:	f107 030c 	add.w	r3, r7, #12
 801268c:	eeb0 0a67 	vmov.f32	s0, s15
 8012690:	492d      	ldr	r1, [pc, #180]	@ (8012748 <vMQTT_Task+0x2b4>)
 8012692:	4618      	mov	r0, r3
 8012694:	f002 fa88 	bl	8014ba8 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012698:	f107 020c 	add.w	r2, r7, #12
 801269c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80126a0:	4611      	mov	r1, r2
 80126a2:	4618      	mov	r0, r3
 80126a4:	f001 ff5e 	bl	8014564 <send_data_to_topik>
 80126a8:	4603      	mov	r3, r0
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d125      	bne.n	80126fa <vMQTT_Task+0x266>

			generate_key_value_JSON(topik_payload, dev_class_apparent_power, PowerData.ApparPower);
 80126ae:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80126b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80126b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80126ba:	f107 030c 	add.w	r3, r7, #12
 80126be:	eeb0 0a67 	vmov.f32	s0, s15
 80126c2:	4922      	ldr	r1, [pc, #136]	@ (801274c <vMQTT_Task+0x2b8>)
 80126c4:	4618      	mov	r0, r3
 80126c6:	f002 fa6f 	bl	8014ba8 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ca:	f107 020c 	add.w	r2, r7, #12
 80126ce:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80126d2:	4611      	mov	r1, r2
 80126d4:	4618      	mov	r0, r3
 80126d6:	f001 ff45 	bl	8014564 <send_data_to_topik>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d10e      	bne.n	80126fe <vMQTT_Task+0x26a>

			osDelay(delay30s);
 80126e0:	f247 5030 	movw	r0, #30000	@ 0x7530
 80126e4:	f00d fe78 	bl	80203d8 <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80126e8:	e745      	b.n	8012576 <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ea:	bf00      	nop
 80126ec:	e008      	b.n	8012700 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ee:	bf00      	nop
 80126f0:	e006      	b.n	8012700 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126f2:	bf00      	nop
 80126f4:	e004      	b.n	8012700 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126f6:	bf00      	nop
 80126f8:	e002      	b.n	8012700 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126fa:	bf00      	nop
 80126fc:	e000      	b.n	8012700 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126fe:	bf00      	nop
		}
		osDelay(delay1s);
 8012700:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012704:	f00d fe68 	bl	80203d8 <osDelay>
 8012708:	e6d1      	b.n	80124ae <vMQTT_Task+0x1a>
			continue;
 801270a:	bf00      	nop
 801270c:	e6cf      	b.n	80124ae <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 801270e:	bf00      	nop
 8012710:	e6cd      	b.n	80124ae <vMQTT_Task+0x1a>
			continue;
 8012712:	bf00      	nop
 8012714:	e6cb      	b.n	80124ae <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 8012716:	bf00      	nop
 8012718:	e6c9      	b.n	80124ae <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 801271a:	bf00      	nop
		osDelay(delay1s);
 801271c:	e6c7      	b.n	80124ae <vMQTT_Task+0x1a>
 801271e:	bf00      	nop
 8012720:	08011149 	.word	0x08011149
 8012724:	0801112d 	.word	0x0801112d
 8012728:	2000044c 	.word	0x2000044c
 801272c:	20000458 	.word	0x20000458
 8012730:	20000450 	.word	0x20000450
 8012734:	08032810 	.word	0x08032810
 8012738:	08032818 	.word	0x08032818
 801273c:	08032820 	.word	0x08032820
 8012740:	42c80000 	.word	0x42c80000
 8012744:	08032828 	.word	0x08032828
 8012748:	08032838 	.word	0x08032838
 801274c:	08032840 	.word	0x08032840

08012750 <vResetWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vResetWatchDog */
void vResetWatchDog(void *argument)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vResetWatchDog */
  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8012758:	4804      	ldr	r0, [pc, #16]	@ (801276c <vResetWatchDog+0x1c>)
 801275a:	f003 fc38 	bl	8015fce <HAL_IWDG_Refresh>
    osDelay(delay0_5s);
 801275e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8012762:	f00d fe39 	bl	80203d8 <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8012766:	bf00      	nop
 8012768:	e7f6      	b.n	8012758 <vResetWatchDog+0x8>
 801276a:	bf00      	nop
 801276c:	2000031c 	.word	0x2000031c

08012770 <vSendBroadcast>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSendBroadcast */
void vSendBroadcast(void *argument)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b0ce      	sub	sp, #312	@ 0x138
 8012774:	af02      	add	r7, sp, #8
 8012776:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801277a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801277e:	6018      	str	r0, [r3, #0]
	int16_t					string_len;

   /* Infinite loop */
  for(;;)
  {
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8012780:	4b40      	ldr	r3, [pc, #256]	@ (8012884 <vSendBroadcast+0x114>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8012788:	2200      	movs	r2, #0
 801278a:	4618      	mov	r0, r3
 801278c:	f00e ff16 	bl	80215bc <xQueuePeek>
	if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 8012790:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 8012794:	f083 0301 	eor.w	r3, r3, #1
 8012798:	b2db      	uxtb	r3, r3
 801279a:	2b00      	cmp	r3, #0
 801279c:	d104      	bne.n	80127a8 <vSendBroadcast+0x38>
 801279e:	f00d fbb7 	bl	801ff10 <assigned_ip>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d004      	beq.n	80127b2 <vSendBroadcast+0x42>
		osDelay(delay10s);
 80127a8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80127ac:	f00d fe14 	bl	80203d8 <osDelay>
		continue;
 80127b0:	e067      	b.n	8012882 <vSendBroadcast+0x112>
	}

	broadcastIP[0] = EthernetInfo.ip[0] | ( ~ EthernetInfo.sn[0]);
 80127b2:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80127b6:	b25a      	sxtb	r2, r3
 80127b8:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 80127bc:	b25b      	sxtb	r3, r3
 80127be:	43db      	mvns	r3, r3
 80127c0:	b25b      	sxtb	r3, r3
 80127c2:	4313      	orrs	r3, r2
 80127c4:	b25b      	sxtb	r3, r3
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	f887 3108 	strb.w	r3, [r7, #264]	@ 0x108
	broadcastIP[1] = EthernetInfo.ip[1] | ( ~ EthernetInfo.sn[1]);
 80127cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80127d0:	b25a      	sxtb	r2, r3
 80127d2:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80127d6:	b25b      	sxtb	r3, r3
 80127d8:	43db      	mvns	r3, r3
 80127da:	b25b      	sxtb	r3, r3
 80127dc:	4313      	orrs	r3, r2
 80127de:	b25b      	sxtb	r3, r3
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
	broadcastIP[2] = EthernetInfo.ip[2] | ( ~ EthernetInfo.sn[2]);
 80127e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80127ea:	b25a      	sxtb	r2, r3
 80127ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80127f0:	b25b      	sxtb	r3, r3
 80127f2:	43db      	mvns	r3, r3
 80127f4:	b25b      	sxtb	r3, r3
 80127f6:	4313      	orrs	r3, r2
 80127f8:	b25b      	sxtb	r3, r3
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	broadcastIP[3] = EthernetInfo.ip[3] | ( ~ EthernetInfo.sn[3]);
 8012800:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 8012804:	b25a      	sxtb	r2, r3
 8012806:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 801280a:	b25b      	sxtb	r3, r3
 801280c:	43db      	mvns	r3, r3
 801280e:	b25b      	sxtb	r3, r3
 8012810:	4313      	orrs	r3, r2
 8012812:	b25b      	sxtb	r3, r3
 8012814:	b2db      	uxtb	r3, r3
 8012816:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	set_broadcast_message_eth_info(&EthernetInfo);
 801281a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801281e:	4618      	mov	r0, r3
 8012820:	f000 fb0a 	bl	8012e38 <set_broadcast_message_eth_info>
	string_len = get_broadcast_message_payload((char *)buffer, buffer_len);
 8012824:	f107 0308 	add.w	r3, r7, #8
 8012828:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801282c:	4618      	mov	r0, r3
 801282e:	f000 fb13 	bl	8012e58 <get_broadcast_message_payload>
 8012832:	4603      	mov	r3, r0
 8012834:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
	if (string_len < 0) continue ;
 8012838:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	@ 0x12e
 801283c:	2b00      	cmp	r3, #0
 801283e:	db1f      	blt.n	8012880 <vSendBroadcast+0x110>

	SocketMutexTake();
 8012840:	f7fe fc74 	bl	801112c <SocketMutexTake>
	ServiceSockMutexTake();
 8012844:	f7fe fc8c 	bl	8011160 <ServiceSockMutexTake>
	socket(SERVICE_SOCKET, Sn_MR_UDP, 5000, 0x00);
 8012848:	2300      	movs	r3, #0
 801284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801284e:	2102      	movs	r1, #2
 8012850:	2004      	movs	r0, #4
 8012852:	f006 fb71 	bl	8018f38 <socket>
	sendto(SERVICE_SOCKET, (uint8_t *)buffer, string_len, (uint8_t *)broadcastIP, 5000);
 8012856:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 801285a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801285e:	f107 0108 	add.w	r1, r7, #8
 8012862:	f241 3088 	movw	r0, #5000	@ 0x1388
 8012866:	9000      	str	r0, [sp, #0]
 8012868:	2004      	movs	r0, #4
 801286a:	f007 f83f 	bl	80198ec <sendto>

	ServiceSockMutexRelease();
 801286e:	f7fe fc85 	bl	801117c <ServiceSockMutexRelease>
	SocketMutexRelease();
 8012872:	f7fe fc69 	bl	8011148 <SocketMutexRelease>
    osDelay(delay5s);
 8012876:	f241 3088 	movw	r0, #5000	@ 0x1388
 801287a:	f00d fdad 	bl	80203d8 <osDelay>
 801287e:	e77f      	b.n	8012780 <vSendBroadcast+0x10>
	if (string_len < 0) continue ;
 8012880:	bf00      	nop
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8012882:	e77d      	b.n	8012780 <vSendBroadcast+0x10>
 8012884:	2000044c 	.word	0x2000044c

08012888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4a04      	ldr	r2, [pc, #16]	@ (80128a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d101      	bne.n	801289e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801289a:	f002 ffe5 	bl	8015868 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801289e:	bf00      	nop
 80128a0:	3708      	adds	r7, #8
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	40010000 	.word	0x40010000

080128ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80128ac:	b480      	push	{r7}
 80128ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80128b0:	b672      	cpsid	i
}
 80128b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80128b4:	bf00      	nop
 80128b6:	e7fd      	b.n	80128b4 <Error_Handler+0x8>

080128b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80128be:	2300      	movs	r3, #0
 80128c0:	607b      	str	r3, [r7, #4]
 80128c2:	4b12      	ldr	r3, [pc, #72]	@ (801290c <HAL_MspInit+0x54>)
 80128c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128c6:	4a11      	ldr	r2, [pc, #68]	@ (801290c <HAL_MspInit+0x54>)
 80128c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80128cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80128ce:	4b0f      	ldr	r3, [pc, #60]	@ (801290c <HAL_MspInit+0x54>)
 80128d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80128d6:	607b      	str	r3, [r7, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80128da:	2300      	movs	r3, #0
 80128dc:	603b      	str	r3, [r7, #0]
 80128de:	4b0b      	ldr	r3, [pc, #44]	@ (801290c <HAL_MspInit+0x54>)
 80128e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80128e2:	4a0a      	ldr	r2, [pc, #40]	@ (801290c <HAL_MspInit+0x54>)
 80128e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80128e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80128ea:	4b08      	ldr	r3, [pc, #32]	@ (801290c <HAL_MspInit+0x54>)
 80128ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80128ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80128f2:	603b      	str	r3, [r7, #0]
 80128f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80128f6:	2200      	movs	r2, #0
 80128f8:	210f      	movs	r1, #15
 80128fa:	f06f 0001 	mvn.w	r0, #1
 80128fe:	f003 f8af 	bl	8015a60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012902:	bf00      	nop
 8012904:	3708      	adds	r7, #8
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	40023800 	.word	0x40023800

08012910 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012910:	b480      	push	{r7}
 8012912:	b085      	sub	sp, #20
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4a0b      	ldr	r2, [pc, #44]	@ (801294c <HAL_CRC_MspInit+0x3c>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d10d      	bne.n	801293e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8012922:	2300      	movs	r3, #0
 8012924:	60fb      	str	r3, [r7, #12]
 8012926:	4b0a      	ldr	r3, [pc, #40]	@ (8012950 <HAL_CRC_MspInit+0x40>)
 8012928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801292a:	4a09      	ldr	r2, [pc, #36]	@ (8012950 <HAL_CRC_MspInit+0x40>)
 801292c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8012930:	6313      	str	r3, [r2, #48]	@ 0x30
 8012932:	4b07      	ldr	r3, [pc, #28]	@ (8012950 <HAL_CRC_MspInit+0x40>)
 8012934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012936:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801293e:	bf00      	nop
 8012940:	3714      	adds	r7, #20
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop
 801294c:	40023000 	.word	0x40023000
 8012950:	40023800 	.word	0x40023800

08012954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b08c      	sub	sp, #48	@ 0x30
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801295c:	f107 031c 	add.w	r3, r7, #28
 8012960:	2200      	movs	r2, #0
 8012962:	601a      	str	r2, [r3, #0]
 8012964:	605a      	str	r2, [r3, #4]
 8012966:	609a      	str	r2, [r3, #8]
 8012968:	60da      	str	r2, [r3, #12]
 801296a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a32      	ldr	r2, [pc, #200]	@ (8012a3c <HAL_SPI_MspInit+0xe8>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d12c      	bne.n	80129d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012976:	2300      	movs	r3, #0
 8012978:	61bb      	str	r3, [r7, #24]
 801297a:	4b31      	ldr	r3, [pc, #196]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 801297c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801297e:	4a30      	ldr	r2, [pc, #192]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 8012980:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8012984:	6453      	str	r3, [r2, #68]	@ 0x44
 8012986:	4b2e      	ldr	r3, [pc, #184]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 8012988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801298a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801298e:	61bb      	str	r3, [r7, #24]
 8012990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012992:	2300      	movs	r3, #0
 8012994:	617b      	str	r3, [r7, #20]
 8012996:	4b2a      	ldr	r3, [pc, #168]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 8012998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801299a:	4a29      	ldr	r2, [pc, #164]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 801299c:	f043 0301 	orr.w	r3, r3, #1
 80129a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80129a2:	4b27      	ldr	r3, [pc, #156]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 80129a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129a6:	f003 0301 	and.w	r3, r3, #1
 80129aa:	617b      	str	r3, [r7, #20]
 80129ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80129ae:	23e0      	movs	r3, #224	@ 0xe0
 80129b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129b2:	2302      	movs	r3, #2
 80129b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129b6:	2300      	movs	r3, #0
 80129b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129ba:	2303      	movs	r3, #3
 80129bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80129be:	2305      	movs	r3, #5
 80129c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129c2:	f107 031c 	add.w	r3, r7, #28
 80129c6:	4619      	mov	r1, r3
 80129c8:	481e      	ldr	r0, [pc, #120]	@ (8012a44 <HAL_SPI_MspInit+0xf0>)
 80129ca:	f003 f921 	bl	8015c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80129ce:	e030      	b.n	8012a32 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a1c      	ldr	r2, [pc, #112]	@ (8012a48 <HAL_SPI_MspInit+0xf4>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d12b      	bne.n	8012a32 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80129da:	2300      	movs	r3, #0
 80129dc:	613b      	str	r3, [r7, #16]
 80129de:	4b18      	ldr	r3, [pc, #96]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 80129e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129e2:	4a17      	ldr	r2, [pc, #92]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 80129e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80129e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80129ea:	4b15      	ldr	r3, [pc, #84]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 80129ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80129ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80129f2:	613b      	str	r3, [r7, #16]
 80129f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80129f6:	2300      	movs	r3, #0
 80129f8:	60fb      	str	r3, [r7, #12]
 80129fa:	4b11      	ldr	r3, [pc, #68]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 80129fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80129fe:	4a10      	ldr	r2, [pc, #64]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 8012a00:	f043 0302 	orr.w	r3, r3, #2
 8012a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8012a06:	4b0e      	ldr	r3, [pc, #56]	@ (8012a40 <HAL_SPI_MspInit+0xec>)
 8012a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a0a:	f003 0302 	and.w	r3, r3, #2
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012a12:	2338      	movs	r3, #56	@ 0x38
 8012a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a16:	2302      	movs	r3, #2
 8012a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a1e:	2303      	movs	r3, #3
 8012a20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012a22:	2306      	movs	r3, #6
 8012a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a26:	f107 031c 	add.w	r3, r7, #28
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4807      	ldr	r0, [pc, #28]	@ (8012a4c <HAL_SPI_MspInit+0xf8>)
 8012a2e:	f003 f8ef 	bl	8015c10 <HAL_GPIO_Init>
}
 8012a32:	bf00      	nop
 8012a34:	3730      	adds	r7, #48	@ 0x30
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	40013000 	.word	0x40013000
 8012a40:	40023800 	.word	0x40023800
 8012a44:	40020000 	.word	0x40020000
 8012a48:	40003c00 	.word	0x40003c00
 8012a4c:	40020400 	.word	0x40020400

08012a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08a      	sub	sp, #40	@ 0x28
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a58:	f107 0314 	add.w	r3, r7, #20
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	601a      	str	r2, [r3, #0]
 8012a60:	605a      	str	r2, [r3, #4]
 8012a62:	609a      	str	r2, [r3, #8]
 8012a64:	60da      	str	r2, [r3, #12]
 8012a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8012ae4 <HAL_UART_MspInit+0x94>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d133      	bne.n	8012ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8012a72:	2300      	movs	r3, #0
 8012a74:	613b      	str	r3, [r7, #16]
 8012a76:	4b1c      	ldr	r3, [pc, #112]	@ (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8012a82:	4b19      	ldr	r3, [pc, #100]	@ (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012a8a:	613b      	str	r3, [r7, #16]
 8012a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a8e:	2300      	movs	r3, #0
 8012a90:	60fb      	str	r3, [r7, #12]
 8012a92:	4b15      	ldr	r3, [pc, #84]	@ (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a96:	4a14      	ldr	r2, [pc, #80]	@ (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a98:	f043 0301 	orr.w	r3, r3, #1
 8012a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8012a9e:	4b12      	ldr	r3, [pc, #72]	@ (8012ae8 <HAL_UART_MspInit+0x98>)
 8012aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012aa2:	f003 0301 	and.w	r3, r3, #1
 8012aa6:	60fb      	str	r3, [r7, #12]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012aaa:	230c      	movs	r3, #12
 8012aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012aae:	2302      	movs	r3, #2
 8012ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012aba:	2307      	movs	r3, #7
 8012abc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	4809      	ldr	r0, [pc, #36]	@ (8012aec <HAL_UART_MspInit+0x9c>)
 8012ac6:	f003 f8a3 	bl	8015c10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012aca:	2200      	movs	r2, #0
 8012acc:	2105      	movs	r1, #5
 8012ace:	2026      	movs	r0, #38	@ 0x26
 8012ad0:	f002 ffc6 	bl	8015a60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012ad4:	2026      	movs	r0, #38	@ 0x26
 8012ad6:	f002 ffdf 	bl	8015a98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012ada:	bf00      	nop
 8012adc:	3728      	adds	r7, #40	@ 0x28
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	40004400 	.word	0x40004400
 8012ae8:	40023800 	.word	0x40023800
 8012aec:	40020000 	.word	0x40020000

08012af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08c      	sub	sp, #48	@ 0x30
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8012af8:	2300      	movs	r3, #0
 8012afa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8012afc:	2300      	movs	r3, #0
 8012afe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012b00:	2300      	movs	r3, #0
 8012b02:	60bb      	str	r3, [r7, #8]
 8012b04:	4b2e      	ldr	r3, [pc, #184]	@ (8012bc0 <HAL_InitTick+0xd0>)
 8012b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b08:	4a2d      	ldr	r2, [pc, #180]	@ (8012bc0 <HAL_InitTick+0xd0>)
 8012b0a:	f043 0301 	orr.w	r3, r3, #1
 8012b0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8012b10:	4b2b      	ldr	r3, [pc, #172]	@ (8012bc0 <HAL_InitTick+0xd0>)
 8012b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012b14:	f003 0301 	and.w	r3, r3, #1
 8012b18:	60bb      	str	r3, [r7, #8]
 8012b1a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012b1c:	f107 020c 	add.w	r2, r7, #12
 8012b20:	f107 0310 	add.w	r3, r7, #16
 8012b24:	4611      	mov	r1, r2
 8012b26:	4618      	mov	r0, r3
 8012b28:	f003 fefa 	bl	8016920 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012b2c:	f003 fee4 	bl	80168f8 <HAL_RCC_GetPCLK2Freq>
 8012b30:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b34:	4a23      	ldr	r2, [pc, #140]	@ (8012bc4 <HAL_InitTick+0xd4>)
 8012b36:	fba2 2303 	umull	r2, r3, r2, r3
 8012b3a:	0c9b      	lsrs	r3, r3, #18
 8012b3c:	3b01      	subs	r3, #1
 8012b3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012b40:	4b21      	ldr	r3, [pc, #132]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b42:	4a22      	ldr	r2, [pc, #136]	@ (8012bcc <HAL_InitTick+0xdc>)
 8012b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012b46:	4b20      	ldr	r3, [pc, #128]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8012b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8012b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012b54:	4b1c      	ldr	r3, [pc, #112]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012b60:	4b19      	ldr	r3, [pc, #100]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8012b66:	4818      	ldr	r0, [pc, #96]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b68:	f004 fce2 	bl	8017530 <HAL_TIM_Base_Init>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8012b72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d11b      	bne.n	8012bb2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8012b7a:	4813      	ldr	r0, [pc, #76]	@ (8012bc8 <HAL_InitTick+0xd8>)
 8012b7c:	f004 fd32 	bl	80175e4 <HAL_TIM_Base_Start_IT>
 8012b80:	4603      	mov	r3, r0
 8012b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8012b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d111      	bne.n	8012bb2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012b8e:	2019      	movs	r0, #25
 8012b90:	f002 ff82 	bl	8015a98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b0f      	cmp	r3, #15
 8012b98:	d808      	bhi.n	8012bac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	2019      	movs	r0, #25
 8012ba0:	f002 ff5e 	bl	8015a60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8012bd0 <HAL_InitTick+0xe0>)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6013      	str	r3, [r2, #0]
 8012baa:	e002      	b.n	8012bb2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8012bac:	2301      	movs	r3, #1
 8012bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3730      	adds	r7, #48	@ 0x30
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	40023800 	.word	0x40023800
 8012bc4:	431bde83 	.word	0x431bde83
 8012bc8:	2000049c 	.word	0x2000049c
 8012bcc:	40010000 	.word	0x40010000
 8012bd0:	200000bc 	.word	0x200000bc

08012bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012bd8:	bf00      	nop
 8012bda:	e7fd      	b.n	8012bd8 <NMI_Handler+0x4>

08012bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012be0:	bf00      	nop
 8012be2:	e7fd      	b.n	8012be0 <HardFault_Handler+0x4>

08012be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012be4:	b480      	push	{r7}
 8012be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012be8:	bf00      	nop
 8012bea:	e7fd      	b.n	8012be8 <MemManage_Handler+0x4>

08012bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012bec:	b480      	push	{r7}
 8012bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012bf0:	bf00      	nop
 8012bf2:	e7fd      	b.n	8012bf0 <BusFault_Handler+0x4>

08012bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012bf8:	bf00      	nop
 8012bfa:	e7fd      	b.n	8012bf8 <UsageFault_Handler+0x4>

08012bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012c00:	bf00      	nop
 8012c02:	46bd      	mov	sp, r7
 8012c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c08:	4770      	bx	lr
	...

08012c0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012c10:	4802      	ldr	r0, [pc, #8]	@ (8012c1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012c12:	f004 fd49 	bl	80176a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012c16:	bf00      	nop
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	2000049c 	.word	0x2000049c

08012c20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012c24:	4802      	ldr	r0, [pc, #8]	@ (8012c30 <USART2_IRQHandler+0x10>)
 8012c26:	f004 ffa5 	bl	8017b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012c2a:	bf00      	nop
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	200003d8 	.word	0x200003d8

08012c34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012c34:	b480      	push	{r7}
 8012c36:	af00      	add	r7, sp, #0
  return 1;
 8012c38:	2301      	movs	r3, #1
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c42:	4770      	bx	lr

08012c44 <_kill>:

int _kill(int pid, int sig)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
 8012c4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012c4e:	f01b f93f 	bl	802ded0 <__errno>
 8012c52:	4603      	mov	r3, r0
 8012c54:	2216      	movs	r2, #22
 8012c56:	601a      	str	r2, [r3, #0]
  return -1;
 8012c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3708      	adds	r7, #8
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}

08012c64 <_exit>:

void _exit (int status)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7ff ffe7 	bl	8012c44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012c76:	bf00      	nop
 8012c78:	e7fd      	b.n	8012c76 <_exit+0x12>

08012c7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b086      	sub	sp, #24
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	60f8      	str	r0, [r7, #12]
 8012c82:	60b9      	str	r1, [r7, #8]
 8012c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c86:	2300      	movs	r3, #0
 8012c88:	617b      	str	r3, [r7, #20]
 8012c8a:	e00a      	b.n	8012ca2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012c8c:	f3af 8000 	nop.w
 8012c90:	4601      	mov	r1, r0
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	1c5a      	adds	r2, r3, #1
 8012c96:	60ba      	str	r2, [r7, #8]
 8012c98:	b2ca      	uxtb	r2, r1
 8012c9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	617b      	str	r3, [r7, #20]
 8012ca2:	697a      	ldr	r2, [r7, #20]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	dbf0      	blt.n	8012c8c <_read+0x12>
  }

  return len;
 8012caa:	687b      	ldr	r3, [r7, #4]
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3718      	adds	r7, #24
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b086      	sub	sp, #24
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	60b9      	str	r1, [r7, #8]
 8012cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	617b      	str	r3, [r7, #20]
 8012cc4:	e009      	b.n	8012cda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	1c5a      	adds	r2, r3, #1
 8012cca:	60ba      	str	r2, [r7, #8]
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	3301      	adds	r3, #1
 8012cd8:	617b      	str	r3, [r7, #20]
 8012cda:	697a      	ldr	r2, [r7, #20]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	dbf1      	blt.n	8012cc6 <_write+0x12>
  }
  return len;
 8012ce2:	687b      	ldr	r3, [r7, #4]
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3718      	adds	r7, #24
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}

08012cec <_close>:

int _close(int file)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	370c      	adds	r7, #12
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d02:	4770      	bx	lr

08012d04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8012d14:	605a      	str	r2, [r3, #4]
  return 0;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <_isatty>:

int _isatty(int file)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012d2c:	2301      	movs	r3, #1
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	370c      	adds	r7, #12
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr

08012d3a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012d3a:	b480      	push	{r7}
 8012d3c:	b085      	sub	sp, #20
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	60f8      	str	r0, [r7, #12]
 8012d42:	60b9      	str	r1, [r7, #8]
 8012d44:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012d46:	2300      	movs	r3, #0
}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3714      	adds	r7, #20
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d52:	4770      	bx	lr

08012d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b086      	sub	sp, #24
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012d5c:	4a14      	ldr	r2, [pc, #80]	@ (8012db0 <_sbrk+0x5c>)
 8012d5e:	4b15      	ldr	r3, [pc, #84]	@ (8012db4 <_sbrk+0x60>)
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012d68:	4b13      	ldr	r3, [pc, #76]	@ (8012db8 <_sbrk+0x64>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d102      	bne.n	8012d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012d70:	4b11      	ldr	r3, [pc, #68]	@ (8012db8 <_sbrk+0x64>)
 8012d72:	4a12      	ldr	r2, [pc, #72]	@ (8012dbc <_sbrk+0x68>)
 8012d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012d76:	4b10      	ldr	r3, [pc, #64]	@ (8012db8 <_sbrk+0x64>)
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	693a      	ldr	r2, [r7, #16]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d207      	bcs.n	8012d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012d84:	f01b f8a4 	bl	802ded0 <__errno>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	220c      	movs	r2, #12
 8012d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d92:	e009      	b.n	8012da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012d94:	4b08      	ldr	r3, [pc, #32]	@ (8012db8 <_sbrk+0x64>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012d9a:	4b07      	ldr	r3, [pc, #28]	@ (8012db8 <_sbrk+0x64>)
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	4413      	add	r3, r2
 8012da2:	4a05      	ldr	r2, [pc, #20]	@ (8012db8 <_sbrk+0x64>)
 8012da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012da6:	68fb      	ldr	r3, [r7, #12]
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3718      	adds	r7, #24
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	20010000 	.word	0x20010000
 8012db4:	00000400 	.word	0x00000400
 8012db8:	200004e4 	.word	0x200004e4
 8012dbc:	2000db18 	.word	0x2000db18

08012dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012dc4:	4b06      	ldr	r3, [pc, #24]	@ (8012de0 <SystemInit+0x20>)
 8012dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012dca:	4a05      	ldr	r2, [pc, #20]	@ (8012de0 <SystemInit+0x20>)
 8012dcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012dd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012dd4:	bf00      	nop
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	e000ed00 	.word	0xe000ed00

08012de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012de4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8012e1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012de8:	f7ff ffea 	bl	8012dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012dec:	480c      	ldr	r0, [pc, #48]	@ (8012e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012dee:	490d      	ldr	r1, [pc, #52]	@ (8012e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012df0:	4a0d      	ldr	r2, [pc, #52]	@ (8012e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012df4:	e002      	b.n	8012dfc <LoopCopyDataInit>

08012df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012dfa:	3304      	adds	r3, #4

08012dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012e00:	d3f9      	bcc.n	8012df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012e02:	4a0a      	ldr	r2, [pc, #40]	@ (8012e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012e04:	4c0a      	ldr	r4, [pc, #40]	@ (8012e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012e08:	e001      	b.n	8012e0e <LoopFillZerobss>

08012e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012e0c:	3204      	adds	r2, #4

08012e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012e10:	d3fb      	bcc.n	8012e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012e12:	f01b f863 	bl	802dedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012e16:	f7fe f9d5 	bl	80111c4 <main>
  bx  lr    
 8012e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012e1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012e24:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012e28:	080351c0 	.word	0x080351c0
  ldr r2, =_sbss
 8012e2c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012e30:	2000db14 	.word	0x2000db14

08012e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012e34:	e7fe      	b.n	8012e34 <ADC_IRQHandler>
	...

08012e38 <set_broadcast_message_eth_info>:

#define mess_template	"{\"device_name\": \"%s\", \"model_name\": \"%s\", \"mac\": \"%02X:%02X:%02X:%02X:%02X:%02X\", \"ip\": \"%u.%u.%u.%u\", \"netmask\": \"%u.%u.%u.%u\", \"gw\": \"%u.%u.%u.%u\", \"dns\": \"%u.%u.%u.%u\", \"firmware\": \"%s\"}"

Ethernet_info_struct	eth_info;

void set_broadcast_message_eth_info(Ethernet_info_struct * eth){
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]

	memcpy(&eth_info, eth, sizeof(Ethernet_info_struct));
 8012e40:	2220      	movs	r2, #32
 8012e42:	6879      	ldr	r1, [r7, #4]
 8012e44:	4803      	ldr	r0, [pc, #12]	@ (8012e54 <set_broadcast_message_eth_info+0x1c>)
 8012e46:	f01b f878 	bl	802df3a <memcpy>

}
 8012e4a:	bf00      	nop
 8012e4c:	3708      	adds	r7, #8
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	200004e8 	.word	0x200004e8

08012e58 <get_broadcast_message_payload>:

int16_t get_broadcast_message_payload(char * buffer, uint16_t buff_len){
 8012e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e5a:	b0ad      	sub	sp, #180	@ 0xb4
 8012e5c:	af18      	add	r7, sp, #96	@ 0x60
 8012e5e:	6478      	str	r0, [r7, #68]	@ 0x44
 8012e60:	460b      	mov	r3, r1
 8012e62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

	uint16_t len;

	strcpy(buffer, "\0"); //TODO replace sprintf to snprintf
 8012e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012e68:	2200      	movs	r2, #0
 8012e6a:	701a      	strb	r2, [r3, #0]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e6e:	78db      	ldrb	r3, [r3, #3]
 8012e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012e72:	4b3b      	ldr	r3, [pc, #236]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e74:	791b      	ldrb	r3, [r3, #4]
 8012e76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012e78:	4b39      	ldr	r3, [pc, #228]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e7a:	795b      	ldrb	r3, [r3, #5]
 8012e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e7e:	4b38      	ldr	r3, [pc, #224]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e80:	799b      	ldrb	r3, [r3, #6]
 8012e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e84:	4b36      	ldr	r3, [pc, #216]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e86:	79db      	ldrb	r3, [r3, #7]
 8012e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e8a:	4b35      	ldr	r3, [pc, #212]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e8c:	7a1b      	ldrb	r3, [r3, #8]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e90:	4b33      	ldr	r3, [pc, #204]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e92:	7a5b      	ldrb	r3, [r3, #9]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e94:	627b      	str	r3, [r7, #36]	@ 0x24
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e96:	4b32      	ldr	r3, [pc, #200]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e98:	7a9b      	ldrb	r3, [r3, #10]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e9a:	623b      	str	r3, [r7, #32]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e9c:	4b30      	ldr	r3, [pc, #192]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012e9e:	7adb      	ldrb	r3, [r3, #11]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ea0:	61fb      	str	r3, [r7, #28]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ea4:	7b1b      	ldrb	r3, [r3, #12]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ea6:	61bb      	str	r3, [r7, #24]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012eaa:	7b5b      	ldrb	r3, [r3, #13]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eac:	617b      	str	r3, [r7, #20]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012eae:	4b2c      	ldr	r3, [pc, #176]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012eb0:	7b9b      	ldrb	r3, [r3, #14]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eb2:	613b      	str	r3, [r7, #16]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012eb6:	7bdb      	ldrb	r3, [r3, #15]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eb8:	60fb      	str	r3, [r7, #12]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012eba:	4b29      	ldr	r3, [pc, #164]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ebc:	7c1b      	ldrb	r3, [r3, #16]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ebe:	60bb      	str	r3, [r7, #8]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ec0:	4b27      	ldr	r3, [pc, #156]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ec2:	7c5b      	ldrb	r3, [r3, #17]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ec4:	607b      	str	r3, [r7, #4]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ec6:	4b26      	ldr	r3, [pc, #152]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ec8:	7c9b      	ldrb	r3, [r3, #18]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eca:	603b      	str	r3, [r7, #0]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ecc:	4b24      	ldr	r3, [pc, #144]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ece:	7cdb      	ldrb	r3, [r3, #19]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ed0:	461e      	mov	r6, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ed2:	4b23      	ldr	r3, [pc, #140]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ed4:	7d1b      	ldrb	r3, [r3, #20]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ed6:	461d      	mov	r5, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ed8:	4b21      	ldr	r3, [pc, #132]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012eda:	7d5b      	ldrb	r3, [r3, #21]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012edc:	461c      	mov	r4, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ede:	4b20      	ldr	r3, [pc, #128]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ee0:	7d9b      	ldrb	r3, [r3, #22]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ee2:	4618      	mov	r0, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012ee6:	7ddb      	ldrb	r3, [r3, #23]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ee8:	4619      	mov	r1, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012eea:	4b1d      	ldr	r3, [pc, #116]	@ (8012f60 <get_broadcast_message_payload+0x108>)
 8012eec:	7e1b      	ldrb	r3, [r3, #24]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eee:	461a      	mov	r2, r3
 8012ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8012f64 <get_broadcast_message_payload+0x10c>)
 8012ef2:	9316      	str	r3, [sp, #88]	@ 0x58
 8012ef4:	9215      	str	r2, [sp, #84]	@ 0x54
 8012ef6:	9114      	str	r1, [sp, #80]	@ 0x50
 8012ef8:	9013      	str	r0, [sp, #76]	@ 0x4c
 8012efa:	9412      	str	r4, [sp, #72]	@ 0x48
 8012efc:	9511      	str	r5, [sp, #68]	@ 0x44
 8012efe:	9610      	str	r6, [sp, #64]	@ 0x40
 8012f00:	683a      	ldr	r2, [r7, #0]
 8012f02:	920f      	str	r2, [sp, #60]	@ 0x3c
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	920e      	str	r2, [sp, #56]	@ 0x38
 8012f08:	68ba      	ldr	r2, [r7, #8]
 8012f0a:	920d      	str	r2, [sp, #52]	@ 0x34
 8012f0c:	68fa      	ldr	r2, [r7, #12]
 8012f0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8012f10:	693a      	ldr	r2, [r7, #16]
 8012f12:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012f14:	697a      	ldr	r2, [r7, #20]
 8012f16:	920a      	str	r2, [sp, #40]	@ 0x28
 8012f18:	69ba      	ldr	r2, [r7, #24]
 8012f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f1c:	69fa      	ldr	r2, [r7, #28]
 8012f1e:	9208      	str	r2, [sp, #32]
 8012f20:	6a3a      	ldr	r2, [r7, #32]
 8012f22:	9207      	str	r2, [sp, #28]
 8012f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012f26:	9206      	str	r2, [sp, #24]
 8012f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f2a:	9205      	str	r2, [sp, #20]
 8012f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012f2e:	9204      	str	r2, [sp, #16]
 8012f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f32:	9203      	str	r2, [sp, #12]
 8012f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012f36:	9202      	str	r2, [sp, #8]
 8012f38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f3a:	9201      	str	r2, [sp, #4]
 8012f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f3e:	9300      	str	r3, [sp, #0]
 8012f40:	4b09      	ldr	r3, [pc, #36]	@ (8012f68 <get_broadcast_message_payload+0x110>)
 8012f42:	4a0a      	ldr	r2, [pc, #40]	@ (8012f6c <get_broadcast_message_payload+0x114>)
 8012f44:	490a      	ldr	r1, [pc, #40]	@ (8012f70 <get_broadcast_message_payload+0x118>)
 8012f46:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012f48:	f01a fcd4 	bl	802d8f4 <siprintf>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	return len;
 8012f52:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3754      	adds	r7, #84	@ 0x54
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	200004e8 	.word	0x200004e8
 8012f64:	08032928 	.word	0x08032928
 8012f68:	08032850 	.word	0x08032850
 8012f6c:	08032860 	.word	0x08032860
 8012f70:	08032868 	.word	0x08032868

08012f74 <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	2b2f      	cmp	r3, #47	@ 0x2f
 8012f82:	d905      	bls.n	8012f90 <CharToDec+0x1c>
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	2b39      	cmp	r3, #57	@ 0x39
 8012f88:	d802      	bhi.n	8012f90 <CharToDec+0x1c>
 8012f8a:	79fb      	ldrb	r3, [r7, #7]
 8012f8c:	3b30      	subs	r3, #48	@ 0x30
 8012f8e:	e012      	b.n	8012fb6 <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012f90:	79fb      	ldrb	r3, [r7, #7]
 8012f92:	2b60      	cmp	r3, #96	@ 0x60
 8012f94:	d905      	bls.n	8012fa2 <CharToDec+0x2e>
 8012f96:	79fb      	ldrb	r3, [r7, #7]
 8012f98:	2b66      	cmp	r3, #102	@ 0x66
 8012f9a:	d802      	bhi.n	8012fa2 <CharToDec+0x2e>
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	3b57      	subs	r3, #87	@ 0x57
 8012fa0:	e009      	b.n	8012fb6 <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012fa2:	79fb      	ldrb	r3, [r7, #7]
 8012fa4:	2b40      	cmp	r3, #64	@ 0x40
 8012fa6:	d905      	bls.n	8012fb4 <CharToDec+0x40>
 8012fa8:	79fb      	ldrb	r3, [r7, #7]
 8012faa:	2b46      	cmp	r3, #70	@ 0x46
 8012fac:	d802      	bhi.n	8012fb4 <CharToDec+0x40>
 8012fae:	79fb      	ldrb	r3, [r7, #7]
 8012fb0:	3b37      	subs	r3, #55	@ 0x37
 8012fb2:	e000      	b.n	8012fb6 <CharToDec+0x42>
    return 0;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	370c      	adds	r7, #12
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr
	...

08012fc4 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	460b      	mov	r3, r1
 8012fce:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012fd0:	78fb      	ldrb	r3, [r7, #3]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d106      	bne.n	8012fe4 <http_parse_params_init+0x20>
		if (xQueue){
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d034      	beq.n	8013046 <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8013054 <http_parse_params_init+0x90>)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012fe2:	e030      	b.n	8013046 <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012fe4:	78fb      	ldrb	r3, [r7, #3]
 8012fe6:	2b01      	cmp	r3, #1
 8012fe8:	d106      	bne.n	8012ff8 <http_parse_params_init+0x34>
		if (xQueue){
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d02a      	beq.n	8013046 <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012ff0:	4a19      	ldr	r2, [pc, #100]	@ (8013058 <http_parse_params_init+0x94>)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6013      	str	r3, [r2, #0]
}
 8012ff6:	e026      	b.n	8013046 <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012ff8:	78fb      	ldrb	r3, [r7, #3]
 8012ffa:	2b02      	cmp	r3, #2
 8012ffc:	d106      	bne.n	801300c <http_parse_params_init+0x48>
		if (xQueue){
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d020      	beq.n	8013046 <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8013004:	4a15      	ldr	r2, [pc, #84]	@ (801305c <http_parse_params_init+0x98>)
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6013      	str	r3, [r2, #0]
}
 801300a:	e01c      	b.n	8013046 <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 801300c:	78fb      	ldrb	r3, [r7, #3]
 801300e:	2b03      	cmp	r3, #3
 8013010:	d106      	bne.n	8013020 <http_parse_params_init+0x5c>
		if (xQueue){
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d016      	beq.n	8013046 <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 8013018:	4a11      	ldr	r2, [pc, #68]	@ (8013060 <http_parse_params_init+0x9c>)
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6013      	str	r3, [r2, #0]
}
 801301e:	e012      	b.n	8013046 <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8013020:	78fb      	ldrb	r3, [r7, #3]
 8013022:	2b04      	cmp	r3, #4
 8013024:	d106      	bne.n	8013034 <http_parse_params_init+0x70>
		if (xQueue){
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00c      	beq.n	8013046 <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 801302c:	4a0d      	ldr	r2, [pc, #52]	@ (8013064 <http_parse_params_init+0xa0>)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6013      	str	r3, [r2, #0]
}
 8013032:	e008      	b.n	8013046 <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8013034:	78fb      	ldrb	r3, [r7, #3]
 8013036:	2b05      	cmp	r3, #5
 8013038:	d105      	bne.n	8013046 <http_parse_params_init+0x82>
		if (xQueue){
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d002      	beq.n	8013046 <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8013040:	4a09      	ldr	r2, [pc, #36]	@ (8013068 <http_parse_params_init+0xa4>)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6013      	str	r3, [r2, #0]
}
 8013046:	bf00      	nop
 8013048:	370c      	adds	r7, #12
 801304a:	46bd      	mov	sp, r7
 801304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	20000508 	.word	0x20000508
 8013058:	2000050c 	.word	0x2000050c
 801305c:	20000510 	.word	0x20000510
 8013060:	20000514 	.word	0x20000514
 8013064:	20000518 	.word	0x20000518
 8013068:	2000051c 	.word	0x2000051c

0801306c <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 801306c:	b580      	push	{r7, lr}
 801306e:	b0cc      	sub	sp, #304	@ 0x130
 8013070:	af00      	add	r7, sp, #0
 8013072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013076:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801307a:	6018      	str	r0, [r3, #0]
 801307c:	460a      	mov	r2, r1
 801307e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013082:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8013086:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8013088:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801308c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	2b04      	cmp	r3, #4
 8013094:	f200 818a 	bhi.w	80133ac <param_from_http_to_Q+0x340>
 8013098:	a201      	add	r2, pc, #4	@ (adr r2, 80130a0 <param_from_http_to_Q+0x34>)
 801309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801309e:	bf00      	nop
 80130a0:	080130b5 	.word	0x080130b5
 80130a4:	080133ad 	.word	0x080133ad
 80130a8:	08013281 	.word	0x08013281
 80130ac:	080133ad 	.word	0x080133ad
 80130b0:	08013347 	.word	0x08013347

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 80130b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80130b8:	22c6      	movs	r2, #198	@ 0xc6
 80130ba:	2100      	movs	r1, #0
 80130bc:	4618      	mov	r0, r3
 80130be:	f01a fd67 	bl	802db90 <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1") || strstr(get_http_param_value( http_resp, "mqtt"), "true")){
 80130c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80130c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80130ca:	49bc      	ldr	r1, [pc, #752]	@ (80133bc <param_from_http_to_Q+0x350>)
 80130cc:	6818      	ldr	r0, [r3, #0]
 80130ce:	f00b fd23 	bl	801eb18 <get_http_param_value>
 80130d2:	4603      	mov	r3, r0
 80130d4:	2131      	movs	r1, #49	@ 0x31
 80130d6:	4618      	mov	r0, r3
 80130d8:	f01a fd71 	bl	802dbbe <strchr>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10f      	bne.n	8013102 <param_from_http_to_Q+0x96>
 80130e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80130e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80130ea:	49b4      	ldr	r1, [pc, #720]	@ (80133bc <param_from_http_to_Q+0x350>)
 80130ec:	6818      	ldr	r0, [r3, #0]
 80130ee:	f00b fd13 	bl	801eb18 <get_http_param_value>
 80130f2:	4603      	mov	r3, r0
 80130f4:	49b2      	ldr	r1, [pc, #712]	@ (80133c0 <param_from_http_to_Q+0x354>)
 80130f6:	4618      	mov	r0, r3
 80130f8:	f01a fe24 	bl	802dd44 <strstr>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d003      	beq.n	801310a <param_from_http_to_Q+0x9e>
				MQTT_params.enable = 1;
 8013102:	2301      	movs	r3, #1
 8013104:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8013108:	e022      	b.n	8013150 <param_from_http_to_Q+0xe4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0") || strstr(get_http_param_value( http_resp, "mqtt"), "false")) {
 801310a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801310e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013112:	49aa      	ldr	r1, [pc, #680]	@ (80133bc <param_from_http_to_Q+0x350>)
 8013114:	6818      	ldr	r0, [r3, #0]
 8013116:	f00b fcff 	bl	801eb18 <get_http_param_value>
 801311a:	4603      	mov	r3, r0
 801311c:	2130      	movs	r1, #48	@ 0x30
 801311e:	4618      	mov	r0, r3
 8013120:	f01a fd4d 	bl	802dbbe <strchr>
 8013124:	4603      	mov	r3, r0
 8013126:	2b00      	cmp	r3, #0
 8013128:	d10f      	bne.n	801314a <param_from_http_to_Q+0xde>
 801312a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801312e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013132:	49a2      	ldr	r1, [pc, #648]	@ (80133bc <param_from_http_to_Q+0x350>)
 8013134:	6818      	ldr	r0, [r3, #0]
 8013136:	f00b fcef 	bl	801eb18 <get_http_param_value>
 801313a:	4603      	mov	r3, r0
 801313c:	49a1      	ldr	r1, [pc, #644]	@ (80133c4 <param_from_http_to_Q+0x358>)
 801313e:	4618      	mov	r0, r3
 8013140:	f01a fe00 	bl	802dd44 <strstr>
 8013144:	4603      	mov	r3, r0
 8013146:	2b00      	cmp	r3, #0
 8013148:	d002      	beq.n	8013150 <param_from_http_to_Q+0xe4>
				MQTT_params.enable = 0;
 801314a:	2300      	movs	r3, #0
 801314c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8013150:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013154:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013158:	499b      	ldr	r1, [pc, #620]	@ (80133c8 <param_from_http_to_Q+0x35c>)
 801315a:	6818      	ldr	r0, [r3, #0]
 801315c:	f00b fcdc 	bl	801eb18 <get_http_param_value>
 8013160:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8013164:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013168:	2b00      	cmp	r3, #0
 801316a:	d106      	bne.n	801317a <param_from_http_to_Q+0x10e>
 801316c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8013170:	f7fd f896 	bl	80102a0 <strlen>
 8013174:	4603      	mov	r3, r0
 8013176:	2b20      	cmp	r3, #32
 8013178:	d807      	bhi.n	801318a <param_from_http_to_Q+0x11e>
				strcpy(MQTT_params.login, buf);
 801317a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801317e:	3384      	adds	r3, #132	@ 0x84
 8013180:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8013184:	4618      	mov	r0, r3
 8013186:	f01a fed0 	bl	802df2a <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 801318a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801318e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013192:	498e      	ldr	r1, [pc, #568]	@ (80133cc <param_from_http_to_Q+0x360>)
 8013194:	6818      	ldr	r0, [r3, #0]
 8013196:	f00b fcbf 	bl	801eb18 <get_http_param_value>
 801319a:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 801319e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d106      	bne.n	80131b4 <param_from_http_to_Q+0x148>
 80131a6:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80131aa:	f7fd f879 	bl	80102a0 <strlen>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b20      	cmp	r3, #32
 80131b2:	d807      	bhi.n	80131c4 <param_from_http_to_Q+0x158>
				strcpy(MQTT_params.pass, buf);
 80131b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80131b8:	33a5      	adds	r3, #165	@ 0xa5
 80131ba:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80131be:	4618      	mov	r0, r3
 80131c0:	f01a feb3 	bl	802df2a <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 80131c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80131c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80131cc:	4980      	ldr	r1, [pc, #512]	@ (80133d0 <param_from_http_to_Q+0x364>)
 80131ce:	6818      	ldr	r0, [r3, #0]
 80131d0:	f00b fca2 	bl	801eb18 <get_http_param_value>
 80131d4:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 80131d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d106      	bne.n	80131ee <param_from_http_to_Q+0x182>
 80131e0:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 80131e4:	f7fd f85c 	bl	80102a0 <strlen>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80131ec:	d808      	bhi.n	8013200 <param_from_http_to_Q+0x194>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 80131ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80131f2:	3302      	adds	r3, #2
 80131f4:	227f      	movs	r2, #127	@ 0x7f
 80131f6:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80131fa:	4618      	mov	r0, r3
 80131fc:	f01a fd22 	bl	802dc44 <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8013200:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013208:	4972      	ldr	r1, [pc, #456]	@ (80133d4 <param_from_http_to_Q+0x368>)
 801320a:	6818      	ldr	r0, [r3, #0]
 801320c:	f00b fc84 	bl	801eb18 <get_http_param_value>
 8013210:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8013214:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013218:	2b00      	cmp	r3, #0
 801321a:	d106      	bne.n	801322a <param_from_http_to_Q+0x1be>
 801321c:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8013220:	f7fd f83e 	bl	80102a0 <strlen>
 8013224:	4603      	mov	r3, r0
 8013226:	2b05      	cmp	r3, #5
 8013228:	d81e      	bhi.n	8013268 <param_from_http_to_Q+0x1fc>
				sscanf(buf, "%d", &port);
 801322a:	f107 0316 	add.w	r3, r7, #22
 801322e:	461a      	mov	r2, r3
 8013230:	4969      	ldr	r1, [pc, #420]	@ (80133d8 <param_from_http_to_Q+0x36c>)
 8013232:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8013236:	f01a fb7d 	bl	802d934 <siscanf>
				if ((port > 0) && (port < 65534)){
 801323a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801323e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8013242:	881b      	ldrh	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d00f      	beq.n	8013268 <param_from_http_to_Q+0x1fc>
 8013248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801324c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8013250:	881b      	ldrh	r3, [r3, #0]
 8013252:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8013256:	4293      	cmp	r3, r2
 8013258:	d806      	bhi.n	8013268 <param_from_http_to_Q+0x1fc>
					MQTT_params.port = port;
 801325a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801325e:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
				}
			}

			MQTT_params.save = 1;
 8013268:	2301      	movs	r3, #1
 801326a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 801326e:	4b5b      	ldr	r3, [pc, #364]	@ (80133dc <param_from_http_to_Q+0x370>)
 8013270:	6818      	ldr	r0, [r3, #0]
 8013272:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8013276:	2302      	movs	r3, #2
 8013278:	2200      	movs	r2, #0
 801327a:	f00d fe0d 	bl	8020e98 <xQueueGenericSend>

			break;
 801327e:	e098      	b.n	80133b2 <param_from_http_to_Q+0x346>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8013280:	f107 031c 	add.w	r3, r7, #28
 8013284:	2202      	movs	r2, #2
 8013286:	2100      	movs	r1, #0
 8013288:	4618      	mov	r0, r3
 801328a:	f01a fc81 	bl	802db90 <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1") || strstr(get_http_param_value( http_resp, "mb_tcp"), "true")){
 801328e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013292:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013296:	4952      	ldr	r1, [pc, #328]	@ (80133e0 <param_from_http_to_Q+0x374>)
 8013298:	6818      	ldr	r0, [r3, #0]
 801329a:	f00b fc3d 	bl	801eb18 <get_http_param_value>
 801329e:	4603      	mov	r3, r0
 80132a0:	2131      	movs	r1, #49	@ 0x31
 80132a2:	4618      	mov	r0, r3
 80132a4:	f01a fc8b 	bl	802dbbe <strchr>
 80132a8:	4603      	mov	r3, r0
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d10f      	bne.n	80132ce <param_from_http_to_Q+0x262>
 80132ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80132b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80132b6:	494a      	ldr	r1, [pc, #296]	@ (80133e0 <param_from_http_to_Q+0x374>)
 80132b8:	6818      	ldr	r0, [r3, #0]
 80132ba:	f00b fc2d 	bl	801eb18 <get_http_param_value>
 80132be:	4603      	mov	r3, r0
 80132c0:	493f      	ldr	r1, [pc, #252]	@ (80133c0 <param_from_http_to_Q+0x354>)
 80132c2:	4618      	mov	r0, r3
 80132c4:	f01a fd3e 	bl	802dd44 <strstr>
 80132c8:	4603      	mov	r3, r0
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d006      	beq.n	80132dc <param_from_http_to_Q+0x270>
				ModBusTCP_parameters.enable = 1;
 80132ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80132d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80132d6:	2201      	movs	r2, #1
 80132d8:	705a      	strb	r2, [r3, #1]
 80132da:	e025      	b.n	8013328 <param_from_http_to_Q+0x2bc>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0") || strstr(get_http_param_value( http_resp, "mb_tcp"), "false")) {
 80132dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80132e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80132e4:	493e      	ldr	r1, [pc, #248]	@ (80133e0 <param_from_http_to_Q+0x374>)
 80132e6:	6818      	ldr	r0, [r3, #0]
 80132e8:	f00b fc16 	bl	801eb18 <get_http_param_value>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2130      	movs	r1, #48	@ 0x30
 80132f0:	4618      	mov	r0, r3
 80132f2:	f01a fc64 	bl	802dbbe <strchr>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d10f      	bne.n	801331c <param_from_http_to_Q+0x2b0>
 80132fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013300:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013304:	4936      	ldr	r1, [pc, #216]	@ (80133e0 <param_from_http_to_Q+0x374>)
 8013306:	6818      	ldr	r0, [r3, #0]
 8013308:	f00b fc06 	bl	801eb18 <get_http_param_value>
 801330c:	4603      	mov	r3, r0
 801330e:	492d      	ldr	r1, [pc, #180]	@ (80133c4 <param_from_http_to_Q+0x358>)
 8013310:	4618      	mov	r0, r3
 8013312:	f01a fd17 	bl	802dd44 <strstr>
 8013316:	4603      	mov	r3, r0
 8013318:	2b00      	cmp	r3, #0
 801331a:	d005      	beq.n	8013328 <param_from_http_to_Q+0x2bc>
				ModBusTCP_parameters.enable = 0;
 801331c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013320:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013324:	2200      	movs	r2, #0
 8013326:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 8013328:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801332c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8013330:	2201      	movs	r2, #1
 8013332:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 8013334:	4b2b      	ldr	r3, [pc, #172]	@ (80133e4 <param_from_http_to_Q+0x378>)
 8013336:	6818      	ldr	r0, [r3, #0]
 8013338:	f107 011c 	add.w	r1, r7, #28
 801333c:	2302      	movs	r3, #2
 801333e:	2200      	movs	r2, #0
 8013340:	f00d fdaa 	bl	8020e98 <xQueueGenericSend>
			break;
 8013344:	e035      	b.n	80133b2 <param_from_http_to_Q+0x346>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 8013346:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801334a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801334e:	4926      	ldr	r1, [pc, #152]	@ (80133e8 <param_from_http_to_Q+0x37c>)
 8013350:	6818      	ldr	r0, [r3, #0]
 8013352:	f00b fbe1 	bl	801eb18 <get_http_param_value>
 8013356:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 801335a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801335e:	2b00      	cmp	r3, #0
 8013360:	d026      	beq.n	80133b0 <param_from_http_to_Q+0x344>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 8013362:	4a22      	ldr	r2, [pc, #136]	@ (80133ec <param_from_http_to_Q+0x380>)
 8013364:	4922      	ldr	r1, [pc, #136]	@ (80133f0 <param_from_http_to_Q+0x384>)
 8013366:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 801336a:	f01a fae3 	bl	802d934 <siscanf>
				if (float_temp > 0){									//validate value
 801336e:	4b1f      	ldr	r3, [pc, #124]	@ (80133ec <param_from_http_to_Q+0x380>)
 8013370:	edd3 7a00 	vldr	s15, [r3]
 8013374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337c:	dc00      	bgt.n	8013380 <param_from_http_to_Q+0x314>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 801337e:	e017      	b.n	80133b0 <param_from_http_to_Q+0x344>
					PowShunSett.resistance = float_temp;
 8013380:	4b1a      	ldr	r3, [pc, #104]	@ (80133ec <param_from_http_to_Q+0x380>)
 8013382:	681a      	ldr	r2, [r3, #0]
 8013384:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013388:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801338c:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 801338e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013392:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8013396:	2201      	movs	r2, #1
 8013398:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 801339a:	4b16      	ldr	r3, [pc, #88]	@ (80133f4 <param_from_http_to_Q+0x388>)
 801339c:	6818      	ldr	r0, [r3, #0]
 801339e:	f107 010c 	add.w	r1, r7, #12
 80133a2:	2302      	movs	r3, #2
 80133a4:	2200      	movs	r2, #0
 80133a6:	f00d fd77 	bl	8020e98 <xQueueGenericSend>
			break;
 80133aa:	e001      	b.n	80133b0 <param_from_http_to_Q+0x344>
		default:
			break;
 80133ac:	bf00      	nop
 80133ae:	e000      	b.n	80133b2 <param_from_http_to_Q+0x346>
			break;
 80133b0:	bf00      	nop
	}
}
 80133b2:	bf00      	nop
 80133b4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	08032930 	.word	0x08032930
 80133c0:	08032938 	.word	0x08032938
 80133c4:	08032940 	.word	0x08032940
 80133c8:	08032948 	.word	0x08032948
 80133cc:	08032950 	.word	0x08032950
 80133d0:	0803295c 	.word	0x0803295c
 80133d4:	08032960 	.word	0x08032960
 80133d8:	08032968 	.word	0x08032968
 80133dc:	20000508 	.word	0x20000508
 80133e0:	0803296c 	.word	0x0803296c
 80133e4:	20000510 	.word	0x20000510
 80133e8:	08032974 	.word	0x08032974
 80133ec:	20000520 	.word	0x20000520
 80133f0:	0803297c 	.word	0x0803297c
 80133f4:	20000518 	.word	0x20000518

080133f8 <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 80133f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133fc:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8013400:	af0a      	add	r7, sp, #40	@ 0x28
 8013402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8013406:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801340a:	6018      	str	r0, [r3, #0]
 801340c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8013410:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8013414:	601a      	str	r2, [r3, #0]
 8013416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801341a:	f2a3 13e5 	subw	r3, r3, #485	@ 0x1e5
 801341e:	460a      	mov	r2, r1
 8013420:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 8013422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8013426:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801342a:	4a73      	ldr	r2, [pc, #460]	@ (80135f8 <param_from_Q_to_JSON+0x200>)
 801342c:	4618      	mov	r0, r3
 801342e:	4611      	mov	r1, r2
 8013430:	2351      	movs	r3, #81	@ 0x51
 8013432:	461a      	mov	r2, r3
 8013434:	f01a fd81 	bl	802df3a <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 8013438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801343c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8013440:	4a6e      	ldr	r2, [pc, #440]	@ (80135fc <param_from_Q_to_JSON+0x204>)
 8013442:	4618      	mov	r0, r3
 8013444:	4611      	mov	r1, r2
 8013446:	2384      	movs	r3, #132	@ 0x84
 8013448:	461a      	mov	r2, r3
 801344a:	f01a fd76 	bl	802df3a <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 801344e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8013452:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8013456:	4a6a      	ldr	r2, [pc, #424]	@ (8013600 <param_from_Q_to_JSON+0x208>)
 8013458:	461c      	mov	r4, r3
 801345a:	4615      	mov	r5, r2
 801345c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801345e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013460:	682b      	ldr	r3, [r5, #0]
 8013462:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8013464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8013468:	f2a3 13e5 	subw	r3, r3, #485	@ 0x1e5
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	2b04      	cmp	r3, #4
 8013470:	f000 8093 	beq.w	801359a <param_from_Q_to_JSON+0x1a2>
 8013474:	2b04      	cmp	r3, #4
 8013476:	f300 80b8 	bgt.w	80135ea <param_from_Q_to_JSON+0x1f2>
 801347a:	2b00      	cmp	r3, #0
 801347c:	d002      	beq.n	8013484 <param_from_Q_to_JSON+0x8c>
 801347e:	2b03      	cmp	r3, #3
 8013480:	d031      	beq.n	80134e6 <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 8013482:	e0b2      	b.n	80135ea <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8013484:	4b5f      	ldr	r3, [pc, #380]	@ (8013604 <param_from_Q_to_JSON+0x20c>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801348c:	2200      	movs	r2, #0
 801348e:	4618      	mov	r0, r3
 8013490:	f00e f894 	bl	80215bc <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8013494:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	@ 0x1ba
 8013498:	461d      	mov	r5, r3
 801349a:	f897 3139 	ldrb.w	r3, [r7, #313]	@ 0x139
 801349e:	461e      	mov	r6, r3
 80134a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80134a4:	1c9c      	adds	r4, r3, #2
 80134a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80134aa:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 80134ae:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80134b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80134b6:	f5a3 70f2 	sub.w	r0, r3, #484	@ 0x1e4
 80134ba:	9601      	str	r6, [sp, #4]
 80134bc:	9500      	str	r5, [sp, #0]
 80134be:	4623      	mov	r3, r4
 80134c0:	6800      	ldr	r0, [r0, #0]
 80134c2:	f01a fa17 	bl	802d8f4 <siprintf>
			*len = strlen(buf);
 80134c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80134ca:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80134ce:	6818      	ldr	r0, [r3, #0]
 80134d0:	f7fc fee6 	bl	80102a0 <strlen>
 80134d4:	4603      	mov	r3, r0
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80134dc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	801a      	strh	r2, [r3, #0]
			break;
 80134e4:	e082      	b.n	80135ec <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 80134e6:	4b48      	ldr	r3, [pc, #288]	@ (8013608 <param_from_Q_to_JSON+0x210>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80134ee:	2200      	movs	r2, #0
 80134f0:	4618      	mov	r0, r3
 80134f2:	f00e f863 	bl	80215bc <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 80134f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7fd f83c 	bl	8010578 <__aeabi_f2d>
 8013500:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8013504:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8013508:	4618      	mov	r0, r3
 801350a:	f7fd f835 	bl	8010578 <__aeabi_f2d>
 801350e:	4604      	mov	r4, r0
 8013510:	460d      	mov	r5, r1
 8013512:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8013516:	4618      	mov	r0, r3
 8013518:	f7fd f82e 	bl	8010578 <__aeabi_f2d>
 801351c:	4680      	mov	r8, r0
 801351e:	4689      	mov	r9, r1
 8013520:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8013524:	4618      	mov	r0, r3
 8013526:	f7fd f827 	bl	8010578 <__aeabi_f2d>
 801352a:	4682      	mov	sl, r0
 801352c:	468b      	mov	fp, r1
 801352e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013532:	4618      	mov	r0, r3
 8013534:	f7fd f820 	bl	8010578 <__aeabi_f2d>
 8013538:	e9c7 0100 	strd	r0, r1, [r7]
 801353c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013540:	4618      	mov	r0, r3
 8013542:	f7fd f819 	bl	8010578 <__aeabi_f2d>
 8013546:	4602      	mov	r2, r0
 8013548:	460b      	mov	r3, r1
 801354a:	f107 0634 	add.w	r6, r7, #52	@ 0x34
 801354e:	f507 7100 	add.w	r1, r7, #512	@ 0x200
 8013552:	f5a1 70f2 	sub.w	r0, r1, #484	@ 0x1e4
 8013556:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801355a:	ed97 7b00 	vldr	d7, [r7]
 801355e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013562:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8013566:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801356a:	e9cd 4500 	strd	r4, r5, [sp]
 801356e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013572:	4631      	mov	r1, r6
 8013574:	6800      	ldr	r0, [r0, #0]
 8013576:	f01a f9bd 	bl	802d8f4 <siprintf>
			*len = strlen(buf);
 801357a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 801357e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8013582:	6818      	ldr	r0, [r3, #0]
 8013584:	f7fc fe8c 	bl	80102a0 <strlen>
 8013588:	4603      	mov	r3, r0
 801358a:	b29a      	uxth	r2, r3
 801358c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8013590:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	801a      	strh	r2, [r3, #0]
			break;
 8013598:	e028      	b.n	80135ec <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 801359a:	4b1c      	ldr	r3, [pc, #112]	@ (801360c <param_from_Q_to_JSON+0x214>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 80135a2:	2200      	movs	r2, #0
 80135a4:	4618      	mov	r0, r3
 80135a6:	f00e f809 	bl	80215bc <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 80135aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fc ffe2 	bl	8010578 <__aeabi_f2d>
 80135b4:	4602      	mov	r2, r0
 80135b6:	460b      	mov	r3, r1
 80135b8:	f107 0120 	add.w	r1, r7, #32
 80135bc:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 80135c0:	f5a0 70f2 	sub.w	r0, r0, #484	@ 0x1e4
 80135c4:	6800      	ldr	r0, [r0, #0]
 80135c6:	f01a f995 	bl	802d8f4 <siprintf>
			*len = strlen(buf);
 80135ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80135ce:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80135d2:	6818      	ldr	r0, [r3, #0]
 80135d4:	f7fc fe64 	bl	80102a0 <strlen>
 80135d8:	4603      	mov	r3, r0
 80135da:	b29a      	uxth	r2, r3
 80135dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80135e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	801a      	strh	r2, [r3, #0]
			break;
 80135e8:	e000      	b.n	80135ec <param_from_Q_to_JSON+0x1f4>
			break;
 80135ea:	bf00      	nop
	}
}
 80135ec:	bf00      	nop
 80135ee:	f507 7701 	add.w	r7, r7, #516	@ 0x204
 80135f2:	46bd      	mov	sp, r7
 80135f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f8:	08032980 	.word	0x08032980
 80135fc:	080329d4 	.word	0x080329d4
 8013600:	08032a58 	.word	0x08032a58
 8013604:	20000508 	.word	0x20000508
 8013608:	20000514 	.word	0x20000514
 801360c:	20000518 	.word	0x20000518

08013610 <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 8013610:	b590      	push	{r4, r7, lr}
 8013612:	f5ad 7d3f 	sub.w	sp, sp, #764	@ 0x2fc
 8013616:	af02      	add	r7, sp, #8
 8013618:	f507 743c 	add.w	r4, r7, #752	@ 0x2f0
 801361c:	f5a4 7439 	sub.w	r4, r4, #740	@ 0x2e4
 8013620:	6020      	str	r0, [r4, #0]
 8013622:	f507 703c 	add.w	r0, r7, #752	@ 0x2f0
 8013626:	f5a0 703a 	sub.w	r0, r0, #744	@ 0x2e8
 801362a:	6001      	str	r1, [r0, #0]
 801362c:	f507 713c 	add.w	r1, r7, #752	@ 0x2f0
 8013630:	f5a1 713b 	sub.w	r1, r1, #748	@ 0x2ec
 8013634:	600a      	str	r2, [r1, #0]
 8013636:	f507 723c 	add.w	r2, r7, #752	@ 0x2f0
 801363a:	f5a2 723c 	sub.w	r2, r2, #752	@ 0x2f0
 801363e:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 8013640:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8013644:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 8013648:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 801364c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8013650:	49ac      	ldr	r1, [pc, #688]	@ (8013904 <write_to_file+0x2f4>)
 8013652:	6818      	ldr	r0, [r3, #0]
 8013654:	f00b fa60 	bl	801eb18 <get_http_param_value>
 8013658:	f8c7 02e0 	str.w	r0, [r7, #736]	@ 0x2e0
	if (param_value){
 801365c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d025      	beq.n	80136b0 <write_to_file+0xa0>
		strcpy(filename, base_path);
 8013664:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8013668:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 801366c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8013670:	6819      	ldr	r1, [r3, #0]
 8013672:	4610      	mov	r0, r2
 8013674:	f01a fc59 	bl	802df2a <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 8013678:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801367c:	222d      	movs	r2, #45	@ 0x2d
 801367e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 8013682:	4618      	mov	r0, r3
 8013684:	f01a fab9 	bl	802dbfa <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 8013688:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 801368c:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8013690:	499d      	ldr	r1, [pc, #628]	@ (8013908 <write_to_file+0x2f8>)
 8013692:	6818      	ldr	r0, [r3, #0]
 8013694:	f00b fa40 	bl	801eb18 <get_http_param_value>
 8013698:	f8c7 02e0 	str.w	r0, [r7, #736]	@ 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 801369c:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 80136a0:	f7fc fdfe 	bl	80102a0 <strlen>
 80136a4:	4603      	mov	r3, r0
 80136a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80136aa:	f080 8113 	bcs.w	80138d4 <write_to_file+0x2c4>
 80136ae:	e011      	b.n	80136d4 <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 80136b0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80136b4:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	4a94      	ldr	r2, [pc, #592]	@ (801390c <write_to_file+0x2fc>)
 80136bc:	6810      	ldr	r0, [r2, #0]
 80136be:	6018      	str	r0, [r3, #0]
 80136c0:	8892      	ldrh	r2, [r2, #4]
 80136c2:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80136c4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80136c8:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	2205      	movs	r2, #5
 80136d0:	801a      	strh	r2, [r3, #0]
		return;
 80136d2:	e111      	b.n	80138f8 <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 80136d4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	f000 80e9 	beq.w	80138b0 <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 80136de:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 80136e2:	f7fc fddd 	bl	80102a0 <strlen>
 80136e6:	4603      	mov	r3, r0
 80136e8:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 80136ec:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 80136f0:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80136fa:	f8d7 22e4 	ldr.w	r2, [r7, #740]	@ 0x2e4
 80136fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013702:	f017 fedf 	bl	802b4c4 <mbedtls_base64_decode>
 8013706:	f8c7 02ec 	str.w	r0, [r7, #748]	@ 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 801370a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 801370e:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8013712:	497f      	ldr	r1, [pc, #508]	@ (8013910 <write_to_file+0x300>)
 8013714:	6818      	ldr	r0, [r3, #0]
 8013716:	f00b f9ff 	bl	801eb18 <get_http_param_value>
 801371a:	f8c7 02d8 	str.w	r0, [r7, #728]	@ 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 801371e:	2300      	movs	r3, #0
 8013720:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8013724:	e030      	b.n	8013788 <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 8013726:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801372a:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801372e:	4413      	add	r3, r2
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	4618      	mov	r0, r3
 8013734:	f7ff fc1e 	bl	8012f74 <CharToDec>
 8013738:	f8c7 02cc 	str.w	r0, [r7, #716]	@ 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 801373c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8013740:	3301      	adds	r3, #1
 8013742:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 8013746:	4413      	add	r3, r2
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	4618      	mov	r0, r3
 801374c:	f7ff fc12 	bl	8012f74 <CharToDec>
 8013750:	f8c7 02c8 	str.w	r0, [r7, #712]	@ 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 8013754:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 8013758:	011b      	lsls	r3, r3, #4
 801375a:	b25a      	sxtb	r2, r3
 801375c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	@ 0x2c8
 8013760:	b25b      	sxtb	r3, r3
 8013762:	4313      	orrs	r3, r2
 8013764:	b259      	sxtb	r1, r3
 8013766:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801376a:	0fda      	lsrs	r2, r3, #31
 801376c:	4413      	add	r3, r2
 801376e:	105b      	asrs	r3, r3, #1
 8013770:	461a      	mov	r2, r3
 8013772:	b2c9      	uxtb	r1, r1
 8013774:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8013778:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 801377c:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 801377e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8013782:	3302      	adds	r3, #2
 8013784:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8013788:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801378c:	2b1f      	cmp	r3, #31
 801378e:	ddca      	ble.n	8013726 <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 8013790:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8013794:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8013798:	2200      	movs	r2, #0
 801379a:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 801379c:	f107 0310 	add.w	r3, r7, #16
 80137a0:	4618      	mov	r0, r3
 80137a2:	f017 ffab 	bl	802b6fc <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 80137a6:	f107 0310 	add.w	r3, r7, #16
 80137aa:	4618      	mov	r0, r3
 80137ac:	f017 ffc4 	bl	802b738 <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 80137b0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80137b4:	681a      	ldr	r2, [r3, #0]
 80137b6:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80137ba:	f107 0310 	add.w	r3, r7, #16
 80137be:	4618      	mov	r0, r3
 80137c0:	f018 fea4 	bl	802c50c <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 80137c4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80137c8:	f107 0310 	add.w	r3, r7, #16
 80137cc:	4611      	mov	r1, r2
 80137ce:	4618      	mov	r0, r3
 80137d0:	f018 ff11 	bl	802c5f6 <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 80137d4:	f107 0310 	add.w	r3, r7, #16
 80137d8:	4618      	mov	r0, r3
 80137da:	f017 ff9c 	bl	802b716 <mbedtls_md5_free>
		output[16] = '\0';
 80137de:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80137e2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 80137e6:	2200      	movs	r2, #0
 80137e8:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 80137ea:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 80137ee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80137f2:	2210      	movs	r2, #16
 80137f4:	4618      	mov	r0, r3
 80137f6:	f01a fa13 	bl	802dc20 <strncmp>
 80137fa:	4603      	mov	r3, r0
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d006      	beq.n	801380e <write_to_file+0x1fe>
			err = -1;
 8013800:	f04f 33ff 	mov.w	r3, #4294967295
 8013804:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
			return err;
 8013808:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801380c:	e074      	b.n	80138f8 <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 801380e:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8013812:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8013816:	493f      	ldr	r1, [pc, #252]	@ (8013914 <write_to_file+0x304>)
 8013818:	6818      	ldr	r0, [r3, #0]
 801381a:	f00b f97d 	bl	801eb18 <get_http_param_value>
 801381e:	f8c7 02d4 	str.w	r0, [r7, #724]	@ 0x2d4
		number = ATOI(step_number, 10);
 8013822:	210a      	movs	r1, #10
 8013824:	f8d7 02d4 	ldr.w	r0, [r7, #724]	@ 0x2d4
 8013828:	f00b fa28 	bl	801ec7c <ATOI>
 801382c:	4603      	mov	r3, r0
 801382e:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0

		if(number == 0){
 8013832:	f8d7 32d0 	ldr.w	r3, [r7, #720]	@ 0x2d0
 8013836:	2b00      	cmp	r3, #0
 8013838:	d10f      	bne.n	801385a <write_to_file+0x24a>
			part =0;
 801383a:	4b37      	ldr	r3, [pc, #220]	@ (8013918 <write_to_file+0x308>)
 801383c:	2200      	movs	r2, #0
 801383e:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 8013840:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 801384a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801384e:	4618      	mov	r0, r3
 8013850:	f017 fc64 	bl	802b11c <spi_fs_over_write_file>
 8013854:	f8c7 02ec 	str.w	r0, [r7, #748]	@ 0x2ec
 8013858:	e01d      	b.n	8013896 <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 801385a:	210a      	movs	r1, #10
 801385c:	f8d7 02d4 	ldr.w	r0, [r7, #724]	@ 0x2d4
 8013860:	f00b fa0c 	bl	801ec7c <ATOI>
 8013864:	4603      	mov	r3, r0
 8013866:	461a      	mov	r2, r3
 8013868:	4b2b      	ldr	r3, [pc, #172]	@ (8013918 <write_to_file+0x308>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	429a      	cmp	r2, r3
 801386e:	d006      	beq.n	801387e <write_to_file+0x26e>
				err = -1;
 8013870:	f04f 33ff 	mov.w	r3, #4294967295
 8013874:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
				return err;
 8013878:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801387c:	e03c      	b.n	80138f8 <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 801387e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8013882:	681a      	ldr	r2, [r3, #0]
 8013884:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8013888:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801388c:	4618      	mov	r0, r3
 801388e:	f017 fca1 	bl	802b1d4 <spi_fs_write_file_to_end>
 8013892:	f8c7 02ec 	str.w	r0, [r7, #748]	@ 0x2ec
		}

		part++;
 8013896:	4b20      	ldr	r3, [pc, #128]	@ (8013918 <write_to_file+0x308>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	3301      	adds	r3, #1
 801389c:	4a1e      	ldr	r2, [pc, #120]	@ (8013918 <write_to_file+0x308>)
 801389e:	6013      	str	r3, [r2, #0]

		if (err < 0){
 80138a0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	da15      	bge.n	80138d4 <write_to_file+0x2c4>
			err = 0;
 80138a8:	2300      	movs	r3, #0
 80138aa:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 80138ae:	e011      	b.n	80138d4 <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 80138b0:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80138b4:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	4a14      	ldr	r2, [pc, #80]	@ (801390c <write_to_file+0x2fc>)
 80138bc:	6810      	ldr	r0, [r2, #0]
 80138be:	6018      	str	r0, [r3, #0]
 80138c0:	8892      	ldrh	r2, [r2, #4]
 80138c2:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80138c4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80138c8:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	2205      	movs	r2, #5
 80138d0:	801a      	strh	r2, [r3, #0]
		return;
 80138d2:	e011      	b.n	80138f8 <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 80138d4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80138d8:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	4a0f      	ldr	r2, [pc, #60]	@ (801391c <write_to_file+0x30c>)
 80138e0:	8811      	ldrh	r1, [r2, #0]
 80138e2:	7892      	ldrb	r2, [r2, #2]
 80138e4:	8019      	strh	r1, [r3, #0]
 80138e6:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 80138e8:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80138ec:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	2202      	movs	r2, #2
 80138f4:	801a      	strh	r2, [r3, #0]
}
 80138f6:	e7ff      	b.n	80138f8 <write_to_file+0x2e8>
 80138f8:	4618      	mov	r0, r3
 80138fa:	f507 773d 	add.w	r7, r7, #756	@ 0x2f4
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd90      	pop	{r4, r7, pc}
 8013902:	bf00      	nop
 8013904:	08032a6c 	.word	0x08032a6c
 8013908:	08032a80 	.word	0x08032a80
 801390c:	08032a78 	.word	0x08032a78
 8013910:	08032a88 	.word	0x08032a88
 8013914:	08032a90 	.word	0x08032a90
 8013918:	20000524 	.word	0x20000524
 801391c:	08032a98 	.word	0x08032a98

08013920 <web_mkdir>:

int8_t web_mkdir(char * buf, char * base_path){
 8013920:	b580      	push	{r7, lr}
 8013922:	b092      	sub	sp, #72	@ 0x48
 8013924:	af02      	add	r7, sp, #8
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6039      	str	r1, [r7, #0]

	char * dirname;
	char tmp[MAX_CONTENT_NAME_LEN];

	dirname = get_http_param_value((char *)buf, "dirname");
 801392a:	4912      	ldr	r1, [pc, #72]	@ (8013974 <web_mkdir+0x54>)
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f00b f8f3 	bl	801eb18 <get_http_param_value>
 8013932:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (dirname != 0 || (strlen(dirname) < MAX_CONTENT_NAME_LEN - 5)) //TODO add dirname validation
 8013934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013936:	2b00      	cmp	r3, #0
 8013938:	d105      	bne.n	8013946 <web_mkdir+0x26>
 801393a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801393c:	f7fc fcb0 	bl	80102a0 <strlen>
 8013940:	4603      	mov	r3, r0
 8013942:	2b2c      	cmp	r3, #44	@ 0x2c
 8013944:	d810      	bhi.n	8013968 <web_mkdir+0x48>
		{
			snprintf(tmp, sizeof(tmp), "%s%s", base_path, dirname);
 8013946:	f107 0008 	add.w	r0, r7, #8
 801394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801394c:	9300      	str	r3, [sp, #0]
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	4a09      	ldr	r2, [pc, #36]	@ (8013978 <web_mkdir+0x58>)
 8013952:	2132      	movs	r1, #50	@ 0x32
 8013954:	f019 ff9a 	bl	802d88c <sniprintf>
			return (spi_fs_mkdir(tmp));
 8013958:	f107 0308 	add.w	r3, r7, #8
 801395c:	4618      	mov	r0, r3
 801395e:	f017 fc91 	bl	802b284 <spi_fs_mkdir>
 8013962:	4603      	mov	r3, r0
 8013964:	b25b      	sxtb	r3, r3
 8013966:	e001      	b.n	801396c <web_mkdir+0x4c>
		}
	return -1;
 8013968:	f04f 33ff 	mov.w	r3, #4294967295
}
 801396c:	4618      	mov	r0, r3
 801396e:	3740      	adds	r7, #64	@ 0x40
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}
 8013974:	08032a9c 	.word	0x08032a9c
 8013978:	08032aa4 	.word	0x08032aa4

0801397c <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 801397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013980:	f5ad 7d33 	sub.w	sp, sp, #716	@ 0x2cc
 8013984:	af16      	add	r7, sp, #88	@ 0x58
 8013986:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 801398a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 801398e:	6018      	str	r0, [r3, #0]
 8013990:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8013994:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8013998:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 801399a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 801399e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 80139a2:	4a5d      	ldr	r2, [pc, #372]	@ (8013b18 <read_all_parameters+0x19c>)
 80139a4:	4618      	mov	r0, r3
 80139a6:	4611      	mov	r1, r2
 80139a8:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 80139ac:	461a      	mov	r2, r3
 80139ae:	f01a fac4 	bl	802df3a <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 80139b2:	4b5a      	ldr	r3, [pc, #360]	@ (8013b1c <read_all_parameters+0x1a0>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	f507 7113 	add.w	r1, r7, #588	@ 0x24c
 80139ba:	2200      	movs	r2, #0
 80139bc:	4618      	mov	r0, r3
 80139be:	f00d fdfd 	bl	80215bc <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 80139c2:	4b57      	ldr	r3, [pc, #348]	@ (8013b20 <read_all_parameters+0x1a4>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 80139ca:	2200      	movs	r2, #0
 80139cc:	4618      	mov	r0, r3
 80139ce:	f00d fdf5 	bl	80215bc <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 80139d2:	4b54      	ldr	r3, [pc, #336]	@ (8013b24 <read_all_parameters+0x1a8>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f507 71be 	add.w	r1, r7, #380	@ 0x17c
 80139da:	2200      	movs	r2, #0
 80139dc:	4618      	mov	r0, r3
 80139de:	f00d fded 	bl	80215bc <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 80139e2:	4b51      	ldr	r3, [pc, #324]	@ (8013b28 <read_all_parameters+0x1ac>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	f507 71bc 	add.w	r1, r7, #376	@ 0x178
 80139ea:	2200      	movs	r2, #0
 80139ec:	4618      	mov	r0, r3
 80139ee:	f00d fde5 	bl	80215bc <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 80139f2:	4b4e      	ldr	r3, [pc, #312]	@ (8013b2c <read_all_parameters+0x1b0>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f507 71ba 	add.w	r1, r7, #372	@ 0x174
 80139fa:	2200      	movs	r2, #0
 80139fc:	4618      	mov	r0, r3
 80139fe:	f00d fddd 	bl	80215bc <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 8013a02:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fc fdb6 	bl	8010578 <__aeabi_f2d>
 8013a0c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8013a10:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7fc fdaf 	bl	8010578 <__aeabi_f2d>
 8013a1a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8013a1e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7fc fda8 	bl	8010578 <__aeabi_f2d>
 8013a28:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8013a2c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fc fda1 	bl	8010578 <__aeabi_f2d>
 8013a36:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8013a3a:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7fc fd9a 	bl	8010578 <__aeabi_f2d>
 8013a44:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8013a48:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fc fd93 	bl	8010578 <__aeabi_f2d>
 8013a52:	4682      	mov	sl, r0
 8013a54:	468b      	mov	fp, r1
 8013a56:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7fc fd8c 	bl	8010578 <__aeabi_f2d>
 8013a60:	4680      	mov	r8, r0
 8013a62:	4689      	mov	r9, r1
 8013a64:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 8013a68:	60fb      	str	r3, [r7, #12]
 8013a6a:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 8013a6e:	60bb      	str	r3, [r7, #8]
 8013a70:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	@ 0x1fe
 8013a74:	607b      	str	r3, [r7, #4]
 8013a76:	f8d7 4264 	ldr.w	r4, [r7, #612]	@ 0x264
 8013a7a:	f8d7 0268 	ldr.w	r0, [r7, #616]	@ 0x268
 8013a7e:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8013a82:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8013a86:	f107 0644 	add.w	r6, r7, #68	@ 0x44
 8013a8a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8013a8e:	f5a3 750d 	sub.w	r5, r3, #564	@ 0x234
 8013a92:	9214      	str	r2, [sp, #80]	@ 0x50
 8013a94:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013a96:	9012      	str	r0, [sp, #72]	@ 0x48
 8013a98:	9411      	str	r4, [sp, #68]	@ 0x44
 8013a9a:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8013a9e:	3302      	adds	r3, #2
 8013aa0:	9310      	str	r3, [sp, #64]	@ 0x40
 8013aa2:	6879      	ldr	r1, [r7, #4]
 8013aa4:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013aa6:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8013aaa:	3384      	adds	r3, #132	@ 0x84
 8013aac:	930e      	str	r3, [sp, #56]	@ 0x38
 8013aae:	68b9      	ldr	r1, [r7, #8]
 8013ab0:	910d      	str	r1, [sp, #52]	@ 0x34
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ab6:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8013aba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013abe:	ed97 7b04 	vldr	d7, [r7, #16]
 8013ac2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ac6:	ed97 7b06 	vldr	d7, [r7, #24]
 8013aca:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ace:	ed97 7b08 	vldr	d7, [r7, #32]
 8013ad2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ad6:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8013ada:	ed8d 7b00 	vstr	d7, [sp]
 8013ade:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8013ae2:	4631      	mov	r1, r6
 8013ae4:	6828      	ldr	r0, [r5, #0]
 8013ae6:	f019 ff05 	bl	802d8f4 <siprintf>
	*len = strlen(buf);
 8013aea:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8013aee:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8013af2:	6818      	ldr	r0, [r3, #0]
 8013af4:	f7fc fbd4 	bl	80102a0 <strlen>
 8013af8:	4603      	mov	r3, r0
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8013b00:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	801a      	strh	r2, [r3, #0]

	return 0 ;
 8013b08:	2300      	movs	r3, #0
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f507 771d 	add.w	r7, r7, #628	@ 0x274
 8013b10:	46bd      	mov	sp, r7
 8013b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b16:	bf00      	nop
 8013b18:	08032aac 	.word	0x08032aac
 8013b1c:	20000514 	.word	0x20000514
 8013b20:	20000518 	.word	0x20000518
 8013b24:	20000508 	.word	0x20000508
 8013b28:	20000510 	.word	0x20000510
 8013b2c:	2000051c 	.word	0x2000051c

08013b30 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 8013b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b32:	b0db      	sub	sp, #364	@ 0x16c
 8013b34:	af0e      	add	r7, sp, #56	@ 0x38
 8013b36:	6378      	str	r0, [r7, #52]	@ 0x34
 8013b38:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8013b3c:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8013b40:	6001      	str	r1, [r0, #0]
 8013b42:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 8013b46:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 8013b4a:	600a      	str	r2, [r1, #0]
 8013b4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8013b50:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8013b54:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 8013b56:	2300      	movs	r3, #0
 8013b58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 8013b5c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8013b60:	4618      	mov	r0, r3
 8013b62:	f017 fdcb 	bl	802b6fc <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 8013b66:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f017 fde4 	bl	802b738 <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013b70:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013b74:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013b76:	4618      	mov	r0, r3
 8013b78:	f01a f9d7 	bl	802df2a <strcpy>
	strncat(path, filename, 20);
 8013b7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013b80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8013b84:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8013b88:	2214      	movs	r2, #20
 8013b8a:	6819      	ldr	r1, [r3, #0]
 8013b8c:	f01a f835 	bl	802dbfa <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013b90:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8013b94:	2241      	movs	r2, #65	@ 0x41
 8013b96:	2100      	movs	r1, #0
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f019 fff9 	bl	802db90 <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 8013b9e:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8013ba2:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8013ba6:	2340      	movs	r3, #64	@ 0x40
 8013ba8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8013bac:	f017 fa72 	bl	802b094 <spi_fs_read_file_offset>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 8013bb6:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8013bba:	2b40      	cmp	r3, #64	@ 0x40
 8013bbc:	d110      	bne.n	8013be0 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013bbe:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8013bc2:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8013bc6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f018 fc9e 	bl	802c50c <mbedtls_md5_update_ret>
				offset += readed_len;
 8013bd0:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8013bd4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8013bd8:	4413      	add	r3, r2
 8013bda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013bde:	e019      	b.n	8013c14 <calculate_md5_file+0xe4>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013be0:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8013be4:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8013be8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8013bec:	4618      	mov	r0, r3
 8013bee:	f018 fc8d 	bl	802c50c <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 8013bf2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8013bf6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8013bfa:	4611      	mov	r1, r2
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f018 fcfa 	bl	802c5f6 <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 8013c02:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8013c06:	4618      	mov	r0, r3
 8013c08:	f017 fd85 	bl	802b716 <mbedtls_md5_free>
				md5sum[16] = '\0';
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
				break;
 8013c12:	e002      	b.n	8013c1a <calculate_md5_file+0xea>
			}
		}
		osThreadYield();
 8013c14:	f00c fbc0 	bl	8020398 <osThreadYield>
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013c18:	e7ba      	b.n	8013b90 <calculate_md5_file+0x60>
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 8013c1a:	f897 3118 	ldrb.w	r3, [r7, #280]	@ 0x118
 8013c1e:	469c      	mov	ip, r3
 8013c20:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8013c24:	469e      	mov	lr, r3
 8013c26:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 8013c2a:	461d      	mov	r5, r3
 8013c2c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8013c30:	461e      	mov	r6, r3
 8013c32:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8013c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8013c38:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8013c3c:	623b      	str	r3, [r7, #32]
 8013c3e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8013c42:	61fb      	str	r3, [r7, #28]
 8013c44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8013c48:	61bb      	str	r3, [r7, #24]
 8013c4a:	f897 3120 	ldrb.w	r3, [r7, #288]	@ 0x120
 8013c4e:	617b      	str	r3, [r7, #20]
 8013c50:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8013c54:	613b      	str	r3, [r7, #16]
 8013c56:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 8013c5a:	60fb      	str	r3, [r7, #12]
 8013c5c:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8013c60:	60bb      	str	r3, [r7, #8]
 8013c62:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8013c66:	607b      	str	r3, [r7, #4]
 8013c68:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8013c6c:	461c      	mov	r4, r3
 8013c6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8013c72:	4619      	mov	r1, r3
 8013c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8013c78:	461a      	mov	r2, r3
 8013c7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013c7e:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8013c82:	920d      	str	r2, [sp, #52]	@ 0x34
 8013c84:	910c      	str	r1, [sp, #48]	@ 0x30
 8013c86:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	920a      	str	r2, [sp, #40]	@ 0x28
 8013c8c:	68ba      	ldr	r2, [r7, #8]
 8013c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	9208      	str	r2, [sp, #32]
 8013c94:	693a      	ldr	r2, [r7, #16]
 8013c96:	9207      	str	r2, [sp, #28]
 8013c98:	697a      	ldr	r2, [r7, #20]
 8013c9a:	9206      	str	r2, [sp, #24]
 8013c9c:	69ba      	ldr	r2, [r7, #24]
 8013c9e:	9205      	str	r2, [sp, #20]
 8013ca0:	69fa      	ldr	r2, [r7, #28]
 8013ca2:	9204      	str	r2, [sp, #16]
 8013ca4:	6a3a      	ldr	r2, [r7, #32]
 8013ca6:	9203      	str	r2, [sp, #12]
 8013ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013caa:	9302      	str	r3, [sp, #8]
 8013cac:	9601      	str	r6, [sp, #4]
 8013cae:	9500      	str	r5, [sp, #0]
 8013cb0:	4673      	mov	r3, lr
 8013cb2:	4662      	mov	r2, ip
 8013cb4:	4908      	ldr	r1, [pc, #32]	@ (8013cd8 <calculate_md5_file+0x1a8>)
 8013cb6:	6800      	ldr	r0, [r0, #0]
 8013cb8:	f019 fe1c 	bl	802d8f4 <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 8013cbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8013cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2220      	movs	r2, #32
 8013cc8:	801a      	strh	r2, [r3, #0]
	return 0;
 8013cca:	2300      	movs	r3, #0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	08032bdc 	.word	0x08032bdc

08013cdc <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b092      	sub	sp, #72	@ 0x48
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 8013ce6:	f107 0308 	add.w	r3, r7, #8
 8013cea:	4a18      	ldr	r2, [pc, #96]	@ (8013d4c <activate_firmware+0x70>)
 8013cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8013cee:	c303      	stmia	r3!, {r0, r1}
 8013cf0:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 8013cf2:	f107 0308 	add.w	r3, r7, #8
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fc fad2 	bl	80102a0 <strlen>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	461a      	mov	r2, r3
 8013d00:	f107 0308 	add.w	r3, r7, #8
 8013d04:	4413      	add	r3, r2
 8013d06:	4912      	ldr	r1, [pc, #72]	@ (8013d50 <activate_firmware+0x74>)
 8013d08:	461a      	mov	r2, r3
 8013d0a:	460b      	mov	r3, r1
 8013d0c:	cb03      	ldmia	r3!, {r0, r1}
 8013d0e:	6010      	str	r0, [r2, #0]
 8013d10:	6051      	str	r1, [r2, #4]
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 8013d16:	f107 0308 	add.w	r3, r7, #8
 8013d1a:	490e      	ldr	r1, [pc, #56]	@ (8013d54 <activate_firmware+0x78>)
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f017 fbb5 	bl	802b48c <spi_fs_mv>
 8013d22:	6478      	str	r0, [r7, #68]	@ 0x44

	if(err >= 0){
 8013d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	db0a      	blt.n	8013d40 <activate_firmware+0x64>
		strcpy(buf, "OK");
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8013d58 <activate_firmware+0x7c>)
 8013d2e:	8811      	ldrh	r1, [r2, #0]
 8013d30:	7892      	ldrb	r2, [r2, #2]
 8013d32:	8019      	strh	r1, [r3, #0]
 8013d34:	709a      	strb	r2, [r3, #2]
		* len = 2;
 8013d36:	683b      	ldr	r3, [r7, #0]
 8013d38:	2202      	movs	r2, #2
 8013d3a:	801a      	strh	r2, [r3, #0]
		return 1;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	e000      	b.n	8013d42 <activate_firmware+0x66>
	}

 	return 0;
 8013d40:	2300      	movs	r3, #0
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3748      	adds	r7, #72	@ 0x48
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	08032c20 	.word	0x08032c20
 8013d50:	08032c2c 	.word	0x08032c2c
 8013d54:	08032c38 	.word	0x08032c38
 8013d58:	08032c48 	.word	0x08032c48

08013d5c <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b086      	sub	sp, #24
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	60f8      	str	r0, [r7, #12]
 8013d64:	60b9      	str	r1, [r7, #8]
 8013d66:	607a      	str	r2, [r7, #4]
 8013d68:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 8013d72:	4937      	ldr	r1, [pc, #220]	@ (8013e50 <http_post_cgi_processor+0xf4>)
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f7fc fa33 	bl	80101e0 <strcmp>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d106      	bne.n	8013d8e <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013d80:	2100      	movs	r1, #0
 8013d82:	68b8      	ldr	r0, [r7, #8]
 8013d84:	f7ff f972 	bl	801306c <param_from_http_to_Q>
		ret = HTTP_OK;
 8013d88:	2301      	movs	r3, #1
 8013d8a:	75fb      	strb	r3, [r7, #23]
 8013d8c:	e05a      	b.n	8013e44 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013d8e:	4931      	ldr	r1, [pc, #196]	@ (8013e54 <http_post_cgi_processor+0xf8>)
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f7fc fa25 	bl	80101e0 <strcmp>
 8013d96:	4603      	mov	r3, r0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d106      	bne.n	8013daa <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013d9c:	2102      	movs	r1, #2
 8013d9e:	68b8      	ldr	r0, [r7, #8]
 8013da0:	f7ff f964 	bl	801306c <param_from_http_to_Q>
		ret = HTTP_OK;
 8013da4:	2301      	movs	r3, #1
 8013da6:	75fb      	strb	r3, [r7, #23]
 8013da8:	e04c      	b.n	8013e44 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013daa:	492b      	ldr	r1, [pc, #172]	@ (8013e58 <http_post_cgi_processor+0xfc>)
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	f7fc fa17 	bl	80101e0 <strcmp>
 8013db2:	4603      	mov	r3, r0
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d10e      	bne.n	8013dd6 <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013db8:	4b28      	ldr	r3, [pc, #160]	@ (8013e5c <http_post_cgi_processor+0x100>)
 8013dba:	687a      	ldr	r2, [r7, #4]
 8013dbc:	6839      	ldr	r1, [r7, #0]
 8013dbe:	68b8      	ldr	r0, [r7, #8]
 8013dc0:	f7ff fc26 	bl	8013610 <write_to_file>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	da02      	bge.n	8013dd0 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	75fb      	strb	r3, [r7, #23]
 8013dce:	e039      	b.n	8013e44 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	75fb      	strb	r3, [r7, #23]
 8013dd4:	e036      	b.n	8013e44 <http_post_cgi_processor+0xe8>
		}
	}else if (strcmp((const char *)uri_name, "web_mkdir.cgi") == 0){
 8013dd6:	4922      	ldr	r1, [pc, #136]	@ (8013e60 <http_post_cgi_processor+0x104>)
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	f7fc fa01 	bl	80101e0 <strcmp>
 8013dde:	4603      	mov	r3, r0
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d10c      	bne.n	8013dfe <http_post_cgi_processor+0xa2>
		if( web_mkdir((char *)uri, HTTP_FS_DIR) >= 0){
 8013de4:	491d      	ldr	r1, [pc, #116]	@ (8013e5c <http_post_cgi_processor+0x100>)
 8013de6:	68b8      	ldr	r0, [r7, #8]
 8013de8:	f7ff fd9a 	bl	8013920 <web_mkdir>
 8013dec:	4603      	mov	r3, r0
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	db02      	blt.n	8013df8 <http_post_cgi_processor+0x9c>
			ret = HTTP_OK;
 8013df2:	2301      	movs	r3, #1
 8013df4:	75fb      	strb	r3, [r7, #23]
 8013df6:	e025      	b.n	8013e44 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_RESET;
 8013df8:	2302      	movs	r3, #2
 8013dfa:	75fb      	strb	r3, [r7, #23]
 8013dfc:	e022      	b.n	8013e44 <http_post_cgi_processor+0xe8>
		}

	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 8013dfe:	4919      	ldr	r1, [pc, #100]	@ (8013e64 <http_post_cgi_processor+0x108>)
 8013e00:	68f8      	ldr	r0, [r7, #12]
 8013e02:	f7fc f9ed 	bl	80101e0 <strcmp>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d106      	bne.n	8013e1a <http_post_cgi_processor+0xbe>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 8013e0c:	2104      	movs	r1, #4
 8013e0e:	68b8      	ldr	r0, [r7, #8]
 8013e10:	f7ff f92c 	bl	801306c <param_from_http_to_Q>
		ret = HTTP_OK;
 8013e14:	2301      	movs	r3, #1
 8013e16:	75fb      	strb	r3, [r7, #23]
 8013e18:	e014      	b.n	8013e44 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 8013e1a:	4913      	ldr	r1, [pc, #76]	@ (8013e68 <http_post_cgi_processor+0x10c>)
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f7fc f9df 	bl	80101e0 <strcmp>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d10d      	bne.n	8013e44 <http_post_cgi_processor+0xe8>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013e28:	4b10      	ldr	r3, [pc, #64]	@ (8013e6c <http_post_cgi_processor+0x110>)
 8013e2a:	687a      	ldr	r2, [r7, #4]
 8013e2c:	6839      	ldr	r1, [r7, #0]
 8013e2e:	68b8      	ldr	r0, [r7, #8]
 8013e30:	f7ff fbee 	bl	8013610 <write_to_file>
 8013e34:	4603      	mov	r3, r0
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	da02      	bge.n	8013e40 <http_post_cgi_processor+0xe4>
			ret = HTTP_FAILED;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	75fb      	strb	r3, [r7, #23]
 8013e3e:	e001      	b.n	8013e44 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013e40:	2301      	movs	r3, #1
 8013e42:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8013e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	3718      	adds	r7, #24
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	08032c4c 	.word	0x08032c4c
 8013e54:	08032c60 	.word	0x08032c60
 8013e58:	08032c74 	.word	0x08032c74
 8013e5c:	08032c84 	.word	0x08032c84
 8013e60:	08032c8c 	.word	0x08032c8c
 8013e64:	08032c9c 	.word	0x08032c9c
 8013e68:	08032cb4 	.word	0x08032cb4
 8013e6c:	08032c20 	.word	0x08032c20

08013e70 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b086      	sub	sp, #24
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8013e80:	494f      	ldr	r1, [pc, #316]	@ (8013fc0 <http_get_cgi_processor+0x150>)
 8013e82:	68f8      	ldr	r0, [r7, #12]
 8013e84:	f7fc f9ac 	bl	80101e0 <strcmp>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d107      	bne.n	8013e9e <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	2100      	movs	r1, #0
 8013e92:	68b8      	ldr	r0, [r7, #8]
 8013e94:	f7ff fab0 	bl	80133f8 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	75fb      	strb	r3, [r7, #23]
 8013e9c:	e08b      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013e9e:	4949      	ldr	r1, [pc, #292]	@ (8013fc4 <http_get_cgi_processor+0x154>)
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f7fc f99d 	bl	80101e0 <strcmp>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d10b      	bne.n	8013ec4 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	4946      	ldr	r1, [pc, #280]	@ (8013fc8 <http_get_cgi_processor+0x158>)
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	460b      	mov	r3, r1
 8013eb4:	881b      	ldrh	r3, [r3, #0]
 8013eb6:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013eb8:	2301      	movs	r3, #1
 8013eba:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2202      	movs	r2, #2
 8013ec0:	801a      	strh	r2, [r3, #0]
 8013ec2:	e078      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013ec4:	4941      	ldr	r1, [pc, #260]	@ (8013fcc <http_get_cgi_processor+0x15c>)
 8013ec6:	68f8      	ldr	r0, [r7, #12]
 8013ec8:	f7fc f98a 	bl	80101e0 <strcmp>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d107      	bne.n	8013ee2 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	2103      	movs	r1, #3
 8013ed6:	68b8      	ldr	r0, [r7, #8]
 8013ed8:	f7ff fa8e 	bl	80133f8 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013edc:	2301      	movs	r3, #1
 8013ede:	75fb      	strb	r3, [r7, #23]
 8013ee0:	e069      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013ee2:	493b      	ldr	r1, [pc, #236]	@ (8013fd0 <http_get_cgi_processor+0x160>)
 8013ee4:	68f8      	ldr	r0, [r7, #12]
 8013ee6:	f7fc f97b 	bl	80101e0 <strcmp>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d107      	bne.n	8013f00 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	2104      	movs	r1, #4
 8013ef4:	68b8      	ldr	r0, [r7, #8]
 8013ef6:	f7ff fa7f 	bl	80133f8 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013efa:	2301      	movs	r3, #1
 8013efc:	75fb      	strb	r3, [r7, #23]
 8013efe:	e05a      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013f00:	4934      	ldr	r1, [pc, #208]	@ (8013fd4 <http_get_cgi_processor+0x164>)
 8013f02:	68f8      	ldr	r0, [r7, #12]
 8013f04:	f7fc f96c 	bl	80101e0 <strcmp>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d106      	bne.n	8013f1c <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013f0e:	6879      	ldr	r1, [r7, #4]
 8013f10:	68b8      	ldr	r0, [r7, #8]
 8013f12:	f7ff fd33 	bl	801397c <read_all_parameters>
		ret = HTTP_OK;
 8013f16:	2301      	movs	r3, #1
 8013f18:	75fb      	strb	r3, [r7, #23]
 8013f1a:	e04c      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013f1c:	492e      	ldr	r1, [pc, #184]	@ (8013fd8 <http_get_cgi_processor+0x168>)
 8013f1e:	68f8      	ldr	r0, [r7, #12]
 8013f20:	f7fc f95e 	bl	80101e0 <strcmp>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d111      	bne.n	8013f4e <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	68ba      	ldr	r2, [r7, #8]
 8013f2e:	492b      	ldr	r1, [pc, #172]	@ (8013fdc <http_get_cgi_processor+0x16c>)
 8013f30:	482b      	ldr	r0, [pc, #172]	@ (8013fe0 <http_get_cgi_processor+0x170>)
 8013f32:	f7ff fdfd 	bl	8013b30 <calculate_md5_file>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d102      	bne.n	8013f42 <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	75fb      	strb	r3, [r7, #23]
 8013f40:	e039      	b.n	8013fb6 <http_get_cgi_processor+0x146>
		}else{
			* len = 0;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2200      	movs	r2, #0
 8013f46:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	75fb      	strb	r3, [r7, #23]
 8013f4c:	e033      	b.n	8013fb6 <http_get_cgi_processor+0x146>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013f4e:	4925      	ldr	r1, [pc, #148]	@ (8013fe4 <http_get_cgi_processor+0x174>)
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f7fc f945 	bl	80101e0 <strcmp>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d106      	bne.n	8013f6a <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013f5c:	6879      	ldr	r1, [r7, #4]
 8013f5e:	68b8      	ldr	r0, [r7, #8]
 8013f60:	f7ff febc 	bl	8013cdc <activate_firmware>
 8013f64:	4603      	mov	r3, r0
 8013f66:	75fb      	strb	r3, [r7, #23]
 8013f68:	e025      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "erace_web_interface.cgi") == 0){
 8013f6a:	491f      	ldr	r1, [pc, #124]	@ (8013fe8 <http_get_cgi_processor+0x178>)
 8013f6c:	68f8      	ldr	r0, [r7, #12]
 8013f6e:	f7fc f937 	bl	80101e0 <strcmp>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d105      	bne.n	8013f84 <http_get_cgi_processor+0x114>
		spi_fs_remove_recurcuve_in("/web");
 8013f78:	481c      	ldr	r0, [pc, #112]	@ (8013fec <http_get_cgi_processor+0x17c>)
 8013f7a:	f017 fa67 	bl	802b44c <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	75fb      	strb	r3, [r7, #23]
 8013f82:	e018      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013f84:	491a      	ldr	r1, [pc, #104]	@ (8013ff0 <http_get_cgi_processor+0x180>)
 8013f86:	68f8      	ldr	r0, [r7, #12]
 8013f88:	f7fc f92a 	bl	80101e0 <strcmp>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d105      	bne.n	8013f9e <http_get_cgi_processor+0x12e>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013f92:	4818      	ldr	r0, [pc, #96]	@ (8013ff4 <http_get_cgi_processor+0x184>)
 8013f94:	f017 f990 	bl	802b2b8 <spi_fs_remove>
		ret = HTTP_OK;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	75fb      	strb	r3, [r7, #23]
 8013f9c:	e00b      	b.n	8013fb6 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013f9e:	4916      	ldr	r1, [pc, #88]	@ (8013ff8 <http_get_cgi_processor+0x188>)
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	f7fc f91d 	bl	80101e0 <strcmp>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d104      	bne.n	8013fb6 <http_get_cgi_processor+0x146>
		spi_fs_remove_recurcuve_in("/");
 8013fac:	4813      	ldr	r0, [pc, #76]	@ (8013ffc <http_get_cgi_processor+0x18c>)
 8013fae:	f017 fa4d 	bl	802b44c <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3718      	adds	r7, #24
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}
 8013fc0:	08032cc8 	.word	0x08032cc8
 8013fc4:	08032cdc 	.word	0x08032cdc
 8013fc8:	08032ce8 	.word	0x08032ce8
 8013fcc:	08032cec 	.word	0x08032cec
 8013fd0:	08032cf8 	.word	0x08032cf8
 8013fd4:	08032d0c 	.word	0x08032d0c
 8013fd8:	08032d18 	.word	0x08032d18
 8013fdc:	08032c2c 	.word	0x08032c2c
 8013fe0:	08032c20 	.word	0x08032c20
 8013fe4:	08032d30 	.word	0x08032d30
 8013fe8:	08032d48 	.word	0x08032d48
 8013fec:	08032d60 	.word	0x08032d60
 8013ff0:	08032d68 	.word	0x08032d68
 8013ff4:	08032d7c 	.word	0x08032d7c
 8013ff8:	08032d90 	.word	0x08032d90
 8013ffc:	08032da4 	.word	0x08032da4

08014000 <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8014000:	b480      	push	{r7}
 8014002:	af00      	add	r7, sp, #0
 8014004:	bf00      	nop
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr
	...

08014010 <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d002      	beq.n	8014026 <init_mqtt_call_mutex+0x16>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	4a07      	ldr	r2, [pc, #28]	@ (8014040 <init_mqtt_call_mutex+0x30>)
 8014024:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d002      	beq.n	8014032 <init_mqtt_call_mutex+0x22>
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	4a05      	ldr	r2, [pc, #20]	@ (8014044 <init_mqtt_call_mutex+0x34>)
 8014030:	6013      	str	r3, [r2, #0]
}
 8014032:	bf00      	nop
 8014034:	370c      	adds	r7, #12
 8014036:	46bd      	mov	sp, r7
 8014038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403c:	4770      	bx	lr
 801403e:	bf00      	nop
 8014040:	2000005c 	.word	0x2000005c
 8014044:	20000060 	.word	0x20000060

08014048 <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8014048:	b5b0      	push	{r4, r5, r7, lr}
 801404a:	b088      	sub	sp, #32
 801404c:	af04      	add	r7, sp, #16
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	60b9      	str	r1, [r7, #8]
 8014052:	607a      	str	r2, [r7, #4]
 8014054:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 8014056:	4a5e      	ldr	r2, [pc, #376]	@ (80141d0 <mqtt_client_init+0x188>)
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 801405c:	4a5d      	ldr	r2, [pc, #372]	@ (80141d4 <mqtt_client_init+0x18c>)
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8014062:	4a5d      	ldr	r2, [pc, #372]	@ (80141d8 <mqtt_client_init+0x190>)
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 8014068:	4a5c      	ldr	r2, [pc, #368]	@ (80141dc <mqtt_client_init+0x194>)
 801406a:	6a3b      	ldr	r3, [r7, #32]
 801406c:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 801406e:	4a5c      	ldr	r2, [pc, #368]	@ (80141e0 <mqtt_client_init+0x198>)
 8014070:	887b      	ldrh	r3, [r7, #2]
 8014072:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8014074:	4a5b      	ldr	r2, [pc, #364]	@ (80141e4 <mqtt_client_init+0x19c>)
 8014076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014078:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 801407a:	4b55      	ldr	r3, [pc, #340]	@ (80141d0 <mqtt_client_init+0x188>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	78db      	ldrb	r3, [r3, #3]
 8014080:	461c      	mov	r4, r3
 8014082:	4b53      	ldr	r3, [pc, #332]	@ (80141d0 <mqtt_client_init+0x188>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	791b      	ldrb	r3, [r3, #4]
 8014088:	461d      	mov	r5, r3
 801408a:	4b51      	ldr	r3, [pc, #324]	@ (80141d0 <mqtt_client_init+0x188>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	795b      	ldrb	r3, [r3, #5]
 8014090:	461a      	mov	r2, r3
 8014092:	4b4f      	ldr	r3, [pc, #316]	@ (80141d0 <mqtt_client_init+0x188>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	799b      	ldrb	r3, [r3, #6]
 8014098:	4619      	mov	r1, r3
 801409a:	4b4d      	ldr	r3, [pc, #308]	@ (80141d0 <mqtt_client_init+0x188>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	79db      	ldrb	r3, [r3, #7]
 80140a0:	4618      	mov	r0, r3
 80140a2:	4b4b      	ldr	r3, [pc, #300]	@ (80141d0 <mqtt_client_init+0x188>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	7a1b      	ldrb	r3, [r3, #8]
 80140a8:	9303      	str	r3, [sp, #12]
 80140aa:	9002      	str	r0, [sp, #8]
 80140ac:	9101      	str	r1, [sp, #4]
 80140ae:	9200      	str	r2, [sp, #0]
 80140b0:	462b      	mov	r3, r5
 80140b2:	4622      	mov	r2, r4
 80140b4:	494c      	ldr	r1, [pc, #304]	@ (80141e8 <mqtt_client_init+0x1a0>)
 80140b6:	484d      	ldr	r0, [pc, #308]	@ (80141ec <mqtt_client_init+0x1a4>)
 80140b8:	f019 fc1c 	bl	802d8f4 <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 80140bc:	484b      	ldr	r0, [pc, #300]	@ (80141ec <mqtt_client_init+0x1a4>)
 80140be:	f000 fa91 	bl	80145e4 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 80140c2:	4b43      	ldr	r3, [pc, #268]	@ (80141d0 <mqtt_client_init+0x188>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	7a5b      	ldrb	r3, [r3, #9]
 80140c8:	4619      	mov	r1, r3
 80140ca:	4b41      	ldr	r3, [pc, #260]	@ (80141d0 <mqtt_client_init+0x188>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	7a9b      	ldrb	r3, [r3, #10]
 80140d0:	4618      	mov	r0, r3
 80140d2:	4b3f      	ldr	r3, [pc, #252]	@ (80141d0 <mqtt_client_init+0x188>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	7adb      	ldrb	r3, [r3, #11]
 80140d8:	461a      	mov	r2, r3
 80140da:	4b3d      	ldr	r3, [pc, #244]	@ (80141d0 <mqtt_client_init+0x188>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	7b1b      	ldrb	r3, [r3, #12]
 80140e0:	9301      	str	r3, [sp, #4]
 80140e2:	9200      	str	r2, [sp, #0]
 80140e4:	4603      	mov	r3, r0
 80140e6:	460a      	mov	r2, r1
 80140e8:	4941      	ldr	r1, [pc, #260]	@ (80141f0 <mqtt_client_init+0x1a8>)
 80140ea:	4842      	ldr	r0, [pc, #264]	@ (80141f4 <mqtt_client_init+0x1ac>)
 80140ec:	f019 fc02 	bl	802d8f4 <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 80140f0:	4840      	ldr	r0, [pc, #256]	@ (80141f4 <mqtt_client_init+0x1ac>)
 80140f2:	f000 fa99 	bl	8014628 <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 80140f6:	4b37      	ldr	r3, [pc, #220]	@ (80141d4 <mqtt_client_init+0x18c>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	3302      	adds	r3, #2
 80140fc:	4618      	mov	r0, r3
 80140fe:	f008 fdd1 	bl	801cca4 <isValidIPv4>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d00c      	beq.n	8014122 <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8014108:	4b32      	ldr	r3, [pc, #200]	@ (80141d4 <mqtt_client_init+0x18c>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	1c98      	adds	r0, r3, #2
 801410e:	4b3a      	ldr	r3, [pc, #232]	@ (80141f8 <mqtt_client_init+0x1b0>)
 8014110:	9301      	str	r3, [sp, #4]
 8014112:	4b3a      	ldr	r3, [pc, #232]	@ (80141fc <mqtt_client_init+0x1b4>)
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	4b3a      	ldr	r3, [pc, #232]	@ (8014200 <mqtt_client_init+0x1b8>)
 8014118:	4a3a      	ldr	r2, [pc, #232]	@ (8014204 <mqtt_client_init+0x1bc>)
 801411a:	493b      	ldr	r1, [pc, #236]	@ (8014208 <mqtt_client_init+0x1c0>)
 801411c:	f019 fc0a 	bl	802d934 <siscanf>
 8014120:	e00d      	b.n	801413e <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 8014122:	4b2c      	ldr	r3, [pc, #176]	@ (80141d4 <mqtt_client_init+0x18c>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	3302      	adds	r3, #2
 8014128:	4936      	ldr	r1, [pc, #216]	@ (8014204 <mqtt_client_init+0x1bc>)
 801412a:	4618      	mov	r0, r3
 801412c:	f008 fd8a 	bl	801cc44 <dns_service_resolve_name>
 8014130:	4603      	mov	r3, r0
 8014132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014136:	d102      	bne.n	801413e <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 8014138:	f04f 33ff 	mov.w	r3, #4294967295
 801413c:	e043      	b.n	80141c6 <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 801413e:	4b33      	ldr	r3, [pc, #204]	@ (801420c <mqtt_client_init+0x1c4>)
 8014140:	2200      	movs	r2, #0
 8014142:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 8014144:	4b31      	ldr	r3, [pc, #196]	@ (801420c <mqtt_client_init+0x1c4>)
 8014146:	2203      	movs	r2, #3
 8014148:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 801414a:	4b30      	ldr	r3, [pc, #192]	@ (801420c <mqtt_client_init+0x1c4>)
 801414c:	4a27      	ldr	r2, [pc, #156]	@ (80141ec <mqtt_client_init+0x1a4>)
 801414e:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8014150:	4b2e      	ldr	r3, [pc, #184]	@ (801420c <mqtt_client_init+0x1c4>)
 8014152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014156:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 8014158:	4b2c      	ldr	r3, [pc, #176]	@ (801420c <mqtt_client_init+0x1c4>)
 801415a:	2201      	movs	r2, #1
 801415c:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 801415e:	4b1d      	ldr	r3, [pc, #116]	@ (80141d4 <mqtt_client_init+0x18c>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	3384      	adds	r3, #132	@ 0x84
 8014164:	4a29      	ldr	r2, [pc, #164]	@ (801420c <mqtt_client_init+0x1c4>)
 8014166:	6413      	str	r3, [r2, #64]	@ 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 8014168:	4b1a      	ldr	r3, [pc, #104]	@ (80141d4 <mqtt_client_init+0x18c>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	33a5      	adds	r3, #165	@ 0xa5
 801416e:	4a27      	ldr	r2, [pc, #156]	@ (801420c <mqtt_client_init+0x1c4>)
 8014170:	64d3      	str	r3, [r2, #76]	@ 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 8014172:	4b18      	ldr	r3, [pc, #96]	@ (80141d4 <mqtt_client_init+0x18c>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	f8b3 2082 	ldrh.w	r2, [r3, #130]	@ 0x82
 801417a:	4b25      	ldr	r3, [pc, #148]	@ (8014210 <mqtt_client_init+0x1c8>)
 801417c:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 801417e:	4b25      	ldr	r3, [pc, #148]	@ (8014214 <mqtt_client_init+0x1cc>)
 8014180:	2200      	movs	r2, #0
 8014182:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8014184:	4b23      	ldr	r3, [pc, #140]	@ (8014214 <mqtt_client_init+0x1cc>)
 8014186:	2200      	movs	r2, #0
 8014188:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 801418a:	4b22      	ldr	r3, [pc, #136]	@ (8014214 <mqtt_client_init+0x1cc>)
 801418c:	2200      	movs	r2, #0
 801418e:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 8014190:	4b20      	ldr	r3, [pc, #128]	@ (8014214 <mqtt_client_init+0x1cc>)
 8014192:	2200      	movs	r2, #0
 8014194:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 8014196:	2105      	movs	r1, #5
 8014198:	481f      	ldr	r0, [pc, #124]	@ (8014218 <mqtt_client_init+0x1d0>)
 801419a:	f009 fb69 	bl	801d870 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 801419e:	4b0e      	ldr	r3, [pc, #56]	@ (80141d8 <mqtt_client_init+0x190>)
 80141a0:	681a      	ldr	r2, [r3, #0]
 80141a2:	4b0f      	ldr	r3, [pc, #60]	@ (80141e0 <mqtt_client_init+0x198>)
 80141a4:	881b      	ldrh	r3, [r3, #0]
 80141a6:	4618      	mov	r0, r3
 80141a8:	4b0c      	ldr	r3, [pc, #48]	@ (80141dc <mqtt_client_init+0x194>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	490d      	ldr	r1, [pc, #52]	@ (80141e4 <mqtt_client_init+0x19c>)
 80141ae:	8809      	ldrh	r1, [r1, #0]
 80141b0:	9102      	str	r1, [sp, #8]
 80141b2:	9301      	str	r3, [sp, #4]
 80141b4:	9000      	str	r0, [sp, #0]
 80141b6:	4613      	mov	r3, r2
 80141b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80141bc:	4916      	ldr	r1, [pc, #88]	@ (8014218 <mqtt_client_init+0x1d0>)
 80141be:	4817      	ldr	r0, [pc, #92]	@ (801421c <mqtt_client_init+0x1d4>)
 80141c0:	f008 fe5a 	bl	801ce78 <MQTTClientInit>

	return 0;
 80141c4:	2300      	movs	r3, #0
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3710      	adds	r7, #16
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bdb0      	pop	{r4, r5, r7, pc}
 80141ce:	bf00      	nop
 80141d0:	2000052c 	.word	0x2000052c
 80141d4:	20000528 	.word	0x20000528
 80141d8:	20000558 	.word	0x20000558
 80141dc:	20000554 	.word	0x20000554
 80141e0:	20000836 	.word	0x20000836
 80141e4:	20000834 	.word	0x20000834
 80141e8:	08032da8 	.word	0x08032da8
 80141ec:	20000530 	.word	0x20000530
 80141f0:	08032dc4 	.word	0x08032dc4
 80141f4:	20000540 	.word	0x20000540
 80141f8:	2000083b 	.word	0x2000083b
 80141fc:	2000083a 	.word	0x2000083a
 8014200:	20000839 	.word	0x20000839
 8014204:	20000838 	.word	0x20000838
 8014208:	08032dd0 	.word	0x08032dd0
 801420c:	20000004 	.word	0x20000004
 8014210:	2000083c 	.word	0x2000083c
 8014214:	200008ac 	.word	0x200008ac
 8014218:	20000840 	.word	0x20000840
 801421c:	20000850 	.word	0x20000850

08014220 <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 8014220:	b580      	push	{r7, lr}
 8014222:	b082      	sub	sp, #8
 8014224:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 8014226:	4b1f      	ldr	r3, [pc, #124]	@ (80142a4 <mqtt_client_connect+0x84>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 801422c:	4b1e      	ldr	r3, [pc, #120]	@ (80142a8 <mqtt_client_connect+0x88>)
 801422e:	881b      	ldrh	r3, [r3, #0]
 8014230:	461a      	mov	r2, r3
 8014232:	491e      	ldr	r1, [pc, #120]	@ (80142ac <mqtt_client_connect+0x8c>)
 8014234:	481e      	ldr	r0, [pc, #120]	@ (80142b0 <mqtt_client_connect+0x90>)
 8014236:	f009 fb98 	bl	801d96a <ConnectNetwork>
 801423a:	4603      	mov	r3, r0
 801423c:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 801423e:	4b1d      	ldr	r3, [pc, #116]	@ (80142b4 <mqtt_client_connect+0x94>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	4798      	blx	r3
	if (result != 1) {
 8014244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014248:	2b01      	cmp	r3, #1
 801424a:	d010      	beq.n	801426e <mqtt_client_connect+0x4e>
		set_mutex();
 801424c:	4b15      	ldr	r3, [pc, #84]	@ (80142a4 <mqtt_client_connect+0x84>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 8014252:	4b17      	ldr	r3, [pc, #92]	@ (80142b0 <mqtt_client_connect+0x90>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	b2db      	uxtb	r3, r3
 8014258:	4618      	mov	r0, r3
 801425a:	f004 ff81 	bl	8019160 <close>
		release_mutex();
 801425e:	4b15      	ldr	r3, [pc, #84]	@ (80142b4 <mqtt_client_connect+0x94>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8014264:	88fb      	ldrh	r3, [r7, #6]
 8014266:	3b0a      	subs	r3, #10
 8014268:	b29b      	uxth	r3, r3
 801426a:	b21b      	sxth	r3, r3
 801426c:	e016      	b.n	801429c <mqtt_client_connect+0x7c>
	}
	set_mutex();
 801426e:	4b0d      	ldr	r3, [pc, #52]	@ (80142a4 <mqtt_client_connect+0x84>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8014274:	4910      	ldr	r1, [pc, #64]	@ (80142b8 <mqtt_client_connect+0x98>)
 8014276:	4811      	ldr	r0, [pc, #68]	@ (80142bc <mqtt_client_connect+0x9c>)
 8014278:	f009 f90e 	bl	801d498 <MQTTConnect>
 801427c:	4603      	mov	r3, r0
 801427e:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8014280:	4b0c      	ldr	r3, [pc, #48]	@ (80142b4 <mqtt_client_connect+0x94>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 8014286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d004      	beq.n	8014298 <mqtt_client_connect+0x78>
 801428e:	88fb      	ldrh	r3, [r7, #6]
 8014290:	3b14      	subs	r3, #20
 8014292:	b29b      	uxth	r3, r3
 8014294:	b21b      	sxth	r3, r3
 8014296:	e001      	b.n	801429c <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 8014298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 801429c:	4618      	mov	r0, r3
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	2000005c 	.word	0x2000005c
 80142a8:	2000083c 	.word	0x2000083c
 80142ac:	20000838 	.word	0x20000838
 80142b0:	20000840 	.word	0x20000840
 80142b4:	20000060 	.word	0x20000060
 80142b8:	20000004 	.word	0x20000004
 80142bc:	20000850 	.word	0x20000850

080142c0 <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80142c6:	2280      	movs	r2, #128	@ 0x80
 80142c8:	2100      	movs	r1, #0
 80142ca:	48a0      	ldr	r0, [pc, #640]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142cc:	f019 fc60 	bl	802db90 <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 80142d0:	2200      	movs	r2, #0
 80142d2:	2103      	movs	r1, #3
 80142d4:	489d      	ldr	r0, [pc, #628]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142d6:	f000 f9c7 	bl	8014668 <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 80142da:	2200      	movs	r2, #0
 80142dc:	2103      	movs	r1, #3
 80142de:	489c      	ldr	r0, [pc, #624]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142e0:	f000 fa74 	bl	80147cc <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80142e4:	489a      	ldr	r0, [pc, #616]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142e6:	f7fb ffdb 	bl	80102a0 <strlen>
 80142ea:	4603      	mov	r3, r0
 80142ec:	4a99      	ldr	r2, [pc, #612]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142ee:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80142f0:	4b98      	ldr	r3, [pc, #608]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142f2:	4a97      	ldr	r2, [pc, #604]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142f4:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80142f6:	4b97      	ldr	r3, [pc, #604]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142f8:	2201      	movs	r2, #1
 80142fa:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80142fc:	4b96      	ldr	r3, [pc, #600]	@ (8014558 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014302:	4a94      	ldr	r2, [pc, #592]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014304:	4991      	ldr	r1, [pc, #580]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014306:	4895      	ldr	r0, [pc, #596]	@ (801455c <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014308:	f009 f94c 	bl	801d5a4 <MQTTPublish>
 801430c:	4603      	mov	r3, r0
 801430e:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014310:	4b93      	ldr	r3, [pc, #588]	@ (8014560 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d002      	beq.n	8014324 <mqtt_client_reg_dev_on_home_assist+0x64>
 801431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014322:	e10f      	b.n	8014544 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014324:	4b8b      	ldr	r3, [pc, #556]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014326:	889b      	ldrh	r3, [r3, #4]
 8014328:	3301      	adds	r3, #1
 801432a:	b29a      	uxth	r2, r3
 801432c:	4b89      	ldr	r3, [pc, #548]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801432e:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014330:	2280      	movs	r2, #128	@ 0x80
 8014332:	2100      	movs	r1, #0
 8014334:	4885      	ldr	r0, [pc, #532]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014336:	f019 fc2b 	bl	802db90 <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 801433a:	2200      	movs	r2, #0
 801433c:	2105      	movs	r1, #5
 801433e:	4883      	ldr	r0, [pc, #524]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014340:	f000 f992 	bl	8014668 <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 8014344:	2200      	movs	r2, #0
 8014346:	2105      	movs	r1, #5
 8014348:	4881      	ldr	r0, [pc, #516]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801434a:	f000 fa3f 	bl	80147cc <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 801434e:	4880      	ldr	r0, [pc, #512]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014350:	f7fb ffa6 	bl	80102a0 <strlen>
 8014354:	4603      	mov	r3, r0
 8014356:	4a7f      	ldr	r2, [pc, #508]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014358:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 801435a:	4b7e      	ldr	r3, [pc, #504]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801435c:	4a7c      	ldr	r2, [pc, #496]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801435e:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014360:	4b7c      	ldr	r3, [pc, #496]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014362:	2201      	movs	r2, #1
 8014364:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014366:	4b7c      	ldr	r3, [pc, #496]	@ (8014558 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801436c:	4a79      	ldr	r2, [pc, #484]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801436e:	4977      	ldr	r1, [pc, #476]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014370:	487a      	ldr	r0, [pc, #488]	@ (801455c <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014372:	f009 f917 	bl	801d5a4 <MQTTPublish>
 8014376:	4603      	mov	r3, r0
 8014378:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801437a:	4b79      	ldr	r3, [pc, #484]	@ (8014560 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <mqtt_client_reg_dev_on_home_assist+0xce>
 8014388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801438c:	e0da      	b.n	8014544 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 801438e:	4b71      	ldr	r3, [pc, #452]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014390:	889b      	ldrh	r3, [r3, #4]
 8014392:	3301      	adds	r3, #1
 8014394:	b29a      	uxth	r2, r3
 8014396:	4b6f      	ldr	r3, [pc, #444]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014398:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801439a:	2280      	movs	r2, #128	@ 0x80
 801439c:	2100      	movs	r1, #0
 801439e:	486b      	ldr	r0, [pc, #428]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143a0:	f019 fbf6 	bl	802db90 <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 80143a4:	2200      	movs	r2, #0
 80143a6:	2104      	movs	r1, #4
 80143a8:	4868      	ldr	r0, [pc, #416]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143aa:	f000 f95d 	bl	8014668 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 80143ae:	2200      	movs	r2, #0
 80143b0:	2104      	movs	r1, #4
 80143b2:	4867      	ldr	r0, [pc, #412]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143b4:	f000 fa0a 	bl	80147cc <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80143b8:	4865      	ldr	r0, [pc, #404]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143ba:	f7fb ff71 	bl	80102a0 <strlen>
 80143be:	4603      	mov	r3, r0
 80143c0:	4a64      	ldr	r2, [pc, #400]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143c2:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80143c4:	4b63      	ldr	r3, [pc, #396]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143c6:	4a62      	ldr	r2, [pc, #392]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143c8:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80143ca:	4b62      	ldr	r3, [pc, #392]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143cc:	2201      	movs	r2, #1
 80143ce:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80143d0:	4b61      	ldr	r3, [pc, #388]	@ (8014558 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80143d6:	4a5f      	ldr	r2, [pc, #380]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143d8:	495c      	ldr	r1, [pc, #368]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143da:	4860      	ldr	r0, [pc, #384]	@ (801455c <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80143dc:	f009 f8e2 	bl	801d5a4 <MQTTPublish>
 80143e0:	4603      	mov	r3, r0
 80143e2:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80143e4:	4b5e      	ldr	r3, [pc, #376]	@ (8014560 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80143ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d002      	beq.n	80143f8 <mqtt_client_reg_dev_on_home_assist+0x138>
 80143f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143f6:	e0a5      	b.n	8014544 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80143f8:	4b56      	ldr	r3, [pc, #344]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143fa:	889b      	ldrh	r3, [r3, #4]
 80143fc:	3301      	adds	r3, #1
 80143fe:	b29a      	uxth	r2, r3
 8014400:	4b54      	ldr	r3, [pc, #336]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014402:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG APPARENT POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014404:	2280      	movs	r2, #128	@ 0x80
 8014406:	2100      	movs	r1, #0
 8014408:	4850      	ldr	r0, [pc, #320]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801440a:	f019 fbc1 	bl	802db90 <memset>
		get_config_topik_string(buf_topik, APPARENT_POWER_SENSOR_TOPIK, 0);
 801440e:	2200      	movs	r2, #0
 8014410:	2108      	movs	r1, #8
 8014412:	484e      	ldr	r0, [pc, #312]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014414:	f000 f928 	bl	8014668 <get_config_topik_string>
		get_config_payload_string(buf_payload, APPARENT_POWER_SENSOR_PAYLOAD, 0);
 8014418:	2200      	movs	r2, #0
 801441a:	2108      	movs	r1, #8
 801441c:	484c      	ldr	r0, [pc, #304]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801441e:	f000 f9d5 	bl	80147cc <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014422:	484b      	ldr	r0, [pc, #300]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014424:	f7fb ff3c 	bl	80102a0 <strlen>
 8014428:	4603      	mov	r3, r0
 801442a:	4a4a      	ldr	r2, [pc, #296]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801442c:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 801442e:	4b49      	ldr	r3, [pc, #292]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014430:	4a47      	ldr	r2, [pc, #284]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014432:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014434:	4b47      	ldr	r3, [pc, #284]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014436:	2201      	movs	r2, #1
 8014438:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801443a:	4b47      	ldr	r3, [pc, #284]	@ (8014558 <mqtt_client_reg_dev_on_home_assist+0x298>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014440:	4a44      	ldr	r2, [pc, #272]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014442:	4942      	ldr	r1, [pc, #264]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014444:	4845      	ldr	r0, [pc, #276]	@ (801455c <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014446:	f009 f8ad 	bl	801d5a4 <MQTTPublish>
 801444a:	4603      	mov	r3, r0
 801444c:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801444e:	4b44      	ldr	r3, [pc, #272]	@ (8014560 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d002      	beq.n	8014462 <mqtt_client_reg_dev_on_home_assist+0x1a2>
 801445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014460:	e070      	b.n	8014544 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014462:	4b3c      	ldr	r3, [pc, #240]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014464:	889b      	ldrh	r3, [r3, #4]
 8014466:	3301      	adds	r3, #1
 8014468:	b29a      	uxth	r2, r3
 801446a:	4b3a      	ldr	r3, [pc, #232]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801446c:	809a      	strh	r2, [r3, #4]


//------------------------------REG APPARENT POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801446e:	2280      	movs	r2, #128	@ 0x80
 8014470:	2100      	movs	r1, #0
 8014472:	4836      	ldr	r0, [pc, #216]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014474:	f019 fb8c 	bl	802db90 <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 8014478:	2200      	movs	r2, #0
 801447a:	2106      	movs	r1, #6
 801447c:	4833      	ldr	r0, [pc, #204]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801447e:	f000 f8f3 	bl	8014668 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 8014482:	2200      	movs	r2, #0
 8014484:	2106      	movs	r1, #6
 8014486:	4832      	ldr	r0, [pc, #200]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014488:	f000 f9a0 	bl	80147cc <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 801448c:	4830      	ldr	r0, [pc, #192]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801448e:	f7fb ff07 	bl	80102a0 <strlen>
 8014492:	4603      	mov	r3, r0
 8014494:	4a2f      	ldr	r2, [pc, #188]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014496:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014498:	4b2e      	ldr	r3, [pc, #184]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801449a:	4a2d      	ldr	r2, [pc, #180]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801449c:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 801449e:	4b2d      	ldr	r3, [pc, #180]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144a0:	2201      	movs	r2, #1
 80144a2:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80144a4:	4b2c      	ldr	r3, [pc, #176]	@ (8014558 <mqtt_client_reg_dev_on_home_assist+0x298>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80144aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144ac:	4927      	ldr	r1, [pc, #156]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80144ae:	482b      	ldr	r0, [pc, #172]	@ (801455c <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80144b0:	f009 f878 	bl	801d5a4 <MQTTPublish>
 80144b4:	4603      	mov	r3, r0
 80144b6:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80144b8:	4b29      	ldr	r3, [pc, #164]	@ (8014560 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80144be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d002      	beq.n	80144cc <mqtt_client_reg_dev_on_home_assist+0x20c>
 80144c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144ca:	e03b      	b.n	8014544 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80144cc:	4b21      	ldr	r3, [pc, #132]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144ce:	889b      	ldrh	r3, [r3, #4]
 80144d0:	3301      	adds	r3, #1
 80144d2:	b29a      	uxth	r2, r3
 80144d4:	4b1f      	ldr	r3, [pc, #124]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144d6:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80144d8:	2280      	movs	r2, #128	@ 0x80
 80144da:	2100      	movs	r1, #0
 80144dc:	481b      	ldr	r0, [pc, #108]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80144de:	f019 fb57 	bl	802db90 <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 80144e2:	2200      	movs	r2, #0
 80144e4:	2107      	movs	r1, #7
 80144e6:	4819      	ldr	r0, [pc, #100]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80144e8:	f000 f8be 	bl	8014668 <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 80144ec:	2200      	movs	r2, #0
 80144ee:	2107      	movs	r1, #7
 80144f0:	4817      	ldr	r0, [pc, #92]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144f2:	f000 f96b 	bl	80147cc <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80144f6:	4816      	ldr	r0, [pc, #88]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144f8:	f7fb fed2 	bl	80102a0 <strlen>
 80144fc:	4603      	mov	r3, r0
 80144fe:	4a15      	ldr	r2, [pc, #84]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014500:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014502:	4b14      	ldr	r3, [pc, #80]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014504:	4a12      	ldr	r2, [pc, #72]	@ (8014550 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014506:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014508:	4b12      	ldr	r3, [pc, #72]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801450a:	2201      	movs	r2, #1
 801450c:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801450e:	4b12      	ldr	r3, [pc, #72]	@ (8014558 <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014514:	4a0f      	ldr	r2, [pc, #60]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014516:	490d      	ldr	r1, [pc, #52]	@ (801454c <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014518:	4810      	ldr	r0, [pc, #64]	@ (801455c <mqtt_client_reg_dev_on_home_assist+0x29c>)
 801451a:	f009 f843 	bl	801d5a4 <MQTTPublish>
 801451e:	4603      	mov	r3, r0
 8014520:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014522:	4b0f      	ldr	r3, [pc, #60]	@ (8014560 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d002      	beq.n	8014536 <mqtt_client_reg_dev_on_home_assist+0x276>
 8014530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014534:	e006      	b.n	8014544 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014536:	4b07      	ldr	r3, [pc, #28]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014538:	889b      	ldrh	r3, [r3, #4]
 801453a:	3301      	adds	r3, #1
 801453c:	b29a      	uxth	r2, r3
 801453e:	4b05      	ldr	r3, [pc, #20]	@ (8014554 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014540:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 8014542:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 8014544:	4618      	mov	r0, r3
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	2000055c 	.word	0x2000055c
 8014550:	200005dc 	.word	0x200005dc
 8014554:	200008ac 	.word	0x200008ac
 8014558:	2000005c 	.word	0x2000005c
 801455c:	20000850 	.word	0x20000850
 8014560:	20000060 	.word	0x20000060

08014564 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 801456e:	6838      	ldr	r0, [r7, #0]
 8014570:	f7fb fe96 	bl	80102a0 <strlen>
 8014574:	4603      	mov	r3, r0
 8014576:	4a0f      	ldr	r2, [pc, #60]	@ (80145b4 <send_data_to_topik+0x50>)
 8014578:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 801457a:	4a0e      	ldr	r2, [pc, #56]	@ (80145b4 <send_data_to_topik+0x50>)
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 8014580:	4b0c      	ldr	r3, [pc, #48]	@ (80145b4 <send_data_to_topik+0x50>)
 8014582:	889b      	ldrh	r3, [r3, #4]
 8014584:	3301      	adds	r3, #1
 8014586:	b29a      	uxth	r2, r3
 8014588:	4b0a      	ldr	r3, [pc, #40]	@ (80145b4 <send_data_to_topik+0x50>)
 801458a:	809a      	strh	r2, [r3, #4]
	set_mutex();
 801458c:	4b0a      	ldr	r3, [pc, #40]	@ (80145b8 <send_data_to_topik+0x54>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 8014592:	4a08      	ldr	r2, [pc, #32]	@ (80145b4 <send_data_to_topik+0x50>)
 8014594:	6879      	ldr	r1, [r7, #4]
 8014596:	4809      	ldr	r0, [pc, #36]	@ (80145bc <send_data_to_topik+0x58>)
 8014598:	f009 f804 	bl	801d5a4 <MQTTPublish>
 801459c:	4603      	mov	r3, r0
 801459e:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 80145a0:	4b07      	ldr	r3, [pc, #28]	@ (80145c0 <send_data_to_topik+0x5c>)
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 80145a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3710      	adds	r7, #16
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	200008ac 	.word	0x200008ac
 80145b8:	2000005c 	.word	0x2000005c
 80145bc:	20000850 	.word	0x20000850
 80145c0:	20000060 	.word	0x20000060

080145c4 <mqtt_1ms_tik>:
	release_mutex();

	return result;
}

void mqtt_1ms_tik(void){
 80145c4:	b580      	push	{r7, lr}
 80145c6:	af00      	add	r7, sp, #0
	MilliTimer_Handler();
 80145c8:	f009 f8de 	bl	801d788 <MilliTimer_Handler>
}
 80145cc:	bf00      	nop
 80145ce:	bd80      	pop	{r7, pc}

080145d0 <mqtt_disconnect>:
		//xQueueOverwrite(coil_q_write, (void *)&CoilStatus_new);
		write_coils(CoilStatus_new);
	}
}

void mqtt_disconnect(void){
 80145d0:	b580      	push	{r7, lr}
 80145d2:	af00      	add	r7, sp, #0

	MQTTDisconnect(&MQTT_Client);
 80145d4:	4802      	ldr	r0, [pc, #8]	@ (80145e0 <mqtt_disconnect+0x10>)
 80145d6:	f009 f8a4 	bl	801d722 <MQTTDisconnect>

}
 80145da:	bf00      	nop
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	20000850 	.word	0x20000850

080145e4 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 80145ec:	2300      	movs	r3, #0
 80145ee:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7fb fe55 	bl	80102a0 <strlen>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b0d      	cmp	r3, #13
 80145fa:	d902      	bls.n	8014602 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 80145fc:	230e      	movs	r3, #14
 80145fe:	73fb      	strb	r3, [r7, #15]
 8014600:	e004      	b.n	801460c <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f7fb fe4c 	bl	80102a0 <strlen>
 8014608:	4603      	mov	r3, r0
 801460a:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 801460c:	7bfb      	ldrb	r3, [r7, #15]
 801460e:	461a      	mov	r2, r3
 8014610:	6879      	ldr	r1, [r7, #4]
 8014612:	4804      	ldr	r0, [pc, #16]	@ (8014624 <set_device_id+0x40>)
 8014614:	f019 fb16 	bl	802dc44 <strncpy>
	return 0;
 8014618:	2300      	movs	r3, #0
}
 801461a:	4618      	mov	r0, r3
 801461c:	3710      	adds	r7, #16
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}
 8014622:	bf00      	nop
 8014624:	200008bc 	.word	0x200008bc

08014628 <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 8014630:	4b0c      	ldr	r3, [pc, #48]	@ (8014664 <set_device_conf_ip+0x3c>)
 8014632:	2200      	movs	r2, #0
 8014634:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f7fb fe32 	bl	80102a0 <strlen>
 801463c:	4603      	mov	r3, r0
 801463e:	2b12      	cmp	r3, #18
 8014640:	d80a      	bhi.n	8014658 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7fb fe2c 	bl	80102a0 <strlen>
 8014648:	4603      	mov	r3, r0
 801464a:	461a      	mov	r2, r3
 801464c:	6879      	ldr	r1, [r7, #4]
 801464e:	4805      	ldr	r0, [pc, #20]	@ (8014664 <set_device_conf_ip+0x3c>)
 8014650:	f019 faf8 	bl	802dc44 <strncpy>
		return 0;
 8014654:	2300      	movs	r3, #0
 8014656:	e001      	b.n	801465c <set_device_conf_ip+0x34>
	}
	return -1;
 8014658:	f04f 33ff 	mov.w	r3, #4294967295
}
 801465c:	4618      	mov	r0, r3
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	200008cc 	.word	0x200008cc

08014668 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 8014668:	b580      	push	{r7, lr}
 801466a:	b086      	sub	sp, #24
 801466c:	af04      	add	r7, sp, #16
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	460b      	mov	r3, r1
 8014672:	70fb      	strb	r3, [r7, #3]
 8014674:	4613      	mov	r3, r2
 8014676:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 8014678:	2100      	movs	r1, #0
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f019 fc55 	bl	802df2a <strcpy>
	switch (topik_type) {
 8014680:	78fb      	ldrb	r3, [r7, #3]
 8014682:	3b01      	subs	r3, #1
 8014684:	2b07      	cmp	r3, #7
 8014686:	d87b      	bhi.n	8014780 <get_config_topik_string+0x118>
 8014688:	a201      	add	r2, pc, #4	@ (adr r2, 8014690 <get_config_topik_string+0x28>)
 801468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801468e:	bf00      	nop
 8014690:	080146b1 	.word	0x080146b1
 8014694:	080146cb 	.word	0x080146cb
 8014698:	080146e5 	.word	0x080146e5
 801469c:	08014719 	.word	0x08014719
 80146a0:	080146ff 	.word	0x080146ff
 80146a4:	0801474d 	.word	0x0801474d
 80146a8:	08014767 	.word	0x08014767
 80146ac:	08014733 	.word	0x08014733
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 80146b0:	78bb      	ldrb	r3, [r7, #2]
 80146b2:	9302      	str	r3, [sp, #8]
 80146b4:	4b36      	ldr	r3, [pc, #216]	@ (8014790 <get_config_topik_string+0x128>)
 80146b6:	9301      	str	r3, [sp, #4]
 80146b8:	4b36      	ldr	r3, [pc, #216]	@ (8014794 <get_config_topik_string+0x12c>)
 80146ba:	9300      	str	r3, [sp, #0]
 80146bc:	4b36      	ldr	r3, [pc, #216]	@ (8014798 <get_config_topik_string+0x130>)
 80146be:	4a37      	ldr	r2, [pc, #220]	@ (801479c <get_config_topik_string+0x134>)
 80146c0:	4937      	ldr	r1, [pc, #220]	@ (80147a0 <get_config_topik_string+0x138>)
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f019 f916 	bl	802d8f4 <siprintf>
			break;
 80146c8:	e05d      	b.n	8014786 <get_config_topik_string+0x11e>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 80146ca:	78bb      	ldrb	r3, [r7, #2]
 80146cc:	9302      	str	r3, [sp, #8]
 80146ce:	4b35      	ldr	r3, [pc, #212]	@ (80147a4 <get_config_topik_string+0x13c>)
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	4b30      	ldr	r3, [pc, #192]	@ (8014794 <get_config_topik_string+0x12c>)
 80146d4:	9300      	str	r3, [sp, #0]
 80146d6:	4b33      	ldr	r3, [pc, #204]	@ (80147a4 <get_config_topik_string+0x13c>)
 80146d8:	4a30      	ldr	r2, [pc, #192]	@ (801479c <get_config_topik_string+0x134>)
 80146da:	4931      	ldr	r1, [pc, #196]	@ (80147a0 <get_config_topik_string+0x138>)
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f019 f909 	bl	802d8f4 <siprintf>
			break;
 80146e2:	e050      	b.n	8014786 <get_config_topik_string+0x11e>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 80146e4:	4b30      	ldr	r3, [pc, #192]	@ (80147a8 <get_config_topik_string+0x140>)
 80146e6:	9302      	str	r3, [sp, #8]
 80146e8:	4b2a      	ldr	r3, [pc, #168]	@ (8014794 <get_config_topik_string+0x12c>)
 80146ea:	9301      	str	r3, [sp, #4]
 80146ec:	4b2f      	ldr	r3, [pc, #188]	@ (80147ac <get_config_topik_string+0x144>)
 80146ee:	9300      	str	r3, [sp, #0]
 80146f0:	4b2f      	ldr	r3, [pc, #188]	@ (80147b0 <get_config_topik_string+0x148>)
 80146f2:	4a2a      	ldr	r2, [pc, #168]	@ (801479c <get_config_topik_string+0x134>)
 80146f4:	492f      	ldr	r1, [pc, #188]	@ (80147b4 <get_config_topik_string+0x14c>)
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f019 f8fc 	bl	802d8f4 <siprintf>
			break;
 80146fc:	e043      	b.n	8014786 <get_config_topik_string+0x11e>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 80146fe:	4b2e      	ldr	r3, [pc, #184]	@ (80147b8 <get_config_topik_string+0x150>)
 8014700:	9302      	str	r3, [sp, #8]
 8014702:	4b24      	ldr	r3, [pc, #144]	@ (8014794 <get_config_topik_string+0x12c>)
 8014704:	9301      	str	r3, [sp, #4]
 8014706:	4b29      	ldr	r3, [pc, #164]	@ (80147ac <get_config_topik_string+0x144>)
 8014708:	9300      	str	r3, [sp, #0]
 801470a:	4b29      	ldr	r3, [pc, #164]	@ (80147b0 <get_config_topik_string+0x148>)
 801470c:	4a23      	ldr	r2, [pc, #140]	@ (801479c <get_config_topik_string+0x134>)
 801470e:	4929      	ldr	r1, [pc, #164]	@ (80147b4 <get_config_topik_string+0x14c>)
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f019 f8ef 	bl	802d8f4 <siprintf>
			break;
 8014716:	e036      	b.n	8014786 <get_config_topik_string+0x11e>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 8014718:	4b28      	ldr	r3, [pc, #160]	@ (80147bc <get_config_topik_string+0x154>)
 801471a:	9302      	str	r3, [sp, #8]
 801471c:	4b1d      	ldr	r3, [pc, #116]	@ (8014794 <get_config_topik_string+0x12c>)
 801471e:	9301      	str	r3, [sp, #4]
 8014720:	4b22      	ldr	r3, [pc, #136]	@ (80147ac <get_config_topik_string+0x144>)
 8014722:	9300      	str	r3, [sp, #0]
 8014724:	4b22      	ldr	r3, [pc, #136]	@ (80147b0 <get_config_topik_string+0x148>)
 8014726:	4a1d      	ldr	r2, [pc, #116]	@ (801479c <get_config_topik_string+0x134>)
 8014728:	4922      	ldr	r1, [pc, #136]	@ (80147b4 <get_config_topik_string+0x14c>)
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f019 f8e2 	bl	802d8f4 <siprintf>
			break;
 8014730:	e029      	b.n	8014786 <get_config_topik_string+0x11e>
		case APPARENT_POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power);
 8014732:	4b23      	ldr	r3, [pc, #140]	@ (80147c0 <get_config_topik_string+0x158>)
 8014734:	9302      	str	r3, [sp, #8]
 8014736:	4b17      	ldr	r3, [pc, #92]	@ (8014794 <get_config_topik_string+0x12c>)
 8014738:	9301      	str	r3, [sp, #4]
 801473a:	4b1c      	ldr	r3, [pc, #112]	@ (80147ac <get_config_topik_string+0x144>)
 801473c:	9300      	str	r3, [sp, #0]
 801473e:	4b1c      	ldr	r3, [pc, #112]	@ (80147b0 <get_config_topik_string+0x148>)
 8014740:	4a16      	ldr	r2, [pc, #88]	@ (801479c <get_config_topik_string+0x134>)
 8014742:	491c      	ldr	r1, [pc, #112]	@ (80147b4 <get_config_topik_string+0x14c>)
 8014744:	6878      	ldr	r0, [r7, #4]
 8014746:	f019 f8d5 	bl	802d8f4 <siprintf>
			break;
 801474a:	e01c      	b.n	8014786 <get_config_topik_string+0x11e>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 801474c:	4b1d      	ldr	r3, [pc, #116]	@ (80147c4 <get_config_topik_string+0x15c>)
 801474e:	9302      	str	r3, [sp, #8]
 8014750:	4b10      	ldr	r3, [pc, #64]	@ (8014794 <get_config_topik_string+0x12c>)
 8014752:	9301      	str	r3, [sp, #4]
 8014754:	4b15      	ldr	r3, [pc, #84]	@ (80147ac <get_config_topik_string+0x144>)
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	4b15      	ldr	r3, [pc, #84]	@ (80147b0 <get_config_topik_string+0x148>)
 801475a:	4a10      	ldr	r2, [pc, #64]	@ (801479c <get_config_topik_string+0x134>)
 801475c:	4915      	ldr	r1, [pc, #84]	@ (80147b4 <get_config_topik_string+0x14c>)
 801475e:	6878      	ldr	r0, [r7, #4]
 8014760:	f019 f8c8 	bl	802d8f4 <siprintf>
			break;
 8014764:	e00f      	b.n	8014786 <get_config_topik_string+0x11e>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 8014766:	4b18      	ldr	r3, [pc, #96]	@ (80147c8 <get_config_topik_string+0x160>)
 8014768:	9302      	str	r3, [sp, #8]
 801476a:	4b0a      	ldr	r3, [pc, #40]	@ (8014794 <get_config_topik_string+0x12c>)
 801476c:	9301      	str	r3, [sp, #4]
 801476e:	4b0f      	ldr	r3, [pc, #60]	@ (80147ac <get_config_topik_string+0x144>)
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	4b0f      	ldr	r3, [pc, #60]	@ (80147b0 <get_config_topik_string+0x148>)
 8014774:	4a09      	ldr	r2, [pc, #36]	@ (801479c <get_config_topik_string+0x134>)
 8014776:	490f      	ldr	r1, [pc, #60]	@ (80147b4 <get_config_topik_string+0x14c>)
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	f019 f8bb 	bl	802d8f4 <siprintf>
			break;
 801477e:	e002      	b.n	8014786 <get_config_topik_string+0x11e>
		default:
			return -1;
 8014780:	f04f 33ff 	mov.w	r3, #4294967295
 8014784:	e000      	b.n	8014788 <get_config_topik_string+0x120>
			break;
	}


	return 0;
 8014786:	2300      	movs	r3, #0
}
 8014788:	4618      	mov	r0, r3
 801478a:	3708      	adds	r7, #8
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}
 8014790:	2000008c 	.word	0x2000008c
 8014794:	200008bc 	.word	0x200008bc
 8014798:	20000074 	.word	0x20000074
 801479c:	20000064 	.word	0x20000064
 80147a0:	08034430 	.word	0x08034430
 80147a4:	20000084 	.word	0x20000084
 80147a8:	08032e0c 	.word	0x08032e0c
 80147ac:	08032e14 	.word	0x08032e14
 80147b0:	08032dec 	.word	0x08032dec
 80147b4:	08032df4 	.word	0x08032df4
 80147b8:	08032e1c 	.word	0x08032e1c
 80147bc:	08032e24 	.word	0x08032e24
 80147c0:	08032e2c 	.word	0x08032e2c
 80147c4:	08032e3c 	.word	0x08032e3c
 80147c8:	08032e4c 	.word	0x08032e4c

080147cc <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 80147cc:	b590      	push	{r4, r7, lr}
 80147ce:	b097      	sub	sp, #92	@ 0x5c
 80147d0:	af12      	add	r7, sp, #72	@ 0x48
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	460b      	mov	r3, r1
 80147d6:	70fb      	strb	r3, [r7, #3]
 80147d8:	4613      	mov	r3, r2
 80147da:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 80147dc:	2300      	movs	r3, #0
 80147de:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	2200      	movs	r2, #0
 80147e4:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 80147e6:	78fb      	ldrb	r3, [r7, #3]
 80147e8:	3b01      	subs	r3, #1
 80147ea:	2b07      	cmp	r3, #7
 80147ec:	f200 8181 	bhi.w	8014af2 <get_config_payload_string+0x326>
 80147f0:	a201      	add	r2, pc, #4	@ (adr r2, 80147f8 <get_config_payload_string+0x2c>)
 80147f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f6:	bf00      	nop
 80147f8:	0801484d 	.word	0x0801484d
 80147fc:	08014819 	.word	0x08014819
 8014800:	0801487b 	.word	0x0801487b
 8014804:	08014927 	.word	0x08014927
 8014808:	080148d1 	.word	0x080148d1
 801480c:	080149d3 	.word	0x080149d3
 8014810:	08014a9d 	.word	0x08014a9d
 8014814:	0801497d 	.word	0x0801497d
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014818:	78bb      	ldrb	r3, [r7, #2]
 801481a:	78ba      	ldrb	r2, [r7, #2]
 801481c:	78b9      	ldrb	r1, [r7, #2]
 801481e:	78b8      	ldrb	r0, [r7, #2]
 8014820:	4c81      	ldr	r4, [pc, #516]	@ (8014a28 <get_config_payload_string+0x25c>)
 8014822:	9407      	str	r4, [sp, #28]
 8014824:	4c81      	ldr	r4, [pc, #516]	@ (8014a2c <get_config_payload_string+0x260>)
 8014826:	9406      	str	r4, [sp, #24]
 8014828:	4c80      	ldr	r4, [pc, #512]	@ (8014a2c <get_config_payload_string+0x260>)
 801482a:	9405      	str	r4, [sp, #20]
 801482c:	9004      	str	r0, [sp, #16]
 801482e:	487f      	ldr	r0, [pc, #508]	@ (8014a2c <get_config_payload_string+0x260>)
 8014830:	9003      	str	r0, [sp, #12]
 8014832:	9102      	str	r1, [sp, #8]
 8014834:	9201      	str	r2, [sp, #4]
 8014836:	9300      	str	r3, [sp, #0]
 8014838:	4b7c      	ldr	r3, [pc, #496]	@ (8014a2c <get_config_payload_string+0x260>)
 801483a:	4a7c      	ldr	r2, [pc, #496]	@ (8014a2c <get_config_payload_string+0x260>)
 801483c:	497c      	ldr	r1, [pc, #496]	@ (8014a30 <get_config_payload_string+0x264>)
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f019 f858 	bl	802d8f4 <siprintf>
 8014844:	4603      	mov	r3, r0
 8014846:	73fb      	strb	r3, [r7, #15]
			return len;
 8014848:	7bfb      	ldrb	r3, [r7, #15]
 801484a:	e155      	b.n	8014af8 <get_config_payload_string+0x32c>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 801484c:	78b9      	ldrb	r1, [r7, #2]
 801484e:	78bb      	ldrb	r3, [r7, #2]
 8014850:	78ba      	ldrb	r2, [r7, #2]
 8014852:	4875      	ldr	r0, [pc, #468]	@ (8014a28 <get_config_payload_string+0x25c>)
 8014854:	9005      	str	r0, [sp, #20]
 8014856:	4875      	ldr	r0, [pc, #468]	@ (8014a2c <get_config_payload_string+0x260>)
 8014858:	9004      	str	r0, [sp, #16]
 801485a:	4874      	ldr	r0, [pc, #464]	@ (8014a2c <get_config_payload_string+0x260>)
 801485c:	9003      	str	r0, [sp, #12]
 801485e:	9202      	str	r2, [sp, #8]
 8014860:	4a72      	ldr	r2, [pc, #456]	@ (8014a2c <get_config_payload_string+0x260>)
 8014862:	9201      	str	r2, [sp, #4]
 8014864:	9300      	str	r3, [sp, #0]
 8014866:	460b      	mov	r3, r1
 8014868:	4a70      	ldr	r2, [pc, #448]	@ (8014a2c <get_config_payload_string+0x260>)
 801486a:	4972      	ldr	r1, [pc, #456]	@ (8014a34 <get_config_payload_string+0x268>)
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	f019 f841 	bl	802d8f4 <siprintf>
 8014872:	4603      	mov	r3, r0
 8014874:	73fb      	strb	r3, [r7, #15]
			return len;
 8014876:	7bfb      	ldrb	r3, [r7, #15]
 8014878:	e13e      	b.n	8014af8 <get_config_payload_string+0x32c>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 801487a:	4b6b      	ldr	r3, [pc, #428]	@ (8014a28 <get_config_payload_string+0x25c>)
 801487c:	9310      	str	r3, [sp, #64]	@ 0x40
 801487e:	4b6e      	ldr	r3, [pc, #440]	@ (8014a38 <get_config_payload_string+0x26c>)
 8014880:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014882:	4b6e      	ldr	r3, [pc, #440]	@ (8014a3c <get_config_payload_string+0x270>)
 8014884:	930e      	str	r3, [sp, #56]	@ 0x38
 8014886:	4b6e      	ldr	r3, [pc, #440]	@ (8014a40 <get_config_payload_string+0x274>)
 8014888:	930d      	str	r3, [sp, #52]	@ 0x34
 801488a:	4b6e      	ldr	r3, [pc, #440]	@ (8014a44 <get_config_payload_string+0x278>)
 801488c:	930c      	str	r3, [sp, #48]	@ 0x30
 801488e:	4b6e      	ldr	r3, [pc, #440]	@ (8014a48 <get_config_payload_string+0x27c>)
 8014890:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014892:	4b66      	ldr	r3, [pc, #408]	@ (8014a2c <get_config_payload_string+0x260>)
 8014894:	930a      	str	r3, [sp, #40]	@ 0x28
 8014896:	4b6d      	ldr	r3, [pc, #436]	@ (8014a4c <get_config_payload_string+0x280>)
 8014898:	9309      	str	r3, [sp, #36]	@ 0x24
 801489a:	4b6d      	ldr	r3, [pc, #436]	@ (8014a50 <get_config_payload_string+0x284>)
 801489c:	9308      	str	r3, [sp, #32]
 801489e:	4b6d      	ldr	r3, [pc, #436]	@ (8014a54 <get_config_payload_string+0x288>)
 80148a0:	9307      	str	r3, [sp, #28]
 80148a2:	4b62      	ldr	r3, [pc, #392]	@ (8014a2c <get_config_payload_string+0x260>)
 80148a4:	9306      	str	r3, [sp, #24]
 80148a6:	4b69      	ldr	r3, [pc, #420]	@ (8014a4c <get_config_payload_string+0x280>)
 80148a8:	9305      	str	r3, [sp, #20]
 80148aa:	4b6b      	ldr	r3, [pc, #428]	@ (8014a58 <get_config_payload_string+0x28c>)
 80148ac:	9304      	str	r3, [sp, #16]
 80148ae:	4b6b      	ldr	r3, [pc, #428]	@ (8014a5c <get_config_payload_string+0x290>)
 80148b0:	9303      	str	r3, [sp, #12]
 80148b2:	4b68      	ldr	r3, [pc, #416]	@ (8014a54 <get_config_payload_string+0x288>)
 80148b4:	9302      	str	r3, [sp, #8]
 80148b6:	4b6a      	ldr	r3, [pc, #424]	@ (8014a60 <get_config_payload_string+0x294>)
 80148b8:	9301      	str	r3, [sp, #4]
 80148ba:	4b5c      	ldr	r3, [pc, #368]	@ (8014a2c <get_config_payload_string+0x260>)
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	4b63      	ldr	r3, [pc, #396]	@ (8014a4c <get_config_payload_string+0x280>)
 80148c0:	4a64      	ldr	r2, [pc, #400]	@ (8014a54 <get_config_payload_string+0x288>)
 80148c2:	4968      	ldr	r1, [pc, #416]	@ (8014a64 <get_config_payload_string+0x298>)
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f019 f815 	bl	802d8f4 <siprintf>
 80148ca:	4603      	mov	r3, r0
 80148cc:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80148ce:	e113      	b.n	8014af8 <get_config_payload_string+0x32c>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 80148d0:	4b55      	ldr	r3, [pc, #340]	@ (8014a28 <get_config_payload_string+0x25c>)
 80148d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80148d4:	4b58      	ldr	r3, [pc, #352]	@ (8014a38 <get_config_payload_string+0x26c>)
 80148d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80148d8:	4b58      	ldr	r3, [pc, #352]	@ (8014a3c <get_config_payload_string+0x270>)
 80148da:	930e      	str	r3, [sp, #56]	@ 0x38
 80148dc:	4b58      	ldr	r3, [pc, #352]	@ (8014a40 <get_config_payload_string+0x274>)
 80148de:	930d      	str	r3, [sp, #52]	@ 0x34
 80148e0:	4b58      	ldr	r3, [pc, #352]	@ (8014a44 <get_config_payload_string+0x278>)
 80148e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80148e4:	4b58      	ldr	r3, [pc, #352]	@ (8014a48 <get_config_payload_string+0x27c>)
 80148e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80148e8:	4b50      	ldr	r3, [pc, #320]	@ (8014a2c <get_config_payload_string+0x260>)
 80148ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80148ec:	4b57      	ldr	r3, [pc, #348]	@ (8014a4c <get_config_payload_string+0x280>)
 80148ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80148f0:	4b5d      	ldr	r3, [pc, #372]	@ (8014a68 <get_config_payload_string+0x29c>)
 80148f2:	9308      	str	r3, [sp, #32]
 80148f4:	4b5d      	ldr	r3, [pc, #372]	@ (8014a6c <get_config_payload_string+0x2a0>)
 80148f6:	9307      	str	r3, [sp, #28]
 80148f8:	4b4c      	ldr	r3, [pc, #304]	@ (8014a2c <get_config_payload_string+0x260>)
 80148fa:	9306      	str	r3, [sp, #24]
 80148fc:	4b53      	ldr	r3, [pc, #332]	@ (8014a4c <get_config_payload_string+0x280>)
 80148fe:	9305      	str	r3, [sp, #20]
 8014900:	4b5b      	ldr	r3, [pc, #364]	@ (8014a70 <get_config_payload_string+0x2a4>)
 8014902:	9304      	str	r3, [sp, #16]
 8014904:	4b5b      	ldr	r3, [pc, #364]	@ (8014a74 <get_config_payload_string+0x2a8>)
 8014906:	9303      	str	r3, [sp, #12]
 8014908:	4b58      	ldr	r3, [pc, #352]	@ (8014a6c <get_config_payload_string+0x2a0>)
 801490a:	9302      	str	r3, [sp, #8]
 801490c:	4b54      	ldr	r3, [pc, #336]	@ (8014a60 <get_config_payload_string+0x294>)
 801490e:	9301      	str	r3, [sp, #4]
 8014910:	4b46      	ldr	r3, [pc, #280]	@ (8014a2c <get_config_payload_string+0x260>)
 8014912:	9300      	str	r3, [sp, #0]
 8014914:	4b4d      	ldr	r3, [pc, #308]	@ (8014a4c <get_config_payload_string+0x280>)
 8014916:	4a55      	ldr	r2, [pc, #340]	@ (8014a6c <get_config_payload_string+0x2a0>)
 8014918:	4952      	ldr	r1, [pc, #328]	@ (8014a64 <get_config_payload_string+0x298>)
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f018 ffea 	bl	802d8f4 <siprintf>
 8014920:	4603      	mov	r3, r0
 8014922:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014924:	e0e8      	b.n	8014af8 <get_config_payload_string+0x32c>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 8014926:	4b40      	ldr	r3, [pc, #256]	@ (8014a28 <get_config_payload_string+0x25c>)
 8014928:	9310      	str	r3, [sp, #64]	@ 0x40
 801492a:	4b43      	ldr	r3, [pc, #268]	@ (8014a38 <get_config_payload_string+0x26c>)
 801492c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801492e:	4b43      	ldr	r3, [pc, #268]	@ (8014a3c <get_config_payload_string+0x270>)
 8014930:	930e      	str	r3, [sp, #56]	@ 0x38
 8014932:	4b43      	ldr	r3, [pc, #268]	@ (8014a40 <get_config_payload_string+0x274>)
 8014934:	930d      	str	r3, [sp, #52]	@ 0x34
 8014936:	4b43      	ldr	r3, [pc, #268]	@ (8014a44 <get_config_payload_string+0x278>)
 8014938:	930c      	str	r3, [sp, #48]	@ 0x30
 801493a:	4b43      	ldr	r3, [pc, #268]	@ (8014a48 <get_config_payload_string+0x27c>)
 801493c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801493e:	4b3b      	ldr	r3, [pc, #236]	@ (8014a2c <get_config_payload_string+0x260>)
 8014940:	930a      	str	r3, [sp, #40]	@ 0x28
 8014942:	4b42      	ldr	r3, [pc, #264]	@ (8014a4c <get_config_payload_string+0x280>)
 8014944:	9309      	str	r3, [sp, #36]	@ 0x24
 8014946:	4b4c      	ldr	r3, [pc, #304]	@ (8014a78 <get_config_payload_string+0x2ac>)
 8014948:	9308      	str	r3, [sp, #32]
 801494a:	4b4c      	ldr	r3, [pc, #304]	@ (8014a7c <get_config_payload_string+0x2b0>)
 801494c:	9307      	str	r3, [sp, #28]
 801494e:	4b37      	ldr	r3, [pc, #220]	@ (8014a2c <get_config_payload_string+0x260>)
 8014950:	9306      	str	r3, [sp, #24]
 8014952:	4b3e      	ldr	r3, [pc, #248]	@ (8014a4c <get_config_payload_string+0x280>)
 8014954:	9305      	str	r3, [sp, #20]
 8014956:	4b4a      	ldr	r3, [pc, #296]	@ (8014a80 <get_config_payload_string+0x2b4>)
 8014958:	9304      	str	r3, [sp, #16]
 801495a:	4b46      	ldr	r3, [pc, #280]	@ (8014a74 <get_config_payload_string+0x2a8>)
 801495c:	9303      	str	r3, [sp, #12]
 801495e:	4b47      	ldr	r3, [pc, #284]	@ (8014a7c <get_config_payload_string+0x2b0>)
 8014960:	9302      	str	r3, [sp, #8]
 8014962:	4b3f      	ldr	r3, [pc, #252]	@ (8014a60 <get_config_payload_string+0x294>)
 8014964:	9301      	str	r3, [sp, #4]
 8014966:	4b31      	ldr	r3, [pc, #196]	@ (8014a2c <get_config_payload_string+0x260>)
 8014968:	9300      	str	r3, [sp, #0]
 801496a:	4b38      	ldr	r3, [pc, #224]	@ (8014a4c <get_config_payload_string+0x280>)
 801496c:	4a43      	ldr	r2, [pc, #268]	@ (8014a7c <get_config_payload_string+0x2b0>)
 801496e:	493d      	ldr	r1, [pc, #244]	@ (8014a64 <get_config_payload_string+0x298>)
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f018 ffbf 	bl	802d8f4 <siprintf>
 8014976:	4603      	mov	r3, r0
 8014978:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801497a:	e0bd      	b.n	8014af8 <get_config_payload_string+0x32c>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 801497c:	4b2a      	ldr	r3, [pc, #168]	@ (8014a28 <get_config_payload_string+0x25c>)
 801497e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014980:	4b2d      	ldr	r3, [pc, #180]	@ (8014a38 <get_config_payload_string+0x26c>)
 8014982:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014984:	4b2d      	ldr	r3, [pc, #180]	@ (8014a3c <get_config_payload_string+0x270>)
 8014986:	930e      	str	r3, [sp, #56]	@ 0x38
 8014988:	4b2d      	ldr	r3, [pc, #180]	@ (8014a40 <get_config_payload_string+0x274>)
 801498a:	930d      	str	r3, [sp, #52]	@ 0x34
 801498c:	4b2d      	ldr	r3, [pc, #180]	@ (8014a44 <get_config_payload_string+0x278>)
 801498e:	930c      	str	r3, [sp, #48]	@ 0x30
 8014990:	4b2d      	ldr	r3, [pc, #180]	@ (8014a48 <get_config_payload_string+0x27c>)
 8014992:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014994:	4b25      	ldr	r3, [pc, #148]	@ (8014a2c <get_config_payload_string+0x260>)
 8014996:	930a      	str	r3, [sp, #40]	@ 0x28
 8014998:	4b2c      	ldr	r3, [pc, #176]	@ (8014a4c <get_config_payload_string+0x280>)
 801499a:	9309      	str	r3, [sp, #36]	@ 0x24
 801499c:	4b39      	ldr	r3, [pc, #228]	@ (8014a84 <get_config_payload_string+0x2b8>)
 801499e:	9308      	str	r3, [sp, #32]
 80149a0:	4b39      	ldr	r3, [pc, #228]	@ (8014a88 <get_config_payload_string+0x2bc>)
 80149a2:	9307      	str	r3, [sp, #28]
 80149a4:	4b21      	ldr	r3, [pc, #132]	@ (8014a2c <get_config_payload_string+0x260>)
 80149a6:	9306      	str	r3, [sp, #24]
 80149a8:	4b28      	ldr	r3, [pc, #160]	@ (8014a4c <get_config_payload_string+0x280>)
 80149aa:	9305      	str	r3, [sp, #20]
 80149ac:	4b37      	ldr	r3, [pc, #220]	@ (8014a8c <get_config_payload_string+0x2c0>)
 80149ae:	9304      	str	r3, [sp, #16]
 80149b0:	4b30      	ldr	r3, [pc, #192]	@ (8014a74 <get_config_payload_string+0x2a8>)
 80149b2:	9303      	str	r3, [sp, #12]
 80149b4:	4b34      	ldr	r3, [pc, #208]	@ (8014a88 <get_config_payload_string+0x2bc>)
 80149b6:	9302      	str	r3, [sp, #8]
 80149b8:	4b29      	ldr	r3, [pc, #164]	@ (8014a60 <get_config_payload_string+0x294>)
 80149ba:	9301      	str	r3, [sp, #4]
 80149bc:	4b1b      	ldr	r3, [pc, #108]	@ (8014a2c <get_config_payload_string+0x260>)
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	4b22      	ldr	r3, [pc, #136]	@ (8014a4c <get_config_payload_string+0x280>)
 80149c2:	4a31      	ldr	r2, [pc, #196]	@ (8014a88 <get_config_payload_string+0x2bc>)
 80149c4:	4927      	ldr	r1, [pc, #156]	@ (8014a64 <get_config_payload_string+0x298>)
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f018 ff94 	bl	802d8f4 <siprintf>
 80149cc:	4603      	mov	r3, r0
 80149ce:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80149d0:	e092      	b.n	8014af8 <get_config_payload_string+0x32c>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80149d2:	4b15      	ldr	r3, [pc, #84]	@ (8014a28 <get_config_payload_string+0x25c>)
 80149d4:	9310      	str	r3, [sp, #64]	@ 0x40
 80149d6:	4b18      	ldr	r3, [pc, #96]	@ (8014a38 <get_config_payload_string+0x26c>)
 80149d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80149da:	4b18      	ldr	r3, [pc, #96]	@ (8014a3c <get_config_payload_string+0x270>)
 80149dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80149de:	4b18      	ldr	r3, [pc, #96]	@ (8014a40 <get_config_payload_string+0x274>)
 80149e0:	930d      	str	r3, [sp, #52]	@ 0x34
 80149e2:	4b18      	ldr	r3, [pc, #96]	@ (8014a44 <get_config_payload_string+0x278>)
 80149e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80149e6:	4b18      	ldr	r3, [pc, #96]	@ (8014a48 <get_config_payload_string+0x27c>)
 80149e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80149ea:	4b10      	ldr	r3, [pc, #64]	@ (8014a2c <get_config_payload_string+0x260>)
 80149ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80149ee:	4b17      	ldr	r3, [pc, #92]	@ (8014a4c <get_config_payload_string+0x280>)
 80149f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80149f2:	4b27      	ldr	r3, [pc, #156]	@ (8014a90 <get_config_payload_string+0x2c4>)
 80149f4:	9308      	str	r3, [sp, #32]
 80149f6:	4b27      	ldr	r3, [pc, #156]	@ (8014a94 <get_config_payload_string+0x2c8>)
 80149f8:	9307      	str	r3, [sp, #28]
 80149fa:	4b0c      	ldr	r3, [pc, #48]	@ (8014a2c <get_config_payload_string+0x260>)
 80149fc:	9306      	str	r3, [sp, #24]
 80149fe:	4b13      	ldr	r3, [pc, #76]	@ (8014a4c <get_config_payload_string+0x280>)
 8014a00:	9305      	str	r3, [sp, #20]
 8014a02:	4b25      	ldr	r3, [pc, #148]	@ (8014a98 <get_config_payload_string+0x2cc>)
 8014a04:	9304      	str	r3, [sp, #16]
 8014a06:	4b1b      	ldr	r3, [pc, #108]	@ (8014a74 <get_config_payload_string+0x2a8>)
 8014a08:	9303      	str	r3, [sp, #12]
 8014a0a:	4b22      	ldr	r3, [pc, #136]	@ (8014a94 <get_config_payload_string+0x2c8>)
 8014a0c:	9302      	str	r3, [sp, #8]
 8014a0e:	4b14      	ldr	r3, [pc, #80]	@ (8014a60 <get_config_payload_string+0x294>)
 8014a10:	9301      	str	r3, [sp, #4]
 8014a12:	4b06      	ldr	r3, [pc, #24]	@ (8014a2c <get_config_payload_string+0x260>)
 8014a14:	9300      	str	r3, [sp, #0]
 8014a16:	4b0d      	ldr	r3, [pc, #52]	@ (8014a4c <get_config_payload_string+0x280>)
 8014a18:	4a1e      	ldr	r2, [pc, #120]	@ (8014a94 <get_config_payload_string+0x2c8>)
 8014a1a:	4912      	ldr	r1, [pc, #72]	@ (8014a64 <get_config_payload_string+0x298>)
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f018 ff69 	bl	802d8f4 <siprintf>
 8014a22:	4603      	mov	r3, r0
 8014a24:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014a26:	e067      	b.n	8014af8 <get_config_payload_string+0x32c>
 8014a28:	200008cc 	.word	0x200008cc
 8014a2c:	200008bc 	.word	0x200008bc
 8014a30:	0803444c 	.word	0x0803444c
 8014a34:	0803460c 	.word	0x0803460c
 8014a38:	08032e54 	.word	0x08032e54
 8014a3c:	08032e5c 	.word	0x08032e5c
 8014a40:	08032e60 	.word	0x08032e60
 8014a44:	08032e70 	.word	0x08032e70
 8014a48:	08032e80 	.word	0x08032e80
 8014a4c:	08032e14 	.word	0x08032e14
 8014a50:	08032e90 	.word	0x08032e90
 8014a54:	08032e0c 	.word	0x08032e0c
 8014a58:	08032e94 	.word	0x08032e94
 8014a5c:	08032ea4 	.word	0x08032ea4
 8014a60:	08032ec8 	.word	0x08032ec8
 8014a64:	080347a4 	.word	0x080347a4
 8014a68:	08032ed0 	.word	0x08032ed0
 8014a6c:	08032e1c 	.word	0x08032e1c
 8014a70:	08032ed4 	.word	0x08032ed4
 8014a74:	08032ee4 	.word	0x08032ee4
 8014a78:	08032ee8 	.word	0x08032ee8
 8014a7c:	08032e24 	.word	0x08032e24
 8014a80:	08032eec 	.word	0x08032eec
 8014a84:	08032f10 	.word	0x08032f10
 8014a88:	08032e2c 	.word	0x08032e2c
 8014a8c:	08032f14 	.word	0x08032f14
 8014a90:	08032f34 	.word	0x08032f34
 8014a94:	08032e3c 	.word	0x08032e3c
 8014a98:	08032f38 	.word	0x08032f38
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8014a9c:	4b18      	ldr	r3, [pc, #96]	@ (8014b00 <get_config_payload_string+0x334>)
 8014a9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014aa0:	4b18      	ldr	r3, [pc, #96]	@ (8014b04 <get_config_payload_string+0x338>)
 8014aa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014aa4:	4b18      	ldr	r3, [pc, #96]	@ (8014b08 <get_config_payload_string+0x33c>)
 8014aa6:	930e      	str	r3, [sp, #56]	@ 0x38
 8014aa8:	4b18      	ldr	r3, [pc, #96]	@ (8014b0c <get_config_payload_string+0x340>)
 8014aaa:	930d      	str	r3, [sp, #52]	@ 0x34
 8014aac:	4b18      	ldr	r3, [pc, #96]	@ (8014b10 <get_config_payload_string+0x344>)
 8014aae:	930c      	str	r3, [sp, #48]	@ 0x30
 8014ab0:	4b18      	ldr	r3, [pc, #96]	@ (8014b14 <get_config_payload_string+0x348>)
 8014ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014ab4:	4b18      	ldr	r3, [pc, #96]	@ (8014b18 <get_config_payload_string+0x34c>)
 8014ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ab8:	4b18      	ldr	r3, [pc, #96]	@ (8014b1c <get_config_payload_string+0x350>)
 8014aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8014abc:	4b18      	ldr	r3, [pc, #96]	@ (8014b20 <get_config_payload_string+0x354>)
 8014abe:	9308      	str	r3, [sp, #32]
 8014ac0:	4b18      	ldr	r3, [pc, #96]	@ (8014b24 <get_config_payload_string+0x358>)
 8014ac2:	9307      	str	r3, [sp, #28]
 8014ac4:	4b14      	ldr	r3, [pc, #80]	@ (8014b18 <get_config_payload_string+0x34c>)
 8014ac6:	9306      	str	r3, [sp, #24]
 8014ac8:	4b14      	ldr	r3, [pc, #80]	@ (8014b1c <get_config_payload_string+0x350>)
 8014aca:	9305      	str	r3, [sp, #20]
 8014acc:	4b16      	ldr	r3, [pc, #88]	@ (8014b28 <get_config_payload_string+0x35c>)
 8014ace:	9304      	str	r3, [sp, #16]
 8014ad0:	4b16      	ldr	r3, [pc, #88]	@ (8014b2c <get_config_payload_string+0x360>)
 8014ad2:	9303      	str	r3, [sp, #12]
 8014ad4:	4b13      	ldr	r3, [pc, #76]	@ (8014b24 <get_config_payload_string+0x358>)
 8014ad6:	9302      	str	r3, [sp, #8]
 8014ad8:	4b15      	ldr	r3, [pc, #84]	@ (8014b30 <get_config_payload_string+0x364>)
 8014ada:	9301      	str	r3, [sp, #4]
 8014adc:	4b0e      	ldr	r3, [pc, #56]	@ (8014b18 <get_config_payload_string+0x34c>)
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8014b1c <get_config_payload_string+0x350>)
 8014ae2:	4a10      	ldr	r2, [pc, #64]	@ (8014b24 <get_config_payload_string+0x358>)
 8014ae4:	4913      	ldr	r1, [pc, #76]	@ (8014b34 <get_config_payload_string+0x368>)
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f018 ff04 	bl	802d8f4 <siprintf>
 8014aec:	4603      	mov	r3, r0
 8014aee:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014af0:	e002      	b.n	8014af8 <get_config_payload_string+0x32c>

		default:
			return -1;
 8014af2:	f04f 33ff 	mov.w	r3, #4294967295
 8014af6:	e7ff      	b.n	8014af8 <get_config_payload_string+0x32c>
			break;
	}
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3714      	adds	r7, #20
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd90      	pop	{r4, r7, pc}
 8014b00:	200008cc 	.word	0x200008cc
 8014b04:	08032e54 	.word	0x08032e54
 8014b08:	08032e5c 	.word	0x08032e5c
 8014b0c:	08032e60 	.word	0x08032e60
 8014b10:	08032e70 	.word	0x08032e70
 8014b14:	08032e80 	.word	0x08032e80
 8014b18:	200008bc 	.word	0x200008bc
 8014b1c:	08032e14 	.word	0x08032e14
 8014b20:	08032f64 	.word	0x08032f64
 8014b24:	08032e4c 	.word	0x08032e4c
 8014b28:	08032f68 	.word	0x08032f68
 8014b2c:	08032ee4 	.word	0x08032ee4
 8014b30:	08032ec8 	.word	0x08032ec8
 8014b34:	080347a4 	.word	0x080347a4

08014b38 <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b084      	sub	sp, #16
 8014b3c:	af02      	add	r7, sp, #8
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	460b      	mov	r3, r1
 8014b42:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2200      	movs	r2, #0
 8014b48:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 8014b4a:	4b11      	ldr	r3, [pc, #68]	@ (8014b90 <generate_status_topik+0x58>)
 8014b4c:	9300      	str	r3, [sp, #0]
 8014b4e:	4b11      	ldr	r3, [pc, #68]	@ (8014b94 <generate_status_topik+0x5c>)
 8014b50:	4a11      	ldr	r2, [pc, #68]	@ (8014b98 <generate_status_topik+0x60>)
 8014b52:	4912      	ldr	r1, [pc, #72]	@ (8014b9c <generate_status_topik+0x64>)
 8014b54:	6878      	ldr	r0, [r7, #4]
 8014b56:	f018 fecd 	bl	802d8f4 <siprintf>

	switch (topik_type) {
 8014b5a:	78fb      	ldrb	r3, [r7, #3]
 8014b5c:	2b01      	cmp	r3, #1
 8014b5e:	d002      	beq.n	8014b66 <generate_status_topik+0x2e>
 8014b60:	2b02      	cmp	r3, #2
 8014b62:	d006      	beq.n	8014b72 <generate_status_topik+0x3a>
 8014b64:	e00b      	b.n	8014b7e <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 8014b66:	4a0b      	ldr	r2, [pc, #44]	@ (8014b94 <generate_status_topik+0x5c>)
 8014b68:	490d      	ldr	r1, [pc, #52]	@ (8014ba0 <generate_status_topik+0x68>)
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f018 fec2 	bl	802d8f4 <siprintf>
			break;
 8014b70:	e008      	b.n	8014b84 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 8014b72:	4a08      	ldr	r2, [pc, #32]	@ (8014b94 <generate_status_topik+0x5c>)
 8014b74:	490b      	ldr	r1, [pc, #44]	@ (8014ba4 <generate_status_topik+0x6c>)
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f018 febc 	bl	802d8f4 <siprintf>
			break;
 8014b7c:	e002      	b.n	8014b84 <generate_status_topik+0x4c>

		default:
			return -1;
 8014b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b82:	e000      	b.n	8014b86 <generate_status_topik+0x4e>
			break;
	}

	return 0;
 8014b84:	2300      	movs	r3, #0
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3708      	adds	r7, #8
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}
 8014b8e:	bf00      	nop
 8014b90:	08032ec8 	.word	0x08032ec8
 8014b94:	200008bc 	.word	0x200008bc
 8014b98:	08032e14 	.word	0x08032e14
 8014b9c:	08032f90 	.word	0x08032f90
 8014ba0:	20000094 	.word	0x20000094
 8014ba4:	200000a4 	.word	0x200000a4

08014ba8 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b086      	sub	sp, #24
 8014bac:	af02      	add	r7, sp, #8
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f7fb fcde 	bl	8010578 <__aeabi_f2d>
 8014bbc:	4602      	mov	r2, r0
 8014bbe:	460b      	mov	r3, r1
 8014bc0:	e9cd 2300 	strd	r2, r3, [sp]
 8014bc4:	68ba      	ldr	r2, [r7, #8]
 8014bc6:	4904      	ldr	r1, [pc, #16]	@ (8014bd8 <generate_key_value_JSON+0x30>)
 8014bc8:	68f8      	ldr	r0, [r7, #12]
 8014bca:	f018 fe93 	bl	802d8f4 <siprintf>
}
 8014bce:	bf00      	nop
 8014bd0:	3710      	adds	r7, #16
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	08032f9c 	.word	0x08032f9c

08014bdc <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 8014bdc:	b5b0      	push	{r4, r5, r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	60b9      	str	r1, [r7, #8]
 8014be6:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f7fb fca2 	bl	8010534 <__aeabi_ui2d>
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	460d      	mov	r5, r1
 8014bf4:	68b8      	ldr	r0, [r7, #8]
 8014bf6:	f7fb fc9d 	bl	8010534 <__aeabi_ui2d>
 8014bfa:	f04f 0200 	mov.w	r2, #0
 8014bfe:	4b17      	ldr	r3, [pc, #92]	@ (8014c5c <InitHLW8032+0x80>)
 8014c00:	f7fb fd12 	bl	8010628 <__aeabi_dmul>
 8014c04:	4602      	mov	r2, r0
 8014c06:	460b      	mov	r3, r1
 8014c08:	4620      	mov	r0, r4
 8014c0a:	4629      	mov	r1, r5
 8014c0c:	f7fb fe36 	bl	801087c <__aeabi_ddiv>
 8014c10:	4602      	mov	r2, r0
 8014c12:	460b      	mov	r3, r1
 8014c14:	4610      	mov	r0, r2
 8014c16:	4619      	mov	r1, r3
 8014c18:	f7fb fffe 	bl	8010c18 <__aeabi_d2f>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	4a10      	ldr	r2, [pc, #64]	@ (8014c60 <InitHLW8032+0x84>)
 8014c20:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f7fb fca8 	bl	8010578 <__aeabi_f2d>
 8014c28:	f04f 0200 	mov.w	r2, #0
 8014c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8014c5c <InitHLW8032+0x80>)
 8014c2e:	f7fb fcfb 	bl	8010628 <__aeabi_dmul>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	f04f 0000 	mov.w	r0, #0
 8014c3a:	490a      	ldr	r1, [pc, #40]	@ (8014c64 <InitHLW8032+0x88>)
 8014c3c:	f7fb fe1e 	bl	801087c <__aeabi_ddiv>
 8014c40:	4602      	mov	r2, r0
 8014c42:	460b      	mov	r3, r1
 8014c44:	4610      	mov	r0, r2
 8014c46:	4619      	mov	r1, r3
 8014c48:	f7fb ffe6 	bl	8010c18 <__aeabi_d2f>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	4a06      	ldr	r2, [pc, #24]	@ (8014c68 <InitHLW8032+0x8c>)
 8014c50:	6013      	str	r3, [r2, #0]
}
 8014c52:	bf00      	nop
 8014c54:	3710      	adds	r7, #16
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bdb0      	pop	{r4, r5, r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	408f4000 	.word	0x408f4000
 8014c60:	200000b4 	.word	0x200000b4
 8014c64:	3ff00000 	.word	0x3ff00000
 8014c68:	200000b8 	.word	0x200000b8

08014c6c <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 8014c6c:	b480      	push	{r7}
 8014c6e:	b085      	sub	sp, #20
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8014c74:	2300      	movs	r3, #0
 8014c76:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014c78:	2302      	movs	r3, #2
 8014c7a:	73fb      	strb	r3, [r7, #15]
 8014c7c:	e00e      	b.n	8014c9c <Checksum+0x30>
		tmp = string[i];
 8014c7e:	7bfb      	ldrb	r3, [r7, #15]
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	4413      	add	r3, r2
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8014c88:	7bfb      	ldrb	r3, [r7, #15]
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	781a      	ldrb	r2, [r3, #0]
 8014c90:	7bbb      	ldrb	r3, [r7, #14]
 8014c92:	4413      	add	r3, r2
 8014c94:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014c96:	7bfb      	ldrb	r3, [r7, #15]
 8014c98:	3301      	adds	r3, #1
 8014c9a:	73fb      	strb	r3, [r7, #15]
 8014c9c:	7bfb      	ldrb	r3, [r7, #15]
 8014c9e:	2b16      	cmp	r3, #22
 8014ca0:	d9ed      	bls.n	8014c7e <Checksum+0x12>
	}
	if (byte == string[23])
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	3317      	adds	r3, #23
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	7bba      	ldrb	r2, [r7, #14]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d101      	bne.n	8014cb2 <Checksum+0x46>
	{
		return 1;
 8014cae:	2301      	movs	r3, #1
 8014cb0:	e000      	b.n	8014cb4 <Checksum+0x48>
	}
	return 0;
 8014cb2:	2300      	movs	r3, #0
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3714      	adds	r7, #20
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	3301      	adds	r3, #1
 8014ccc:	215a      	movs	r1, #90	@ 0x5a
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7fb fa86 	bl	80101e0 <strcmp>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d102      	bne.n	8014ce0 <RecvRawString+0x20>
		return -1; //error code
 8014cda:	f04f 33ff 	mov.w	r3, #4294967295
 8014cde:	e0a7      	b.n	8014e30 <RecvRawString+0x170>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f7ff ffc3 	bl	8014c6c <Checksum>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d102      	bne.n	8014cf2 <RecvRawString+0x32>
		return -2; //Checksum Error
 8014cec:	f06f 0301 	mvn.w	r3, #1
 8014cf0:	e09e      	b.n	8014e30 <RecvRawString+0x170>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	3302      	adds	r3, #2
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	041a      	lsls	r2, r3, #16
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	3303      	adds	r3, #3
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	021b      	lsls	r3, r3, #8
 8014d02:	4413      	add	r3, r2
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	3204      	adds	r2, #4
 8014d08:	7812      	ldrb	r2, [r2, #0]
 8014d0a:	4413      	add	r3, r2
 8014d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8014e38 <RecvRawString+0x178>)
 8014d0e:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	3314      	adds	r3, #20
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	099b      	lsrs	r3, r3, #6
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	f003 0301 	and.w	r3, r3, #1
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d00e      	beq.n	8014d40 <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	3305      	adds	r3, #5
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	041a      	lsls	r2, r3, #16
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	3306      	adds	r3, #6
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	021b      	lsls	r3, r3, #8
 8014d32:	4413      	add	r3, r2
 8014d34:	687a      	ldr	r2, [r7, #4]
 8014d36:	3207      	adds	r2, #7
 8014d38:	7812      	ldrb	r2, [r2, #0]
 8014d3a:	4413      	add	r3, r2
 8014d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8014e3c <RecvRawString+0x17c>)
 8014d3e:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	3308      	adds	r3, #8
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	041a      	lsls	r2, r3, #16
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	3309      	adds	r3, #9
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	021b      	lsls	r3, r3, #8
 8014d50:	4413      	add	r3, r2
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	320a      	adds	r2, #10
 8014d56:	7812      	ldrb	r2, [r2, #0]
 8014d58:	4413      	add	r3, r2
 8014d5a:	4a39      	ldr	r2, [pc, #228]	@ (8014e40 <RecvRawString+0x180>)
 8014d5c:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	3314      	adds	r3, #20
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	095b      	lsrs	r3, r3, #5
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	f003 0301 	and.w	r3, r3, #1
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d00e      	beq.n	8014d8e <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	330b      	adds	r3, #11
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	041a      	lsls	r2, r3, #16
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	330c      	adds	r3, #12
 8014d7c:	781b      	ldrb	r3, [r3, #0]
 8014d7e:	021b      	lsls	r3, r3, #8
 8014d80:	4413      	add	r3, r2
 8014d82:	687a      	ldr	r2, [r7, #4]
 8014d84:	320d      	adds	r2, #13
 8014d86:	7812      	ldrb	r2, [r2, #0]
 8014d88:	4413      	add	r3, r2
 8014d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8014e44 <RecvRawString+0x184>)
 8014d8c:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	330e      	adds	r3, #14
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	041a      	lsls	r2, r3, #16
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	330f      	adds	r3, #15
 8014d9a:	781b      	ldrb	r3, [r3, #0]
 8014d9c:	021b      	lsls	r3, r3, #8
 8014d9e:	4413      	add	r3, r2
 8014da0:	687a      	ldr	r2, [r7, #4]
 8014da2:	3210      	adds	r2, #16
 8014da4:	7812      	ldrb	r2, [r2, #0]
 8014da6:	4413      	add	r3, r2
 8014da8:	4a27      	ldr	r2, [pc, #156]	@ (8014e48 <RecvRawString+0x188>)
 8014daa:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	3314      	adds	r3, #20
 8014db0:	781b      	ldrb	r3, [r3, #0]
 8014db2:	091b      	lsrs	r3, r3, #4
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	f003 0301 	and.w	r3, r3, #1
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d00e      	beq.n	8014ddc <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	3311      	adds	r3, #17
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	041a      	lsls	r2, r3, #16
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	3312      	adds	r3, #18
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	021b      	lsls	r3, r3, #8
 8014dce:	4413      	add	r3, r2
 8014dd0:	687a      	ldr	r2, [r7, #4]
 8014dd2:	3213      	adds	r2, #19
 8014dd4:	7812      	ldrb	r2, [r2, #0]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8014e4c <RecvRawString+0x18c>)
 8014dda:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	3315      	adds	r3, #21
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	021b      	lsls	r3, r3, #8
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	687a      	ldr	r2, [r7, #4]
 8014de8:	3216      	adds	r2, #22
 8014dea:	7812      	ldrb	r2, [r2, #0]
 8014dec:	4413      	add	r3, r2
 8014dee:	b29a      	uxth	r2, r3
 8014df0:	4b17      	ldr	r3, [pc, #92]	@ (8014e50 <RecvRawString+0x190>)
 8014df2:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	3314      	adds	r3, #20
 8014df8:	781b      	ldrb	r3, [r3, #0]
 8014dfa:	09db      	lsrs	r3, r3, #7
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	f003 0301 	and.w	r3, r3, #1
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d004      	beq.n	8014e10 <RecvRawString+0x150>
	{
		PFData++;
 8014e06:	4b13      	ldr	r3, [pc, #76]	@ (8014e54 <RecvRawString+0x194>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	3301      	adds	r3, #1
 8014e0c:	4a11      	ldr	r2, [pc, #68]	@ (8014e54 <RecvRawString+0x194>)
 8014e0e:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014e10:	4b11      	ldr	r3, [pc, #68]	@ (8014e58 <RecvRawString+0x198>)
 8014e12:	881a      	ldrh	r2, [r3, #0]
 8014e14:	4b0e      	ldr	r3, [pc, #56]	@ (8014e50 <RecvRawString+0x190>)
 8014e16:	881b      	ldrh	r3, [r3, #0]
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d904      	bls.n	8014e26 <RecvRawString+0x166>
		test_flag++;
 8014e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8014e5c <RecvRawString+0x19c>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	3301      	adds	r3, #1
 8014e22:	4a0e      	ldr	r2, [pc, #56]	@ (8014e5c <RecvRawString+0x19c>)
 8014e24:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8014e26:	4b0a      	ldr	r3, [pc, #40]	@ (8014e50 <RecvRawString+0x190>)
 8014e28:	881a      	ldrh	r2, [r3, #0]
 8014e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8014e58 <RecvRawString+0x198>)
 8014e2c:	801a      	strh	r2, [r3, #0]

	return 0;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3708      	adds	r7, #8
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	200008e0 	.word	0x200008e0
 8014e3c:	200008e4 	.word	0x200008e4
 8014e40:	200008f0 	.word	0x200008f0
 8014e44:	200008f4 	.word	0x200008f4
 8014e48:	200008e8 	.word	0x200008e8
 8014e4c:	200008ec 	.word	0x200008ec
 8014e50:	200008fc 	.word	0x200008fc
 8014e54:	200008f8 	.word	0x200008f8
 8014e58:	200008fe 	.word	0x200008fe
 8014e5c:	20000900 	.word	0x20000900

08014e60 <GetVolRaw>:

float GetVolRaw(void){
 8014e60:	b480      	push	{r7}
 8014e62:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014e64:	4b0e      	ldr	r3, [pc, #56]	@ (8014ea0 <GetVolRaw+0x40>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d102      	bne.n	8014e72 <GetVolRaw+0x12>
		return 0;
 8014e6c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8014ea4 <GetVolRaw+0x44>
 8014e70:	e00d      	b.n	8014e8e <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014e72:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea8 <GetVolRaw+0x48>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	ee07 3a90 	vmov	s15, r3
 8014e7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e7e:	4b08      	ldr	r3, [pc, #32]	@ (8014ea0 <GetVolRaw+0x40>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	ee07 3a90 	vmov	s15, r3
 8014e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014e8e:	eef0 7a66 	vmov.f32	s15, s13
 8014e92:	eeb0 0a67 	vmov.f32	s0, s15
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr
 8014e9e:	bf00      	nop
 8014ea0:	200008e4 	.word	0x200008e4
 8014ea4:	00000000 	.word	0x00000000
 8014ea8:	200008e0 	.word	0x200008e0

08014eac <GetVoltage>:

float GetVoltage(void){
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8014eb2:	f7ff ffd5 	bl	8014e60 <GetVolRaw>
 8014eb6:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 8014eba:	4b0d      	ldr	r3, [pc, #52]	@ (8014ef0 <GetVoltage+0x44>)
 8014ebc:	edd3 7a00 	vldr	s15, [r3]
 8014ec0:	ed97 7a00 	vldr	s14, [r7]
 8014ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ec8:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 8014ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8014ed0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed8:	d501      	bpl.n	8014ede <GetVoltage+0x32>
 8014eda:	4b06      	ldr	r3, [pc, #24]	@ (8014ef4 <GetVoltage+0x48>)
 8014edc:	607b      	str	r3, [r7, #4]
	return RealVolt;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	ee07 3a90 	vmov	s15, r3
}
 8014ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8014ee8:	3708      	adds	r7, #8
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	200000b4 	.word	0x200000b4
 8014ef4:	3089705f 	.word	0x3089705f

08014ef8 <GetCurrentRaw>:

float GetCurrentRaw(void){
 8014ef8:	b480      	push	{r7}
 8014efa:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8014efc:	4b0e      	ldr	r3, [pc, #56]	@ (8014f38 <GetCurrentRaw+0x40>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d102      	bne.n	8014f0a <GetCurrentRaw+0x12>
		return 0;
 8014f04:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8014f3c <GetCurrentRaw+0x44>
 8014f08:	e00d      	b.n	8014f26 <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8014f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8014f40 <GetCurrentRaw+0x48>)
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	ee07 3a90 	vmov	s15, r3
 8014f12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014f16:	4b08      	ldr	r3, [pc, #32]	@ (8014f38 <GetCurrentRaw+0x40>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	ee07 3a90 	vmov	s15, r3
 8014f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f22:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014f26:	eef0 7a66 	vmov.f32	s15, s13
 8014f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f34:	4770      	bx	lr
 8014f36:	bf00      	nop
 8014f38:	200008f4 	.word	0x200008f4
 8014f3c:	00000000 	.word	0x00000000
 8014f40:	200008f0 	.word	0x200008f0

08014f44 <GetCurrent>:

float GetCurrent(void){
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8014f4a:	f7ff ffd5 	bl	8014ef8 <GetCurrentRaw>
 8014f4e:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014f52:	4b0d      	ldr	r3, [pc, #52]	@ (8014f88 <GetCurrent+0x44>)
 8014f54:	edd3 7a00 	vldr	s15, [r3]
 8014f58:	ed97 7a00 	vldr	s14, [r7]
 8014f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f60:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8014f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f70:	d501      	bpl.n	8014f76 <GetCurrent+0x32>
 8014f72:	4b06      	ldr	r3, [pc, #24]	@ (8014f8c <GetCurrent+0x48>)
 8014f74:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	ee07 3a90 	vmov	s15, r3
}
 8014f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8014f80:	3708      	adds	r7, #8
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	200000b8 	.word	0x200000b8
 8014f8c:	3089705f 	.word	0x3089705f

08014f90 <GetActivePower>:

float GetActivePower(void){
 8014f90:	b480      	push	{r7}
 8014f92:	b083      	sub	sp, #12
 8014f94:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 8014f96:	4b18      	ldr	r3, [pc, #96]	@ (8014ff8 <GetActivePower+0x68>)
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d102      	bne.n	8014fa4 <GetActivePower+0x14>
		return 0;
 8014f9e:	f04f 0300 	mov.w	r3, #0
 8014fa2:	e01f      	b.n	8014fe4 <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014fa4:	4b15      	ldr	r3, [pc, #84]	@ (8014ffc <GetActivePower+0x6c>)
 8014fa6:	681a      	ldr	r2, [r3, #0]
 8014fa8:	4b13      	ldr	r3, [pc, #76]	@ (8014ff8 <GetActivePower+0x68>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8014fb0:	ee07 3a90 	vmov	s15, r3
 8014fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014fb8:	4b11      	ldr	r3, [pc, #68]	@ (8015000 <GetActivePower+0x70>)
 8014fba:	edd3 7a00 	vldr	s15, [r3]
 8014fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014fc2:	4b10      	ldr	r3, [pc, #64]	@ (8015004 <GetActivePower+0x74>)
 8014fc4:	edd3 7a00 	vldr	s15, [r3]
 8014fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014fcc:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 8014fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8014fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fdc:	d501      	bpl.n	8014fe2 <GetActivePower+0x52>
 8014fde:	4b0a      	ldr	r3, [pc, #40]	@ (8015008 <GetActivePower+0x78>)
 8014fe0:	607b      	str	r3, [r7, #4]

	return tmp;
 8014fe2:	687b      	ldr	r3, [r7, #4]
}
 8014fe4:	ee07 3a90 	vmov	s15, r3
 8014fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8014fec:	370c      	adds	r7, #12
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff4:	4770      	bx	lr
 8014ff6:	bf00      	nop
 8014ff8:	200008ec 	.word	0x200008ec
 8014ffc:	200008e8 	.word	0x200008e8
 8015000:	200000b4 	.word	0x200000b4
 8015004:	200000b8 	.word	0x200000b8
 8015008:	3089705f 	.word	0x3089705f

0801500c <GetApparentPower>:

float GetApparentPower(void){
 801500c:	b580      	push	{r7, lr}
 801500e:	b084      	sub	sp, #16
 8015010:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 8015012:	f7ff ff4b 	bl	8014eac <GetVoltage>
 8015016:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 801501a:	f7ff ff93 	bl	8014f44 <GetCurrent>
 801501e:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 8015022:	ed97 7a02 	vldr	s14, [r7, #8]
 8015026:	edd7 7a01 	vldr	s15, [r7, #4]
 801502a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801502e:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 8015032:	edd7 7a03 	vldr	s15, [r7, #12]
 8015036:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 801503a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015042:	d501      	bpl.n	8015048 <GetApparentPower+0x3c>
 8015044:	4b04      	ldr	r3, [pc, #16]	@ (8015058 <GetApparentPower+0x4c>)
 8015046:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	ee07 3a90 	vmov	s15, r3
}
 801504e:	eeb0 0a67 	vmov.f32	s0, s15
 8015052:	3710      	adds	r7, #16
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	3089705f 	.word	0x3089705f

0801505c <PowerFactor>:

float PowerFactor(void){
 801505c:	b580      	push	{r7, lr}
 801505e:	b084      	sub	sp, #16
 8015060:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 8015062:	f7ff ff95 	bl	8014f90 <GetActivePower>
 8015066:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 801506a:	f7ff ffcf 	bl	801500c <GetApparentPower>
 801506e:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 0;
 8015072:	edd7 7a02 	vldr	s15, [r7, #8]
 8015076:	eef5 7a40 	vcmp.f32	s15, #0.0
 801507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801507e:	d102      	bne.n	8015086 <PowerFactor+0x2a>
 8015080:	f04f 0300 	mov.w	r3, #0
 8015084:	e01e      	b.n	80150c4 <PowerFactor+0x68>
	if (ActivePower 	== 0) return 0;
 8015086:	edd7 7a03 	vldr	s15, [r7, #12]
 801508a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015092:	d102      	bne.n	801509a <PowerFactor+0x3e>
 8015094:	f04f 0300 	mov.w	r3, #0
 8015098:	e014      	b.n	80150c4 <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 801509a:	ed97 7a03 	vldr	s14, [r7, #12]
 801509e:	edd7 7a02 	vldr	s15, [r7, #8]
 80150a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80150a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150aa:	dd02      	ble.n	80150b2 <PowerFactor+0x56>
 80150ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80150b0:	e008      	b.n	80150c4 <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 80150b2:	edd7 6a03 	vldr	s13, [r7, #12]
 80150b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80150ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80150be:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 80150c2:	687b      	ldr	r3, [r7, #4]
}
 80150c4:	ee07 3a90 	vmov	s15, r3
 80150c8:	eeb0 0a67 	vmov.f32	s0, s15
 80150cc:	3710      	adds	r7, #16
 80150ce:	46bd      	mov	sp, r7
 80150d0:	bd80      	pop	{r7, pc}
	...

080150d4 <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 80150d4:	b480      	push	{r7}
 80150d6:	af00      	add	r7, sp, #0
	return test_flag;
 80150d8:	4b03      	ldr	r3, [pc, #12]	@ (80150e8 <GetTestPulse+0x14>)
 80150da:	681b      	ldr	r3, [r3, #0]
}
 80150dc:	4618      	mov	r0, r3
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop
 80150e8:	20000900 	.word	0x20000900

080150ec <GetCountedPulse>:

uint32_t GetCountedPulse(){
 80150ec:	b480      	push	{r7}
 80150ee:	af00      	add	r7, sp, #0
	return PFData;
 80150f0:	4b03      	ldr	r3, [pc, #12]	@ (8015100 <GetCountedPulse+0x14>)
 80150f2:	681b      	ldr	r3, [r3, #0]
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	46bd      	mov	sp, r7
 80150f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fc:	4770      	bx	lr
 80150fe:	bf00      	nop
 8015100:	200008f8 	.word	0x200008f8

08015104 <GetPFReg>:

uint32_t GetPFReg(){
 8015104:	b480      	push	{r7}
 8015106:	af00      	add	r7, sp, #0
	return PF_reg;
 8015108:	4b03      	ldr	r3, [pc, #12]	@ (8015118 <GetPFReg+0x14>)
 801510a:	881b      	ldrh	r3, [r3, #0]
}
 801510c:	4618      	mov	r0, r3
 801510e:	46bd      	mov	sp, r7
 8015110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015114:	4770      	bx	lr
 8015116:	bf00      	nop
 8015118:	200008fc 	.word	0x200008fc
 801511c:	00000000 	.word	0x00000000

08015120 <GetKWh>:

float GetKWh(void){
 8015120:	b5b0      	push	{r4, r5, r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 8015126:	f7ff ff71 	bl	801500c <GetApparentPower>
 801512a:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 801512e:	4b38      	ldr	r3, [pc, #224]	@ (8015210 <GetKWh+0xf0>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	4618      	mov	r0, r3
 8015134:	f7fb f9fe 	bl	8010534 <__aeabi_ui2d>
 8015138:	4602      	mov	r2, r0
 801513a:	460b      	mov	r3, r1
 801513c:	f04f 0000 	mov.w	r0, #0
 8015140:	4934      	ldr	r1, [pc, #208]	@ (8015214 <GetKWh+0xf4>)
 8015142:	f7fb fb9b 	bl	801087c <__aeabi_ddiv>
 8015146:	4602      	mov	r2, r0
 8015148:	460b      	mov	r3, r1
 801514a:	4614      	mov	r4, r2
 801514c:	461d      	mov	r5, r3
 801514e:	4b32      	ldr	r3, [pc, #200]	@ (8015218 <GetKWh+0xf8>)
 8015150:	ed93 7a00 	vldr	s14, [r3]
 8015154:	4b31      	ldr	r3, [pc, #196]	@ (801521c <GetKWh+0xfc>)
 8015156:	edd3 7a00 	vldr	s15, [r3]
 801515a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801515e:	ee17 0a90 	vmov	r0, s15
 8015162:	f7fb fa09 	bl	8010578 <__aeabi_f2d>
 8015166:	4602      	mov	r2, r0
 8015168:	460b      	mov	r3, r1
 801516a:	f04f 0000 	mov.w	r0, #0
 801516e:	4929      	ldr	r1, [pc, #164]	@ (8015214 <GetKWh+0xf4>)
 8015170:	f7fb fb84 	bl	801087c <__aeabi_ddiv>
 8015174:	4602      	mov	r2, r0
 8015176:	460b      	mov	r3, r1
 8015178:	4620      	mov	r0, r4
 801517a:	4629      	mov	r1, r5
 801517c:	f7fb fa54 	bl	8010628 <__aeabi_dmul>
 8015180:	4602      	mov	r2, r0
 8015182:	460b      	mov	r3, r1
 8015184:	4610      	mov	r0, r2
 8015186:	4619      	mov	r1, r3
 8015188:	a31d      	add	r3, pc, #116	@ (adr r3, 8015200 <GetKWh+0xe0>)
 801518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518e:	f7fb fa4b 	bl	8010628 <__aeabi_dmul>
 8015192:	4602      	mov	r2, r0
 8015194:	460b      	mov	r3, r1
 8015196:	4610      	mov	r0, r2
 8015198:	4619      	mov	r1, r3
 801519a:	a31b      	add	r3, pc, #108	@ (adr r3, 8015208 <GetKWh+0xe8>)
 801519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a0:	f7fb fa42 	bl	8010628 <__aeabi_dmul>
 80151a4:	4602      	mov	r2, r0
 80151a6:	460b      	mov	r3, r1
 80151a8:	4610      	mov	r0, r2
 80151aa:	4619      	mov	r1, r3
 80151ac:	f7fb fd34 	bl	8010c18 <__aeabi_d2f>
 80151b0:	4603      	mov	r3, r0
 80151b2:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 80151b4:	f7ff ff8e 	bl	80150d4 <GetTestPulse>
 80151b8:	4603      	mov	r3, r0
 80151ba:	041c      	lsls	r4, r3, #16
 80151bc:	f7ff ffa2 	bl	8015104 <GetPFReg>
 80151c0:	4603      	mov	r3, r0
 80151c2:	4423      	add	r3, r4
 80151c4:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	ee07 3a90 	vmov	s15, r3
 80151cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80151d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80151d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80151d8:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 80151dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80151e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80151e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e8:	d501      	bpl.n	80151ee <GetKWh+0xce>
 80151ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015220 <GetKWh+0x100>)
 80151ec:	60fb      	str	r3, [r7, #12]

	return kWh;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	ee07 3a90 	vmov	s15, r3
}
 80151f4:	eeb0 0a67 	vmov.f32	s0, s15
 80151f8:	3710      	adds	r7, #16
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bdb0      	pop	{r4, r5, r7, pc}
 80151fe:	bf00      	nop
 8015200:	00000000 	.word	0x00000000
 8015204:	41cdcd65 	.word	0x41cdcd65
 8015208:	00000000 	.word	0x00000000
 801520c:	40ac2000 	.word	0x40ac2000
 8015210:	200008e8 	.word	0x200008e8
 8015214:	3ff00000 	.word	0x3ff00000
 8015218:	200000b4 	.word	0x200000b4
 801521c:	200000b8 	.word	0x200000b8
 8015220:	3089705f 	.word	0x3089705f

08015224 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8015224:	b480      	push	{r7}
 8015226:	af00      	add	r7, sp, #0
 8015228:	bf00      	nop
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr
	...

08015234 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 8015234:	b480      	push	{r7}
 8015236:	b085      	sub	sp, #20
 8015238:	af00      	add	r7, sp, #0
 801523a:	60f8      	str	r0, [r7, #12]
 801523c:	60b9      	str	r1, [r7, #8]
 801523e:	607a      	str	r2, [r7, #4]
 8015240:	603b      	str	r3, [r7, #0]

	if (chip_select){
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d003      	beq.n	8015250 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8015248:	4a0e      	ldr	r2, [pc, #56]	@ (8015284 <SPI_flash_reg_cb+0x50>)
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	60d3      	str	r3, [r2, #12]
 801524e:	e002      	b.n	8015256 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8015250:	4b0c      	ldr	r3, [pc, #48]	@ (8015284 <SPI_flash_reg_cb+0x50>)
 8015252:	4a0d      	ldr	r2, [pc, #52]	@ (8015288 <SPI_flash_reg_cb+0x54>)
 8015254:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d003      	beq.n	8015264 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 801525c:	4a09      	ldr	r2, [pc, #36]	@ (8015284 <SPI_flash_reg_cb+0x50>)
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	6113      	str	r3, [r2, #16]
 8015262:	e002      	b.n	801526a <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 8015264:	4b07      	ldr	r3, [pc, #28]	@ (8015284 <SPI_flash_reg_cb+0x50>)
 8015266:	4a08      	ldr	r2, [pc, #32]	@ (8015288 <SPI_flash_reg_cb+0x54>)
 8015268:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 801526a:	4a06      	ldr	r2, [pc, #24]	@ (8015284 <SPI_flash_reg_cb+0x50>)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8015270:	4a04      	ldr	r2, [pc, #16]	@ (8015284 <SPI_flash_reg_cb+0x50>)
 8015272:	683b      	ldr	r3, [r7, #0]
 8015274:	6093      	str	r3, [r2, #8]

}
 8015276:	bf00      	nop
 8015278:	3714      	adds	r7, #20
 801527a:	46bd      	mov	sp, r7
 801527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop
 8015284:	20000904 	.word	0x20000904
 8015288:	08015225 	.word	0x08015225

0801528c <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 801528c:	b580      	push	{r7, lr}
 801528e:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8015290:	f000 f8ac 	bl	80153ec <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8015294:	2066      	movs	r0, #102	@ 0x66
 8015296:	f000 fa3d 	bl	8015714 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 801529a:	2099      	movs	r0, #153	@ 0x99
 801529c:	f000 fa3a 	bl	8015714 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 80152a0:	f000 f8ae 	bl	8015400 <sFLASH_CS_HIGH>
}
 80152a4:	bf00      	nop
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <sFLASH_Init>:

void sFLASH_Init(void){
 80152a8:	b580      	push	{r7, lr}
 80152aa:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 80152ac:	2064      	movs	r0, #100	@ 0x64
 80152ae:	f000 fafb 	bl	80158a8 <HAL_Delay>
    sFLASH_Reset();
 80152b2:	f7ff ffeb 	bl	801528c <sFLASH_Reset>
    HAL_Delay(100);
 80152b6:	2064      	movs	r0, #100	@ 0x64
 80152b8:	f000 faf6 	bl	80158a8 <HAL_Delay>
    HAL_Delay(100);
 80152bc:	2064      	movs	r0, #100	@ 0x64
 80152be:	f000 faf3 	bl	80158a8 <HAL_Delay>
    //unsigned int id = W25_Read_ID();

}
 80152c2:	bf00      	nop
 80152c4:	bd80      	pop	{r7, pc}
	...

080152c8 <sFLASH_GetInfo>:

struct SPI_flash_info sFLASH_GetInfo(void){
 80152c8:	b590      	push	{r4, r7, lr}
 80152ca:	b085      	sub	sp, #20
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	//sFLASH_Reset();
	sFLASH_Init();
 80152d0:	f7ff ffea 	bl	80152a8 <sFLASH_Init>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 80152d4:	f000 f9e1 	bl	801569a <sFLASH_ReadID>
 80152d8:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	4a3e      	ldr	r2, [pc, #248]	@ (80153d8 <sFLASH_GetInfo+0x110>)
 80152de:	4293      	cmp	r3, r2
 80152e0:	d03f      	beq.n	8015362 <sFLASH_GetInfo+0x9a>
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	4a3c      	ldr	r2, [pc, #240]	@ (80153d8 <sFLASH_GetInfo+0x110>)
 80152e6:	4293      	cmp	r3, r2
 80152e8:	d867      	bhi.n	80153ba <sFLASH_GetInfo+0xf2>
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	4a3b      	ldr	r2, [pc, #236]	@ (80153dc <sFLASH_GetInfo+0x114>)
 80152ee:	4293      	cmp	r3, r2
 80152f0:	d021      	beq.n	8015336 <sFLASH_GetInfo+0x6e>
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	4a39      	ldr	r2, [pc, #228]	@ (80153dc <sFLASH_GetInfo+0x114>)
 80152f6:	4293      	cmp	r3, r2
 80152f8:	d85f      	bhi.n	80153ba <sFLASH_GetInfo+0xf2>
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	4a38      	ldr	r2, [pc, #224]	@ (80153e0 <sFLASH_GetInfo+0x118>)
 80152fe:	4293      	cmp	r3, r2
 8015300:	d045      	beq.n	801538e <sFLASH_GetInfo+0xc6>
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	4a37      	ldr	r2, [pc, #220]	@ (80153e4 <sFLASH_GetInfo+0x11c>)
 8015306:	4293      	cmp	r3, r2
 8015308:	d157      	bne.n	80153ba <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 801530a:	4b37      	ldr	r3, [pc, #220]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801530c:	4a35      	ldr	r2, [pc, #212]	@ (80153e4 <sFLASH_GetInfo+0x11c>)
 801530e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015310:	4b35      	ldr	r3, [pc, #212]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015312:	2201      	movs	r2, #1
 8015314:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015316:	4b34      	ldr	r3, [pc, #208]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015318:	2201      	movs	r2, #1
 801531a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801531c:	4b32      	ldr	r3, [pc, #200]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801531e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015322:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015324:	4b30      	ldr	r3, [pc, #192]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801532a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 801532c:	4b2e      	ldr	r3, [pc, #184]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801532e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015332:	819a      	strh	r2, [r3, #12]
			break;
 8015334:	e045      	b.n	80153c2 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8015336:	4b2c      	ldr	r3, [pc, #176]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015338:	4a28      	ldr	r2, [pc, #160]	@ (80153dc <sFLASH_GetInfo+0x114>)
 801533a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801533c:	4b2a      	ldr	r3, [pc, #168]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801533e:	2201      	movs	r2, #1
 8015340:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015342:	4b29      	ldr	r3, [pc, #164]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015344:	2201      	movs	r2, #1
 8015346:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015348:	4b27      	ldr	r3, [pc, #156]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801534a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801534e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015350:	4b25      	ldr	r3, [pc, #148]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015352:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015356:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015358:	4b23      	ldr	r3, [pc, #140]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801535a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801535e:	819a      	strh	r2, [r3, #12]
			break;
 8015360:	e02f      	b.n	80153c2 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8015362:	4b21      	ldr	r3, [pc, #132]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015364:	4a1c      	ldr	r2, [pc, #112]	@ (80153d8 <sFLASH_GetInfo+0x110>)
 8015366:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015368:	4b1f      	ldr	r3, [pc, #124]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801536a:	2201      	movs	r2, #1
 801536c:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 801536e:	4b1e      	ldr	r3, [pc, #120]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015370:	2201      	movs	r2, #1
 8015372:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015374:	4b1c      	ldr	r3, [pc, #112]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015376:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801537a:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 801537c:	4b1a      	ldr	r3, [pc, #104]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801537e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015382:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8015384:	4b18      	ldr	r3, [pc, #96]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801538a:	819a      	strh	r2, [r3, #12]
			break;
 801538c:	e019      	b.n	80153c2 <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 801538e:	4b16      	ldr	r3, [pc, #88]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015390:	4a13      	ldr	r2, [pc, #76]	@ (80153e0 <sFLASH_GetInfo+0x118>)
 8015392:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015394:	4b14      	ldr	r3, [pc, #80]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 8015396:	2201      	movs	r2, #1
 8015398:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 801539a:	4b13      	ldr	r3, [pc, #76]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 801539c:	2201      	movs	r2, #1
 801539e:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80153a0:	4b11      	ldr	r3, [pc, #68]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 80153a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80153a6:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80153a8:	4b0f      	ldr	r3, [pc, #60]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 80153aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80153ae:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80153b0:	4b0d      	ldr	r3, [pc, #52]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 80153b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80153b6:	819a      	strh	r2, [r3, #12]
			break;
 80153b8:	e003      	b.n	80153c2 <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 80153ba:	4b0b      	ldr	r3, [pc, #44]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 80153bc:	2200      	movs	r2, #0
 80153be:	601a      	str	r2, [r3, #0]
			break;
 80153c0:	bf00      	nop
	}

	return flash_info;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	4a08      	ldr	r2, [pc, #32]	@ (80153e8 <sFLASH_GetInfo+0x120>)
 80153c6:	461c      	mov	r4, r3
 80153c8:	4613      	mov	r3, r2
 80153ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80153cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	3714      	adds	r7, #20
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd90      	pop	{r4, r7, pc}
 80153d8:	00ef4017 	.word	0x00ef4017
 80153dc:	00ef4016 	.word	0x00ef4016
 80153e0:	00c22016 	.word	0x00c22016
 80153e4:	00ef4015 	.word	0x00ef4015
 80153e8:	20000918 	.word	0x20000918

080153ec <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80153ec:	b580      	push	{r7, lr}
 80153ee:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80153f0:	4b02      	ldr	r3, [pc, #8]	@ (80153fc <sFLASH_CS_LOW+0x10>)
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	4798      	blx	r3

}
 80153f6:	bf00      	nop
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	20000904 	.word	0x20000904

08015400 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8015400:	b580      	push	{r7, lr}
 8015402:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8015404:	4b02      	ldr	r3, [pc, #8]	@ (8015410 <sFLASH_CS_HIGH+0x10>)
 8015406:	691b      	ldr	r3, [r3, #16]
 8015408:	4798      	blx	r3
}
 801540a:	bf00      	nop
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	20000904 	.word	0x20000904

08015414 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 801541c:	f000 f98a 	bl	8015734 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015420:	f7ff ffe4 	bl	80153ec <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015424:	2020      	movs	r0, #32
 8015426:	f000 f975 	bl	8015714 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	0c1b      	lsrs	r3, r3, #16
 801542e:	b2db      	uxtb	r3, r3
 8015430:	4618      	mov	r0, r3
 8015432:	f000 f96f 	bl	8015714 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	0a1b      	lsrs	r3, r3, #8
 801543a:	b2db      	uxtb	r3, r3
 801543c:	4618      	mov	r0, r3
 801543e:	f000 f969 	bl	8015714 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	b2db      	uxtb	r3, r3
 8015446:	4618      	mov	r0, r3
 8015448:	f000 f964 	bl	8015714 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801544c:	f7ff ffd8 	bl	8015400 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015450:	f000 f97b 	bl	801574a <sFLASH_WaitForWriteEnd>
}
 8015454:	bf00      	nop
 8015456:	3708      	adds	r7, #8
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <sFLASH_EraseBulk>:
  * @brief  Erases the entire FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_EraseBulk(void)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	af00      	add	r7, sp, #0
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 8015460:	f000 f968 	bl	8015734 <sFLASH_WriteEnable>

  /*!< Bulk Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015464:	f7ff ffc2 	bl	80153ec <sFLASH_CS_LOW>
  /*!< Send Bulk Erase instruction  */
  sFLASH_SendByte(sFLASH_CMD_CE);
 8015468:	20c7      	movs	r0, #199	@ 0xc7
 801546a:	f000 f953 	bl	8015714 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801546e:	f7ff ffc7 	bl	8015400 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015472:	f000 f96a 	bl	801574a <sFLASH_WaitForWriteEnd>
}
 8015476:	bf00      	nop
 8015478:	bd80      	pop	{r7, pc}

0801547a <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 801547a:	b580      	push	{r7, lr}
 801547c:	b084      	sub	sp, #16
 801547e:	af00      	add	r7, sp, #0
 8015480:	60f8      	str	r0, [r7, #12]
 8015482:	60b9      	str	r1, [r7, #8]
 8015484:	4613      	mov	r3, r2
 8015486:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8015488:	f000 f954 	bl	8015734 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801548c:	f7ff ffae 	bl	80153ec <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 8015490:	2002      	movs	r0, #2
 8015492:	f000 f93f 	bl	8015714 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	0c1b      	lsrs	r3, r3, #16
 801549a:	b2db      	uxtb	r3, r3
 801549c:	4618      	mov	r0, r3
 801549e:	f000 f939 	bl	8015714 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	0a1b      	lsrs	r3, r3, #8
 80154a6:	b2db      	uxtb	r3, r3
 80154a8:	4618      	mov	r0, r3
 80154aa:	f000 f933 	bl	8015714 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	4618      	mov	r0, r3
 80154b4:	f000 f92e 	bl	8015714 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 80154b8:	e007      	b.n	80154ca <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	4618      	mov	r0, r3
 80154c0:	f000 f928 	bl	8015714 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	3301      	adds	r3, #1
 80154c8:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 80154ca:	88fb      	ldrh	r3, [r7, #6]
 80154cc:	1e5a      	subs	r2, r3, #1
 80154ce:	80fa      	strh	r2, [r7, #6]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d1f2      	bne.n	80154ba <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80154d4:	f7ff ff94 	bl	8015400 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80154d8:	f000 f937 	bl	801574a <sFLASH_WaitForWriteEnd>
}
 80154dc:	bf00      	nop
 80154de:	3710      	adds	r7, #16
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	60f8      	str	r0, [r7, #12]
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	4613      	mov	r3, r2
 80154f0:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80154f2:	2300      	movs	r3, #0
 80154f4:	75fb      	strb	r3, [r7, #23]
 80154f6:	2300      	movs	r3, #0
 80154f8:	75bb      	strb	r3, [r7, #22]
 80154fa:	2300      	movs	r3, #0
 80154fc:	757b      	strb	r3, [r7, #21]
 80154fe:	2300      	movs	r3, #0
 8015500:	753b      	strb	r3, [r7, #20]
 8015502:	2300      	movs	r3, #0
 8015504:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 801550a:	7d7b      	ldrb	r3, [r7, #21]
 801550c:	425b      	negs	r3, r3
 801550e:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015510:	88fb      	ldrh	r3, [r7, #6]
 8015512:	0a1b      	lsrs	r3, r3, #8
 8015514:	b29b      	uxth	r3, r3
 8015516:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015518:	88fb      	ldrh	r3, [r7, #6]
 801551a:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 801551c:	7d7b      	ldrb	r3, [r7, #21]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d124      	bne.n	801556c <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015522:	7dfb      	ldrb	r3, [r7, #23]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d114      	bne.n	8015552 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015528:	88fb      	ldrh	r3, [r7, #6]
 801552a:	461a      	mov	r2, r3
 801552c:	68b9      	ldr	r1, [r7, #8]
 801552e:	68f8      	ldr	r0, [r7, #12]
 8015530:	f7ff ffa3 	bl	801547a <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8015534:	e07b      	b.n	801562e <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015536:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801553a:	68b9      	ldr	r1, [r7, #8]
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	f7ff ff9c 	bl	801547a <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015548:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015550:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015552:	7dfb      	ldrb	r3, [r7, #23]
 8015554:	1e5a      	subs	r2, r3, #1
 8015556:	75fa      	strb	r2, [r7, #23]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d1ec      	bne.n	8015536 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801555c:	7dbb      	ldrb	r3, [r7, #22]
 801555e:	b29b      	uxth	r3, r3
 8015560:	461a      	mov	r2, r3
 8015562:	68b9      	ldr	r1, [r7, #8]
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f7ff ff88 	bl	801547a <sFLASH_WritePage>
}
 801556a:	e060      	b.n	801562e <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 801556c:	7dfb      	ldrb	r3, [r7, #23]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d125      	bne.n	80155be <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 8015572:	7dba      	ldrb	r2, [r7, #22]
 8015574:	7d3b      	ldrb	r3, [r7, #20]
 8015576:	429a      	cmp	r2, r3
 8015578:	d91a      	bls.n	80155b0 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 801557a:	7dba      	ldrb	r2, [r7, #22]
 801557c:	7d3b      	ldrb	r3, [r7, #20]
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015582:	7d3b      	ldrb	r3, [r7, #20]
 8015584:	b29b      	uxth	r3, r3
 8015586:	461a      	mov	r2, r3
 8015588:	68b9      	ldr	r1, [r7, #8]
 801558a:	68f8      	ldr	r0, [r7, #12]
 801558c:	f7ff ff75 	bl	801547a <sFLASH_WritePage>
        WriteAddr +=  count;
 8015590:	7d3b      	ldrb	r3, [r7, #20]
 8015592:	68ba      	ldr	r2, [r7, #8]
 8015594:	4413      	add	r3, r2
 8015596:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8015598:	7d3b      	ldrb	r3, [r7, #20]
 801559a:	68fa      	ldr	r2, [r7, #12]
 801559c:	4413      	add	r3, r2
 801559e:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80155a0:	7cfb      	ldrb	r3, [r7, #19]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	461a      	mov	r2, r3
 80155a6:	68b9      	ldr	r1, [r7, #8]
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	f7ff ff66 	bl	801547a <sFLASH_WritePage>
}
 80155ae:	e03e      	b.n	801562e <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80155b0:	88fb      	ldrh	r3, [r7, #6]
 80155b2:	461a      	mov	r2, r3
 80155b4:	68b9      	ldr	r1, [r7, #8]
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f7ff ff5f 	bl	801547a <sFLASH_WritePage>
}
 80155bc:	e037      	b.n	801562e <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 80155be:	7d3b      	ldrb	r3, [r7, #20]
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	88fa      	ldrh	r2, [r7, #6]
 80155c4:	1ad3      	subs	r3, r2, r3
 80155c6:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80155c8:	88fb      	ldrh	r3, [r7, #6]
 80155ca:	0a1b      	lsrs	r3, r3, #8
 80155cc:	b29b      	uxth	r3, r3
 80155ce:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80155d0:	88fb      	ldrh	r3, [r7, #6]
 80155d2:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 80155d4:	7d3b      	ldrb	r3, [r7, #20]
 80155d6:	b29b      	uxth	r3, r3
 80155d8:	461a      	mov	r2, r3
 80155da:	68b9      	ldr	r1, [r7, #8]
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f7ff ff4c 	bl	801547a <sFLASH_WritePage>
      WriteAddr +=  count;
 80155e2:	7d3b      	ldrb	r3, [r7, #20]
 80155e4:	68ba      	ldr	r2, [r7, #8]
 80155e6:	4413      	add	r3, r2
 80155e8:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 80155ea:	7d3b      	ldrb	r3, [r7, #20]
 80155ec:	68fa      	ldr	r2, [r7, #12]
 80155ee:	4413      	add	r3, r2
 80155f0:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80155f2:	e00d      	b.n	8015610 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80155f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80155f8:	68b9      	ldr	r1, [r7, #8]
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f7ff ff3d 	bl	801547a <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8015606:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801560e:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015610:	7dfb      	ldrb	r3, [r7, #23]
 8015612:	1e5a      	subs	r2, r3, #1
 8015614:	75fa      	strb	r2, [r7, #23]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d1ec      	bne.n	80155f4 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 801561a:	7dbb      	ldrb	r3, [r7, #22]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d006      	beq.n	801562e <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015620:	7dbb      	ldrb	r3, [r7, #22]
 8015622:	b29b      	uxth	r3, r3
 8015624:	461a      	mov	r2, r3
 8015626:	68b9      	ldr	r1, [r7, #8]
 8015628:	68f8      	ldr	r0, [r7, #12]
 801562a:	f7ff ff26 	bl	801547a <sFLASH_WritePage>
}
 801562e:	bf00      	nop
 8015630:	3718      	adds	r7, #24
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8015636:	b580      	push	{r7, lr}
 8015638:	b084      	sub	sp, #16
 801563a:	af00      	add	r7, sp, #0
 801563c:	60f8      	str	r0, [r7, #12]
 801563e:	60b9      	str	r1, [r7, #8]
 8015640:	4613      	mov	r3, r2
 8015642:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015644:	f7ff fed2 	bl	80153ec <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 8015648:	2003      	movs	r0, #3
 801564a:	f000 f863 	bl	8015714 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	0c1b      	lsrs	r3, r3, #16
 8015652:	b2db      	uxtb	r3, r3
 8015654:	4618      	mov	r0, r3
 8015656:	f000 f85d 	bl	8015714 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	0a1b      	lsrs	r3, r3, #8
 801565e:	b2db      	uxtb	r3, r3
 8015660:	4618      	mov	r0, r3
 8015662:	f000 f857 	bl	8015714 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	b2db      	uxtb	r3, r3
 801566a:	4618      	mov	r0, r3
 801566c:	f000 f852 	bl	8015714 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 8015670:	e008      	b.n	8015684 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 8015672:	f000 f845 	bl	8015700 <sFLASH_ReadByte>
 8015676:	4603      	mov	r3, r0
 8015678:	461a      	mov	r2, r3
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	3301      	adds	r3, #1
 8015682:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 8015684:	88fb      	ldrh	r3, [r7, #6]
 8015686:	1e5a      	subs	r2, r3, #1
 8015688:	80fa      	strh	r2, [r7, #6]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d1f1      	bne.n	8015672 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801568e:	f7ff feb7 	bl	8015400 <sFLASH_CS_HIGH>
}
 8015692:	bf00      	nop
 8015694:	3710      	adds	r7, #16
 8015696:	46bd      	mov	sp, r7
 8015698:	bd80      	pop	{r7, pc}

0801569a <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 801569a:	b580      	push	{r7, lr}
 801569c:	b084      	sub	sp, #16
 801569e:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80156a0:	2300      	movs	r3, #0
 80156a2:	60fb      	str	r3, [r7, #12]
 80156a4:	2300      	movs	r3, #0
 80156a6:	60bb      	str	r3, [r7, #8]
 80156a8:	2300      	movs	r3, #0
 80156aa:	607b      	str	r3, [r7, #4]
 80156ac:	2300      	movs	r3, #0
 80156ae:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80156b0:	f7ff fe9c 	bl	80153ec <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80156b4:	f7ff fea4 	bl	8015400 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80156b8:	f7ff fe98 	bl	80153ec <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 80156bc:	f7ff fea0 	bl	8015400 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 80156c0:	f7ff fe94 	bl	80153ec <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 80156c4:	209f      	movs	r0, #159	@ 0x9f
 80156c6:	f000 f825 	bl	8015714 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 80156ca:	f000 f819 	bl	8015700 <sFLASH_ReadByte>
 80156ce:	4603      	mov	r3, r0
 80156d0:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 80156d2:	f000 f815 	bl	8015700 <sFLASH_ReadByte>
 80156d6:	4603      	mov	r3, r0
 80156d8:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 80156da:	f000 f811 	bl	8015700 <sFLASH_ReadByte>
 80156de:	4603      	mov	r3, r0
 80156e0:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80156e2:	f7ff fe8d 	bl	8015400 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	041a      	lsls	r2, r3, #16
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	021b      	lsls	r3, r3, #8
 80156ee:	4313      	orrs	r3, r2
 80156f0:	683a      	ldr	r2, [r7, #0]
 80156f2:	4313      	orrs	r3, r2
 80156f4:	60fb      	str	r3, [r7, #12]

  return Temp;
 80156f6:	68fb      	ldr	r3, [r7, #12]
}
 80156f8:	4618      	mov	r0, r3
 80156fa:	3710      	adds	r7, #16
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}

08015700 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8015704:	4b02      	ldr	r3, [pc, #8]	@ (8015710 <sFLASH_ReadByte+0x10>)
 8015706:	685b      	ldr	r3, [r3, #4]
 8015708:	4798      	blx	r3
 801570a:	4603      	mov	r3, r0
}
 801570c:	4618      	mov	r0, r3
 801570e:	bd80      	pop	{r7, pc}
 8015710:	20000904 	.word	0x20000904

08015714 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	4603      	mov	r3, r0
 801571c:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 801571e:	4b04      	ldr	r3, [pc, #16]	@ (8015730 <sFLASH_SendByte+0x1c>)
 8015720:	689b      	ldr	r3, [r3, #8]
 8015722:	79fa      	ldrb	r2, [r7, #7]
 8015724:	4610      	mov	r0, r2
 8015726:	4798      	blx	r3
}
 8015728:	bf00      	nop
 801572a:	3708      	adds	r7, #8
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	20000904 	.word	0x20000904

08015734 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015738:	f7ff fe58 	bl	80153ec <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 801573c:	2006      	movs	r0, #6
 801573e:	f7ff ffe9 	bl	8015714 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015742:	f7ff fe5d 	bl	8015400 <sFLASH_CS_HIGH>
}
 8015746:	bf00      	nop
 8015748:	bd80      	pop	{r7, pc}

0801574a <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 801574a:	b580      	push	{r7, lr}
 801574c:	b082      	sub	sp, #8
 801574e:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 8015750:	2300      	movs	r3, #0
 8015752:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015754:	f7ff fe4a 	bl	80153ec <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015758:	2005      	movs	r0, #5
 801575a:	f7ff ffdb 	bl	8015714 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 801575e:	f7ff ffcf 	bl	8015700 <sFLASH_ReadByte>
 8015762:	4603      	mov	r3, r0
 8015764:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8015766:	79fb      	ldrb	r3, [r7, #7]
 8015768:	f003 0301 	and.w	r3, r3, #1
 801576c:	2b00      	cmp	r3, #0
 801576e:	d1f6      	bne.n	801575e <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015770:	f7ff fe46 	bl	8015400 <sFLASH_CS_HIGH>
}
 8015774:	bf00      	nop
 8015776:	3708      	adds	r7, #8
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 801577c:	b084      	sub	sp, #16
 801577e:	b580      	push	{r7, lr}
 8015780:	af00      	add	r7, sp, #0
 8015782:	f107 0c08 	add.w	ip, r7, #8
 8015786:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 801578a:	4b07      	ldr	r3, [pc, #28]	@ (80157a8 <SPI_flash_set+0x2c>)
 801578c:	4618      	mov	r0, r3
 801578e:	f107 0308 	add.w	r3, r7, #8
 8015792:	2258      	movs	r2, #88	@ 0x58
 8015794:	4619      	mov	r1, r3
 8015796:	f018 fbd0 	bl	802df3a <memcpy>
}
 801579a:	bf00      	nop
 801579c:	46bd      	mov	sp, r7
 801579e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80157a2:	b004      	add	sp, #16
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop
 80157a8:	20000928 	.word	0x20000928

080157ac <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 80157b2:	1df9      	adds	r1, r7, #7
 80157b4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80157b8:	2201      	movs	r2, #1
 80157ba:	4804      	ldr	r0, [pc, #16]	@ (80157cc <SPI_flash_read_byte+0x20>)
 80157bc:	f001 faae 	bl	8016d1c <HAL_SPI_Receive>
	return byte;
 80157c0:	79fb      	ldrb	r3, [r7, #7]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3708      	adds	r7, #8
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	bf00      	nop
 80157cc:	20000928 	.word	0x20000928

080157d0 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	4603      	mov	r3, r0
 80157d8:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 80157da:	1df9      	adds	r1, r7, #7
 80157dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80157e0:	2201      	movs	r2, #1
 80157e2:	4803      	ldr	r0, [pc, #12]	@ (80157f0 <SPI_flash_send_byte+0x20>)
 80157e4:	f001 f957 	bl	8016a96 <HAL_SPI_Transmit>

}
 80157e8:	bf00      	nop
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	20000928 	.word	0x20000928

080157f4 <SPI_flash_select>:

void SPI_flash_select(void){
 80157f4:	b580      	push	{r7, lr}
 80157f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80157f8:	2200      	movs	r2, #0
 80157fa:	2110      	movs	r1, #16
 80157fc:	4802      	ldr	r0, [pc, #8]	@ (8015808 <SPI_flash_select+0x14>)
 80157fe:	f000 fb8b 	bl	8015f18 <HAL_GPIO_WritePin>
}
 8015802:	bf00      	nop
 8015804:	bd80      	pop	{r7, pc}
 8015806:	bf00      	nop
 8015808:	40020000 	.word	0x40020000

0801580c <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 801580c:	b580      	push	{r7, lr}
 801580e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8015810:	2201      	movs	r2, #1
 8015812:	2110      	movs	r1, #16
 8015814:	4802      	ldr	r0, [pc, #8]	@ (8015820 <SPI_flash_deselect+0x14>)
 8015816:	f000 fb7f 	bl	8015f18 <HAL_GPIO_WritePin>
}
 801581a:	bf00      	nop
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	40020000 	.word	0x40020000

08015824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015828:	4b0e      	ldr	r3, [pc, #56]	@ (8015864 <HAL_Init+0x40>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	4a0d      	ldr	r2, [pc, #52]	@ (8015864 <HAL_Init+0x40>)
 801582e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015834:	4b0b      	ldr	r3, [pc, #44]	@ (8015864 <HAL_Init+0x40>)
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	4a0a      	ldr	r2, [pc, #40]	@ (8015864 <HAL_Init+0x40>)
 801583a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801583e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015840:	4b08      	ldr	r3, [pc, #32]	@ (8015864 <HAL_Init+0x40>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	4a07      	ldr	r2, [pc, #28]	@ (8015864 <HAL_Init+0x40>)
 8015846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801584a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801584c:	2003      	movs	r0, #3
 801584e:	f000 f8fc 	bl	8015a4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015852:	200f      	movs	r0, #15
 8015854:	f7fd f94c 	bl	8012af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015858:	f7fd f82e 	bl	80128b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801585c:	2300      	movs	r3, #0
}
 801585e:	4618      	mov	r0, r3
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	40023c00 	.word	0x40023c00

08015868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015868:	b480      	push	{r7}
 801586a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801586c:	4b06      	ldr	r3, [pc, #24]	@ (8015888 <HAL_IncTick+0x20>)
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	461a      	mov	r2, r3
 8015872:	4b06      	ldr	r3, [pc, #24]	@ (801588c <HAL_IncTick+0x24>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	4413      	add	r3, r2
 8015878:	4a04      	ldr	r2, [pc, #16]	@ (801588c <HAL_IncTick+0x24>)
 801587a:	6013      	str	r3, [r2, #0]
}
 801587c:	bf00      	nop
 801587e:	46bd      	mov	sp, r7
 8015880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015884:	4770      	bx	lr
 8015886:	bf00      	nop
 8015888:	200000c0 	.word	0x200000c0
 801588c:	20000980 	.word	0x20000980

08015890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015890:	b480      	push	{r7}
 8015892:	af00      	add	r7, sp, #0
  return uwTick;
 8015894:	4b03      	ldr	r3, [pc, #12]	@ (80158a4 <HAL_GetTick+0x14>)
 8015896:	681b      	ldr	r3, [r3, #0]
}
 8015898:	4618      	mov	r0, r3
 801589a:	46bd      	mov	sp, r7
 801589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a0:	4770      	bx	lr
 80158a2:	bf00      	nop
 80158a4:	20000980 	.word	0x20000980

080158a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b084      	sub	sp, #16
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80158b0:	f7ff ffee 	bl	8015890 <HAL_GetTick>
 80158b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158c0:	d005      	beq.n	80158ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80158c2:	4b0a      	ldr	r3, [pc, #40]	@ (80158ec <HAL_Delay+0x44>)
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	461a      	mov	r2, r3
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	4413      	add	r3, r2
 80158cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80158ce:	bf00      	nop
 80158d0:	f7ff ffde 	bl	8015890 <HAL_GetTick>
 80158d4:	4602      	mov	r2, r0
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	1ad3      	subs	r3, r2, r3
 80158da:	68fa      	ldr	r2, [r7, #12]
 80158dc:	429a      	cmp	r2, r3
 80158de:	d8f7      	bhi.n	80158d0 <HAL_Delay+0x28>
  {
  }
}
 80158e0:	bf00      	nop
 80158e2:	bf00      	nop
 80158e4:	3710      	adds	r7, #16
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	200000c0 	.word	0x200000c0

080158f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80158f0:	b480      	push	{r7}
 80158f2:	b085      	sub	sp, #20
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f003 0307 	and.w	r3, r3, #7
 80158fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015900:	4b0c      	ldr	r3, [pc, #48]	@ (8015934 <__NVIC_SetPriorityGrouping+0x44>)
 8015902:	68db      	ldr	r3, [r3, #12]
 8015904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015906:	68ba      	ldr	r2, [r7, #8]
 8015908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801590c:	4013      	ands	r3, r2
 801590e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801591c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015922:	4a04      	ldr	r2, [pc, #16]	@ (8015934 <__NVIC_SetPriorityGrouping+0x44>)
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	60d3      	str	r3, [r2, #12]
}
 8015928:	bf00      	nop
 801592a:	3714      	adds	r7, #20
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr
 8015934:	e000ed00 	.word	0xe000ed00

08015938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015938:	b480      	push	{r7}
 801593a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801593c:	4b04      	ldr	r3, [pc, #16]	@ (8015950 <__NVIC_GetPriorityGrouping+0x18>)
 801593e:	68db      	ldr	r3, [r3, #12]
 8015940:	0a1b      	lsrs	r3, r3, #8
 8015942:	f003 0307 	and.w	r3, r3, #7
}
 8015946:	4618      	mov	r0, r3
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr
 8015950:	e000ed00 	.word	0xe000ed00

08015954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015954:	b480      	push	{r7}
 8015956:	b083      	sub	sp, #12
 8015958:	af00      	add	r7, sp, #0
 801595a:	4603      	mov	r3, r0
 801595c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015962:	2b00      	cmp	r3, #0
 8015964:	db0b      	blt.n	801597e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015966:	79fb      	ldrb	r3, [r7, #7]
 8015968:	f003 021f 	and.w	r2, r3, #31
 801596c:	4907      	ldr	r1, [pc, #28]	@ (801598c <__NVIC_EnableIRQ+0x38>)
 801596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015972:	095b      	lsrs	r3, r3, #5
 8015974:	2001      	movs	r0, #1
 8015976:	fa00 f202 	lsl.w	r2, r0, r2
 801597a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801597e:	bf00      	nop
 8015980:	370c      	adds	r7, #12
 8015982:	46bd      	mov	sp, r7
 8015984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015988:	4770      	bx	lr
 801598a:	bf00      	nop
 801598c:	e000e100 	.word	0xe000e100

08015990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015990:	b480      	push	{r7}
 8015992:	b083      	sub	sp, #12
 8015994:	af00      	add	r7, sp, #0
 8015996:	4603      	mov	r3, r0
 8015998:	6039      	str	r1, [r7, #0]
 801599a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801599c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	db0a      	blt.n	80159ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	b2da      	uxtb	r2, r3
 80159a8:	490c      	ldr	r1, [pc, #48]	@ (80159dc <__NVIC_SetPriority+0x4c>)
 80159aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159ae:	0112      	lsls	r2, r2, #4
 80159b0:	b2d2      	uxtb	r2, r2
 80159b2:	440b      	add	r3, r1
 80159b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80159b8:	e00a      	b.n	80159d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	b2da      	uxtb	r2, r3
 80159be:	4908      	ldr	r1, [pc, #32]	@ (80159e0 <__NVIC_SetPriority+0x50>)
 80159c0:	79fb      	ldrb	r3, [r7, #7]
 80159c2:	f003 030f 	and.w	r3, r3, #15
 80159c6:	3b04      	subs	r3, #4
 80159c8:	0112      	lsls	r2, r2, #4
 80159ca:	b2d2      	uxtb	r2, r2
 80159cc:	440b      	add	r3, r1
 80159ce:	761a      	strb	r2, [r3, #24]
}
 80159d0:	bf00      	nop
 80159d2:	370c      	adds	r7, #12
 80159d4:	46bd      	mov	sp, r7
 80159d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159da:	4770      	bx	lr
 80159dc:	e000e100 	.word	0xe000e100
 80159e0:	e000ed00 	.word	0xe000ed00

080159e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80159e4:	b480      	push	{r7}
 80159e6:	b089      	sub	sp, #36	@ 0x24
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	60f8      	str	r0, [r7, #12]
 80159ec:	60b9      	str	r1, [r7, #8]
 80159ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	f003 0307 	and.w	r3, r3, #7
 80159f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	f1c3 0307 	rsb	r3, r3, #7
 80159fe:	2b04      	cmp	r3, #4
 8015a00:	bf28      	it	cs
 8015a02:	2304      	movcs	r3, #4
 8015a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	3304      	adds	r3, #4
 8015a0a:	2b06      	cmp	r3, #6
 8015a0c:	d902      	bls.n	8015a14 <NVIC_EncodePriority+0x30>
 8015a0e:	69fb      	ldr	r3, [r7, #28]
 8015a10:	3b03      	subs	r3, #3
 8015a12:	e000      	b.n	8015a16 <NVIC_EncodePriority+0x32>
 8015a14:	2300      	movs	r3, #0
 8015a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015a18:	f04f 32ff 	mov.w	r2, #4294967295
 8015a1c:	69bb      	ldr	r3, [r7, #24]
 8015a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8015a22:	43da      	mvns	r2, r3
 8015a24:	68bb      	ldr	r3, [r7, #8]
 8015a26:	401a      	ands	r2, r3
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	fa01 f303 	lsl.w	r3, r1, r3
 8015a36:	43d9      	mvns	r1, r3
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015a3c:	4313      	orrs	r3, r2
         );
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3724      	adds	r7, #36	@ 0x24
 8015a42:	46bd      	mov	sp, r7
 8015a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a48:	4770      	bx	lr

08015a4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015a4a:	b580      	push	{r7, lr}
 8015a4c:	b082      	sub	sp, #8
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f7ff ff4c 	bl	80158f0 <__NVIC_SetPriorityGrouping>
}
 8015a58:	bf00      	nop
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b086      	sub	sp, #24
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	4603      	mov	r3, r0
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	607a      	str	r2, [r7, #4]
 8015a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8015a72:	f7ff ff61 	bl	8015938 <__NVIC_GetPriorityGrouping>
 8015a76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015a78:	687a      	ldr	r2, [r7, #4]
 8015a7a:	68b9      	ldr	r1, [r7, #8]
 8015a7c:	6978      	ldr	r0, [r7, #20]
 8015a7e:	f7ff ffb1 	bl	80159e4 <NVIC_EncodePriority>
 8015a82:	4602      	mov	r2, r0
 8015a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a88:	4611      	mov	r1, r2
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7ff ff80 	bl	8015990 <__NVIC_SetPriority>
}
 8015a90:	bf00      	nop
 8015a92:	3718      	adds	r7, #24
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}

08015a98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7ff ff54 	bl	8015954 <__NVIC_EnableIRQ>
}
 8015aac:	bf00      	nop
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d101      	bne.n	8015ac6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	e00e      	b.n	8015ae4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	795b      	ldrb	r3, [r3, #5]
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d105      	bne.n	8015adc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f7fc ff1a 	bl	8012910 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	2201      	movs	r2, #1
 8015ae0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8015ae2:	2300      	movs	r3, #0
}
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	3708      	adds	r7, #8
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015af8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8015afa:	f7ff fec9 	bl	8015890 <HAL_GetTick>
 8015afe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015b06:	b2db      	uxtb	r3, r3
 8015b08:	2b02      	cmp	r3, #2
 8015b0a:	d008      	beq.n	8015b1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2280      	movs	r2, #128	@ 0x80
 8015b10:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2200      	movs	r2, #0
 8015b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	e052      	b.n	8015bc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	681a      	ldr	r2, [r3, #0]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	f022 0216 	bic.w	r2, r2, #22
 8015b2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	695a      	ldr	r2, [r3, #20]
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8015b3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d103      	bne.n	8015b4e <HAL_DMA_Abort+0x62>
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d007      	beq.n	8015b5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f022 0208 	bic.w	r2, r2, #8
 8015b5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	681a      	ldr	r2, [r3, #0]
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	f022 0201 	bic.w	r2, r2, #1
 8015b6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015b6e:	e013      	b.n	8015b98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015b70:	f7ff fe8e 	bl	8015890 <HAL_GetTick>
 8015b74:	4602      	mov	r2, r0
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	1ad3      	subs	r3, r2, r3
 8015b7a:	2b05      	cmp	r3, #5
 8015b7c:	d90c      	bls.n	8015b98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2220      	movs	r2, #32
 8015b82:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2203      	movs	r2, #3
 8015b88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8015b94:	2303      	movs	r3, #3
 8015b96:	e015      	b.n	8015bc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	f003 0301 	and.w	r3, r3, #1
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d1e4      	bne.n	8015b70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015baa:	223f      	movs	r2, #63	@ 0x3f
 8015bac:	409a      	lsls	r2, r3
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8015bc2:	2300      	movs	r3, #0
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3710      	adds	r7, #16
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}

08015bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b083      	sub	sp, #12
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	2b02      	cmp	r3, #2
 8015bde:	d004      	beq.n	8015bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2280      	movs	r2, #128	@ 0x80
 8015be4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8015be6:	2301      	movs	r3, #1
 8015be8:	e00c      	b.n	8015c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2205      	movs	r2, #5
 8015bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	681a      	ldr	r2, [r3, #0]
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	f022 0201 	bic.w	r2, r2, #1
 8015c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015c02:	2300      	movs	r3, #0
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	370c      	adds	r7, #12
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0e:	4770      	bx	lr

08015c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b089      	sub	sp, #36	@ 0x24
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015c22:	2300      	movs	r3, #0
 8015c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015c26:	2300      	movs	r3, #0
 8015c28:	61fb      	str	r3, [r7, #28]
 8015c2a:	e159      	b.n	8015ee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015c2c:	2201      	movs	r2, #1
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	fa02 f303 	lsl.w	r3, r2, r3
 8015c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	697a      	ldr	r2, [r7, #20]
 8015c3c:	4013      	ands	r3, r2
 8015c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015c40:	693a      	ldr	r2, [r7, #16]
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	f040 8148 	bne.w	8015eda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	f003 0303 	and.w	r3, r3, #3
 8015c52:	2b01      	cmp	r3, #1
 8015c54:	d005      	beq.n	8015c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015c5e:	2b02      	cmp	r3, #2
 8015c60:	d130      	bne.n	8015cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	689b      	ldr	r3, [r3, #8]
 8015c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015c68:	69fb      	ldr	r3, [r7, #28]
 8015c6a:	005b      	lsls	r3, r3, #1
 8015c6c:	2203      	movs	r2, #3
 8015c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8015c72:	43db      	mvns	r3, r3
 8015c74:	69ba      	ldr	r2, [r7, #24]
 8015c76:	4013      	ands	r3, r2
 8015c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	68da      	ldr	r2, [r3, #12]
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	005b      	lsls	r3, r3, #1
 8015c82:	fa02 f303 	lsl.w	r3, r2, r3
 8015c86:	69ba      	ldr	r2, [r7, #24]
 8015c88:	4313      	orrs	r3, r2
 8015c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	69ba      	ldr	r2, [r7, #24]
 8015c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	685b      	ldr	r3, [r3, #4]
 8015c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015c98:	2201      	movs	r2, #1
 8015c9a:	69fb      	ldr	r3, [r7, #28]
 8015c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8015ca0:	43db      	mvns	r3, r3
 8015ca2:	69ba      	ldr	r2, [r7, #24]
 8015ca4:	4013      	ands	r3, r2
 8015ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	091b      	lsrs	r3, r3, #4
 8015cae:	f003 0201 	and.w	r2, r3, #1
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8015cb8:	69ba      	ldr	r2, [r7, #24]
 8015cba:	4313      	orrs	r3, r2
 8015cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	69ba      	ldr	r2, [r7, #24]
 8015cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	685b      	ldr	r3, [r3, #4]
 8015cc8:	f003 0303 	and.w	r3, r3, #3
 8015ccc:	2b03      	cmp	r3, #3
 8015cce:	d017      	beq.n	8015d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	68db      	ldr	r3, [r3, #12]
 8015cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	005b      	lsls	r3, r3, #1
 8015cda:	2203      	movs	r2, #3
 8015cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8015ce0:	43db      	mvns	r3, r3
 8015ce2:	69ba      	ldr	r2, [r7, #24]
 8015ce4:	4013      	ands	r3, r2
 8015ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	689a      	ldr	r2, [r3, #8]
 8015cec:	69fb      	ldr	r3, [r7, #28]
 8015cee:	005b      	lsls	r3, r3, #1
 8015cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8015cf4:	69ba      	ldr	r2, [r7, #24]
 8015cf6:	4313      	orrs	r3, r2
 8015cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	69ba      	ldr	r2, [r7, #24]
 8015cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	f003 0303 	and.w	r3, r3, #3
 8015d08:	2b02      	cmp	r3, #2
 8015d0a:	d123      	bne.n	8015d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015d0c:	69fb      	ldr	r3, [r7, #28]
 8015d0e:	08da      	lsrs	r2, r3, #3
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	3208      	adds	r2, #8
 8015d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	f003 0307 	and.w	r3, r3, #7
 8015d20:	009b      	lsls	r3, r3, #2
 8015d22:	220f      	movs	r2, #15
 8015d24:	fa02 f303 	lsl.w	r3, r2, r3
 8015d28:	43db      	mvns	r3, r3
 8015d2a:	69ba      	ldr	r2, [r7, #24]
 8015d2c:	4013      	ands	r3, r2
 8015d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	691a      	ldr	r2, [r3, #16]
 8015d34:	69fb      	ldr	r3, [r7, #28]
 8015d36:	f003 0307 	and.w	r3, r3, #7
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8015d40:	69ba      	ldr	r2, [r7, #24]
 8015d42:	4313      	orrs	r3, r2
 8015d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015d46:	69fb      	ldr	r3, [r7, #28]
 8015d48:	08da      	lsrs	r2, r3, #3
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	3208      	adds	r2, #8
 8015d4e:	69b9      	ldr	r1, [r7, #24]
 8015d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	005b      	lsls	r3, r3, #1
 8015d5e:	2203      	movs	r2, #3
 8015d60:	fa02 f303 	lsl.w	r3, r2, r3
 8015d64:	43db      	mvns	r3, r3
 8015d66:	69ba      	ldr	r2, [r7, #24]
 8015d68:	4013      	ands	r3, r2
 8015d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	f003 0203 	and.w	r2, r3, #3
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	005b      	lsls	r3, r3, #1
 8015d78:	fa02 f303 	lsl.w	r3, r2, r3
 8015d7c:	69ba      	ldr	r2, [r7, #24]
 8015d7e:	4313      	orrs	r3, r2
 8015d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	69ba      	ldr	r2, [r7, #24]
 8015d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f000 80a2 	beq.w	8015eda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015d96:	2300      	movs	r3, #0
 8015d98:	60fb      	str	r3, [r7, #12]
 8015d9a:	4b57      	ldr	r3, [pc, #348]	@ (8015ef8 <HAL_GPIO_Init+0x2e8>)
 8015d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d9e:	4a56      	ldr	r2, [pc, #344]	@ (8015ef8 <HAL_GPIO_Init+0x2e8>)
 8015da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8015da6:	4b54      	ldr	r3, [pc, #336]	@ (8015ef8 <HAL_GPIO_Init+0x2e8>)
 8015da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015dae:	60fb      	str	r3, [r7, #12]
 8015db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015db2:	4a52      	ldr	r2, [pc, #328]	@ (8015efc <HAL_GPIO_Init+0x2ec>)
 8015db4:	69fb      	ldr	r3, [r7, #28]
 8015db6:	089b      	lsrs	r3, r3, #2
 8015db8:	3302      	adds	r3, #2
 8015dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015dc0:	69fb      	ldr	r3, [r7, #28]
 8015dc2:	f003 0303 	and.w	r3, r3, #3
 8015dc6:	009b      	lsls	r3, r3, #2
 8015dc8:	220f      	movs	r2, #15
 8015dca:	fa02 f303 	lsl.w	r3, r2, r3
 8015dce:	43db      	mvns	r3, r3
 8015dd0:	69ba      	ldr	r2, [r7, #24]
 8015dd2:	4013      	ands	r3, r2
 8015dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	4a49      	ldr	r2, [pc, #292]	@ (8015f00 <HAL_GPIO_Init+0x2f0>)
 8015dda:	4293      	cmp	r3, r2
 8015ddc:	d019      	beq.n	8015e12 <HAL_GPIO_Init+0x202>
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	4a48      	ldr	r2, [pc, #288]	@ (8015f04 <HAL_GPIO_Init+0x2f4>)
 8015de2:	4293      	cmp	r3, r2
 8015de4:	d013      	beq.n	8015e0e <HAL_GPIO_Init+0x1fe>
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	4a47      	ldr	r2, [pc, #284]	@ (8015f08 <HAL_GPIO_Init+0x2f8>)
 8015dea:	4293      	cmp	r3, r2
 8015dec:	d00d      	beq.n	8015e0a <HAL_GPIO_Init+0x1fa>
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	4a46      	ldr	r2, [pc, #280]	@ (8015f0c <HAL_GPIO_Init+0x2fc>)
 8015df2:	4293      	cmp	r3, r2
 8015df4:	d007      	beq.n	8015e06 <HAL_GPIO_Init+0x1f6>
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	4a45      	ldr	r2, [pc, #276]	@ (8015f10 <HAL_GPIO_Init+0x300>)
 8015dfa:	4293      	cmp	r3, r2
 8015dfc:	d101      	bne.n	8015e02 <HAL_GPIO_Init+0x1f2>
 8015dfe:	2304      	movs	r3, #4
 8015e00:	e008      	b.n	8015e14 <HAL_GPIO_Init+0x204>
 8015e02:	2307      	movs	r3, #7
 8015e04:	e006      	b.n	8015e14 <HAL_GPIO_Init+0x204>
 8015e06:	2303      	movs	r3, #3
 8015e08:	e004      	b.n	8015e14 <HAL_GPIO_Init+0x204>
 8015e0a:	2302      	movs	r3, #2
 8015e0c:	e002      	b.n	8015e14 <HAL_GPIO_Init+0x204>
 8015e0e:	2301      	movs	r3, #1
 8015e10:	e000      	b.n	8015e14 <HAL_GPIO_Init+0x204>
 8015e12:	2300      	movs	r3, #0
 8015e14:	69fa      	ldr	r2, [r7, #28]
 8015e16:	f002 0203 	and.w	r2, r2, #3
 8015e1a:	0092      	lsls	r2, r2, #2
 8015e1c:	4093      	lsls	r3, r2
 8015e1e:	69ba      	ldr	r2, [r7, #24]
 8015e20:	4313      	orrs	r3, r2
 8015e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015e24:	4935      	ldr	r1, [pc, #212]	@ (8015efc <HAL_GPIO_Init+0x2ec>)
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	089b      	lsrs	r3, r3, #2
 8015e2a:	3302      	adds	r3, #2
 8015e2c:	69ba      	ldr	r2, [r7, #24]
 8015e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015e32:	4b38      	ldr	r3, [pc, #224]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015e34:	689b      	ldr	r3, [r3, #8]
 8015e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	43db      	mvns	r3, r3
 8015e3c:	69ba      	ldr	r2, [r7, #24]
 8015e3e:	4013      	ands	r3, r2
 8015e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	685b      	ldr	r3, [r3, #4]
 8015e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d003      	beq.n	8015e56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015e4e:	69ba      	ldr	r2, [r7, #24]
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	4313      	orrs	r3, r2
 8015e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015e56:	4a2f      	ldr	r2, [pc, #188]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015e58:	69bb      	ldr	r3, [r7, #24]
 8015e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	43db      	mvns	r3, r3
 8015e66:	69ba      	ldr	r2, [r7, #24]
 8015e68:	4013      	ands	r3, r2
 8015e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	685b      	ldr	r3, [r3, #4]
 8015e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d003      	beq.n	8015e80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015e78:	69ba      	ldr	r2, [r7, #24]
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	4313      	orrs	r3, r2
 8015e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015e80:	4a24      	ldr	r2, [pc, #144]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015e82:	69bb      	ldr	r3, [r7, #24]
 8015e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015e86:	4b23      	ldr	r3, [pc, #140]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015e8c:	693b      	ldr	r3, [r7, #16]
 8015e8e:	43db      	mvns	r3, r3
 8015e90:	69ba      	ldr	r2, [r7, #24]
 8015e92:	4013      	ands	r3, r2
 8015e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015e96:	683b      	ldr	r3, [r7, #0]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d003      	beq.n	8015eaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8015ea2:	69ba      	ldr	r2, [r7, #24]
 8015ea4:	693b      	ldr	r3, [r7, #16]
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015eb0:	4b18      	ldr	r3, [pc, #96]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015eb6:	693b      	ldr	r3, [r7, #16]
 8015eb8:	43db      	mvns	r3, r3
 8015eba:	69ba      	ldr	r2, [r7, #24]
 8015ebc:	4013      	ands	r3, r2
 8015ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d003      	beq.n	8015ed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015ecc:	69ba      	ldr	r2, [r7, #24]
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	4313      	orrs	r3, r2
 8015ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8015f14 <HAL_GPIO_Init+0x304>)
 8015ed6:	69bb      	ldr	r3, [r7, #24]
 8015ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015eda:	69fb      	ldr	r3, [r7, #28]
 8015edc:	3301      	adds	r3, #1
 8015ede:	61fb      	str	r3, [r7, #28]
 8015ee0:	69fb      	ldr	r3, [r7, #28]
 8015ee2:	2b0f      	cmp	r3, #15
 8015ee4:	f67f aea2 	bls.w	8015c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015ee8:	bf00      	nop
 8015eea:	bf00      	nop
 8015eec:	3724      	adds	r7, #36	@ 0x24
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef4:	4770      	bx	lr
 8015ef6:	bf00      	nop
 8015ef8:	40023800 	.word	0x40023800
 8015efc:	40013800 	.word	0x40013800
 8015f00:	40020000 	.word	0x40020000
 8015f04:	40020400 	.word	0x40020400
 8015f08:	40020800 	.word	0x40020800
 8015f0c:	40020c00 	.word	0x40020c00
 8015f10:	40021000 	.word	0x40021000
 8015f14:	40013c00 	.word	0x40013c00

08015f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b083      	sub	sp, #12
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	460b      	mov	r3, r1
 8015f22:	807b      	strh	r3, [r7, #2]
 8015f24:	4613      	mov	r3, r2
 8015f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015f28:	787b      	ldrb	r3, [r7, #1]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d003      	beq.n	8015f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015f2e:	887a      	ldrh	r2, [r7, #2]
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015f34:	e003      	b.n	8015f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015f36:	887b      	ldrh	r3, [r7, #2]
 8015f38:	041a      	lsls	r2, r3, #16
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	619a      	str	r2, [r3, #24]
}
 8015f3e:	bf00      	nop
 8015f40:	370c      	adds	r7, #12
 8015f42:	46bd      	mov	sp, r7
 8015f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f48:	4770      	bx	lr

08015f4a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015f4a:	b580      	push	{r7, lr}
 8015f4c:	b084      	sub	sp, #16
 8015f4e:	af00      	add	r7, sp, #0
 8015f50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d101      	bne.n	8015f5c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	e034      	b.n	8015fc6 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8015f64:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f245 5255 	movw	r2, #21845	@ 0x5555
 8015f6e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	6852      	ldr	r2, [r2, #4]
 8015f78:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	687a      	ldr	r2, [r7, #4]
 8015f80:	6892      	ldr	r2, [r2, #8]
 8015f82:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015f84:	f7ff fc84 	bl	8015890 <HAL_GetTick>
 8015f88:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015f8a:	e00f      	b.n	8015fac <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015f8c:	f7ff fc80 	bl	8015890 <HAL_GetTick>
 8015f90:	4602      	mov	r2, r0
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	1ad3      	subs	r3, r2, r3
 8015f96:	2b31      	cmp	r3, #49	@ 0x31
 8015f98:	d908      	bls.n	8015fac <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	68db      	ldr	r3, [r3, #12]
 8015fa0:	f003 0303 	and.w	r3, r3, #3
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d001      	beq.n	8015fac <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8015fa8:	2303      	movs	r3, #3
 8015faa:	e00c      	b.n	8015fc6 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	68db      	ldr	r3, [r3, #12]
 8015fb2:	f003 0303 	and.w	r3, r3, #3
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d1e8      	bne.n	8015f8c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8015fc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015fc4:	2300      	movs	r3, #0
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3710      	adds	r7, #16
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}

08015fce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015fce:	b480      	push	{r7}
 8015fd0:	b083      	sub	sp, #12
 8015fd2:	af00      	add	r7, sp, #0
 8015fd4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8015fde:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015fe0:	2300      	movs	r3, #0
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	370c      	adds	r7, #12
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr
	...

08015ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b086      	sub	sp, #24
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d101      	bne.n	8016002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015ffe:	2301      	movs	r3, #1
 8016000:	e267      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	f003 0301 	and.w	r3, r3, #1
 801600a:	2b00      	cmp	r3, #0
 801600c:	d075      	beq.n	80160fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801600e:	4b88      	ldr	r3, [pc, #544]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016010:	689b      	ldr	r3, [r3, #8]
 8016012:	f003 030c 	and.w	r3, r3, #12
 8016016:	2b04      	cmp	r3, #4
 8016018:	d00c      	beq.n	8016034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801601a:	4b85      	ldr	r3, [pc, #532]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801601c:	689b      	ldr	r3, [r3, #8]
 801601e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8016022:	2b08      	cmp	r3, #8
 8016024:	d112      	bne.n	801604c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8016026:	4b82      	ldr	r3, [pc, #520]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801602e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016032:	d10b      	bne.n	801604c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016034:	4b7e      	ldr	r3, [pc, #504]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801603c:	2b00      	cmp	r3, #0
 801603e:	d05b      	beq.n	80160f8 <HAL_RCC_OscConfig+0x108>
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d157      	bne.n	80160f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8016048:	2301      	movs	r3, #1
 801604a:	e242      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016054:	d106      	bne.n	8016064 <HAL_RCC_OscConfig+0x74>
 8016056:	4b76      	ldr	r3, [pc, #472]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	4a75      	ldr	r2, [pc, #468]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801605c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016060:	6013      	str	r3, [r2, #0]
 8016062:	e01d      	b.n	80160a0 <HAL_RCC_OscConfig+0xb0>
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	685b      	ldr	r3, [r3, #4]
 8016068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801606c:	d10c      	bne.n	8016088 <HAL_RCC_OscConfig+0x98>
 801606e:	4b70      	ldr	r3, [pc, #448]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	4a6f      	ldr	r2, [pc, #444]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016078:	6013      	str	r3, [r2, #0]
 801607a:	4b6d      	ldr	r3, [pc, #436]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	4a6c      	ldr	r2, [pc, #432]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016084:	6013      	str	r3, [r2, #0]
 8016086:	e00b      	b.n	80160a0 <HAL_RCC_OscConfig+0xb0>
 8016088:	4b69      	ldr	r3, [pc, #420]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	4a68      	ldr	r2, [pc, #416]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801608e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016092:	6013      	str	r3, [r2, #0]
 8016094:	4b66      	ldr	r3, [pc, #408]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4a65      	ldr	r2, [pc, #404]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801609a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801609e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	685b      	ldr	r3, [r3, #4]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d013      	beq.n	80160d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160a8:	f7ff fbf2 	bl	8015890 <HAL_GetTick>
 80160ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80160ae:	e008      	b.n	80160c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80160b0:	f7ff fbee 	bl	8015890 <HAL_GetTick>
 80160b4:	4602      	mov	r2, r0
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	1ad3      	subs	r3, r2, r3
 80160ba:	2b64      	cmp	r3, #100	@ 0x64
 80160bc:	d901      	bls.n	80160c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80160be:	2303      	movs	r3, #3
 80160c0:	e207      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80160c2:	4b5b      	ldr	r3, [pc, #364]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d0f0      	beq.n	80160b0 <HAL_RCC_OscConfig+0xc0>
 80160ce:	e014      	b.n	80160fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80160d0:	f7ff fbde 	bl	8015890 <HAL_GetTick>
 80160d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80160d6:	e008      	b.n	80160ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80160d8:	f7ff fbda 	bl	8015890 <HAL_GetTick>
 80160dc:	4602      	mov	r2, r0
 80160de:	693b      	ldr	r3, [r7, #16]
 80160e0:	1ad3      	subs	r3, r2, r3
 80160e2:	2b64      	cmp	r3, #100	@ 0x64
 80160e4:	d901      	bls.n	80160ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80160e6:	2303      	movs	r3, #3
 80160e8:	e1f3      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80160ea:	4b51      	ldr	r3, [pc, #324]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d1f0      	bne.n	80160d8 <HAL_RCC_OscConfig+0xe8>
 80160f6:	e000      	b.n	80160fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80160f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	f003 0302 	and.w	r3, r3, #2
 8016102:	2b00      	cmp	r3, #0
 8016104:	d063      	beq.n	80161ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8016106:	4b4a      	ldr	r3, [pc, #296]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016108:	689b      	ldr	r3, [r3, #8]
 801610a:	f003 030c 	and.w	r3, r3, #12
 801610e:	2b00      	cmp	r3, #0
 8016110:	d00b      	beq.n	801612a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016112:	4b47      	ldr	r3, [pc, #284]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016114:	689b      	ldr	r3, [r3, #8]
 8016116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801611a:	2b08      	cmp	r3, #8
 801611c:	d11c      	bne.n	8016158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801611e:	4b44      	ldr	r3, [pc, #272]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016126:	2b00      	cmp	r3, #0
 8016128:	d116      	bne.n	8016158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801612a:	4b41      	ldr	r3, [pc, #260]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	f003 0302 	and.w	r3, r3, #2
 8016132:	2b00      	cmp	r3, #0
 8016134:	d005      	beq.n	8016142 <HAL_RCC_OscConfig+0x152>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	68db      	ldr	r3, [r3, #12]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d001      	beq.n	8016142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801613e:	2301      	movs	r3, #1
 8016140:	e1c7      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016142:	4b3b      	ldr	r3, [pc, #236]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	691b      	ldr	r3, [r3, #16]
 801614e:	00db      	lsls	r3, r3, #3
 8016150:	4937      	ldr	r1, [pc, #220]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016152:	4313      	orrs	r3, r2
 8016154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8016156:	e03a      	b.n	80161ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	68db      	ldr	r3, [r3, #12]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d020      	beq.n	80161a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016160:	4b34      	ldr	r3, [pc, #208]	@ (8016234 <HAL_RCC_OscConfig+0x244>)
 8016162:	2201      	movs	r2, #1
 8016164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016166:	f7ff fb93 	bl	8015890 <HAL_GetTick>
 801616a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801616c:	e008      	b.n	8016180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801616e:	f7ff fb8f 	bl	8015890 <HAL_GetTick>
 8016172:	4602      	mov	r2, r0
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	1ad3      	subs	r3, r2, r3
 8016178:	2b02      	cmp	r3, #2
 801617a:	d901      	bls.n	8016180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801617c:	2303      	movs	r3, #3
 801617e:	e1a8      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016180:	4b2b      	ldr	r3, [pc, #172]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	f003 0302 	and.w	r3, r3, #2
 8016188:	2b00      	cmp	r3, #0
 801618a:	d0f0      	beq.n	801616e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801618c:	4b28      	ldr	r3, [pc, #160]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	691b      	ldr	r3, [r3, #16]
 8016198:	00db      	lsls	r3, r3, #3
 801619a:	4925      	ldr	r1, [pc, #148]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 801619c:	4313      	orrs	r3, r2
 801619e:	600b      	str	r3, [r1, #0]
 80161a0:	e015      	b.n	80161ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80161a2:	4b24      	ldr	r3, [pc, #144]	@ (8016234 <HAL_RCC_OscConfig+0x244>)
 80161a4:	2200      	movs	r2, #0
 80161a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80161a8:	f7ff fb72 	bl	8015890 <HAL_GetTick>
 80161ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80161ae:	e008      	b.n	80161c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80161b0:	f7ff fb6e 	bl	8015890 <HAL_GetTick>
 80161b4:	4602      	mov	r2, r0
 80161b6:	693b      	ldr	r3, [r7, #16]
 80161b8:	1ad3      	subs	r3, r2, r3
 80161ba:	2b02      	cmp	r3, #2
 80161bc:	d901      	bls.n	80161c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80161be:	2303      	movs	r3, #3
 80161c0:	e187      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80161c2:	4b1b      	ldr	r3, [pc, #108]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	f003 0302 	and.w	r3, r3, #2
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d1f0      	bne.n	80161b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	f003 0308 	and.w	r3, r3, #8
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d036      	beq.n	8016248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	695b      	ldr	r3, [r3, #20]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d016      	beq.n	8016210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80161e2:	4b15      	ldr	r3, [pc, #84]	@ (8016238 <HAL_RCC_OscConfig+0x248>)
 80161e4:	2201      	movs	r2, #1
 80161e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80161e8:	f7ff fb52 	bl	8015890 <HAL_GetTick>
 80161ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80161ee:	e008      	b.n	8016202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80161f0:	f7ff fb4e 	bl	8015890 <HAL_GetTick>
 80161f4:	4602      	mov	r2, r0
 80161f6:	693b      	ldr	r3, [r7, #16]
 80161f8:	1ad3      	subs	r3, r2, r3
 80161fa:	2b02      	cmp	r3, #2
 80161fc:	d901      	bls.n	8016202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80161fe:	2303      	movs	r3, #3
 8016200:	e167      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016202:	4b0b      	ldr	r3, [pc, #44]	@ (8016230 <HAL_RCC_OscConfig+0x240>)
 8016204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016206:	f003 0302 	and.w	r3, r3, #2
 801620a:	2b00      	cmp	r3, #0
 801620c:	d0f0      	beq.n	80161f0 <HAL_RCC_OscConfig+0x200>
 801620e:	e01b      	b.n	8016248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016210:	4b09      	ldr	r3, [pc, #36]	@ (8016238 <HAL_RCC_OscConfig+0x248>)
 8016212:	2200      	movs	r2, #0
 8016214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016216:	f7ff fb3b 	bl	8015890 <HAL_GetTick>
 801621a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801621c:	e00e      	b.n	801623c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801621e:	f7ff fb37 	bl	8015890 <HAL_GetTick>
 8016222:	4602      	mov	r2, r0
 8016224:	693b      	ldr	r3, [r7, #16]
 8016226:	1ad3      	subs	r3, r2, r3
 8016228:	2b02      	cmp	r3, #2
 801622a:	d907      	bls.n	801623c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801622c:	2303      	movs	r3, #3
 801622e:	e150      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
 8016230:	40023800 	.word	0x40023800
 8016234:	42470000 	.word	0x42470000
 8016238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801623c:	4b88      	ldr	r3, [pc, #544]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801623e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016240:	f003 0302 	and.w	r3, r3, #2
 8016244:	2b00      	cmp	r3, #0
 8016246:	d1ea      	bne.n	801621e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	f003 0304 	and.w	r3, r3, #4
 8016250:	2b00      	cmp	r3, #0
 8016252:	f000 8097 	beq.w	8016384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016256:	2300      	movs	r3, #0
 8016258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801625a:	4b81      	ldr	r3, [pc, #516]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801625e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016262:	2b00      	cmp	r3, #0
 8016264:	d10f      	bne.n	8016286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016266:	2300      	movs	r3, #0
 8016268:	60bb      	str	r3, [r7, #8]
 801626a:	4b7d      	ldr	r3, [pc, #500]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801626c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801626e:	4a7c      	ldr	r2, [pc, #496]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 8016270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016274:	6413      	str	r3, [r2, #64]	@ 0x40
 8016276:	4b7a      	ldr	r3, [pc, #488]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 8016278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801627a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801627e:	60bb      	str	r3, [r7, #8]
 8016280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8016282:	2301      	movs	r3, #1
 8016284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016286:	4b77      	ldr	r3, [pc, #476]	@ (8016464 <HAL_RCC_OscConfig+0x474>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801628e:	2b00      	cmp	r3, #0
 8016290:	d118      	bne.n	80162c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016292:	4b74      	ldr	r3, [pc, #464]	@ (8016464 <HAL_RCC_OscConfig+0x474>)
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	4a73      	ldr	r2, [pc, #460]	@ (8016464 <HAL_RCC_OscConfig+0x474>)
 8016298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801629c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801629e:	f7ff faf7 	bl	8015890 <HAL_GetTick>
 80162a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80162a4:	e008      	b.n	80162b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80162a6:	f7ff faf3 	bl	8015890 <HAL_GetTick>
 80162aa:	4602      	mov	r2, r0
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	1ad3      	subs	r3, r2, r3
 80162b0:	2b02      	cmp	r3, #2
 80162b2:	d901      	bls.n	80162b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80162b4:	2303      	movs	r3, #3
 80162b6:	e10c      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80162b8:	4b6a      	ldr	r3, [pc, #424]	@ (8016464 <HAL_RCC_OscConfig+0x474>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d0f0      	beq.n	80162a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	689b      	ldr	r3, [r3, #8]
 80162c8:	2b01      	cmp	r3, #1
 80162ca:	d106      	bne.n	80162da <HAL_RCC_OscConfig+0x2ea>
 80162cc:	4b64      	ldr	r3, [pc, #400]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80162ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80162d0:	4a63      	ldr	r2, [pc, #396]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80162d2:	f043 0301 	orr.w	r3, r3, #1
 80162d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80162d8:	e01c      	b.n	8016314 <HAL_RCC_OscConfig+0x324>
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	689b      	ldr	r3, [r3, #8]
 80162de:	2b05      	cmp	r3, #5
 80162e0:	d10c      	bne.n	80162fc <HAL_RCC_OscConfig+0x30c>
 80162e2:	4b5f      	ldr	r3, [pc, #380]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80162e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80162e6:	4a5e      	ldr	r2, [pc, #376]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80162e8:	f043 0304 	orr.w	r3, r3, #4
 80162ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80162ee:	4b5c      	ldr	r3, [pc, #368]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80162f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80162f2:	4a5b      	ldr	r2, [pc, #364]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80162f4:	f043 0301 	orr.w	r3, r3, #1
 80162f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80162fa:	e00b      	b.n	8016314 <HAL_RCC_OscConfig+0x324>
 80162fc:	4b58      	ldr	r3, [pc, #352]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80162fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016300:	4a57      	ldr	r2, [pc, #348]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 8016302:	f023 0301 	bic.w	r3, r3, #1
 8016306:	6713      	str	r3, [r2, #112]	@ 0x70
 8016308:	4b55      	ldr	r3, [pc, #340]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801630a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801630c:	4a54      	ldr	r2, [pc, #336]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801630e:	f023 0304 	bic.w	r3, r3, #4
 8016312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	689b      	ldr	r3, [r3, #8]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d015      	beq.n	8016348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801631c:	f7ff fab8 	bl	8015890 <HAL_GetTick>
 8016320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016322:	e00a      	b.n	801633a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8016324:	f7ff fab4 	bl	8015890 <HAL_GetTick>
 8016328:	4602      	mov	r2, r0
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016332:	4293      	cmp	r3, r2
 8016334:	d901      	bls.n	801633a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8016336:	2303      	movs	r3, #3
 8016338:	e0cb      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801633a:	4b49      	ldr	r3, [pc, #292]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801633c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801633e:	f003 0302 	and.w	r3, r3, #2
 8016342:	2b00      	cmp	r3, #0
 8016344:	d0ee      	beq.n	8016324 <HAL_RCC_OscConfig+0x334>
 8016346:	e014      	b.n	8016372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8016348:	f7ff faa2 	bl	8015890 <HAL_GetTick>
 801634c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801634e:	e00a      	b.n	8016366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8016350:	f7ff fa9e 	bl	8015890 <HAL_GetTick>
 8016354:	4602      	mov	r2, r0
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	1ad3      	subs	r3, r2, r3
 801635a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801635e:	4293      	cmp	r3, r2
 8016360:	d901      	bls.n	8016366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8016362:	2303      	movs	r3, #3
 8016364:	e0b5      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016366:	4b3e      	ldr	r3, [pc, #248]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 8016368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801636a:	f003 0302 	and.w	r3, r3, #2
 801636e:	2b00      	cmp	r3, #0
 8016370:	d1ee      	bne.n	8016350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8016372:	7dfb      	ldrb	r3, [r7, #23]
 8016374:	2b01      	cmp	r3, #1
 8016376:	d105      	bne.n	8016384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016378:	4b39      	ldr	r3, [pc, #228]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801637a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801637c:	4a38      	ldr	r2, [pc, #224]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801637e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	699b      	ldr	r3, [r3, #24]
 8016388:	2b00      	cmp	r3, #0
 801638a:	f000 80a1 	beq.w	80164d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801638e:	4b34      	ldr	r3, [pc, #208]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 8016390:	689b      	ldr	r3, [r3, #8]
 8016392:	f003 030c 	and.w	r3, r3, #12
 8016396:	2b08      	cmp	r3, #8
 8016398:	d05c      	beq.n	8016454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	699b      	ldr	r3, [r3, #24]
 801639e:	2b02      	cmp	r3, #2
 80163a0:	d141      	bne.n	8016426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80163a2:	4b31      	ldr	r3, [pc, #196]	@ (8016468 <HAL_RCC_OscConfig+0x478>)
 80163a4:	2200      	movs	r2, #0
 80163a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80163a8:	f7ff fa72 	bl	8015890 <HAL_GetTick>
 80163ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80163ae:	e008      	b.n	80163c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80163b0:	f7ff fa6e 	bl	8015890 <HAL_GetTick>
 80163b4:	4602      	mov	r2, r0
 80163b6:	693b      	ldr	r3, [r7, #16]
 80163b8:	1ad3      	subs	r3, r2, r3
 80163ba:	2b02      	cmp	r3, #2
 80163bc:	d901      	bls.n	80163c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80163be:	2303      	movs	r3, #3
 80163c0:	e087      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80163c2:	4b27      	ldr	r3, [pc, #156]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d1f0      	bne.n	80163b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	69da      	ldr	r2, [r3, #28]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	6a1b      	ldr	r3, [r3, #32]
 80163d6:	431a      	orrs	r2, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163dc:	019b      	lsls	r3, r3, #6
 80163de:	431a      	orrs	r2, r3
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163e4:	085b      	lsrs	r3, r3, #1
 80163e6:	3b01      	subs	r3, #1
 80163e8:	041b      	lsls	r3, r3, #16
 80163ea:	431a      	orrs	r2, r3
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163f0:	061b      	lsls	r3, r3, #24
 80163f2:	491b      	ldr	r1, [pc, #108]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 80163f4:	4313      	orrs	r3, r2
 80163f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80163f8:	4b1b      	ldr	r3, [pc, #108]	@ (8016468 <HAL_RCC_OscConfig+0x478>)
 80163fa:	2201      	movs	r2, #1
 80163fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80163fe:	f7ff fa47 	bl	8015890 <HAL_GetTick>
 8016402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016404:	e008      	b.n	8016418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016406:	f7ff fa43 	bl	8015890 <HAL_GetTick>
 801640a:	4602      	mov	r2, r0
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	1ad3      	subs	r3, r2, r3
 8016410:	2b02      	cmp	r3, #2
 8016412:	d901      	bls.n	8016418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8016414:	2303      	movs	r3, #3
 8016416:	e05c      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016418:	4b11      	ldr	r3, [pc, #68]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8016420:	2b00      	cmp	r3, #0
 8016422:	d0f0      	beq.n	8016406 <HAL_RCC_OscConfig+0x416>
 8016424:	e054      	b.n	80164d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016426:	4b10      	ldr	r3, [pc, #64]	@ (8016468 <HAL_RCC_OscConfig+0x478>)
 8016428:	2200      	movs	r2, #0
 801642a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801642c:	f7ff fa30 	bl	8015890 <HAL_GetTick>
 8016430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016432:	e008      	b.n	8016446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016434:	f7ff fa2c 	bl	8015890 <HAL_GetTick>
 8016438:	4602      	mov	r2, r0
 801643a:	693b      	ldr	r3, [r7, #16]
 801643c:	1ad3      	subs	r3, r2, r3
 801643e:	2b02      	cmp	r3, #2
 8016440:	d901      	bls.n	8016446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8016442:	2303      	movs	r3, #3
 8016444:	e045      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016446:	4b06      	ldr	r3, [pc, #24]	@ (8016460 <HAL_RCC_OscConfig+0x470>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801644e:	2b00      	cmp	r3, #0
 8016450:	d1f0      	bne.n	8016434 <HAL_RCC_OscConfig+0x444>
 8016452:	e03d      	b.n	80164d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	699b      	ldr	r3, [r3, #24]
 8016458:	2b01      	cmp	r3, #1
 801645a:	d107      	bne.n	801646c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801645c:	2301      	movs	r3, #1
 801645e:	e038      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
 8016460:	40023800 	.word	0x40023800
 8016464:	40007000 	.word	0x40007000
 8016468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801646c:	4b1b      	ldr	r3, [pc, #108]	@ (80164dc <HAL_RCC_OscConfig+0x4ec>)
 801646e:	685b      	ldr	r3, [r3, #4]
 8016470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	699b      	ldr	r3, [r3, #24]
 8016476:	2b01      	cmp	r3, #1
 8016478:	d028      	beq.n	80164cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016484:	429a      	cmp	r2, r3
 8016486:	d121      	bne.n	80164cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016492:	429a      	cmp	r2, r3
 8016494:	d11a      	bne.n	80164cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8016496:	68fa      	ldr	r2, [r7, #12]
 8016498:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 801649c:	4013      	ands	r3, r2
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80164a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80164a4:	4293      	cmp	r3, r2
 80164a6:	d111      	bne.n	80164cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164b2:	085b      	lsrs	r3, r3, #1
 80164b4:	3b01      	subs	r3, #1
 80164b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80164b8:	429a      	cmp	r2, r3
 80164ba:	d107      	bne.n	80164cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d001      	beq.n	80164d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80164cc:	2301      	movs	r3, #1
 80164ce:	e000      	b.n	80164d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80164d0:	2300      	movs	r3, #0
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3718      	adds	r7, #24
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	40023800 	.word	0x40023800

080164e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b084      	sub	sp, #16
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	6078      	str	r0, [r7, #4]
 80164e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d101      	bne.n	80164f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80164f0:	2301      	movs	r3, #1
 80164f2:	e0cc      	b.n	801668e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80164f4:	4b68      	ldr	r3, [pc, #416]	@ (8016698 <HAL_RCC_ClockConfig+0x1b8>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	f003 0307 	and.w	r3, r3, #7
 80164fc:	683a      	ldr	r2, [r7, #0]
 80164fe:	429a      	cmp	r2, r3
 8016500:	d90c      	bls.n	801651c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016502:	4b65      	ldr	r3, [pc, #404]	@ (8016698 <HAL_RCC_ClockConfig+0x1b8>)
 8016504:	683a      	ldr	r2, [r7, #0]
 8016506:	b2d2      	uxtb	r2, r2
 8016508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801650a:	4b63      	ldr	r3, [pc, #396]	@ (8016698 <HAL_RCC_ClockConfig+0x1b8>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	f003 0307 	and.w	r3, r3, #7
 8016512:	683a      	ldr	r2, [r7, #0]
 8016514:	429a      	cmp	r2, r3
 8016516:	d001      	beq.n	801651c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8016518:	2301      	movs	r3, #1
 801651a:	e0b8      	b.n	801668e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	f003 0302 	and.w	r3, r3, #2
 8016524:	2b00      	cmp	r3, #0
 8016526:	d020      	beq.n	801656a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	f003 0304 	and.w	r3, r3, #4
 8016530:	2b00      	cmp	r3, #0
 8016532:	d005      	beq.n	8016540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016534:	4b59      	ldr	r3, [pc, #356]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016536:	689b      	ldr	r3, [r3, #8]
 8016538:	4a58      	ldr	r2, [pc, #352]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 801653a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 801653e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	f003 0308 	and.w	r3, r3, #8
 8016548:	2b00      	cmp	r3, #0
 801654a:	d005      	beq.n	8016558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801654c:	4b53      	ldr	r3, [pc, #332]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 801654e:	689b      	ldr	r3, [r3, #8]
 8016550:	4a52      	ldr	r2, [pc, #328]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8016556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016558:	4b50      	ldr	r3, [pc, #320]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 801655a:	689b      	ldr	r3, [r3, #8]
 801655c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	689b      	ldr	r3, [r3, #8]
 8016564:	494d      	ldr	r1, [pc, #308]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016566:	4313      	orrs	r3, r2
 8016568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	f003 0301 	and.w	r3, r3, #1
 8016572:	2b00      	cmp	r3, #0
 8016574:	d044      	beq.n	8016600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	685b      	ldr	r3, [r3, #4]
 801657a:	2b01      	cmp	r3, #1
 801657c:	d107      	bne.n	801658e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801657e:	4b47      	ldr	r3, [pc, #284]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016586:	2b00      	cmp	r3, #0
 8016588:	d119      	bne.n	80165be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801658a:	2301      	movs	r3, #1
 801658c:	e07f      	b.n	801668e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	2b02      	cmp	r3, #2
 8016594:	d003      	beq.n	801659e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801659a:	2b03      	cmp	r3, #3
 801659c:	d107      	bne.n	80165ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801659e:	4b3f      	ldr	r3, [pc, #252]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d109      	bne.n	80165be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80165aa:	2301      	movs	r3, #1
 80165ac:	e06f      	b.n	801668e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80165ae:	4b3b      	ldr	r3, [pc, #236]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	f003 0302 	and.w	r3, r3, #2
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d101      	bne.n	80165be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80165ba:	2301      	movs	r3, #1
 80165bc:	e067      	b.n	801668e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80165be:	4b37      	ldr	r3, [pc, #220]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 80165c0:	689b      	ldr	r3, [r3, #8]
 80165c2:	f023 0203 	bic.w	r2, r3, #3
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	685b      	ldr	r3, [r3, #4]
 80165ca:	4934      	ldr	r1, [pc, #208]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 80165cc:	4313      	orrs	r3, r2
 80165ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80165d0:	f7ff f95e 	bl	8015890 <HAL_GetTick>
 80165d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80165d6:	e00a      	b.n	80165ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80165d8:	f7ff f95a 	bl	8015890 <HAL_GetTick>
 80165dc:	4602      	mov	r2, r0
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	1ad3      	subs	r3, r2, r3
 80165e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80165e6:	4293      	cmp	r3, r2
 80165e8:	d901      	bls.n	80165ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80165ea:	2303      	movs	r3, #3
 80165ec:	e04f      	b.n	801668e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80165ee:	4b2b      	ldr	r3, [pc, #172]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 80165f0:	689b      	ldr	r3, [r3, #8]
 80165f2:	f003 020c 	and.w	r2, r3, #12
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	685b      	ldr	r3, [r3, #4]
 80165fa:	009b      	lsls	r3, r3, #2
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d1eb      	bne.n	80165d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8016600:	4b25      	ldr	r3, [pc, #148]	@ (8016698 <HAL_RCC_ClockConfig+0x1b8>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	f003 0307 	and.w	r3, r3, #7
 8016608:	683a      	ldr	r2, [r7, #0]
 801660a:	429a      	cmp	r2, r3
 801660c:	d20c      	bcs.n	8016628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801660e:	4b22      	ldr	r3, [pc, #136]	@ (8016698 <HAL_RCC_ClockConfig+0x1b8>)
 8016610:	683a      	ldr	r2, [r7, #0]
 8016612:	b2d2      	uxtb	r2, r2
 8016614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016616:	4b20      	ldr	r3, [pc, #128]	@ (8016698 <HAL_RCC_ClockConfig+0x1b8>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	f003 0307 	and.w	r3, r3, #7
 801661e:	683a      	ldr	r2, [r7, #0]
 8016620:	429a      	cmp	r2, r3
 8016622:	d001      	beq.n	8016628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016624:	2301      	movs	r3, #1
 8016626:	e032      	b.n	801668e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f003 0304 	and.w	r3, r3, #4
 8016630:	2b00      	cmp	r3, #0
 8016632:	d008      	beq.n	8016646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016634:	4b19      	ldr	r3, [pc, #100]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016636:	689b      	ldr	r3, [r3, #8]
 8016638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	68db      	ldr	r3, [r3, #12]
 8016640:	4916      	ldr	r1, [pc, #88]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016642:	4313      	orrs	r3, r2
 8016644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f003 0308 	and.w	r3, r3, #8
 801664e:	2b00      	cmp	r3, #0
 8016650:	d009      	beq.n	8016666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8016652:	4b12      	ldr	r3, [pc, #72]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016654:	689b      	ldr	r3, [r3, #8]
 8016656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	691b      	ldr	r3, [r3, #16]
 801665e:	00db      	lsls	r3, r3, #3
 8016660:	490e      	ldr	r1, [pc, #56]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 8016662:	4313      	orrs	r3, r2
 8016664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016666:	f000 f821 	bl	80166ac <HAL_RCC_GetSysClockFreq>
 801666a:	4602      	mov	r2, r0
 801666c:	4b0b      	ldr	r3, [pc, #44]	@ (801669c <HAL_RCC_ClockConfig+0x1bc>)
 801666e:	689b      	ldr	r3, [r3, #8]
 8016670:	091b      	lsrs	r3, r3, #4
 8016672:	f003 030f 	and.w	r3, r3, #15
 8016676:	490a      	ldr	r1, [pc, #40]	@ (80166a0 <HAL_RCC_ClockConfig+0x1c0>)
 8016678:	5ccb      	ldrb	r3, [r1, r3]
 801667a:	fa22 f303 	lsr.w	r3, r2, r3
 801667e:	4a09      	ldr	r2, [pc, #36]	@ (80166a4 <HAL_RCC_ClockConfig+0x1c4>)
 8016680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8016682:	4b09      	ldr	r3, [pc, #36]	@ (80166a8 <HAL_RCC_ClockConfig+0x1c8>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	4618      	mov	r0, r3
 8016688:	f7fc fa32 	bl	8012af0 <HAL_InitTick>

  return HAL_OK;
 801668c:	2300      	movs	r3, #0
}
 801668e:	4618      	mov	r0, r3
 8016690:	3710      	adds	r7, #16
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	40023c00 	.word	0x40023c00
 801669c:	40023800 	.word	0x40023800
 80166a0:	08034418 	.word	0x08034418
 80166a4:	20000000 	.word	0x20000000
 80166a8:	200000bc 	.word	0x200000bc

080166ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80166ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80166b0:	b094      	sub	sp, #80	@ 0x50
 80166b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80166b4:	2300      	movs	r3, #0
 80166b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80166b8:	2300      	movs	r3, #0
 80166ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80166bc:	2300      	movs	r3, #0
 80166be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80166c0:	2300      	movs	r3, #0
 80166c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80166c4:	4b79      	ldr	r3, [pc, #484]	@ (80168ac <HAL_RCC_GetSysClockFreq+0x200>)
 80166c6:	689b      	ldr	r3, [r3, #8]
 80166c8:	f003 030c 	and.w	r3, r3, #12
 80166cc:	2b08      	cmp	r3, #8
 80166ce:	d00d      	beq.n	80166ec <HAL_RCC_GetSysClockFreq+0x40>
 80166d0:	2b08      	cmp	r3, #8
 80166d2:	f200 80e1 	bhi.w	8016898 <HAL_RCC_GetSysClockFreq+0x1ec>
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d002      	beq.n	80166e0 <HAL_RCC_GetSysClockFreq+0x34>
 80166da:	2b04      	cmp	r3, #4
 80166dc:	d003      	beq.n	80166e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80166de:	e0db      	b.n	8016898 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80166e0:	4b73      	ldr	r3, [pc, #460]	@ (80168b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80166e2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80166e4:	e0db      	b.n	801689e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80166e6:	4b73      	ldr	r3, [pc, #460]	@ (80168b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80166e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80166ea:	e0d8      	b.n	801689e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80166ec:	4b6f      	ldr	r3, [pc, #444]	@ (80168ac <HAL_RCC_GetSysClockFreq+0x200>)
 80166ee:	685b      	ldr	r3, [r3, #4]
 80166f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80166f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80166f6:	4b6d      	ldr	r3, [pc, #436]	@ (80168ac <HAL_RCC_GetSysClockFreq+0x200>)
 80166f8:	685b      	ldr	r3, [r3, #4]
 80166fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d063      	beq.n	80167ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016702:	4b6a      	ldr	r3, [pc, #424]	@ (80168ac <HAL_RCC_GetSysClockFreq+0x200>)
 8016704:	685b      	ldr	r3, [r3, #4]
 8016706:	099b      	lsrs	r3, r3, #6
 8016708:	2200      	movs	r2, #0
 801670a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801670c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016714:	633b      	str	r3, [r7, #48]	@ 0x30
 8016716:	2300      	movs	r3, #0
 8016718:	637b      	str	r3, [r7, #52]	@ 0x34
 801671a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 801671e:	4622      	mov	r2, r4
 8016720:	462b      	mov	r3, r5
 8016722:	f04f 0000 	mov.w	r0, #0
 8016726:	f04f 0100 	mov.w	r1, #0
 801672a:	0159      	lsls	r1, r3, #5
 801672c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8016730:	0150      	lsls	r0, r2, #5
 8016732:	4602      	mov	r2, r0
 8016734:	460b      	mov	r3, r1
 8016736:	4621      	mov	r1, r4
 8016738:	1a51      	subs	r1, r2, r1
 801673a:	6139      	str	r1, [r7, #16]
 801673c:	4629      	mov	r1, r5
 801673e:	eb63 0301 	sbc.w	r3, r3, r1
 8016742:	617b      	str	r3, [r7, #20]
 8016744:	f04f 0200 	mov.w	r2, #0
 8016748:	f04f 0300 	mov.w	r3, #0
 801674c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8016750:	4659      	mov	r1, fp
 8016752:	018b      	lsls	r3, r1, #6
 8016754:	4651      	mov	r1, sl
 8016756:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801675a:	4651      	mov	r1, sl
 801675c:	018a      	lsls	r2, r1, #6
 801675e:	4651      	mov	r1, sl
 8016760:	ebb2 0801 	subs.w	r8, r2, r1
 8016764:	4659      	mov	r1, fp
 8016766:	eb63 0901 	sbc.w	r9, r3, r1
 801676a:	f04f 0200 	mov.w	r2, #0
 801676e:	f04f 0300 	mov.w	r3, #0
 8016772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801677a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801677e:	4690      	mov	r8, r2
 8016780:	4699      	mov	r9, r3
 8016782:	4623      	mov	r3, r4
 8016784:	eb18 0303 	adds.w	r3, r8, r3
 8016788:	60bb      	str	r3, [r7, #8]
 801678a:	462b      	mov	r3, r5
 801678c:	eb49 0303 	adc.w	r3, r9, r3
 8016790:	60fb      	str	r3, [r7, #12]
 8016792:	f04f 0200 	mov.w	r2, #0
 8016796:	f04f 0300 	mov.w	r3, #0
 801679a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 801679e:	4629      	mov	r1, r5
 80167a0:	024b      	lsls	r3, r1, #9
 80167a2:	4621      	mov	r1, r4
 80167a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80167a8:	4621      	mov	r1, r4
 80167aa:	024a      	lsls	r2, r1, #9
 80167ac:	4610      	mov	r0, r2
 80167ae:	4619      	mov	r1, r3
 80167b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80167b2:	2200      	movs	r2, #0
 80167b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80167b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80167b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80167bc:	f7fa fa7c 	bl	8010cb8 <__aeabi_uldivmod>
 80167c0:	4602      	mov	r2, r0
 80167c2:	460b      	mov	r3, r1
 80167c4:	4613      	mov	r3, r2
 80167c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80167c8:	e058      	b.n	801687c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80167ca:	4b38      	ldr	r3, [pc, #224]	@ (80168ac <HAL_RCC_GetSysClockFreq+0x200>)
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	099b      	lsrs	r3, r3, #6
 80167d0:	2200      	movs	r2, #0
 80167d2:	4618      	mov	r0, r3
 80167d4:	4611      	mov	r1, r2
 80167d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80167da:	623b      	str	r3, [r7, #32]
 80167dc:	2300      	movs	r3, #0
 80167de:	627b      	str	r3, [r7, #36]	@ 0x24
 80167e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80167e4:	4642      	mov	r2, r8
 80167e6:	464b      	mov	r3, r9
 80167e8:	f04f 0000 	mov.w	r0, #0
 80167ec:	f04f 0100 	mov.w	r1, #0
 80167f0:	0159      	lsls	r1, r3, #5
 80167f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80167f6:	0150      	lsls	r0, r2, #5
 80167f8:	4602      	mov	r2, r0
 80167fa:	460b      	mov	r3, r1
 80167fc:	4641      	mov	r1, r8
 80167fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8016802:	4649      	mov	r1, r9
 8016804:	eb63 0b01 	sbc.w	fp, r3, r1
 8016808:	f04f 0200 	mov.w	r2, #0
 801680c:	f04f 0300 	mov.w	r3, #0
 8016810:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8016814:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8016818:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801681c:	ebb2 040a 	subs.w	r4, r2, sl
 8016820:	eb63 050b 	sbc.w	r5, r3, fp
 8016824:	f04f 0200 	mov.w	r2, #0
 8016828:	f04f 0300 	mov.w	r3, #0
 801682c:	00eb      	lsls	r3, r5, #3
 801682e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016832:	00e2      	lsls	r2, r4, #3
 8016834:	4614      	mov	r4, r2
 8016836:	461d      	mov	r5, r3
 8016838:	4643      	mov	r3, r8
 801683a:	18e3      	adds	r3, r4, r3
 801683c:	603b      	str	r3, [r7, #0]
 801683e:	464b      	mov	r3, r9
 8016840:	eb45 0303 	adc.w	r3, r5, r3
 8016844:	607b      	str	r3, [r7, #4]
 8016846:	f04f 0200 	mov.w	r2, #0
 801684a:	f04f 0300 	mov.w	r3, #0
 801684e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016852:	4629      	mov	r1, r5
 8016854:	028b      	lsls	r3, r1, #10
 8016856:	4621      	mov	r1, r4
 8016858:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801685c:	4621      	mov	r1, r4
 801685e:	028a      	lsls	r2, r1, #10
 8016860:	4610      	mov	r0, r2
 8016862:	4619      	mov	r1, r3
 8016864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016866:	2200      	movs	r2, #0
 8016868:	61bb      	str	r3, [r7, #24]
 801686a:	61fa      	str	r2, [r7, #28]
 801686c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8016870:	f7fa fa22 	bl	8010cb8 <__aeabi_uldivmod>
 8016874:	4602      	mov	r2, r0
 8016876:	460b      	mov	r3, r1
 8016878:	4613      	mov	r3, r2
 801687a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801687c:	4b0b      	ldr	r3, [pc, #44]	@ (80168ac <HAL_RCC_GetSysClockFreq+0x200>)
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	0c1b      	lsrs	r3, r3, #16
 8016882:	f003 0303 	and.w	r3, r3, #3
 8016886:	3301      	adds	r3, #1
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 801688c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801688e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016890:	fbb2 f3f3 	udiv	r3, r2, r3
 8016894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8016896:	e002      	b.n	801689e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016898:	4b05      	ldr	r3, [pc, #20]	@ (80168b0 <HAL_RCC_GetSysClockFreq+0x204>)
 801689a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 801689c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801689e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3750      	adds	r7, #80	@ 0x50
 80168a4:	46bd      	mov	sp, r7
 80168a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80168aa:	bf00      	nop
 80168ac:	40023800 	.word	0x40023800
 80168b0:	00f42400 	.word	0x00f42400
 80168b4:	007a1200 	.word	0x007a1200

080168b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80168b8:	b480      	push	{r7}
 80168ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80168bc:	4b03      	ldr	r3, [pc, #12]	@ (80168cc <HAL_RCC_GetHCLKFreq+0x14>)
 80168be:	681b      	ldr	r3, [r3, #0]
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	46bd      	mov	sp, r7
 80168c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c8:	4770      	bx	lr
 80168ca:	bf00      	nop
 80168cc:	20000000 	.word	0x20000000

080168d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80168d4:	f7ff fff0 	bl	80168b8 <HAL_RCC_GetHCLKFreq>
 80168d8:	4602      	mov	r2, r0
 80168da:	4b05      	ldr	r3, [pc, #20]	@ (80168f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80168dc:	689b      	ldr	r3, [r3, #8]
 80168de:	0a9b      	lsrs	r3, r3, #10
 80168e0:	f003 0307 	and.w	r3, r3, #7
 80168e4:	4903      	ldr	r1, [pc, #12]	@ (80168f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80168e6:	5ccb      	ldrb	r3, [r1, r3]
 80168e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	40023800 	.word	0x40023800
 80168f4:	08034428 	.word	0x08034428

080168f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80168fc:	f7ff ffdc 	bl	80168b8 <HAL_RCC_GetHCLKFreq>
 8016900:	4602      	mov	r2, r0
 8016902:	4b05      	ldr	r3, [pc, #20]	@ (8016918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8016904:	689b      	ldr	r3, [r3, #8]
 8016906:	0b5b      	lsrs	r3, r3, #13
 8016908:	f003 0307 	and.w	r3, r3, #7
 801690c:	4903      	ldr	r1, [pc, #12]	@ (801691c <HAL_RCC_GetPCLK2Freq+0x24>)
 801690e:	5ccb      	ldrb	r3, [r1, r3]
 8016910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016914:	4618      	mov	r0, r3
 8016916:	bd80      	pop	{r7, pc}
 8016918:	40023800 	.word	0x40023800
 801691c:	08034428 	.word	0x08034428

08016920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016920:	b480      	push	{r7}
 8016922:	b083      	sub	sp, #12
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	220f      	movs	r2, #15
 801692e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016930:	4b12      	ldr	r3, [pc, #72]	@ (801697c <HAL_RCC_GetClockConfig+0x5c>)
 8016932:	689b      	ldr	r3, [r3, #8]
 8016934:	f003 0203 	and.w	r2, r3, #3
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801693c:	4b0f      	ldr	r3, [pc, #60]	@ (801697c <HAL_RCC_GetClockConfig+0x5c>)
 801693e:	689b      	ldr	r3, [r3, #8]
 8016940:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016948:	4b0c      	ldr	r3, [pc, #48]	@ (801697c <HAL_RCC_GetClockConfig+0x5c>)
 801694a:	689b      	ldr	r3, [r3, #8]
 801694c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016954:	4b09      	ldr	r3, [pc, #36]	@ (801697c <HAL_RCC_GetClockConfig+0x5c>)
 8016956:	689b      	ldr	r3, [r3, #8]
 8016958:	08db      	lsrs	r3, r3, #3
 801695a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016962:	4b07      	ldr	r3, [pc, #28]	@ (8016980 <HAL_RCC_GetClockConfig+0x60>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f003 0207 	and.w	r2, r3, #7
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	601a      	str	r2, [r3, #0]
}
 801696e:	bf00      	nop
 8016970:	370c      	adds	r7, #12
 8016972:	46bd      	mov	sp, r7
 8016974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016978:	4770      	bx	lr
 801697a:	bf00      	nop
 801697c:	40023800 	.word	0x40023800
 8016980:	40023c00 	.word	0x40023c00

08016984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b082      	sub	sp, #8
 8016988:	af00      	add	r7, sp, #0
 801698a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d101      	bne.n	8016996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8016992:	2301      	movs	r3, #1
 8016994:	e07b      	b.n	8016a8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801699a:	2b00      	cmp	r3, #0
 801699c:	d108      	bne.n	80169b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80169a6:	d009      	beq.n	80169bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2200      	movs	r2, #0
 80169ac:	61da      	str	r2, [r3, #28]
 80169ae:	e005      	b.n	80169bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2200      	movs	r2, #0
 80169b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2200      	movs	r2, #0
 80169ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2200      	movs	r2, #0
 80169c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80169c8:	b2db      	uxtb	r3, r3
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d106      	bne.n	80169dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	2200      	movs	r2, #0
 80169d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80169d6:	6878      	ldr	r0, [r7, #4]
 80169d8:	f7fb ffbc 	bl	8012954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2202      	movs	r2, #2
 80169e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	681a      	ldr	r2, [r3, #0]
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80169f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	685b      	ldr	r3, [r3, #4]
 80169f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	689b      	ldr	r3, [r3, #8]
 8016a00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8016a04:	431a      	orrs	r2, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	68db      	ldr	r3, [r3, #12]
 8016a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016a0e:	431a      	orrs	r2, r3
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	691b      	ldr	r3, [r3, #16]
 8016a14:	f003 0302 	and.w	r3, r3, #2
 8016a18:	431a      	orrs	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	695b      	ldr	r3, [r3, #20]
 8016a1e:	f003 0301 	and.w	r3, r3, #1
 8016a22:	431a      	orrs	r2, r3
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	699b      	ldr	r3, [r3, #24]
 8016a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8016a2c:	431a      	orrs	r2, r3
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	69db      	ldr	r3, [r3, #28]
 8016a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016a36:	431a      	orrs	r2, r3
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	6a1b      	ldr	r3, [r3, #32]
 8016a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016a40:	ea42 0103 	orr.w	r1, r2, r3
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	430a      	orrs	r2, r1
 8016a52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	699b      	ldr	r3, [r3, #24]
 8016a58:	0c1b      	lsrs	r3, r3, #16
 8016a5a:	f003 0104 	and.w	r1, r3, #4
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a62:	f003 0210 	and.w	r2, r3, #16
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	430a      	orrs	r2, r1
 8016a6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	69da      	ldr	r2, [r3, #28]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8016a7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2200      	movs	r2, #0
 8016a82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2201      	movs	r2, #1
 8016a88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8016a8c:	2300      	movs	r3, #0
}
 8016a8e:	4618      	mov	r0, r3
 8016a90:	3708      	adds	r7, #8
 8016a92:	46bd      	mov	sp, r7
 8016a94:	bd80      	pop	{r7, pc}

08016a96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a96:	b580      	push	{r7, lr}
 8016a98:	b088      	sub	sp, #32
 8016a9a:	af00      	add	r7, sp, #0
 8016a9c:	60f8      	str	r0, [r7, #12]
 8016a9e:	60b9      	str	r1, [r7, #8]
 8016aa0:	603b      	str	r3, [r7, #0]
 8016aa2:	4613      	mov	r3, r2
 8016aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d101      	bne.n	8016ab8 <HAL_SPI_Transmit+0x22>
 8016ab4:	2302      	movs	r3, #2
 8016ab6:	e12d      	b.n	8016d14 <HAL_SPI_Transmit+0x27e>
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	2201      	movs	r2, #1
 8016abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016ac0:	f7fe fee6 	bl	8015890 <HAL_GetTick>
 8016ac4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8016ac6:	88fb      	ldrh	r3, [r7, #6]
 8016ac8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016ad0:	b2db      	uxtb	r3, r3
 8016ad2:	2b01      	cmp	r3, #1
 8016ad4:	d002      	beq.n	8016adc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8016ad6:	2302      	movs	r3, #2
 8016ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016ada:	e116      	b.n	8016d0a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8016adc:	68bb      	ldr	r3, [r7, #8]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d002      	beq.n	8016ae8 <HAL_SPI_Transmit+0x52>
 8016ae2:	88fb      	ldrh	r3, [r7, #6]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d102      	bne.n	8016aee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8016ae8:	2301      	movs	r3, #1
 8016aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016aec:	e10d      	b.n	8016d0a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	2203      	movs	r2, #3
 8016af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	2200      	movs	r2, #0
 8016afa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	68ba      	ldr	r2, [r7, #8]
 8016b00:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	88fa      	ldrh	r2, [r7, #6]
 8016b06:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	88fa      	ldrh	r2, [r7, #6]
 8016b0c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	2200      	movs	r2, #0
 8016b12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	2200      	movs	r2, #0
 8016b18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	2200      	movs	r2, #0
 8016b24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	2200      	movs	r2, #0
 8016b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	689b      	ldr	r3, [r3, #8]
 8016b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016b34:	d10f      	bne.n	8016b56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	681a      	ldr	r2, [r3, #0]
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8016b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8016b54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016b60:	2b40      	cmp	r3, #64	@ 0x40
 8016b62:	d007      	beq.n	8016b74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	681a      	ldr	r2, [r3, #0]
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	68db      	ldr	r3, [r3, #12]
 8016b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016b7c:	d14f      	bne.n	8016c1e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	685b      	ldr	r3, [r3, #4]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d002      	beq.n	8016b8c <HAL_SPI_Transmit+0xf6>
 8016b86:	8afb      	ldrh	r3, [r7, #22]
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d142      	bne.n	8016c12 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b90:	881a      	ldrh	r2, [r3, #0]
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b9c:	1c9a      	adds	r2, r3, #2
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	3b01      	subs	r3, #1
 8016baa:	b29a      	uxth	r2, r3
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8016bb0:	e02f      	b.n	8016c12 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	689b      	ldr	r3, [r3, #8]
 8016bb8:	f003 0302 	and.w	r3, r3, #2
 8016bbc:	2b02      	cmp	r3, #2
 8016bbe:	d112      	bne.n	8016be6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016bc4:	881a      	ldrh	r2, [r3, #0]
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016bd0:	1c9a      	adds	r2, r3, #2
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	3b01      	subs	r3, #1
 8016bde:	b29a      	uxth	r2, r3
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8016be4:	e015      	b.n	8016c12 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016be6:	f7fe fe53 	bl	8015890 <HAL_GetTick>
 8016bea:	4602      	mov	r2, r0
 8016bec:	69bb      	ldr	r3, [r7, #24]
 8016bee:	1ad3      	subs	r3, r2, r3
 8016bf0:	683a      	ldr	r2, [r7, #0]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d803      	bhi.n	8016bfe <HAL_SPI_Transmit+0x168>
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bfc:	d102      	bne.n	8016c04 <HAL_SPI_Transmit+0x16e>
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d106      	bne.n	8016c12 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8016c04:	2303      	movs	r3, #3
 8016c06:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2201      	movs	r2, #1
 8016c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8016c10:	e07b      	b.n	8016d0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016c16:	b29b      	uxth	r3, r3
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d1ca      	bne.n	8016bb2 <HAL_SPI_Transmit+0x11c>
 8016c1c:	e050      	b.n	8016cc0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d002      	beq.n	8016c2c <HAL_SPI_Transmit+0x196>
 8016c26:	8afb      	ldrh	r3, [r7, #22]
 8016c28:	2b01      	cmp	r3, #1
 8016c2a:	d144      	bne.n	8016cb6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	330c      	adds	r3, #12
 8016c36:	7812      	ldrb	r2, [r2, #0]
 8016c38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016c3e:	1c5a      	adds	r2, r3, #1
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	3b01      	subs	r3, #1
 8016c4c:	b29a      	uxth	r2, r3
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8016c52:	e030      	b.n	8016cb6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	689b      	ldr	r3, [r3, #8]
 8016c5a:	f003 0302 	and.w	r3, r3, #2
 8016c5e:	2b02      	cmp	r3, #2
 8016c60:	d113      	bne.n	8016c8a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	330c      	adds	r3, #12
 8016c6c:	7812      	ldrb	r2, [r2, #0]
 8016c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016c74:	1c5a      	adds	r2, r3, #1
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016c7e:	b29b      	uxth	r3, r3
 8016c80:	3b01      	subs	r3, #1
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8016c88:	e015      	b.n	8016cb6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016c8a:	f7fe fe01 	bl	8015890 <HAL_GetTick>
 8016c8e:	4602      	mov	r2, r0
 8016c90:	69bb      	ldr	r3, [r7, #24]
 8016c92:	1ad3      	subs	r3, r2, r3
 8016c94:	683a      	ldr	r2, [r7, #0]
 8016c96:	429a      	cmp	r2, r3
 8016c98:	d803      	bhi.n	8016ca2 <HAL_SPI_Transmit+0x20c>
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ca0:	d102      	bne.n	8016ca8 <HAL_SPI_Transmit+0x212>
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d106      	bne.n	8016cb6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8016ca8:	2303      	movs	r3, #3
 8016caa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	2201      	movs	r2, #1
 8016cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8016cb4:	e029      	b.n	8016d0a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d1c9      	bne.n	8016c54 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016cc0:	69ba      	ldr	r2, [r7, #24]
 8016cc2:	6839      	ldr	r1, [r7, #0]
 8016cc4:	68f8      	ldr	r0, [r7, #12]
 8016cc6:	f000 fbdf 	bl	8017488 <SPI_EndRxTxTransaction>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d002      	beq.n	8016cd6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	2220      	movs	r2, #32
 8016cd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	689b      	ldr	r3, [r3, #8]
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d10a      	bne.n	8016cf4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016cde:	2300      	movs	r3, #0
 8016ce0:	613b      	str	r3, [r7, #16]
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	613b      	str	r3, [r7, #16]
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	689b      	ldr	r3, [r3, #8]
 8016cf0:	613b      	str	r3, [r7, #16]
 8016cf2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d002      	beq.n	8016d02 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	77fb      	strb	r3, [r7, #31]
 8016d00:	e003      	b.n	8016d0a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	2201      	movs	r2, #1
 8016d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8016d12:	7ffb      	ldrb	r3, [r7, #31]
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	3720      	adds	r7, #32
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}

08016d1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b088      	sub	sp, #32
 8016d20:	af02      	add	r7, sp, #8
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	603b      	str	r3, [r7, #0]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016d36:	b2db      	uxtb	r3, r3
 8016d38:	2b01      	cmp	r3, #1
 8016d3a:	d002      	beq.n	8016d42 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016d3c:	2302      	movs	r3, #2
 8016d3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016d40:	e0fb      	b.n	8016f3a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016d4a:	d112      	bne.n	8016d72 <HAL_SPI_Receive+0x56>
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	689b      	ldr	r3, [r3, #8]
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d10e      	bne.n	8016d72 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	2204      	movs	r2, #4
 8016d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016d5c:	88fa      	ldrh	r2, [r7, #6]
 8016d5e:	683b      	ldr	r3, [r7, #0]
 8016d60:	9300      	str	r3, [sp, #0]
 8016d62:	4613      	mov	r3, r2
 8016d64:	68ba      	ldr	r2, [r7, #8]
 8016d66:	68b9      	ldr	r1, [r7, #8]
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f000 f8ef 	bl	8016f4c <HAL_SPI_TransmitReceive>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	e0e8      	b.n	8016f44 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d101      	bne.n	8016d80 <HAL_SPI_Receive+0x64>
 8016d7c:	2302      	movs	r3, #2
 8016d7e:	e0e1      	b.n	8016f44 <HAL_SPI_Receive+0x228>
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	2201      	movs	r2, #1
 8016d84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016d88:	f7fe fd82 	bl	8015890 <HAL_GetTick>
 8016d8c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d002      	beq.n	8016d9a <HAL_SPI_Receive+0x7e>
 8016d94:	88fb      	ldrh	r3, [r7, #6]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d102      	bne.n	8016da0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016d9e:	e0cc      	b.n	8016f3a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	2204      	movs	r2, #4
 8016da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	2200      	movs	r2, #0
 8016dac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	68ba      	ldr	r2, [r7, #8]
 8016db2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	88fa      	ldrh	r2, [r7, #6]
 8016db8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	88fa      	ldrh	r2, [r7, #6]
 8016dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	2200      	movs	r2, #0
 8016dca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	2200      	movs	r2, #0
 8016dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	2200      	movs	r2, #0
 8016ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	689b      	ldr	r3, [r3, #8]
 8016de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016de6:	d10f      	bne.n	8016e08 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8016df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8016e06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016e12:	2b40      	cmp	r3, #64	@ 0x40
 8016e14:	d007      	beq.n	8016e26 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	681a      	ldr	r2, [r3, #0]
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016e24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	68db      	ldr	r3, [r3, #12]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d16a      	bne.n	8016f04 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016e2e:	e032      	b.n	8016e96 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	689b      	ldr	r3, [r3, #8]
 8016e36:	f003 0301 	and.w	r3, r3, #1
 8016e3a:	2b01      	cmp	r3, #1
 8016e3c:	d115      	bne.n	8016e6a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	f103 020c 	add.w	r2, r3, #12
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e4a:	7812      	ldrb	r2, [r2, #0]
 8016e4c:	b2d2      	uxtb	r2, r2
 8016e4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e54:	1c5a      	adds	r2, r3, #1
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8016e5e:	b29b      	uxth	r3, r3
 8016e60:	3b01      	subs	r3, #1
 8016e62:	b29a      	uxth	r2, r3
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8016e68:	e015      	b.n	8016e96 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016e6a:	f7fe fd11 	bl	8015890 <HAL_GetTick>
 8016e6e:	4602      	mov	r2, r0
 8016e70:	693b      	ldr	r3, [r7, #16]
 8016e72:	1ad3      	subs	r3, r2, r3
 8016e74:	683a      	ldr	r2, [r7, #0]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d803      	bhi.n	8016e82 <HAL_SPI_Receive+0x166>
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e80:	d102      	bne.n	8016e88 <HAL_SPI_Receive+0x16c>
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d106      	bne.n	8016e96 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016e88:	2303      	movs	r3, #3
 8016e8a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	2201      	movs	r2, #1
 8016e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8016e94:	e051      	b.n	8016f3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d1c7      	bne.n	8016e30 <HAL_SPI_Receive+0x114>
 8016ea0:	e035      	b.n	8016f0e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	689b      	ldr	r3, [r3, #8]
 8016ea8:	f003 0301 	and.w	r3, r3, #1
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d113      	bne.n	8016ed8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	68da      	ldr	r2, [r3, #12]
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016eba:	b292      	uxth	r2, r2
 8016ebc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ec2:	1c9a      	adds	r2, r3, #2
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	3b01      	subs	r3, #1
 8016ed0:	b29a      	uxth	r2, r3
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8016ed6:	e015      	b.n	8016f04 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016ed8:	f7fe fcda 	bl	8015890 <HAL_GetTick>
 8016edc:	4602      	mov	r2, r0
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	1ad3      	subs	r3, r2, r3
 8016ee2:	683a      	ldr	r2, [r7, #0]
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d803      	bhi.n	8016ef0 <HAL_SPI_Receive+0x1d4>
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eee:	d102      	bne.n	8016ef6 <HAL_SPI_Receive+0x1da>
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d106      	bne.n	8016f04 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8016ef6:	2303      	movs	r3, #3
 8016ef8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	2201      	movs	r2, #1
 8016efe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8016f02:	e01a      	b.n	8016f3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8016f08:	b29b      	uxth	r3, r3
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d1c9      	bne.n	8016ea2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016f0e:	693a      	ldr	r2, [r7, #16]
 8016f10:	6839      	ldr	r1, [r7, #0]
 8016f12:	68f8      	ldr	r0, [r7, #12]
 8016f14:	f000 fa52 	bl	80173bc <SPI_EndRxTransaction>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d002      	beq.n	8016f24 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2220      	movs	r2, #32
 8016f22:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d002      	beq.n	8016f32 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	75fb      	strb	r3, [r7, #23]
 8016f30:	e003      	b.n	8016f3a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	2201      	movs	r2, #1
 8016f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8016f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3718      	adds	r7, #24
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}

08016f4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b08c      	sub	sp, #48	@ 0x30
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	60f8      	str	r0, [r7, #12]
 8016f54:	60b9      	str	r1, [r7, #8]
 8016f56:	607a      	str	r2, [r7, #4]
 8016f58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016f5a:	2301      	movs	r3, #1
 8016f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d101      	bne.n	8016f72 <HAL_SPI_TransmitReceive+0x26>
 8016f6e:	2302      	movs	r3, #2
 8016f70:	e198      	b.n	80172a4 <HAL_SPI_TransmitReceive+0x358>
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	2201      	movs	r2, #1
 8016f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016f7a:	f7fe fc89 	bl	8015890 <HAL_GetTick>
 8016f7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	685b      	ldr	r3, [r3, #4]
 8016f8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016f90:	887b      	ldrh	r3, [r7, #2]
 8016f92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016f98:	2b01      	cmp	r3, #1
 8016f9a:	d00f      	beq.n	8016fbc <HAL_SPI_TransmitReceive+0x70>
 8016f9c:	69fb      	ldr	r3, [r7, #28]
 8016f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8016fa2:	d107      	bne.n	8016fb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016fa4:	68fb      	ldr	r3, [r7, #12]
 8016fa6:	689b      	ldr	r3, [r3, #8]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d103      	bne.n	8016fb4 <HAL_SPI_TransmitReceive+0x68>
 8016fac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016fb0:	2b04      	cmp	r3, #4
 8016fb2:	d003      	beq.n	8016fbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016fb4:	2302      	movs	r3, #2
 8016fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8016fba:	e16d      	b.n	8017298 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016fbc:	68bb      	ldr	r3, [r7, #8]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d005      	beq.n	8016fce <HAL_SPI_TransmitReceive+0x82>
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d002      	beq.n	8016fce <HAL_SPI_TransmitReceive+0x82>
 8016fc8:	887b      	ldrh	r3, [r7, #2]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d103      	bne.n	8016fd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016fce:	2301      	movs	r3, #1
 8016fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8016fd4:	e160      	b.n	8017298 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8016fdc:	b2db      	uxtb	r3, r3
 8016fde:	2b04      	cmp	r3, #4
 8016fe0:	d003      	beq.n	8016fea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	2205      	movs	r2, #5
 8016fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	2200      	movs	r2, #0
 8016fee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	887a      	ldrh	r2, [r7, #2]
 8016ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	887a      	ldrh	r2, [r7, #2]
 8017000:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	68ba      	ldr	r2, [r7, #8]
 8017006:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	887a      	ldrh	r2, [r7, #2]
 801700c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	887a      	ldrh	r2, [r7, #2]
 8017012:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2200      	movs	r2, #0
 8017018:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2200      	movs	r2, #0
 801701e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801702a:	2b40      	cmp	r3, #64	@ 0x40
 801702c:	d007      	beq.n	801703e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	681a      	ldr	r2, [r3, #0]
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801703c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	68db      	ldr	r3, [r3, #12]
 8017042:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017046:	d17c      	bne.n	8017142 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	685b      	ldr	r3, [r3, #4]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d002      	beq.n	8017056 <HAL_SPI_TransmitReceive+0x10a>
 8017050:	8b7b      	ldrh	r3, [r7, #26]
 8017052:	2b01      	cmp	r3, #1
 8017054:	d16a      	bne.n	801712c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801705a:	881a      	ldrh	r2, [r3, #0]
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017066:	1c9a      	adds	r2, r3, #2
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017070:	b29b      	uxth	r3, r3
 8017072:	3b01      	subs	r3, #1
 8017074:	b29a      	uxth	r2, r3
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801707a:	e057      	b.n	801712c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	689b      	ldr	r3, [r3, #8]
 8017082:	f003 0302 	and.w	r3, r3, #2
 8017086:	2b02      	cmp	r3, #2
 8017088:	d11b      	bne.n	80170c2 <HAL_SPI_TransmitReceive+0x176>
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801708e:	b29b      	uxth	r3, r3
 8017090:	2b00      	cmp	r3, #0
 8017092:	d016      	beq.n	80170c2 <HAL_SPI_TransmitReceive+0x176>
 8017094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017096:	2b01      	cmp	r3, #1
 8017098:	d113      	bne.n	80170c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801709e:	881a      	ldrh	r2, [r3, #0]
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170aa:	1c9a      	adds	r2, r3, #2
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80170b4:	b29b      	uxth	r3, r3
 80170b6:	3b01      	subs	r3, #1
 80170b8:	b29a      	uxth	r2, r3
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80170be:	2300      	movs	r3, #0
 80170c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	689b      	ldr	r3, [r3, #8]
 80170c8:	f003 0301 	and.w	r3, r3, #1
 80170cc:	2b01      	cmp	r3, #1
 80170ce:	d119      	bne.n	8017104 <HAL_SPI_TransmitReceive+0x1b8>
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80170d4:	b29b      	uxth	r3, r3
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d014      	beq.n	8017104 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	68da      	ldr	r2, [r3, #12]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80170e4:	b292      	uxth	r2, r2
 80170e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80170ec:	1c9a      	adds	r2, r3, #2
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80170f6:	b29b      	uxth	r3, r3
 80170f8:	3b01      	subs	r3, #1
 80170fa:	b29a      	uxth	r2, r3
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017100:	2301      	movs	r3, #1
 8017102:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017104:	f7fe fbc4 	bl	8015890 <HAL_GetTick>
 8017108:	4602      	mov	r2, r0
 801710a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801710c:	1ad3      	subs	r3, r2, r3
 801710e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017110:	429a      	cmp	r2, r3
 8017112:	d80b      	bhi.n	801712c <HAL_SPI_TransmitReceive+0x1e0>
 8017114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801711a:	d007      	beq.n	801712c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 801711c:	2303      	movs	r3, #3
 801711e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	2201      	movs	r2, #1
 8017126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 801712a:	e0b5      	b.n	8017298 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017130:	b29b      	uxth	r3, r3
 8017132:	2b00      	cmp	r3, #0
 8017134:	d1a2      	bne.n	801707c <HAL_SPI_TransmitReceive+0x130>
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801713a:	b29b      	uxth	r3, r3
 801713c:	2b00      	cmp	r3, #0
 801713e:	d19d      	bne.n	801707c <HAL_SPI_TransmitReceive+0x130>
 8017140:	e080      	b.n	8017244 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	685b      	ldr	r3, [r3, #4]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d002      	beq.n	8017150 <HAL_SPI_TransmitReceive+0x204>
 801714a:	8b7b      	ldrh	r3, [r7, #26]
 801714c:	2b01      	cmp	r3, #1
 801714e:	d16f      	bne.n	8017230 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	330c      	adds	r3, #12
 801715a:	7812      	ldrb	r2, [r2, #0]
 801715c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017162:	1c5a      	adds	r2, r3, #1
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801716c:	b29b      	uxth	r3, r3
 801716e:	3b01      	subs	r3, #1
 8017170:	b29a      	uxth	r2, r3
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017176:	e05b      	b.n	8017230 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	689b      	ldr	r3, [r3, #8]
 801717e:	f003 0302 	and.w	r3, r3, #2
 8017182:	2b02      	cmp	r3, #2
 8017184:	d11c      	bne.n	80171c0 <HAL_SPI_TransmitReceive+0x274>
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801718a:	b29b      	uxth	r3, r3
 801718c:	2b00      	cmp	r3, #0
 801718e:	d017      	beq.n	80171c0 <HAL_SPI_TransmitReceive+0x274>
 8017190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017192:	2b01      	cmp	r3, #1
 8017194:	d114      	bne.n	80171c0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	330c      	adds	r3, #12
 80171a0:	7812      	ldrb	r2, [r2, #0]
 80171a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80171a8:	1c5a      	adds	r2, r3, #1
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	3b01      	subs	r3, #1
 80171b6:	b29a      	uxth	r2, r3
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80171bc:	2300      	movs	r3, #0
 80171be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	689b      	ldr	r3, [r3, #8]
 80171c6:	f003 0301 	and.w	r3, r3, #1
 80171ca:	2b01      	cmp	r3, #1
 80171cc:	d119      	bne.n	8017202 <HAL_SPI_TransmitReceive+0x2b6>
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80171d2:	b29b      	uxth	r3, r3
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d014      	beq.n	8017202 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	68da      	ldr	r2, [r3, #12]
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171e2:	b2d2      	uxtb	r2, r2
 80171e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80171ea:	1c5a      	adds	r2, r3, #1
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80171f4:	b29b      	uxth	r3, r3
 80171f6:	3b01      	subs	r3, #1
 80171f8:	b29a      	uxth	r2, r3
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80171fe:	2301      	movs	r3, #1
 8017200:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017202:	f7fe fb45 	bl	8015890 <HAL_GetTick>
 8017206:	4602      	mov	r2, r0
 8017208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801720a:	1ad3      	subs	r3, r2, r3
 801720c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801720e:	429a      	cmp	r2, r3
 8017210:	d803      	bhi.n	801721a <HAL_SPI_TransmitReceive+0x2ce>
 8017212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017218:	d102      	bne.n	8017220 <HAL_SPI_TransmitReceive+0x2d4>
 801721a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801721c:	2b00      	cmp	r3, #0
 801721e:	d107      	bne.n	8017230 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8017220:	2303      	movs	r3, #3
 8017222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	2201      	movs	r2, #1
 801722a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 801722e:	e033      	b.n	8017298 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017234:	b29b      	uxth	r3, r3
 8017236:	2b00      	cmp	r3, #0
 8017238:	d19e      	bne.n	8017178 <HAL_SPI_TransmitReceive+0x22c>
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 801723e:	b29b      	uxth	r3, r3
 8017240:	2b00      	cmp	r3, #0
 8017242:	d199      	bne.n	8017178 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017246:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017248:	68f8      	ldr	r0, [r7, #12]
 801724a:	f000 f91d 	bl	8017488 <SPI_EndRxTxTransaction>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d006      	beq.n	8017262 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8017254:	2301      	movs	r3, #1
 8017256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	2220      	movs	r2, #32
 801725e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8017260:	e01a      	b.n	8017298 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	689b      	ldr	r3, [r3, #8]
 8017266:	2b00      	cmp	r3, #0
 8017268:	d10a      	bne.n	8017280 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801726a:	2300      	movs	r3, #0
 801726c:	617b      	str	r3, [r7, #20]
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	68db      	ldr	r3, [r3, #12]
 8017274:	617b      	str	r3, [r7, #20]
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	689b      	ldr	r3, [r3, #8]
 801727c:	617b      	str	r3, [r7, #20]
 801727e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017284:	2b00      	cmp	r3, #0
 8017286:	d003      	beq.n	8017290 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8017288:	2301      	movs	r3, #1
 801728a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801728e:	e003      	b.n	8017298 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	2201      	movs	r2, #1
 8017294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	2200      	movs	r2, #0
 801729c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80172a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	3730      	adds	r7, #48	@ 0x30
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b088      	sub	sp, #32
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	603b      	str	r3, [r7, #0]
 80172b8:	4613      	mov	r3, r2
 80172ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80172bc:	f7fe fae8 	bl	8015890 <HAL_GetTick>
 80172c0:	4602      	mov	r2, r0
 80172c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172c4:	1a9b      	subs	r3, r3, r2
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	4413      	add	r3, r2
 80172ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80172cc:	f7fe fae0 	bl	8015890 <HAL_GetTick>
 80172d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80172d2:	4b39      	ldr	r3, [pc, #228]	@ (80173b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	015b      	lsls	r3, r3, #5
 80172d8:	0d1b      	lsrs	r3, r3, #20
 80172da:	69fa      	ldr	r2, [r7, #28]
 80172dc:	fb02 f303 	mul.w	r3, r2, r3
 80172e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80172e2:	e054      	b.n	801738e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172ea:	d050      	beq.n	801738e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80172ec:	f7fe fad0 	bl	8015890 <HAL_GetTick>
 80172f0:	4602      	mov	r2, r0
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	1ad3      	subs	r3, r2, r3
 80172f6:	69fa      	ldr	r2, [r7, #28]
 80172f8:	429a      	cmp	r2, r3
 80172fa:	d902      	bls.n	8017302 <SPI_WaitFlagStateUntilTimeout+0x56>
 80172fc:	69fb      	ldr	r3, [r7, #28]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d13d      	bne.n	801737e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	685a      	ldr	r2, [r3, #4]
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8017310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	685b      	ldr	r3, [r3, #4]
 8017316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801731a:	d111      	bne.n	8017340 <SPI_WaitFlagStateUntilTimeout+0x94>
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	689b      	ldr	r3, [r3, #8]
 8017320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017324:	d004      	beq.n	8017330 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	689b      	ldr	r3, [r3, #8]
 801732a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801732e:	d107      	bne.n	8017340 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	681a      	ldr	r2, [r3, #0]
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801733e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017348:	d10f      	bne.n	801736a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	681a      	ldr	r2, [r3, #0]
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8017358:	601a      	str	r2, [r3, #0]
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8017368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2201      	movs	r2, #1
 801736e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	2200      	movs	r2, #0
 8017376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801737a:	2303      	movs	r3, #3
 801737c:	e017      	b.n	80173ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801737e:	697b      	ldr	r3, [r7, #20]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d101      	bne.n	8017388 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8017384:	2300      	movs	r3, #0
 8017386:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	3b01      	subs	r3, #1
 801738c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	689a      	ldr	r2, [r3, #8]
 8017394:	68bb      	ldr	r3, [r7, #8]
 8017396:	4013      	ands	r3, r2
 8017398:	68ba      	ldr	r2, [r7, #8]
 801739a:	429a      	cmp	r2, r3
 801739c:	bf0c      	ite	eq
 801739e:	2301      	moveq	r3, #1
 80173a0:	2300      	movne	r3, #0
 80173a2:	b2db      	uxtb	r3, r3
 80173a4:	461a      	mov	r2, r3
 80173a6:	79fb      	ldrb	r3, [r7, #7]
 80173a8:	429a      	cmp	r2, r3
 80173aa:	d19b      	bne.n	80172e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80173ac:	2300      	movs	r3, #0
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3720      	adds	r7, #32
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}
 80173b6:	bf00      	nop
 80173b8:	20000000 	.word	0x20000000

080173bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b086      	sub	sp, #24
 80173c0:	af02      	add	r7, sp, #8
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	685b      	ldr	r3, [r3, #4]
 80173cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80173d0:	d111      	bne.n	80173f6 <SPI_EndRxTransaction+0x3a>
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	689b      	ldr	r3, [r3, #8]
 80173d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80173da:	d004      	beq.n	80173e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	689b      	ldr	r3, [r3, #8]
 80173e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80173e4:	d107      	bne.n	80173f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	681a      	ldr	r2, [r3, #0]
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80173f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80173fe:	d12a      	bne.n	8017456 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	689b      	ldr	r3, [r3, #8]
 8017404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017408:	d012      	beq.n	8017430 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	9300      	str	r3, [sp, #0]
 801740e:	68bb      	ldr	r3, [r7, #8]
 8017410:	2200      	movs	r2, #0
 8017412:	2180      	movs	r1, #128	@ 0x80
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	f7ff ff49 	bl	80172ac <SPI_WaitFlagStateUntilTimeout>
 801741a:	4603      	mov	r3, r0
 801741c:	2b00      	cmp	r3, #0
 801741e:	d02d      	beq.n	801747c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017424:	f043 0220 	orr.w	r2, r3, #32
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 801742c:	2303      	movs	r3, #3
 801742e:	e026      	b.n	801747e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	9300      	str	r3, [sp, #0]
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	2200      	movs	r2, #0
 8017438:	2101      	movs	r1, #1
 801743a:	68f8      	ldr	r0, [r7, #12]
 801743c:	f7ff ff36 	bl	80172ac <SPI_WaitFlagStateUntilTimeout>
 8017440:	4603      	mov	r3, r0
 8017442:	2b00      	cmp	r3, #0
 8017444:	d01a      	beq.n	801747c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801744a:	f043 0220 	orr.w	r2, r3, #32
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8017452:	2303      	movs	r3, #3
 8017454:	e013      	b.n	801747e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	2200      	movs	r2, #0
 801745e:	2101      	movs	r1, #1
 8017460:	68f8      	ldr	r0, [r7, #12]
 8017462:	f7ff ff23 	bl	80172ac <SPI_WaitFlagStateUntilTimeout>
 8017466:	4603      	mov	r3, r0
 8017468:	2b00      	cmp	r3, #0
 801746a:	d007      	beq.n	801747c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017470:	f043 0220 	orr.w	r2, r3, #32
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8017478:	2303      	movs	r3, #3
 801747a:	e000      	b.n	801747e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801747c:	2300      	movs	r3, #0
}
 801747e:	4618      	mov	r0, r3
 8017480:	3710      	adds	r7, #16
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}
	...

08017488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b088      	sub	sp, #32
 801748c:	af02      	add	r7, sp, #8
 801748e:	60f8      	str	r0, [r7, #12]
 8017490:	60b9      	str	r1, [r7, #8]
 8017492:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	9300      	str	r3, [sp, #0]
 8017498:	68bb      	ldr	r3, [r7, #8]
 801749a:	2201      	movs	r2, #1
 801749c:	2102      	movs	r1, #2
 801749e:	68f8      	ldr	r0, [r7, #12]
 80174a0:	f7ff ff04 	bl	80172ac <SPI_WaitFlagStateUntilTimeout>
 80174a4:	4603      	mov	r3, r0
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d007      	beq.n	80174ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80174ae:	f043 0220 	orr.w	r2, r3, #32
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80174b6:	2303      	movs	r3, #3
 80174b8:	e032      	b.n	8017520 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80174ba:	4b1b      	ldr	r3, [pc, #108]	@ (8017528 <SPI_EndRxTxTransaction+0xa0>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	4a1b      	ldr	r2, [pc, #108]	@ (801752c <SPI_EndRxTxTransaction+0xa4>)
 80174c0:	fba2 2303 	umull	r2, r3, r2, r3
 80174c4:	0d5b      	lsrs	r3, r3, #21
 80174c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80174ca:	fb02 f303 	mul.w	r3, r2, r3
 80174ce:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	685b      	ldr	r3, [r3, #4]
 80174d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80174d8:	d112      	bne.n	8017500 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	9300      	str	r3, [sp, #0]
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	2200      	movs	r2, #0
 80174e2:	2180      	movs	r1, #128	@ 0x80
 80174e4:	68f8      	ldr	r0, [r7, #12]
 80174e6:	f7ff fee1 	bl	80172ac <SPI_WaitFlagStateUntilTimeout>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d016      	beq.n	801751e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80174f4:	f043 0220 	orr.w	r2, r3, #32
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80174fc:	2303      	movs	r3, #3
 80174fe:	e00f      	b.n	8017520 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d00a      	beq.n	801751c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	3b01      	subs	r3, #1
 801750a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	689b      	ldr	r3, [r3, #8]
 8017512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017516:	2b80      	cmp	r3, #128	@ 0x80
 8017518:	d0f2      	beq.n	8017500 <SPI_EndRxTxTransaction+0x78>
 801751a:	e000      	b.n	801751e <SPI_EndRxTxTransaction+0x96>
        break;
 801751c:	bf00      	nop
  }

  return HAL_OK;
 801751e:	2300      	movs	r3, #0
}
 8017520:	4618      	mov	r0, r3
 8017522:	3718      	adds	r7, #24
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}
 8017528:	20000000 	.word	0x20000000
 801752c:	165e9f81 	.word	0x165e9f81

08017530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d101      	bne.n	8017542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801753e:	2301      	movs	r3, #1
 8017540:	e041      	b.n	80175c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8017548:	b2db      	uxtb	r3, r3
 801754a:	2b00      	cmp	r3, #0
 801754c:	d106      	bne.n	801755c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2200      	movs	r2, #0
 8017552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8017556:	6878      	ldr	r0, [r7, #4]
 8017558:	f000 f839 	bl	80175ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	2202      	movs	r2, #2
 8017560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681a      	ldr	r2, [r3, #0]
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	3304      	adds	r3, #4
 801756c:	4619      	mov	r1, r3
 801756e:	4610      	mov	r0, r2
 8017570:	f000 f9b2 	bl	80178d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2201      	movs	r2, #1
 8017578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	2201      	movs	r2, #1
 8017580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2201      	movs	r2, #1
 8017588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	2201      	movs	r2, #1
 8017590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2201      	movs	r2, #1
 8017598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2201      	movs	r2, #1
 80175a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2201      	movs	r2, #1
 80175a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2201      	movs	r2, #1
 80175b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2201      	movs	r2, #1
 80175b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	2201      	movs	r2, #1
 80175c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80175c4:	2300      	movs	r3, #0
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3708      	adds	r7, #8
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}

080175ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80175ce:	b480      	push	{r7}
 80175d0:	b083      	sub	sp, #12
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80175d6:	bf00      	nop
 80175d8:	370c      	adds	r7, #12
 80175da:	46bd      	mov	sp, r7
 80175dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e0:	4770      	bx	lr
	...

080175e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80175e4:	b480      	push	{r7}
 80175e6:	b085      	sub	sp, #20
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	2b01      	cmp	r3, #1
 80175f6:	d001      	beq.n	80175fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80175f8:	2301      	movs	r3, #1
 80175fa:	e044      	b.n	8017686 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2202      	movs	r2, #2
 8017600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	68da      	ldr	r2, [r3, #12]
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	f042 0201 	orr.w	r2, r2, #1
 8017612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	4a1e      	ldr	r2, [pc, #120]	@ (8017694 <HAL_TIM_Base_Start_IT+0xb0>)
 801761a:	4293      	cmp	r3, r2
 801761c:	d018      	beq.n	8017650 <HAL_TIM_Base_Start_IT+0x6c>
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017626:	d013      	beq.n	8017650 <HAL_TIM_Base_Start_IT+0x6c>
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	4a1a      	ldr	r2, [pc, #104]	@ (8017698 <HAL_TIM_Base_Start_IT+0xb4>)
 801762e:	4293      	cmp	r3, r2
 8017630:	d00e      	beq.n	8017650 <HAL_TIM_Base_Start_IT+0x6c>
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	4a19      	ldr	r2, [pc, #100]	@ (801769c <HAL_TIM_Base_Start_IT+0xb8>)
 8017638:	4293      	cmp	r3, r2
 801763a:	d009      	beq.n	8017650 <HAL_TIM_Base_Start_IT+0x6c>
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	4a17      	ldr	r2, [pc, #92]	@ (80176a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8017642:	4293      	cmp	r3, r2
 8017644:	d004      	beq.n	8017650 <HAL_TIM_Base_Start_IT+0x6c>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	4a16      	ldr	r2, [pc, #88]	@ (80176a4 <HAL_TIM_Base_Start_IT+0xc0>)
 801764c:	4293      	cmp	r3, r2
 801764e:	d111      	bne.n	8017674 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	689b      	ldr	r3, [r3, #8]
 8017656:	f003 0307 	and.w	r3, r3, #7
 801765a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	2b06      	cmp	r3, #6
 8017660:	d010      	beq.n	8017684 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	681a      	ldr	r2, [r3, #0]
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f042 0201 	orr.w	r2, r2, #1
 8017670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017672:	e007      	b.n	8017684 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	681a      	ldr	r2, [r3, #0]
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f042 0201 	orr.w	r2, r2, #1
 8017682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017684:	2300      	movs	r3, #0
}
 8017686:	4618      	mov	r0, r3
 8017688:	3714      	adds	r7, #20
 801768a:	46bd      	mov	sp, r7
 801768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop
 8017694:	40010000 	.word	0x40010000
 8017698:	40000400 	.word	0x40000400
 801769c:	40000800 	.word	0x40000800
 80176a0:	40000c00 	.word	0x40000c00
 80176a4:	40014000 	.word	0x40014000

080176a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b084      	sub	sp, #16
 80176ac:	af00      	add	r7, sp, #0
 80176ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	68db      	ldr	r3, [r3, #12]
 80176b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	691b      	ldr	r3, [r3, #16]
 80176be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80176c0:	68bb      	ldr	r3, [r7, #8]
 80176c2:	f003 0302 	and.w	r3, r3, #2
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d020      	beq.n	801770c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	f003 0302 	and.w	r3, r3, #2
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d01b      	beq.n	801770c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	f06f 0202 	mvn.w	r2, #2
 80176dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2201      	movs	r2, #1
 80176e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	699b      	ldr	r3, [r3, #24]
 80176ea:	f003 0303 	and.w	r3, r3, #3
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d003      	beq.n	80176fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f000 f8d2 	bl	801789c <HAL_TIM_IC_CaptureCallback>
 80176f8:	e005      	b.n	8017706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f000 f8c4 	bl	8017888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017700:	6878      	ldr	r0, [r7, #4]
 8017702:	f000 f8d5 	bl	80178b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	2200      	movs	r2, #0
 801770a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	f003 0304 	and.w	r3, r3, #4
 8017712:	2b00      	cmp	r3, #0
 8017714:	d020      	beq.n	8017758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	f003 0304 	and.w	r3, r3, #4
 801771c:	2b00      	cmp	r3, #0
 801771e:	d01b      	beq.n	8017758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	f06f 0204 	mvn.w	r2, #4
 8017728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	2202      	movs	r2, #2
 801772e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	699b      	ldr	r3, [r3, #24]
 8017736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801773a:	2b00      	cmp	r3, #0
 801773c:	d003      	beq.n	8017746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f000 f8ac 	bl	801789c <HAL_TIM_IC_CaptureCallback>
 8017744:	e005      	b.n	8017752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017746:	6878      	ldr	r0, [r7, #4]
 8017748:	f000 f89e 	bl	8017888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f000 f8af 	bl	80178b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	2200      	movs	r2, #0
 8017756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	f003 0308 	and.w	r3, r3, #8
 801775e:	2b00      	cmp	r3, #0
 8017760:	d020      	beq.n	80177a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	f003 0308 	and.w	r3, r3, #8
 8017768:	2b00      	cmp	r3, #0
 801776a:	d01b      	beq.n	80177a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	f06f 0208 	mvn.w	r2, #8
 8017774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2204      	movs	r2, #4
 801777a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	69db      	ldr	r3, [r3, #28]
 8017782:	f003 0303 	and.w	r3, r3, #3
 8017786:	2b00      	cmp	r3, #0
 8017788:	d003      	beq.n	8017792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f000 f886 	bl	801789c <HAL_TIM_IC_CaptureCallback>
 8017790:	e005      	b.n	801779e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f000 f878 	bl	8017888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f000 f889 	bl	80178b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	2200      	movs	r2, #0
 80177a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	f003 0310 	and.w	r3, r3, #16
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d020      	beq.n	80177f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	f003 0310 	and.w	r3, r3, #16
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d01b      	beq.n	80177f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	f06f 0210 	mvn.w	r2, #16
 80177c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	2208      	movs	r2, #8
 80177c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	69db      	ldr	r3, [r3, #28]
 80177ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d003      	beq.n	80177de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80177d6:	6878      	ldr	r0, [r7, #4]
 80177d8:	f000 f860 	bl	801789c <HAL_TIM_IC_CaptureCallback>
 80177dc:	e005      	b.n	80177ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f000 f852 	bl	8017888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f000 f863 	bl	80178b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	2200      	movs	r2, #0
 80177ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80177f0:	68bb      	ldr	r3, [r7, #8]
 80177f2:	f003 0301 	and.w	r3, r3, #1
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d00c      	beq.n	8017814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	f003 0301 	and.w	r3, r3, #1
 8017800:	2b00      	cmp	r3, #0
 8017802:	d007      	beq.n	8017814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	f06f 0201 	mvn.w	r2, #1
 801780c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f7fb f83a 	bl	8012888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017814:	68bb      	ldr	r3, [r7, #8]
 8017816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801781a:	2b00      	cmp	r3, #0
 801781c:	d00c      	beq.n	8017838 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017824:	2b00      	cmp	r3, #0
 8017826:	d007      	beq.n	8017838 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8017830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017832:	6878      	ldr	r0, [r7, #4]
 8017834:	f000 f8e6 	bl	8017a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801783e:	2b00      	cmp	r3, #0
 8017840:	d00c      	beq.n	801785c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017848:	2b00      	cmp	r3, #0
 801784a:	d007      	beq.n	801785c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8017854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f000 f834 	bl	80178c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801785c:	68bb      	ldr	r3, [r7, #8]
 801785e:	f003 0320 	and.w	r3, r3, #32
 8017862:	2b00      	cmp	r3, #0
 8017864:	d00c      	beq.n	8017880 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	f003 0320 	and.w	r3, r3, #32
 801786c:	2b00      	cmp	r3, #0
 801786e:	d007      	beq.n	8017880 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	f06f 0220 	mvn.w	r2, #32
 8017878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801787a:	6878      	ldr	r0, [r7, #4]
 801787c:	f000 f8b8 	bl	80179f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017880:	bf00      	nop
 8017882:	3710      	adds	r7, #16
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}

08017888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017888:	b480      	push	{r7}
 801788a:	b083      	sub	sp, #12
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017890:	bf00      	nop
 8017892:	370c      	adds	r7, #12
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr

0801789c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801789c:	b480      	push	{r7}
 801789e:	b083      	sub	sp, #12
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80178a4:	bf00      	nop
 80178a6:	370c      	adds	r7, #12
 80178a8:	46bd      	mov	sp, r7
 80178aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ae:	4770      	bx	lr

080178b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80178b0:	b480      	push	{r7}
 80178b2:	b083      	sub	sp, #12
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80178b8:	bf00      	nop
 80178ba:	370c      	adds	r7, #12
 80178bc:	46bd      	mov	sp, r7
 80178be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c2:	4770      	bx	lr

080178c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80178c4:	b480      	push	{r7}
 80178c6:	b083      	sub	sp, #12
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80178cc:	bf00      	nop
 80178ce:	370c      	adds	r7, #12
 80178d0:	46bd      	mov	sp, r7
 80178d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d6:	4770      	bx	lr

080178d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80178d8:	b480      	push	{r7}
 80178da:	b085      	sub	sp, #20
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6078      	str	r0, [r7, #4]
 80178e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	681b      	ldr	r3, [r3, #0]
 80178e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	4a3a      	ldr	r2, [pc, #232]	@ (80179d4 <TIM_Base_SetConfig+0xfc>)
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d00f      	beq.n	8017910 <TIM_Base_SetConfig+0x38>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80178f6:	d00b      	beq.n	8017910 <TIM_Base_SetConfig+0x38>
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	4a37      	ldr	r2, [pc, #220]	@ (80179d8 <TIM_Base_SetConfig+0x100>)
 80178fc:	4293      	cmp	r3, r2
 80178fe:	d007      	beq.n	8017910 <TIM_Base_SetConfig+0x38>
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	4a36      	ldr	r2, [pc, #216]	@ (80179dc <TIM_Base_SetConfig+0x104>)
 8017904:	4293      	cmp	r3, r2
 8017906:	d003      	beq.n	8017910 <TIM_Base_SetConfig+0x38>
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	4a35      	ldr	r2, [pc, #212]	@ (80179e0 <TIM_Base_SetConfig+0x108>)
 801790c:	4293      	cmp	r3, r2
 801790e:	d108      	bne.n	8017922 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	685b      	ldr	r3, [r3, #4]
 801791c:	68fa      	ldr	r2, [r7, #12]
 801791e:	4313      	orrs	r3, r2
 8017920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	4a2b      	ldr	r2, [pc, #172]	@ (80179d4 <TIM_Base_SetConfig+0xfc>)
 8017926:	4293      	cmp	r3, r2
 8017928:	d01b      	beq.n	8017962 <TIM_Base_SetConfig+0x8a>
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017930:	d017      	beq.n	8017962 <TIM_Base_SetConfig+0x8a>
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	4a28      	ldr	r2, [pc, #160]	@ (80179d8 <TIM_Base_SetConfig+0x100>)
 8017936:	4293      	cmp	r3, r2
 8017938:	d013      	beq.n	8017962 <TIM_Base_SetConfig+0x8a>
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	4a27      	ldr	r2, [pc, #156]	@ (80179dc <TIM_Base_SetConfig+0x104>)
 801793e:	4293      	cmp	r3, r2
 8017940:	d00f      	beq.n	8017962 <TIM_Base_SetConfig+0x8a>
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	4a26      	ldr	r2, [pc, #152]	@ (80179e0 <TIM_Base_SetConfig+0x108>)
 8017946:	4293      	cmp	r3, r2
 8017948:	d00b      	beq.n	8017962 <TIM_Base_SetConfig+0x8a>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	4a25      	ldr	r2, [pc, #148]	@ (80179e4 <TIM_Base_SetConfig+0x10c>)
 801794e:	4293      	cmp	r3, r2
 8017950:	d007      	beq.n	8017962 <TIM_Base_SetConfig+0x8a>
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	4a24      	ldr	r2, [pc, #144]	@ (80179e8 <TIM_Base_SetConfig+0x110>)
 8017956:	4293      	cmp	r3, r2
 8017958:	d003      	beq.n	8017962 <TIM_Base_SetConfig+0x8a>
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	4a23      	ldr	r2, [pc, #140]	@ (80179ec <TIM_Base_SetConfig+0x114>)
 801795e:	4293      	cmp	r3, r2
 8017960:	d108      	bne.n	8017974 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	68db      	ldr	r3, [r3, #12]
 801796e:	68fa      	ldr	r2, [r7, #12]
 8017970:	4313      	orrs	r3, r2
 8017972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801797a:	683b      	ldr	r3, [r7, #0]
 801797c:	695b      	ldr	r3, [r3, #20]
 801797e:	4313      	orrs	r3, r2
 8017980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	68fa      	ldr	r2, [r7, #12]
 8017986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017988:	683b      	ldr	r3, [r7, #0]
 801798a:	689a      	ldr	r2, [r3, #8]
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017990:	683b      	ldr	r3, [r7, #0]
 8017992:	681a      	ldr	r2, [r3, #0]
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	4a0e      	ldr	r2, [pc, #56]	@ (80179d4 <TIM_Base_SetConfig+0xfc>)
 801799c:	4293      	cmp	r3, r2
 801799e:	d103      	bne.n	80179a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	691a      	ldr	r2, [r3, #16]
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2201      	movs	r2, #1
 80179ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	691b      	ldr	r3, [r3, #16]
 80179b2:	f003 0301 	and.w	r3, r3, #1
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d105      	bne.n	80179c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	691b      	ldr	r3, [r3, #16]
 80179be:	f023 0201 	bic.w	r2, r3, #1
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	611a      	str	r2, [r3, #16]
  }
}
 80179c6:	bf00      	nop
 80179c8:	3714      	adds	r7, #20
 80179ca:	46bd      	mov	sp, r7
 80179cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d0:	4770      	bx	lr
 80179d2:	bf00      	nop
 80179d4:	40010000 	.word	0x40010000
 80179d8:	40000400 	.word	0x40000400
 80179dc:	40000800 	.word	0x40000800
 80179e0:	40000c00 	.word	0x40000c00
 80179e4:	40014000 	.word	0x40014000
 80179e8:	40014400 	.word	0x40014400
 80179ec:	40014800 	.word	0x40014800

080179f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80179f0:	b480      	push	{r7}
 80179f2:	b083      	sub	sp, #12
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80179f8:	bf00      	nop
 80179fa:	370c      	adds	r7, #12
 80179fc:	46bd      	mov	sp, r7
 80179fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a02:	4770      	bx	lr

08017a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017a04:	b480      	push	{r7}
 8017a06:	b083      	sub	sp, #12
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017a0c:	bf00      	nop
 8017a0e:	370c      	adds	r7, #12
 8017a10:	46bd      	mov	sp, r7
 8017a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a16:	4770      	bx	lr

08017a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017a18:	b580      	push	{r7, lr}
 8017a1a:	b082      	sub	sp, #8
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d101      	bne.n	8017a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017a26:	2301      	movs	r3, #1
 8017a28:	e042      	b.n	8017ab0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017a30:	b2db      	uxtb	r3, r3
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d106      	bne.n	8017a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2200      	movs	r2, #0
 8017a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	f7fb f806 	bl	8012a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	2224      	movs	r2, #36	@ 0x24
 8017a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	68da      	ldr	r2, [r3, #12]
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8017a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f000 fd11 	bl	8018484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	691a      	ldr	r2, [r3, #16]
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8017a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	695a      	ldr	r2, [r3, #20]
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8017a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	68da      	ldr	r2, [r3, #12]
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8017a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	2200      	movs	r2, #0
 8017a96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	2220      	movs	r2, #32
 8017a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2220      	movs	r2, #32
 8017aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	2200      	movs	r2, #0
 8017aac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8017aae:	2300      	movs	r3, #0
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3708      	adds	r7, #8
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b08c      	sub	sp, #48	@ 0x30
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	4613      	mov	r3, r2
 8017ac4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017acc:	b2db      	uxtb	r3, r3
 8017ace:	2b20      	cmp	r3, #32
 8017ad0:	d14a      	bne.n	8017b68 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8017ad2:	68bb      	ldr	r3, [r7, #8]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d002      	beq.n	8017ade <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8017ad8:	88fb      	ldrh	r3, [r7, #6]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d101      	bne.n	8017ae2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8017ade:	2301      	movs	r3, #1
 8017ae0:	e043      	b.n	8017b6a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	2201      	movs	r2, #1
 8017ae6:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	2200      	movs	r2, #0
 8017aec:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8017aee:	88fb      	ldrh	r3, [r7, #6]
 8017af0:	461a      	mov	r2, r3
 8017af2:	68b9      	ldr	r1, [r7, #8]
 8017af4:	68f8      	ldr	r0, [r7, #12]
 8017af6:	f000 faed 	bl	80180d4 <UART_Start_Receive_IT>
 8017afa:	4603      	mov	r3, r0
 8017afc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8017b00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d12c      	bne.n	8017b62 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017b0c:	2b01      	cmp	r3, #1
 8017b0e:	d125      	bne.n	8017b5c <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017b10:	2300      	movs	r3, #0
 8017b12:	613b      	str	r3, [r7, #16]
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	613b      	str	r3, [r7, #16]
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	613b      	str	r3, [r7, #16]
 8017b24:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	330c      	adds	r3, #12
 8017b2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b2e:	69bb      	ldr	r3, [r7, #24]
 8017b30:	e853 3f00 	ldrex	r3, [r3]
 8017b34:	617b      	str	r3, [r7, #20]
   return(result);
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	f043 0310 	orr.w	r3, r3, #16
 8017b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	330c      	adds	r3, #12
 8017b44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b46:	627a      	str	r2, [r7, #36]	@ 0x24
 8017b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b4a:	6a39      	ldr	r1, [r7, #32]
 8017b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b4e:	e841 2300 	strex	r3, r2, [r1]
 8017b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8017b54:	69fb      	ldr	r3, [r7, #28]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d1e5      	bne.n	8017b26 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017b5a:	e002      	b.n	8017b62 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8017b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8017b66:	e000      	b.n	8017b6a <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8017b68:	2302      	movs	r3, #2
  }
}
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	3730      	adds	r7, #48	@ 0x30
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	bd80      	pop	{r7, pc}
	...

08017b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b0ba      	sub	sp, #232	@ 0xe8
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	68db      	ldr	r3, [r3, #12]
 8017b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	695b      	ldr	r3, [r3, #20]
 8017b96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8017ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017baa:	f003 030f 	and.w	r3, r3, #15
 8017bae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8017bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d10f      	bne.n	8017bda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017bbe:	f003 0320 	and.w	r3, r3, #32
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d009      	beq.n	8017bda <HAL_UART_IRQHandler+0x66>
 8017bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017bca:	f003 0320 	and.w	r3, r3, #32
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d003      	beq.n	8017bda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8017bd2:	6878      	ldr	r0, [r7, #4]
 8017bd4:	f000 fb97 	bl	8018306 <UART_Receive_IT>
      return;
 8017bd8:	e25b      	b.n	8018092 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8017bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	f000 80de 	beq.w	8017da0 <HAL_UART_IRQHandler+0x22c>
 8017be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017be8:	f003 0301 	and.w	r3, r3, #1
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d106      	bne.n	8017bfe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8017bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017bf4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	f000 80d1 	beq.w	8017da0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8017bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c02:	f003 0301 	and.w	r3, r3, #1
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d00b      	beq.n	8017c22 <HAL_UART_IRQHandler+0xae>
 8017c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d005      	beq.n	8017c22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c1a:	f043 0201 	orr.w	r2, r3, #1
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c26:	f003 0304 	and.w	r3, r3, #4
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d00b      	beq.n	8017c46 <HAL_UART_IRQHandler+0xd2>
 8017c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017c32:	f003 0301 	and.w	r3, r3, #1
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d005      	beq.n	8017c46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c3e:	f043 0202 	orr.w	r2, r3, #2
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c4a:	f003 0302 	and.w	r3, r3, #2
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d00b      	beq.n	8017c6a <HAL_UART_IRQHandler+0xf6>
 8017c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017c56:	f003 0301 	and.w	r3, r3, #1
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d005      	beq.n	8017c6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c62:	f043 0204 	orr.w	r2, r3, #4
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c6e:	f003 0308 	and.w	r3, r3, #8
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d011      	beq.n	8017c9a <HAL_UART_IRQHandler+0x126>
 8017c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017c7a:	f003 0320 	and.w	r3, r3, #32
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d105      	bne.n	8017c8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8017c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8017c86:	f003 0301 	and.w	r3, r3, #1
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d005      	beq.n	8017c9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c92:	f043 0208 	orr.w	r2, r3, #8
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	f000 81f2 	beq.w	8018088 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017ca8:	f003 0320 	and.w	r3, r3, #32
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d008      	beq.n	8017cc2 <HAL_UART_IRQHandler+0x14e>
 8017cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017cb4:	f003 0320 	and.w	r3, r3, #32
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d002      	beq.n	8017cc2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017cbc:	6878      	ldr	r0, [r7, #4]
 8017cbe:	f000 fb22 	bl	8018306 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	695b      	ldr	r3, [r3, #20]
 8017cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017ccc:	2b40      	cmp	r3, #64	@ 0x40
 8017cce:	bf0c      	ite	eq
 8017cd0:	2301      	moveq	r3, #1
 8017cd2:	2300      	movne	r3, #0
 8017cd4:	b2db      	uxtb	r3, r3
 8017cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017cde:	f003 0308 	and.w	r3, r3, #8
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d103      	bne.n	8017cee <HAL_UART_IRQHandler+0x17a>
 8017ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d04f      	beq.n	8017d8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017cee:	6878      	ldr	r0, [r7, #4]
 8017cf0:	f000 fa2a 	bl	8018148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	695b      	ldr	r3, [r3, #20]
 8017cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017cfe:	2b40      	cmp	r3, #64	@ 0x40
 8017d00:	d141      	bne.n	8017d86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	3314      	adds	r3, #20
 8017d08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017d10:	e853 3f00 	ldrex	r3, [r3]
 8017d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8017d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8017d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	3314      	adds	r3, #20
 8017d2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8017d2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8017d32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8017d3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8017d3e:	e841 2300 	strex	r3, r2, [r1]
 8017d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8017d46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d1d9      	bne.n	8017d02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d013      	beq.n	8017d7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8017f54 <HAL_UART_IRQHandler+0x3e0>)
 8017d5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7fd ff32 	bl	8015bcc <HAL_DMA_Abort_IT>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d016      	beq.n	8017d9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017d74:	687a      	ldr	r2, [r7, #4]
 8017d76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8017d78:	4610      	mov	r0, r2
 8017d7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d7c:	e00e      	b.n	8017d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017d7e:	6878      	ldr	r0, [r7, #4]
 8017d80:	f000 f99e 	bl	80180c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d84:	e00a      	b.n	8017d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017d86:	6878      	ldr	r0, [r7, #4]
 8017d88:	f000 f99a 	bl	80180c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d8c:	e006      	b.n	8017d9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017d8e:	6878      	ldr	r0, [r7, #4]
 8017d90:	f000 f996 	bl	80180c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	2200      	movs	r2, #0
 8017d98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8017d9a:	e175      	b.n	8018088 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d9c:	bf00      	nop
    return;
 8017d9e:	e173      	b.n	8018088 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017da4:	2b01      	cmp	r3, #1
 8017da6:	f040 814f 	bne.w	8018048 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017dae:	f003 0310 	and.w	r3, r3, #16
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	f000 8148 	beq.w	8018048 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8017dbc:	f003 0310 	and.w	r3, r3, #16
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	f000 8141 	beq.w	8018048 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	60bb      	str	r3, [r7, #8]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	60bb      	str	r3, [r7, #8]
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	685b      	ldr	r3, [r3, #4]
 8017dd8:	60bb      	str	r3, [r7, #8]
 8017dda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	695b      	ldr	r3, [r3, #20]
 8017de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017de6:	2b40      	cmp	r3, #64	@ 0x40
 8017de8:	f040 80b6 	bne.w	8017f58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	685b      	ldr	r3, [r3, #4]
 8017df4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017df8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f000 8145 	beq.w	801808c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8017e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017e0a:	429a      	cmp	r2, r3
 8017e0c:	f080 813e 	bcs.w	801808c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8017e16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017e1c:	69db      	ldr	r3, [r3, #28]
 8017e1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e22:	f000 8088 	beq.w	8017f36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	330c      	adds	r3, #12
 8017e2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8017e34:	e853 3f00 	ldrex	r3, [r3]
 8017e38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8017e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017e44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	330c      	adds	r3, #12
 8017e4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8017e52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8017e56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8017e5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8017e62:	e841 2300 	strex	r3, r2, [r1]
 8017e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8017e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d1d9      	bne.n	8017e26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	3314      	adds	r3, #20
 8017e78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017e7c:	e853 3f00 	ldrex	r3, [r3]
 8017e80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017e84:	f023 0301 	bic.w	r3, r3, #1
 8017e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	3314      	adds	r3, #20
 8017e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8017e96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8017e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017ea2:	e841 2300 	strex	r3, r2, [r1]
 8017ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017ea8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d1e1      	bne.n	8017e72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	3314      	adds	r3, #20
 8017eb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017eb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017eb8:	e853 3f00 	ldrex	r3, [r3]
 8017ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017ec0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8017ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	3314      	adds	r3, #20
 8017ece:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8017ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ed6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017ed8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017eda:	e841 2300 	strex	r3, r2, [r1]
 8017ede:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017ee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d1e3      	bne.n	8017eae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2220      	movs	r2, #32
 8017eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	330c      	adds	r3, #12
 8017efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017efe:	e853 3f00 	ldrex	r3, [r3]
 8017f02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f06:	f023 0310 	bic.w	r3, r3, #16
 8017f0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	330c      	adds	r3, #12
 8017f14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8017f18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8017f1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017f1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017f20:	e841 2300 	strex	r3, r2, [r1]
 8017f24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d1e3      	bne.n	8017ef4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7fd fddb 	bl	8015aec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2202      	movs	r2, #2
 8017f3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	1ad3      	subs	r3, r2, r3
 8017f48:	b29b      	uxth	r3, r3
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f7f9 f88b 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017f52:	e09b      	b.n	801808c <HAL_UART_IRQHandler+0x518>
 8017f54:	0801820f 	.word	0x0801820f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	1ad3      	subs	r3, r2, r3
 8017f64:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8017f6c:	b29b      	uxth	r3, r3
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	f000 808e 	beq.w	8018090 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	f000 8089 	beq.w	8018090 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	681b      	ldr	r3, [r3, #0]
 8017f82:	330c      	adds	r3, #12
 8017f84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017f88:	e853 3f00 	ldrex	r3, [r3]
 8017f8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017f94:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	330c      	adds	r3, #12
 8017f9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8017fa2:	647a      	str	r2, [r7, #68]	@ 0x44
 8017fa4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fa6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017faa:	e841 2300 	strex	r3, r2, [r1]
 8017fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d1e3      	bne.n	8017f7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	3314      	adds	r3, #20
 8017fbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fc0:	e853 3f00 	ldrex	r3, [r3]
 8017fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8017fc6:	6a3b      	ldr	r3, [r7, #32]
 8017fc8:	f023 0301 	bic.w	r3, r3, #1
 8017fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	3314      	adds	r3, #20
 8017fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8017fda:	633a      	str	r2, [r7, #48]	@ 0x30
 8017fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fe2:	e841 2300 	strex	r3, r2, [r1]
 8017fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d1e3      	bne.n	8017fb6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	2220      	movs	r2, #32
 8017ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	330c      	adds	r3, #12
 8018002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	e853 3f00 	ldrex	r3, [r3]
 801800a:	60fb      	str	r3, [r7, #12]
   return(result);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	f023 0310 	bic.w	r3, r3, #16
 8018012:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	330c      	adds	r3, #12
 801801c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8018020:	61fa      	str	r2, [r7, #28]
 8018022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018024:	69b9      	ldr	r1, [r7, #24]
 8018026:	69fa      	ldr	r2, [r7, #28]
 8018028:	e841 2300 	strex	r3, r2, [r1]
 801802c:	617b      	str	r3, [r7, #20]
   return(result);
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d1e3      	bne.n	8017ffc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	2202      	movs	r2, #2
 8018038:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801803a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801803e:	4619      	mov	r1, r3
 8018040:	6878      	ldr	r0, [r7, #4]
 8018042:	f7f9 f811 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8018046:	e023      	b.n	8018090 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8018048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801804c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018050:	2b00      	cmp	r3, #0
 8018052:	d009      	beq.n	8018068 <HAL_UART_IRQHandler+0x4f4>
 8018054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801805c:	2b00      	cmp	r3, #0
 801805e:	d003      	beq.n	8018068 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	f000 f8e8 	bl	8018236 <UART_Transmit_IT>
    return;
 8018066:	e014      	b.n	8018092 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8018068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018070:	2b00      	cmp	r3, #0
 8018072:	d00e      	beq.n	8018092 <HAL_UART_IRQHandler+0x51e>
 8018074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801807c:	2b00      	cmp	r3, #0
 801807e:	d008      	beq.n	8018092 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f000 f928 	bl	80182d6 <UART_EndTransmit_IT>
    return;
 8018086:	e004      	b.n	8018092 <HAL_UART_IRQHandler+0x51e>
    return;
 8018088:	bf00      	nop
 801808a:	e002      	b.n	8018092 <HAL_UART_IRQHandler+0x51e>
      return;
 801808c:	bf00      	nop
 801808e:	e000      	b.n	8018092 <HAL_UART_IRQHandler+0x51e>
      return;
 8018090:	bf00      	nop
  }
}
 8018092:	37e8      	adds	r7, #232	@ 0xe8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}

08018098 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018098:	b480      	push	{r7}
 801809a:	b083      	sub	sp, #12
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80180a0:	bf00      	nop
 80180a2:	370c      	adds	r7, #12
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80180ac:	b480      	push	{r7}
 80180ae:	b083      	sub	sp, #12
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80180b4:	bf00      	nop
 80180b6:	370c      	adds	r7, #12
 80180b8:	46bd      	mov	sp, r7
 80180ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180be:	4770      	bx	lr

080180c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80180c0:	b480      	push	{r7}
 80180c2:	b083      	sub	sp, #12
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80180c8:	bf00      	nop
 80180ca:	370c      	adds	r7, #12
 80180cc:	46bd      	mov	sp, r7
 80180ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d2:	4770      	bx	lr

080180d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80180d4:	b480      	push	{r7}
 80180d6:	b085      	sub	sp, #20
 80180d8:	af00      	add	r7, sp, #0
 80180da:	60f8      	str	r0, [r7, #12]
 80180dc:	60b9      	str	r1, [r7, #8]
 80180de:	4613      	mov	r3, r2
 80180e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	68ba      	ldr	r2, [r7, #8]
 80180e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	88fa      	ldrh	r2, [r7, #6]
 80180ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	88fa      	ldrh	r2, [r7, #6]
 80180f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	2200      	movs	r2, #0
 80180f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	2222      	movs	r2, #34	@ 0x22
 80180fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	691b      	ldr	r3, [r3, #16]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d007      	beq.n	801811a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	68da      	ldr	r2, [r3, #12]
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018118:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	695a      	ldr	r2, [r3, #20]
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	f042 0201 	orr.w	r2, r2, #1
 8018128:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	68da      	ldr	r2, [r3, #12]
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f042 0220 	orr.w	r2, r2, #32
 8018138:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801813a:	2300      	movs	r3, #0
}
 801813c:	4618      	mov	r0, r3
 801813e:	3714      	adds	r7, #20
 8018140:	46bd      	mov	sp, r7
 8018142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018146:	4770      	bx	lr

08018148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018148:	b480      	push	{r7}
 801814a:	b095      	sub	sp, #84	@ 0x54
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	330c      	adds	r3, #12
 8018156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801815a:	e853 3f00 	ldrex	r3, [r3]
 801815e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8018160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8018166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	330c      	adds	r3, #12
 801816e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018170:	643a      	str	r2, [r7, #64]	@ 0x40
 8018172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018178:	e841 2300 	strex	r3, r2, [r1]
 801817c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018180:	2b00      	cmp	r3, #0
 8018182:	d1e5      	bne.n	8018150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	3314      	adds	r3, #20
 801818a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801818c:	6a3b      	ldr	r3, [r7, #32]
 801818e:	e853 3f00 	ldrex	r3, [r3]
 8018192:	61fb      	str	r3, [r7, #28]
   return(result);
 8018194:	69fb      	ldr	r3, [r7, #28]
 8018196:	f023 0301 	bic.w	r3, r3, #1
 801819a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	3314      	adds	r3, #20
 80181a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80181a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80181a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80181aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80181ac:	e841 2300 	strex	r3, r2, [r1]
 80181b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80181b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d1e5      	bne.n	8018184 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80181bc:	2b01      	cmp	r3, #1
 80181be:	d119      	bne.n	80181f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	330c      	adds	r3, #12
 80181c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	e853 3f00 	ldrex	r3, [r3]
 80181ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	f023 0310 	bic.w	r3, r3, #16
 80181d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	330c      	adds	r3, #12
 80181de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80181e0:	61ba      	str	r2, [r7, #24]
 80181e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181e4:	6979      	ldr	r1, [r7, #20]
 80181e6:	69ba      	ldr	r2, [r7, #24]
 80181e8:	e841 2300 	strex	r3, r2, [r1]
 80181ec:	613b      	str	r3, [r7, #16]
   return(result);
 80181ee:	693b      	ldr	r3, [r7, #16]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d1e5      	bne.n	80181c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	2220      	movs	r2, #32
 80181f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	2200      	movs	r2, #0
 8018200:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8018202:	bf00      	nop
 8018204:	3754      	adds	r7, #84	@ 0x54
 8018206:	46bd      	mov	sp, r7
 8018208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820c:	4770      	bx	lr

0801820e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801820e:	b580      	push	{r7, lr}
 8018210:	b084      	sub	sp, #16
 8018212:	af00      	add	r7, sp, #0
 8018214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801821a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	2200      	movs	r2, #0
 8018220:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	2200      	movs	r2, #0
 8018226:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018228:	68f8      	ldr	r0, [r7, #12]
 801822a:	f7ff ff49 	bl	80180c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801822e:	bf00      	nop
 8018230:	3710      	adds	r7, #16
 8018232:	46bd      	mov	sp, r7
 8018234:	bd80      	pop	{r7, pc}

08018236 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8018236:	b480      	push	{r7}
 8018238:	b085      	sub	sp, #20
 801823a:	af00      	add	r7, sp, #0
 801823c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8018244:	b2db      	uxtb	r3, r3
 8018246:	2b21      	cmp	r3, #33	@ 0x21
 8018248:	d13e      	bne.n	80182c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	689b      	ldr	r3, [r3, #8]
 801824e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018252:	d114      	bne.n	801827e <UART_Transmit_IT+0x48>
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	691b      	ldr	r3, [r3, #16]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d110      	bne.n	801827e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	6a1b      	ldr	r3, [r3, #32]
 8018260:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	881b      	ldrh	r3, [r3, #0]
 8018266:	461a      	mov	r2, r3
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018270:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	6a1b      	ldr	r3, [r3, #32]
 8018276:	1c9a      	adds	r2, r3, #2
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	621a      	str	r2, [r3, #32]
 801827c:	e008      	b.n	8018290 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6a1b      	ldr	r3, [r3, #32]
 8018282:	1c59      	adds	r1, r3, #1
 8018284:	687a      	ldr	r2, [r7, #4]
 8018286:	6211      	str	r1, [r2, #32]
 8018288:	781a      	ldrb	r2, [r3, #0]
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8018294:	b29b      	uxth	r3, r3
 8018296:	3b01      	subs	r3, #1
 8018298:	b29b      	uxth	r3, r3
 801829a:	687a      	ldr	r2, [r7, #4]
 801829c:	4619      	mov	r1, r3
 801829e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d10f      	bne.n	80182c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	68da      	ldr	r2, [r3, #12]
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80182b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	68da      	ldr	r2, [r3, #12]
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80182c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80182c4:	2300      	movs	r3, #0
 80182c6:	e000      	b.n	80182ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80182c8:	2302      	movs	r3, #2
  }
}
 80182ca:	4618      	mov	r0, r3
 80182cc:	3714      	adds	r7, #20
 80182ce:	46bd      	mov	sp, r7
 80182d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d4:	4770      	bx	lr

080182d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80182d6:	b580      	push	{r7, lr}
 80182d8:	b082      	sub	sp, #8
 80182da:	af00      	add	r7, sp, #0
 80182dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	68da      	ldr	r2, [r3, #12]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80182ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	2220      	movs	r2, #32
 80182f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80182f6:	6878      	ldr	r0, [r7, #4]
 80182f8:	f7ff fece 	bl	8018098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80182fc:	2300      	movs	r3, #0
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3708      	adds	r7, #8
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}

08018306 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8018306:	b580      	push	{r7, lr}
 8018308:	b08c      	sub	sp, #48	@ 0x30
 801830a:	af00      	add	r7, sp, #0
 801830c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8018314:	b2db      	uxtb	r3, r3
 8018316:	2b22      	cmp	r3, #34	@ 0x22
 8018318:	f040 80ae 	bne.w	8018478 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	689b      	ldr	r3, [r3, #8]
 8018320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018324:	d117      	bne.n	8018356 <UART_Receive_IT+0x50>
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	691b      	ldr	r3, [r3, #16]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d113      	bne.n	8018356 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801832e:	2300      	movs	r3, #0
 8018330:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018336:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	685b      	ldr	r3, [r3, #4]
 801833e:	b29b      	uxth	r3, r3
 8018340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018344:	b29a      	uxth	r2, r3
 8018346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018348:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801834e:	1c9a      	adds	r2, r3, #2
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	629a      	str	r2, [r3, #40]	@ 0x28
 8018354:	e026      	b.n	80183a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801835a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 801835c:	2300      	movs	r3, #0
 801835e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	689b      	ldr	r3, [r3, #8]
 8018364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018368:	d007      	beq.n	801837a <UART_Receive_IT+0x74>
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	689b      	ldr	r3, [r3, #8]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d10a      	bne.n	8018388 <UART_Receive_IT+0x82>
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	691b      	ldr	r3, [r3, #16]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d106      	bne.n	8018388 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	685b      	ldr	r3, [r3, #4]
 8018380:	b2da      	uxtb	r2, r3
 8018382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018384:	701a      	strb	r2, [r3, #0]
 8018386:	e008      	b.n	801839a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	685b      	ldr	r3, [r3, #4]
 801838e:	b2db      	uxtb	r3, r3
 8018390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018394:	b2da      	uxtb	r2, r3
 8018396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018398:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801839e:	1c5a      	adds	r2, r3, #1
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	3b01      	subs	r3, #1
 80183ac:	b29b      	uxth	r3, r3
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	4619      	mov	r1, r3
 80183b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d15d      	bne.n	8018474 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	68da      	ldr	r2, [r3, #12]
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f022 0220 	bic.w	r2, r2, #32
 80183c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	68da      	ldr	r2, [r3, #12]
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80183d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	695a      	ldr	r2, [r3, #20]
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	f022 0201 	bic.w	r2, r2, #1
 80183e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	2220      	movs	r2, #32
 80183ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2200      	movs	r2, #0
 80183f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183fa:	2b01      	cmp	r3, #1
 80183fc:	d135      	bne.n	801846a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	2200      	movs	r2, #0
 8018402:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	330c      	adds	r3, #12
 801840a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801840c:	697b      	ldr	r3, [r7, #20]
 801840e:	e853 3f00 	ldrex	r3, [r3]
 8018412:	613b      	str	r3, [r7, #16]
   return(result);
 8018414:	693b      	ldr	r3, [r7, #16]
 8018416:	f023 0310 	bic.w	r3, r3, #16
 801841a:	627b      	str	r3, [r7, #36]	@ 0x24
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	330c      	adds	r3, #12
 8018422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018424:	623a      	str	r2, [r7, #32]
 8018426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018428:	69f9      	ldr	r1, [r7, #28]
 801842a:	6a3a      	ldr	r2, [r7, #32]
 801842c:	e841 2300 	strex	r3, r2, [r1]
 8018430:	61bb      	str	r3, [r7, #24]
   return(result);
 8018432:	69bb      	ldr	r3, [r7, #24]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d1e5      	bne.n	8018404 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f003 0310 	and.w	r3, r3, #16
 8018442:	2b10      	cmp	r3, #16
 8018444:	d10a      	bne.n	801845c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018446:	2300      	movs	r3, #0
 8018448:	60fb      	str	r3, [r7, #12]
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	60fb      	str	r3, [r7, #12]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	685b      	ldr	r3, [r3, #4]
 8018458:	60fb      	str	r3, [r7, #12]
 801845a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8018460:	4619      	mov	r1, r3
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	f7f8 fe00 	bl	8011068 <HAL_UARTEx_RxEventCallback>
 8018468:	e002      	b.n	8018470 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801846a:	6878      	ldr	r0, [r7, #4]
 801846c:	f7ff fe1e 	bl	80180ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8018470:	2300      	movs	r3, #0
 8018472:	e002      	b.n	801847a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8018474:	2300      	movs	r3, #0
 8018476:	e000      	b.n	801847a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8018478:	2302      	movs	r3, #2
  }
}
 801847a:	4618      	mov	r0, r3
 801847c:	3730      	adds	r7, #48	@ 0x30
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
	...

08018484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018488:	b0c0      	sub	sp, #256	@ 0x100
 801848a:	af00      	add	r7, sp, #0
 801848c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	691b      	ldr	r3, [r3, #16]
 8018498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801849c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184a0:	68d9      	ldr	r1, [r3, #12]
 80184a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184a6:	681a      	ldr	r2, [r3, #0]
 80184a8:	ea40 0301 	orr.w	r3, r0, r1
 80184ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80184ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184b2:	689a      	ldr	r2, [r3, #8]
 80184b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184b8:	691b      	ldr	r3, [r3, #16]
 80184ba:	431a      	orrs	r2, r3
 80184bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184c0:	695b      	ldr	r3, [r3, #20]
 80184c2:	431a      	orrs	r2, r3
 80184c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184c8:	69db      	ldr	r3, [r3, #28]
 80184ca:	4313      	orrs	r3, r2
 80184cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80184d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	68db      	ldr	r3, [r3, #12]
 80184d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80184dc:	f021 010c 	bic.w	r1, r1, #12
 80184e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184e4:	681a      	ldr	r2, [r3, #0]
 80184e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80184ea:	430b      	orrs	r3, r1
 80184ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80184ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	695b      	ldr	r3, [r3, #20]
 80184f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80184fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80184fe:	6999      	ldr	r1, [r3, #24]
 8018500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018504:	681a      	ldr	r2, [r3, #0]
 8018506:	ea40 0301 	orr.w	r3, r0, r1
 801850a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018510:	681a      	ldr	r2, [r3, #0]
 8018512:	4b8f      	ldr	r3, [pc, #572]	@ (8018750 <UART_SetConfig+0x2cc>)
 8018514:	429a      	cmp	r2, r3
 8018516:	d005      	beq.n	8018524 <UART_SetConfig+0xa0>
 8018518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	4b8d      	ldr	r3, [pc, #564]	@ (8018754 <UART_SetConfig+0x2d0>)
 8018520:	429a      	cmp	r2, r3
 8018522:	d104      	bne.n	801852e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018524:	f7fe f9e8 	bl	80168f8 <HAL_RCC_GetPCLK2Freq>
 8018528:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801852c:	e003      	b.n	8018536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801852e:	f7fe f9cf 	bl	80168d0 <HAL_RCC_GetPCLK1Freq>
 8018532:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801853a:	69db      	ldr	r3, [r3, #28]
 801853c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018540:	f040 810c 	bne.w	801875c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018548:	2200      	movs	r2, #0
 801854a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801854e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8018552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8018556:	4622      	mov	r2, r4
 8018558:	462b      	mov	r3, r5
 801855a:	1891      	adds	r1, r2, r2
 801855c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801855e:	415b      	adcs	r3, r3
 8018560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8018566:	4621      	mov	r1, r4
 8018568:	eb12 0801 	adds.w	r8, r2, r1
 801856c:	4629      	mov	r1, r5
 801856e:	eb43 0901 	adc.w	r9, r3, r1
 8018572:	f04f 0200 	mov.w	r2, #0
 8018576:	f04f 0300 	mov.w	r3, #0
 801857a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801857e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8018582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018586:	4690      	mov	r8, r2
 8018588:	4699      	mov	r9, r3
 801858a:	4623      	mov	r3, r4
 801858c:	eb18 0303 	adds.w	r3, r8, r3
 8018590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8018594:	462b      	mov	r3, r5
 8018596:	eb49 0303 	adc.w	r3, r9, r3
 801859a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80185a2:	685b      	ldr	r3, [r3, #4]
 80185a4:	2200      	movs	r2, #0
 80185a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80185aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80185ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80185b2:	460b      	mov	r3, r1
 80185b4:	18db      	adds	r3, r3, r3
 80185b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80185b8:	4613      	mov	r3, r2
 80185ba:	eb42 0303 	adc.w	r3, r2, r3
 80185be:	657b      	str	r3, [r7, #84]	@ 0x54
 80185c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80185c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80185c8:	f7f8 fb76 	bl	8010cb8 <__aeabi_uldivmod>
 80185cc:	4602      	mov	r2, r0
 80185ce:	460b      	mov	r3, r1
 80185d0:	4b61      	ldr	r3, [pc, #388]	@ (8018758 <UART_SetConfig+0x2d4>)
 80185d2:	fba3 2302 	umull	r2, r3, r3, r2
 80185d6:	095b      	lsrs	r3, r3, #5
 80185d8:	011c      	lsls	r4, r3, #4
 80185da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80185de:	2200      	movs	r2, #0
 80185e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80185e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80185e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80185ec:	4642      	mov	r2, r8
 80185ee:	464b      	mov	r3, r9
 80185f0:	1891      	adds	r1, r2, r2
 80185f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80185f4:	415b      	adcs	r3, r3
 80185f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80185f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80185fc:	4641      	mov	r1, r8
 80185fe:	eb12 0a01 	adds.w	sl, r2, r1
 8018602:	4649      	mov	r1, r9
 8018604:	eb43 0b01 	adc.w	fp, r3, r1
 8018608:	f04f 0200 	mov.w	r2, #0
 801860c:	f04f 0300 	mov.w	r3, #0
 8018610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8018618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801861c:	4692      	mov	sl, r2
 801861e:	469b      	mov	fp, r3
 8018620:	4643      	mov	r3, r8
 8018622:	eb1a 0303 	adds.w	r3, sl, r3
 8018626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801862a:	464b      	mov	r3, r9
 801862c:	eb4b 0303 	adc.w	r3, fp, r3
 8018630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8018634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018638:	685b      	ldr	r3, [r3, #4]
 801863a:	2200      	movs	r2, #0
 801863c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8018640:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8018644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8018648:	460b      	mov	r3, r1
 801864a:	18db      	adds	r3, r3, r3
 801864c:	643b      	str	r3, [r7, #64]	@ 0x40
 801864e:	4613      	mov	r3, r2
 8018650:	eb42 0303 	adc.w	r3, r2, r3
 8018654:	647b      	str	r3, [r7, #68]	@ 0x44
 8018656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801865a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801865e:	f7f8 fb2b 	bl	8010cb8 <__aeabi_uldivmod>
 8018662:	4602      	mov	r2, r0
 8018664:	460b      	mov	r3, r1
 8018666:	4611      	mov	r1, r2
 8018668:	4b3b      	ldr	r3, [pc, #236]	@ (8018758 <UART_SetConfig+0x2d4>)
 801866a:	fba3 2301 	umull	r2, r3, r3, r1
 801866e:	095b      	lsrs	r3, r3, #5
 8018670:	2264      	movs	r2, #100	@ 0x64
 8018672:	fb02 f303 	mul.w	r3, r2, r3
 8018676:	1acb      	subs	r3, r1, r3
 8018678:	00db      	lsls	r3, r3, #3
 801867a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801867e:	4b36      	ldr	r3, [pc, #216]	@ (8018758 <UART_SetConfig+0x2d4>)
 8018680:	fba3 2302 	umull	r2, r3, r3, r2
 8018684:	095b      	lsrs	r3, r3, #5
 8018686:	005b      	lsls	r3, r3, #1
 8018688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 801868c:	441c      	add	r4, r3
 801868e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018692:	2200      	movs	r2, #0
 8018694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8018698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 801869c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80186a0:	4642      	mov	r2, r8
 80186a2:	464b      	mov	r3, r9
 80186a4:	1891      	adds	r1, r2, r2
 80186a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80186a8:	415b      	adcs	r3, r3
 80186aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80186ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80186b0:	4641      	mov	r1, r8
 80186b2:	1851      	adds	r1, r2, r1
 80186b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80186b6:	4649      	mov	r1, r9
 80186b8:	414b      	adcs	r3, r1
 80186ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80186bc:	f04f 0200 	mov.w	r2, #0
 80186c0:	f04f 0300 	mov.w	r3, #0
 80186c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80186c8:	4659      	mov	r1, fp
 80186ca:	00cb      	lsls	r3, r1, #3
 80186cc:	4651      	mov	r1, sl
 80186ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80186d2:	4651      	mov	r1, sl
 80186d4:	00ca      	lsls	r2, r1, #3
 80186d6:	4610      	mov	r0, r2
 80186d8:	4619      	mov	r1, r3
 80186da:	4603      	mov	r3, r0
 80186dc:	4642      	mov	r2, r8
 80186de:	189b      	adds	r3, r3, r2
 80186e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80186e4:	464b      	mov	r3, r9
 80186e6:	460a      	mov	r2, r1
 80186e8:	eb42 0303 	adc.w	r3, r2, r3
 80186ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80186f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	2200      	movs	r2, #0
 80186f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80186fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8018700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8018704:	460b      	mov	r3, r1
 8018706:	18db      	adds	r3, r3, r3
 8018708:	62bb      	str	r3, [r7, #40]	@ 0x28
 801870a:	4613      	mov	r3, r2
 801870c:	eb42 0303 	adc.w	r3, r2, r3
 8018710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8018716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801871a:	f7f8 facd 	bl	8010cb8 <__aeabi_uldivmod>
 801871e:	4602      	mov	r2, r0
 8018720:	460b      	mov	r3, r1
 8018722:	4b0d      	ldr	r3, [pc, #52]	@ (8018758 <UART_SetConfig+0x2d4>)
 8018724:	fba3 1302 	umull	r1, r3, r3, r2
 8018728:	095b      	lsrs	r3, r3, #5
 801872a:	2164      	movs	r1, #100	@ 0x64
 801872c:	fb01 f303 	mul.w	r3, r1, r3
 8018730:	1ad3      	subs	r3, r2, r3
 8018732:	00db      	lsls	r3, r3, #3
 8018734:	3332      	adds	r3, #50	@ 0x32
 8018736:	4a08      	ldr	r2, [pc, #32]	@ (8018758 <UART_SetConfig+0x2d4>)
 8018738:	fba2 2303 	umull	r2, r3, r2, r3
 801873c:	095b      	lsrs	r3, r3, #5
 801873e:	f003 0207 	and.w	r2, r3, #7
 8018742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	4422      	add	r2, r4
 801874a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801874c:	e106      	b.n	801895c <UART_SetConfig+0x4d8>
 801874e:	bf00      	nop
 8018750:	40011000 	.word	0x40011000
 8018754:	40011400 	.word	0x40011400
 8018758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801875c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018760:	2200      	movs	r2, #0
 8018762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8018766:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801876a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801876e:	4642      	mov	r2, r8
 8018770:	464b      	mov	r3, r9
 8018772:	1891      	adds	r1, r2, r2
 8018774:	6239      	str	r1, [r7, #32]
 8018776:	415b      	adcs	r3, r3
 8018778:	627b      	str	r3, [r7, #36]	@ 0x24
 801877a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801877e:	4641      	mov	r1, r8
 8018780:	1854      	adds	r4, r2, r1
 8018782:	4649      	mov	r1, r9
 8018784:	eb43 0501 	adc.w	r5, r3, r1
 8018788:	f04f 0200 	mov.w	r2, #0
 801878c:	f04f 0300 	mov.w	r3, #0
 8018790:	00eb      	lsls	r3, r5, #3
 8018792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8018796:	00e2      	lsls	r2, r4, #3
 8018798:	4614      	mov	r4, r2
 801879a:	461d      	mov	r5, r3
 801879c:	4643      	mov	r3, r8
 801879e:	18e3      	adds	r3, r4, r3
 80187a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80187a4:	464b      	mov	r3, r9
 80187a6:	eb45 0303 	adc.w	r3, r5, r3
 80187aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80187ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80187b2:	685b      	ldr	r3, [r3, #4]
 80187b4:	2200      	movs	r2, #0
 80187b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80187ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80187be:	f04f 0200 	mov.w	r2, #0
 80187c2:	f04f 0300 	mov.w	r3, #0
 80187c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80187ca:	4629      	mov	r1, r5
 80187cc:	008b      	lsls	r3, r1, #2
 80187ce:	4621      	mov	r1, r4
 80187d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80187d4:	4621      	mov	r1, r4
 80187d6:	008a      	lsls	r2, r1, #2
 80187d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80187dc:	f7f8 fa6c 	bl	8010cb8 <__aeabi_uldivmod>
 80187e0:	4602      	mov	r2, r0
 80187e2:	460b      	mov	r3, r1
 80187e4:	4b60      	ldr	r3, [pc, #384]	@ (8018968 <UART_SetConfig+0x4e4>)
 80187e6:	fba3 2302 	umull	r2, r3, r3, r2
 80187ea:	095b      	lsrs	r3, r3, #5
 80187ec:	011c      	lsls	r4, r3, #4
 80187ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80187f2:	2200      	movs	r2, #0
 80187f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80187f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80187fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8018800:	4642      	mov	r2, r8
 8018802:	464b      	mov	r3, r9
 8018804:	1891      	adds	r1, r2, r2
 8018806:	61b9      	str	r1, [r7, #24]
 8018808:	415b      	adcs	r3, r3
 801880a:	61fb      	str	r3, [r7, #28]
 801880c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018810:	4641      	mov	r1, r8
 8018812:	1851      	adds	r1, r2, r1
 8018814:	6139      	str	r1, [r7, #16]
 8018816:	4649      	mov	r1, r9
 8018818:	414b      	adcs	r3, r1
 801881a:	617b      	str	r3, [r7, #20]
 801881c:	f04f 0200 	mov.w	r2, #0
 8018820:	f04f 0300 	mov.w	r3, #0
 8018824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018828:	4659      	mov	r1, fp
 801882a:	00cb      	lsls	r3, r1, #3
 801882c:	4651      	mov	r1, sl
 801882e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018832:	4651      	mov	r1, sl
 8018834:	00ca      	lsls	r2, r1, #3
 8018836:	4610      	mov	r0, r2
 8018838:	4619      	mov	r1, r3
 801883a:	4603      	mov	r3, r0
 801883c:	4642      	mov	r2, r8
 801883e:	189b      	adds	r3, r3, r2
 8018840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8018844:	464b      	mov	r3, r9
 8018846:	460a      	mov	r2, r1
 8018848:	eb42 0303 	adc.w	r3, r2, r3
 801884c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8018850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	2200      	movs	r2, #0
 8018858:	67bb      	str	r3, [r7, #120]	@ 0x78
 801885a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801885c:	f04f 0200 	mov.w	r2, #0
 8018860:	f04f 0300 	mov.w	r3, #0
 8018864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8018868:	4649      	mov	r1, r9
 801886a:	008b      	lsls	r3, r1, #2
 801886c:	4641      	mov	r1, r8
 801886e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018872:	4641      	mov	r1, r8
 8018874:	008a      	lsls	r2, r1, #2
 8018876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801887a:	f7f8 fa1d 	bl	8010cb8 <__aeabi_uldivmod>
 801887e:	4602      	mov	r2, r0
 8018880:	460b      	mov	r3, r1
 8018882:	4611      	mov	r1, r2
 8018884:	4b38      	ldr	r3, [pc, #224]	@ (8018968 <UART_SetConfig+0x4e4>)
 8018886:	fba3 2301 	umull	r2, r3, r3, r1
 801888a:	095b      	lsrs	r3, r3, #5
 801888c:	2264      	movs	r2, #100	@ 0x64
 801888e:	fb02 f303 	mul.w	r3, r2, r3
 8018892:	1acb      	subs	r3, r1, r3
 8018894:	011b      	lsls	r3, r3, #4
 8018896:	3332      	adds	r3, #50	@ 0x32
 8018898:	4a33      	ldr	r2, [pc, #204]	@ (8018968 <UART_SetConfig+0x4e4>)
 801889a:	fba2 2303 	umull	r2, r3, r2, r3
 801889e:	095b      	lsrs	r3, r3, #5
 80188a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80188a4:	441c      	add	r4, r3
 80188a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80188aa:	2200      	movs	r2, #0
 80188ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80188ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80188b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80188b4:	4642      	mov	r2, r8
 80188b6:	464b      	mov	r3, r9
 80188b8:	1891      	adds	r1, r2, r2
 80188ba:	60b9      	str	r1, [r7, #8]
 80188bc:	415b      	adcs	r3, r3
 80188be:	60fb      	str	r3, [r7, #12]
 80188c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80188c4:	4641      	mov	r1, r8
 80188c6:	1851      	adds	r1, r2, r1
 80188c8:	6039      	str	r1, [r7, #0]
 80188ca:	4649      	mov	r1, r9
 80188cc:	414b      	adcs	r3, r1
 80188ce:	607b      	str	r3, [r7, #4]
 80188d0:	f04f 0200 	mov.w	r2, #0
 80188d4:	f04f 0300 	mov.w	r3, #0
 80188d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80188dc:	4659      	mov	r1, fp
 80188de:	00cb      	lsls	r3, r1, #3
 80188e0:	4651      	mov	r1, sl
 80188e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80188e6:	4651      	mov	r1, sl
 80188e8:	00ca      	lsls	r2, r1, #3
 80188ea:	4610      	mov	r0, r2
 80188ec:	4619      	mov	r1, r3
 80188ee:	4603      	mov	r3, r0
 80188f0:	4642      	mov	r2, r8
 80188f2:	189b      	adds	r3, r3, r2
 80188f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80188f6:	464b      	mov	r3, r9
 80188f8:	460a      	mov	r2, r1
 80188fa:	eb42 0303 	adc.w	r3, r2, r3
 80188fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8018900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018904:	685b      	ldr	r3, [r3, #4]
 8018906:	2200      	movs	r2, #0
 8018908:	663b      	str	r3, [r7, #96]	@ 0x60
 801890a:	667a      	str	r2, [r7, #100]	@ 0x64
 801890c:	f04f 0200 	mov.w	r2, #0
 8018910:	f04f 0300 	mov.w	r3, #0
 8018914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8018918:	4649      	mov	r1, r9
 801891a:	008b      	lsls	r3, r1, #2
 801891c:	4641      	mov	r1, r8
 801891e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018922:	4641      	mov	r1, r8
 8018924:	008a      	lsls	r2, r1, #2
 8018926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801892a:	f7f8 f9c5 	bl	8010cb8 <__aeabi_uldivmod>
 801892e:	4602      	mov	r2, r0
 8018930:	460b      	mov	r3, r1
 8018932:	4b0d      	ldr	r3, [pc, #52]	@ (8018968 <UART_SetConfig+0x4e4>)
 8018934:	fba3 1302 	umull	r1, r3, r3, r2
 8018938:	095b      	lsrs	r3, r3, #5
 801893a:	2164      	movs	r1, #100	@ 0x64
 801893c:	fb01 f303 	mul.w	r3, r1, r3
 8018940:	1ad3      	subs	r3, r2, r3
 8018942:	011b      	lsls	r3, r3, #4
 8018944:	3332      	adds	r3, #50	@ 0x32
 8018946:	4a08      	ldr	r2, [pc, #32]	@ (8018968 <UART_SetConfig+0x4e4>)
 8018948:	fba2 2303 	umull	r2, r3, r2, r3
 801894c:	095b      	lsrs	r3, r3, #5
 801894e:	f003 020f 	and.w	r2, r3, #15
 8018952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	4422      	add	r2, r4
 801895a:	609a      	str	r2, [r3, #8]
}
 801895c:	bf00      	nop
 801895e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8018962:	46bd      	mov	sp, r7
 8018964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018968:	51eb851f 	.word	0x51eb851f

0801896c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8018974:	4b22      	ldr	r3, [pc, #136]	@ (8018a00 <WIZCHIP_READ+0x94>)
 8018976:	68db      	ldr	r3, [r3, #12]
 8018978:	4798      	blx	r3
   WIZCHIP.CS._select();
 801897a:	4b21      	ldr	r3, [pc, #132]	@ (8018a00 <WIZCHIP_READ+0x94>)
 801897c:	695b      	ldr	r3, [r3, #20]
 801897e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018980:	4b1f      	ldr	r3, [pc, #124]	@ (8018a00 <WIZCHIP_READ+0x94>)
 8018982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018984:	2b00      	cmp	r3, #0
 8018986:	d003      	beq.n	8018990 <WIZCHIP_READ+0x24>
 8018988:	4b1d      	ldr	r3, [pc, #116]	@ (8018a00 <WIZCHIP_READ+0x94>)
 801898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801898c:	2b00      	cmp	r3, #0
 801898e:	d114      	bne.n	80189ba <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018990:	4b1b      	ldr	r3, [pc, #108]	@ (8018a00 <WIZCHIP_READ+0x94>)
 8018992:	6a1b      	ldr	r3, [r3, #32]
 8018994:	687a      	ldr	r2, [r7, #4]
 8018996:	0c12      	lsrs	r2, r2, #16
 8018998:	b2d2      	uxtb	r2, r2
 801899a:	4610      	mov	r0, r2
 801899c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801899e:	4b18      	ldr	r3, [pc, #96]	@ (8018a00 <WIZCHIP_READ+0x94>)
 80189a0:	6a1b      	ldr	r3, [r3, #32]
 80189a2:	687a      	ldr	r2, [r7, #4]
 80189a4:	0a12      	lsrs	r2, r2, #8
 80189a6:	b2d2      	uxtb	r2, r2
 80189a8:	4610      	mov	r0, r2
 80189aa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80189ac:	4b14      	ldr	r3, [pc, #80]	@ (8018a00 <WIZCHIP_READ+0x94>)
 80189ae:	6a1b      	ldr	r3, [r3, #32]
 80189b0:	687a      	ldr	r2, [r7, #4]
 80189b2:	b2d2      	uxtb	r2, r2
 80189b4:	4610      	mov	r0, r2
 80189b6:	4798      	blx	r3
 80189b8:	e011      	b.n	80189de <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	0c1b      	lsrs	r3, r3, #16
 80189be:	b2db      	uxtb	r3, r3
 80189c0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	0a1b      	lsrs	r3, r3, #8
 80189c6:	b2db      	uxtb	r3, r3
 80189c8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80189d0:	4b0b      	ldr	r3, [pc, #44]	@ (8018a00 <WIZCHIP_READ+0x94>)
 80189d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80189d4:	f107 020c 	add.w	r2, r7, #12
 80189d8:	2103      	movs	r1, #3
 80189da:	4610      	mov	r0, r2
 80189dc:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80189de:	4b08      	ldr	r3, [pc, #32]	@ (8018a00 <WIZCHIP_READ+0x94>)
 80189e0:	69db      	ldr	r3, [r3, #28]
 80189e2:	4798      	blx	r3
 80189e4:	4603      	mov	r3, r0
 80189e6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80189e8:	4b05      	ldr	r3, [pc, #20]	@ (8018a00 <WIZCHIP_READ+0x94>)
 80189ea:	699b      	ldr	r3, [r3, #24]
 80189ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80189ee:	4b04      	ldr	r3, [pc, #16]	@ (8018a00 <WIZCHIP_READ+0x94>)
 80189f0:	691b      	ldr	r3, [r3, #16]
 80189f2:	4798      	blx	r3
   return ret;
 80189f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3710      	adds	r7, #16
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	200000c4 	.word	0x200000c4

08018a04 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b084      	sub	sp, #16
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	460b      	mov	r3, r1
 8018a0e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8018a10:	4b22      	ldr	r3, [pc, #136]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a12:	68db      	ldr	r3, [r3, #12]
 8018a14:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018a16:	4b21      	ldr	r3, [pc, #132]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a18:	695b      	ldr	r3, [r3, #20]
 8018a1a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	f043 0304 	orr.w	r3, r3, #4
 8018a22:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018a24:	4b1d      	ldr	r3, [pc, #116]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d119      	bne.n	8018a60 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a2e:	6a1b      	ldr	r3, [r3, #32]
 8018a30:	687a      	ldr	r2, [r7, #4]
 8018a32:	0c12      	lsrs	r2, r2, #16
 8018a34:	b2d2      	uxtb	r2, r2
 8018a36:	4610      	mov	r0, r2
 8018a38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018a3a:	4b18      	ldr	r3, [pc, #96]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a3c:	6a1b      	ldr	r3, [r3, #32]
 8018a3e:	687a      	ldr	r2, [r7, #4]
 8018a40:	0a12      	lsrs	r2, r2, #8
 8018a42:	b2d2      	uxtb	r2, r2
 8018a44:	4610      	mov	r0, r2
 8018a46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018a48:	4b14      	ldr	r3, [pc, #80]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a4a:	6a1b      	ldr	r3, [r3, #32]
 8018a4c:	687a      	ldr	r2, [r7, #4]
 8018a4e:	b2d2      	uxtb	r2, r2
 8018a50:	4610      	mov	r0, r2
 8018a52:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8018a54:	4b11      	ldr	r3, [pc, #68]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a56:	6a1b      	ldr	r3, [r3, #32]
 8018a58:	78fa      	ldrb	r2, [r7, #3]
 8018a5a:	4610      	mov	r0, r2
 8018a5c:	4798      	blx	r3
 8018a5e:	e013      	b.n	8018a88 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	0c1b      	lsrs	r3, r3, #16
 8018a64:	b2db      	uxtb	r3, r3
 8018a66:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	0a1b      	lsrs	r3, r3, #8
 8018a6c:	b2db      	uxtb	r3, r3
 8018a6e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	b2db      	uxtb	r3, r3
 8018a74:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8018a76:	78fb      	ldrb	r3, [r7, #3]
 8018a78:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8018a7a:	4b08      	ldr	r3, [pc, #32]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a7e:	f107 020c 	add.w	r2, r7, #12
 8018a82:	2104      	movs	r1, #4
 8018a84:	4610      	mov	r0, r2
 8018a86:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018a88:	4b04      	ldr	r3, [pc, #16]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a8a:	699b      	ldr	r3, [r3, #24]
 8018a8c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018a8e:	4b03      	ldr	r3, [pc, #12]	@ (8018a9c <WIZCHIP_WRITE+0x98>)
 8018a90:	691b      	ldr	r3, [r3, #16]
 8018a92:	4798      	blx	r3
}
 8018a94:	bf00      	nop
 8018a96:	3710      	adds	r7, #16
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	bd80      	pop	{r7, pc}
 8018a9c:	200000c4 	.word	0x200000c4

08018aa0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018aa0:	b590      	push	{r4, r7, lr}
 8018aa2:	b087      	sub	sp, #28
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	60f8      	str	r0, [r7, #12]
 8018aa8:	60b9      	str	r1, [r7, #8]
 8018aaa:	4613      	mov	r3, r2
 8018aac:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018aae:	4b2b      	ldr	r3, [pc, #172]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018ab0:	68db      	ldr	r3, [r3, #12]
 8018ab2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018ab4:	4b29      	ldr	r3, [pc, #164]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018ab6:	695b      	ldr	r3, [r3, #20]
 8018ab8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018aba:	4b28      	ldr	r3, [pc, #160]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d003      	beq.n	8018aca <WIZCHIP_READ_BUF+0x2a>
 8018ac2:	4b26      	ldr	r3, [pc, #152]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d126      	bne.n	8018b18 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018aca:	4b24      	ldr	r3, [pc, #144]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018acc:	6a1b      	ldr	r3, [r3, #32]
 8018ace:	68fa      	ldr	r2, [r7, #12]
 8018ad0:	0c12      	lsrs	r2, r2, #16
 8018ad2:	b2d2      	uxtb	r2, r2
 8018ad4:	4610      	mov	r0, r2
 8018ad6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018ad8:	4b20      	ldr	r3, [pc, #128]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018ada:	6a1b      	ldr	r3, [r3, #32]
 8018adc:	68fa      	ldr	r2, [r7, #12]
 8018ade:	0a12      	lsrs	r2, r2, #8
 8018ae0:	b2d2      	uxtb	r2, r2
 8018ae2:	4610      	mov	r0, r2
 8018ae4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018ae8:	6a1b      	ldr	r3, [r3, #32]
 8018aea:	68fa      	ldr	r2, [r7, #12]
 8018aec:	b2d2      	uxtb	r2, r2
 8018aee:	4610      	mov	r0, r2
 8018af0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018af2:	2300      	movs	r3, #0
 8018af4:	82fb      	strh	r3, [r7, #22]
 8018af6:	e00a      	b.n	8018b0e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8018af8:	4b18      	ldr	r3, [pc, #96]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018afa:	69db      	ldr	r3, [r3, #28]
 8018afc:	8afa      	ldrh	r2, [r7, #22]
 8018afe:	68b9      	ldr	r1, [r7, #8]
 8018b00:	188c      	adds	r4, r1, r2
 8018b02:	4798      	blx	r3
 8018b04:	4603      	mov	r3, r0
 8018b06:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8018b08:	8afb      	ldrh	r3, [r7, #22]
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	82fb      	strh	r3, [r7, #22]
 8018b0e:	8afa      	ldrh	r2, [r7, #22]
 8018b10:	88fb      	ldrh	r3, [r7, #6]
 8018b12:	429a      	cmp	r2, r3
 8018b14:	d3f0      	bcc.n	8018af8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018b16:	e017      	b.n	8018b48 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	0c1b      	lsrs	r3, r3, #16
 8018b1c:	b2db      	uxtb	r3, r3
 8018b1e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	0a1b      	lsrs	r3, r3, #8
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	b2db      	uxtb	r3, r3
 8018b2c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b32:	f107 0210 	add.w	r2, r7, #16
 8018b36:	2103      	movs	r1, #3
 8018b38:	4610      	mov	r0, r2
 8018b3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8018b3c:	4b07      	ldr	r3, [pc, #28]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b40:	88fa      	ldrh	r2, [r7, #6]
 8018b42:	4611      	mov	r1, r2
 8018b44:	68b8      	ldr	r0, [r7, #8]
 8018b46:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018b48:	4b04      	ldr	r3, [pc, #16]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018b4a:	699b      	ldr	r3, [r3, #24]
 8018b4c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018b4e:	4b03      	ldr	r3, [pc, #12]	@ (8018b5c <WIZCHIP_READ_BUF+0xbc>)
 8018b50:	691b      	ldr	r3, [r3, #16]
 8018b52:	4798      	blx	r3
}
 8018b54:	bf00      	nop
 8018b56:	371c      	adds	r7, #28
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd90      	pop	{r4, r7, pc}
 8018b5c:	200000c4 	.word	0x200000c4

08018b60 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b086      	sub	sp, #24
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	60f8      	str	r0, [r7, #12]
 8018b68:	60b9      	str	r1, [r7, #8]
 8018b6a:	4613      	mov	r3, r2
 8018b6c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018b70:	68db      	ldr	r3, [r3, #12]
 8018b72:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018b74:	4b29      	ldr	r3, [pc, #164]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018b76:	695b      	ldr	r3, [r3, #20]
 8018b78:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	f043 0304 	orr.w	r3, r3, #4
 8018b80:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018b82:	4b26      	ldr	r3, [pc, #152]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d126      	bne.n	8018bd8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018b8a:	4b24      	ldr	r3, [pc, #144]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018b8c:	6a1b      	ldr	r3, [r3, #32]
 8018b8e:	68fa      	ldr	r2, [r7, #12]
 8018b90:	0c12      	lsrs	r2, r2, #16
 8018b92:	b2d2      	uxtb	r2, r2
 8018b94:	4610      	mov	r0, r2
 8018b96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018b98:	4b20      	ldr	r3, [pc, #128]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018b9a:	6a1b      	ldr	r3, [r3, #32]
 8018b9c:	68fa      	ldr	r2, [r7, #12]
 8018b9e:	0a12      	lsrs	r2, r2, #8
 8018ba0:	b2d2      	uxtb	r2, r2
 8018ba2:	4610      	mov	r0, r2
 8018ba4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018ba8:	6a1b      	ldr	r3, [r3, #32]
 8018baa:	68fa      	ldr	r2, [r7, #12]
 8018bac:	b2d2      	uxtb	r2, r2
 8018bae:	4610      	mov	r0, r2
 8018bb0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	82fb      	strh	r3, [r7, #22]
 8018bb6:	e00a      	b.n	8018bce <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8018bb8:	4b18      	ldr	r3, [pc, #96]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018bba:	6a1b      	ldr	r3, [r3, #32]
 8018bbc:	8afa      	ldrh	r2, [r7, #22]
 8018bbe:	68b9      	ldr	r1, [r7, #8]
 8018bc0:	440a      	add	r2, r1
 8018bc2:	7812      	ldrb	r2, [r2, #0]
 8018bc4:	4610      	mov	r0, r2
 8018bc6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018bc8:	8afb      	ldrh	r3, [r7, #22]
 8018bca:	3301      	adds	r3, #1
 8018bcc:	82fb      	strh	r3, [r7, #22]
 8018bce:	8afa      	ldrh	r2, [r7, #22]
 8018bd0:	88fb      	ldrh	r3, [r7, #6]
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d3f0      	bcc.n	8018bb8 <WIZCHIP_WRITE_BUF+0x58>
 8018bd6:	e017      	b.n	8018c08 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	0c1b      	lsrs	r3, r3, #16
 8018bdc:	b2db      	uxtb	r3, r3
 8018bde:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	0a1b      	lsrs	r3, r3, #8
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	b2db      	uxtb	r3, r3
 8018bec:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018bee:	4b0b      	ldr	r3, [pc, #44]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bf2:	f107 0210 	add.w	r2, r7, #16
 8018bf6:	2103      	movs	r1, #3
 8018bf8:	4610      	mov	r0, r2
 8018bfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8018bfc:	4b07      	ldr	r3, [pc, #28]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c00:	88fa      	ldrh	r2, [r7, #6]
 8018c02:	4611      	mov	r1, r2
 8018c04:	68b8      	ldr	r0, [r7, #8]
 8018c06:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018c08:	4b04      	ldr	r3, [pc, #16]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018c0a:	699b      	ldr	r3, [r3, #24]
 8018c0c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018c0e:	4b03      	ldr	r3, [pc, #12]	@ (8018c1c <WIZCHIP_WRITE_BUF+0xbc>)
 8018c10:	691b      	ldr	r3, [r3, #16]
 8018c12:	4798      	blx	r3
}
 8018c14:	bf00      	nop
 8018c16:	3718      	adds	r7, #24
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	200000c4 	.word	0x200000c4

08018c20 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8018c20:	b590      	push	{r4, r7, lr}
 8018c22:	b085      	sub	sp, #20
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	4603      	mov	r3, r0
 8018c28:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	81fb      	strh	r3, [r7, #14]
 8018c2e:	2300      	movs	r3, #0
 8018c30:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018c32:	79fb      	ldrb	r3, [r7, #7]
 8018c34:	009b      	lsls	r3, r3, #2
 8018c36:	3301      	adds	r3, #1
 8018c38:	00db      	lsls	r3, r3, #3
 8018c3a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8018c3e:	4618      	mov	r0, r3
 8018c40:	f7ff fe94 	bl	801896c <WIZCHIP_READ>
 8018c44:	4603      	mov	r3, r0
 8018c46:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018c48:	89bb      	ldrh	r3, [r7, #12]
 8018c4a:	021b      	lsls	r3, r3, #8
 8018c4c:	b29c      	uxth	r4, r3
 8018c4e:	79fb      	ldrb	r3, [r7, #7]
 8018c50:	009b      	lsls	r3, r3, #2
 8018c52:	3301      	adds	r3, #1
 8018c54:	00db      	lsls	r3, r3, #3
 8018c56:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f7ff fe86 	bl	801896c <WIZCHIP_READ>
 8018c60:	4603      	mov	r3, r0
 8018c62:	4423      	add	r3, r4
 8018c64:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018c66:	89bb      	ldrh	r3, [r7, #12]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d019      	beq.n	8018ca0 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018c6c:	79fb      	ldrb	r3, [r7, #7]
 8018c6e:	009b      	lsls	r3, r3, #2
 8018c70:	3301      	adds	r3, #1
 8018c72:	00db      	lsls	r3, r3, #3
 8018c74:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8018c78:	4618      	mov	r0, r3
 8018c7a:	f7ff fe77 	bl	801896c <WIZCHIP_READ>
 8018c7e:	4603      	mov	r3, r0
 8018c80:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018c82:	89fb      	ldrh	r3, [r7, #14]
 8018c84:	021b      	lsls	r3, r3, #8
 8018c86:	b29c      	uxth	r4, r3
 8018c88:	79fb      	ldrb	r3, [r7, #7]
 8018c8a:	009b      	lsls	r3, r3, #2
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	00db      	lsls	r3, r3, #3
 8018c90:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7ff fe69 	bl	801896c <WIZCHIP_READ>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	4423      	add	r3, r4
 8018c9e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018ca0:	89fa      	ldrh	r2, [r7, #14]
 8018ca2:	89bb      	ldrh	r3, [r7, #12]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d1c4      	bne.n	8018c32 <getSn_TX_FSR+0x12>
   return val;
 8018ca8:	89fb      	ldrh	r3, [r7, #14]
}
 8018caa:	4618      	mov	r0, r3
 8018cac:	3714      	adds	r7, #20
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd90      	pop	{r4, r7, pc}

08018cb2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8018cb2:	b590      	push	{r4, r7, lr}
 8018cb4:	b085      	sub	sp, #20
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	4603      	mov	r3, r0
 8018cba:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	81fb      	strh	r3, [r7, #14]
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018cc4:	79fb      	ldrb	r3, [r7, #7]
 8018cc6:	009b      	lsls	r3, r3, #2
 8018cc8:	3301      	adds	r3, #1
 8018cca:	00db      	lsls	r3, r3, #3
 8018ccc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7ff fe4b 	bl	801896c <WIZCHIP_READ>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018cda:	89bb      	ldrh	r3, [r7, #12]
 8018cdc:	021b      	lsls	r3, r3, #8
 8018cde:	b29c      	uxth	r4, r3
 8018ce0:	79fb      	ldrb	r3, [r7, #7]
 8018ce2:	009b      	lsls	r3, r3, #2
 8018ce4:	3301      	adds	r3, #1
 8018ce6:	00db      	lsls	r3, r3, #3
 8018ce8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7ff fe3d 	bl	801896c <WIZCHIP_READ>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	4423      	add	r3, r4
 8018cf6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018cf8:	89bb      	ldrh	r3, [r7, #12]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d019      	beq.n	8018d32 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018cfe:	79fb      	ldrb	r3, [r7, #7]
 8018d00:	009b      	lsls	r3, r3, #2
 8018d02:	3301      	adds	r3, #1
 8018d04:	00db      	lsls	r3, r3, #3
 8018d06:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7ff fe2e 	bl	801896c <WIZCHIP_READ>
 8018d10:	4603      	mov	r3, r0
 8018d12:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018d14:	89fb      	ldrh	r3, [r7, #14]
 8018d16:	021b      	lsls	r3, r3, #8
 8018d18:	b29c      	uxth	r4, r3
 8018d1a:	79fb      	ldrb	r3, [r7, #7]
 8018d1c:	009b      	lsls	r3, r3, #2
 8018d1e:	3301      	adds	r3, #1
 8018d20:	00db      	lsls	r3, r3, #3
 8018d22:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8018d26:	4618      	mov	r0, r3
 8018d28:	f7ff fe20 	bl	801896c <WIZCHIP_READ>
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	4423      	add	r3, r4
 8018d30:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018d32:	89fa      	ldrh	r2, [r7, #14]
 8018d34:	89bb      	ldrh	r3, [r7, #12]
 8018d36:	429a      	cmp	r2, r3
 8018d38:	d1c4      	bne.n	8018cc4 <getSn_RX_RSR+0x12>
   return val;
 8018d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	3714      	adds	r7, #20
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd90      	pop	{r4, r7, pc}

08018d44 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018d44:	b590      	push	{r4, r7, lr}
 8018d46:	b085      	sub	sp, #20
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	4603      	mov	r3, r0
 8018d4c:	6039      	str	r1, [r7, #0]
 8018d4e:	71fb      	strb	r3, [r7, #7]
 8018d50:	4613      	mov	r3, r2
 8018d52:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018d54:	2300      	movs	r3, #0
 8018d56:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018d58:	2300      	movs	r3, #0
 8018d5a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8018d5c:	88bb      	ldrh	r3, [r7, #4]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d046      	beq.n	8018df0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8018d62:	79fb      	ldrb	r3, [r7, #7]
 8018d64:	009b      	lsls	r3, r3, #2
 8018d66:	3301      	adds	r3, #1
 8018d68:	00db      	lsls	r3, r3, #3
 8018d6a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7ff fdfc 	bl	801896c <WIZCHIP_READ>
 8018d74:	4603      	mov	r3, r0
 8018d76:	021b      	lsls	r3, r3, #8
 8018d78:	b29c      	uxth	r4, r3
 8018d7a:	79fb      	ldrb	r3, [r7, #7]
 8018d7c:	009b      	lsls	r3, r3, #2
 8018d7e:	3301      	adds	r3, #1
 8018d80:	00db      	lsls	r3, r3, #3
 8018d82:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7ff fdf0 	bl	801896c <WIZCHIP_READ>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	4423      	add	r3, r4
 8018d90:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8018d92:	89fb      	ldrh	r3, [r7, #14]
 8018d94:	021b      	lsls	r3, r3, #8
 8018d96:	79fa      	ldrb	r2, [r7, #7]
 8018d98:	0092      	lsls	r2, r2, #2
 8018d9a:	3202      	adds	r2, #2
 8018d9c:	00d2      	lsls	r2, r2, #3
 8018d9e:	4413      	add	r3, r2
 8018da0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8018da2:	88bb      	ldrh	r3, [r7, #4]
 8018da4:	461a      	mov	r2, r3
 8018da6:	6839      	ldr	r1, [r7, #0]
 8018da8:	68b8      	ldr	r0, [r7, #8]
 8018daa:	f7ff fed9 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8018dae:	89fa      	ldrh	r2, [r7, #14]
 8018db0:	88bb      	ldrh	r3, [r7, #4]
 8018db2:	4413      	add	r3, r2
 8018db4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8018db6:	79fb      	ldrb	r3, [r7, #7]
 8018db8:	009b      	lsls	r3, r3, #2
 8018dba:	3301      	adds	r3, #1
 8018dbc:	00db      	lsls	r3, r3, #3
 8018dbe:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8018dc2:	461a      	mov	r2, r3
 8018dc4:	89fb      	ldrh	r3, [r7, #14]
 8018dc6:	0a1b      	lsrs	r3, r3, #8
 8018dc8:	b29b      	uxth	r3, r3
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	4619      	mov	r1, r3
 8018dce:	4610      	mov	r0, r2
 8018dd0:	f7ff fe18 	bl	8018a04 <WIZCHIP_WRITE>
 8018dd4:	79fb      	ldrb	r3, [r7, #7]
 8018dd6:	009b      	lsls	r3, r3, #2
 8018dd8:	3301      	adds	r3, #1
 8018dda:	00db      	lsls	r3, r3, #3
 8018ddc:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8018de0:	461a      	mov	r2, r3
 8018de2:	89fb      	ldrh	r3, [r7, #14]
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	4619      	mov	r1, r3
 8018de8:	4610      	mov	r0, r2
 8018dea:	f7ff fe0b 	bl	8018a04 <WIZCHIP_WRITE>
 8018dee:	e000      	b.n	8018df2 <wiz_send_data+0xae>
   if(len == 0)  return;
 8018df0:	bf00      	nop
}
 8018df2:	3714      	adds	r7, #20
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd90      	pop	{r4, r7, pc}

08018df8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018df8:	b590      	push	{r4, r7, lr}
 8018dfa:	b085      	sub	sp, #20
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	4603      	mov	r3, r0
 8018e00:	6039      	str	r1, [r7, #0]
 8018e02:	71fb      	strb	r3, [r7, #7]
 8018e04:	4613      	mov	r3, r2
 8018e06:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018e08:	2300      	movs	r3, #0
 8018e0a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8018e10:	88bb      	ldrh	r3, [r7, #4]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d046      	beq.n	8018ea4 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8018e16:	79fb      	ldrb	r3, [r7, #7]
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	00db      	lsls	r3, r3, #3
 8018e1e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8018e22:	4618      	mov	r0, r3
 8018e24:	f7ff fda2 	bl	801896c <WIZCHIP_READ>
 8018e28:	4603      	mov	r3, r0
 8018e2a:	021b      	lsls	r3, r3, #8
 8018e2c:	b29c      	uxth	r4, r3
 8018e2e:	79fb      	ldrb	r3, [r7, #7]
 8018e30:	009b      	lsls	r3, r3, #2
 8018e32:	3301      	adds	r3, #1
 8018e34:	00db      	lsls	r3, r3, #3
 8018e36:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	f7ff fd96 	bl	801896c <WIZCHIP_READ>
 8018e40:	4603      	mov	r3, r0
 8018e42:	4423      	add	r3, r4
 8018e44:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8018e46:	89fb      	ldrh	r3, [r7, #14]
 8018e48:	021b      	lsls	r3, r3, #8
 8018e4a:	79fa      	ldrb	r2, [r7, #7]
 8018e4c:	0092      	lsls	r2, r2, #2
 8018e4e:	3203      	adds	r2, #3
 8018e50:	00d2      	lsls	r2, r2, #3
 8018e52:	4413      	add	r3, r2
 8018e54:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8018e56:	88bb      	ldrh	r3, [r7, #4]
 8018e58:	461a      	mov	r2, r3
 8018e5a:	6839      	ldr	r1, [r7, #0]
 8018e5c:	68b8      	ldr	r0, [r7, #8]
 8018e5e:	f7ff fe1f 	bl	8018aa0 <WIZCHIP_READ_BUF>
   ptr += len;
 8018e62:	89fa      	ldrh	r2, [r7, #14]
 8018e64:	88bb      	ldrh	r3, [r7, #4]
 8018e66:	4413      	add	r3, r2
 8018e68:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018e6a:	79fb      	ldrb	r3, [r7, #7]
 8018e6c:	009b      	lsls	r3, r3, #2
 8018e6e:	3301      	adds	r3, #1
 8018e70:	00db      	lsls	r3, r3, #3
 8018e72:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8018e76:	461a      	mov	r2, r3
 8018e78:	89fb      	ldrh	r3, [r7, #14]
 8018e7a:	0a1b      	lsrs	r3, r3, #8
 8018e7c:	b29b      	uxth	r3, r3
 8018e7e:	b2db      	uxtb	r3, r3
 8018e80:	4619      	mov	r1, r3
 8018e82:	4610      	mov	r0, r2
 8018e84:	f7ff fdbe 	bl	8018a04 <WIZCHIP_WRITE>
 8018e88:	79fb      	ldrb	r3, [r7, #7]
 8018e8a:	009b      	lsls	r3, r3, #2
 8018e8c:	3301      	adds	r3, #1
 8018e8e:	00db      	lsls	r3, r3, #3
 8018e90:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8018e94:	461a      	mov	r2, r3
 8018e96:	89fb      	ldrh	r3, [r7, #14]
 8018e98:	b2db      	uxtb	r3, r3
 8018e9a:	4619      	mov	r1, r3
 8018e9c:	4610      	mov	r0, r2
 8018e9e:	f7ff fdb1 	bl	8018a04 <WIZCHIP_WRITE>
 8018ea2:	e000      	b.n	8018ea6 <wiz_recv_data+0xae>
   if(len == 0) return;
 8018ea4:	bf00      	nop
}
 8018ea6:	3714      	adds	r7, #20
 8018ea8:	46bd      	mov	sp, r7
 8018eaa:	bd90      	pop	{r4, r7, pc}

08018eac <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018eac:	b590      	push	{r4, r7, lr}
 8018eae:	b085      	sub	sp, #20
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	460a      	mov	r2, r1
 8018eb6:	71fb      	strb	r3, [r7, #7]
 8018eb8:	4613      	mov	r3, r2
 8018eba:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018ec0:	79fb      	ldrb	r3, [r7, #7]
 8018ec2:	009b      	lsls	r3, r3, #2
 8018ec4:	3301      	adds	r3, #1
 8018ec6:	00db      	lsls	r3, r3, #3
 8018ec8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8018ecc:	4618      	mov	r0, r3
 8018ece:	f7ff fd4d 	bl	801896c <WIZCHIP_READ>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	021b      	lsls	r3, r3, #8
 8018ed6:	b29c      	uxth	r4, r3
 8018ed8:	79fb      	ldrb	r3, [r7, #7]
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	3301      	adds	r3, #1
 8018ede:	00db      	lsls	r3, r3, #3
 8018ee0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7ff fd41 	bl	801896c <WIZCHIP_READ>
 8018eea:	4603      	mov	r3, r0
 8018eec:	4423      	add	r3, r4
 8018eee:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8018ef0:	89fa      	ldrh	r2, [r7, #14]
 8018ef2:	88bb      	ldrh	r3, [r7, #4]
 8018ef4:	4413      	add	r3, r2
 8018ef6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8018ef8:	79fb      	ldrb	r3, [r7, #7]
 8018efa:	009b      	lsls	r3, r3, #2
 8018efc:	3301      	adds	r3, #1
 8018efe:	00db      	lsls	r3, r3, #3
 8018f00:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8018f04:	461a      	mov	r2, r3
 8018f06:	89fb      	ldrh	r3, [r7, #14]
 8018f08:	0a1b      	lsrs	r3, r3, #8
 8018f0a:	b29b      	uxth	r3, r3
 8018f0c:	b2db      	uxtb	r3, r3
 8018f0e:	4619      	mov	r1, r3
 8018f10:	4610      	mov	r0, r2
 8018f12:	f7ff fd77 	bl	8018a04 <WIZCHIP_WRITE>
 8018f16:	79fb      	ldrb	r3, [r7, #7]
 8018f18:	009b      	lsls	r3, r3, #2
 8018f1a:	3301      	adds	r3, #1
 8018f1c:	00db      	lsls	r3, r3, #3
 8018f1e:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8018f22:	461a      	mov	r2, r3
 8018f24:	89fb      	ldrh	r3, [r7, #14]
 8018f26:	b2db      	uxtb	r3, r3
 8018f28:	4619      	mov	r1, r3
 8018f2a:	4610      	mov	r0, r2
 8018f2c:	f7ff fd6a 	bl	8018a04 <WIZCHIP_WRITE>
}
 8018f30:	bf00      	nop
 8018f32:	3714      	adds	r7, #20
 8018f34:	46bd      	mov	sp, r7
 8018f36:	bd90      	pop	{r4, r7, pc}

08018f38 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018f38:	b590      	push	{r4, r7, lr}
 8018f3a:	b085      	sub	sp, #20
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	4604      	mov	r4, r0
 8018f40:	4608      	mov	r0, r1
 8018f42:	4611      	mov	r1, r2
 8018f44:	461a      	mov	r2, r3
 8018f46:	4623      	mov	r3, r4
 8018f48:	71fb      	strb	r3, [r7, #7]
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	71bb      	strb	r3, [r7, #6]
 8018f4e:	460b      	mov	r3, r1
 8018f50:	80bb      	strh	r3, [r7, #4]
 8018f52:	4613      	mov	r3, r2
 8018f54:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018f56:	79fb      	ldrb	r3, [r7, #7]
 8018f58:	2b08      	cmp	r3, #8
 8018f5a:	d902      	bls.n	8018f62 <socket+0x2a>
 8018f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f60:	e0f0      	b.n	8019144 <socket+0x20c>
	switch(protocol)
 8018f62:	79bb      	ldrb	r3, [r7, #6]
 8018f64:	2b01      	cmp	r3, #1
 8018f66:	d005      	beq.n	8018f74 <socket+0x3c>
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	dd11      	ble.n	8018f90 <socket+0x58>
 8018f6c:	3b02      	subs	r3, #2
 8018f6e:	2b02      	cmp	r3, #2
 8018f70:	d80e      	bhi.n	8018f90 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8018f72:	e011      	b.n	8018f98 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018f74:	f107 030c 	add.w	r3, r7, #12
 8018f78:	2204      	movs	r2, #4
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8018f80:	f7ff fd8e 	bl	8018aa0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d105      	bne.n	8018f96 <socket+0x5e>
 8018f8a:	f06f 0302 	mvn.w	r3, #2
 8018f8e:	e0d9      	b.n	8019144 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8018f90:	f06f 0304 	mvn.w	r3, #4
 8018f94:	e0d6      	b.n	8019144 <socket+0x20c>
	    break;
 8018f96:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018f98:	78fb      	ldrb	r3, [r7, #3]
 8018f9a:	f003 0304 	and.w	r3, r3, #4
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d002      	beq.n	8018fa8 <socket+0x70>
 8018fa2:	f06f 0305 	mvn.w	r3, #5
 8018fa6:	e0cd      	b.n	8019144 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018fa8:	78fb      	ldrb	r3, [r7, #3]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d028      	beq.n	8019000 <socket+0xc8>
	{
   	switch(protocol)
 8018fae:	79bb      	ldrb	r3, [r7, #6]
 8018fb0:	2b01      	cmp	r3, #1
 8018fb2:	d002      	beq.n	8018fba <socket+0x82>
 8018fb4:	2b02      	cmp	r3, #2
 8018fb6:	d008      	beq.n	8018fca <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018fb8:	e022      	b.n	8019000 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018fba:	78fb      	ldrb	r3, [r7, #3]
 8018fbc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d11a      	bne.n	8018ffa <socket+0xc2>
 8018fc4:	f06f 0305 	mvn.w	r3, #5
 8018fc8:	e0bc      	b.n	8019144 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8018fca:	78fb      	ldrb	r3, [r7, #3]
 8018fcc:	f003 0320 	and.w	r3, r3, #32
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d006      	beq.n	8018fe2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8018fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	db02      	blt.n	8018fe2 <socket+0xaa>
 8018fdc:	f06f 0305 	mvn.w	r3, #5
 8018fe0:	e0b0      	b.n	8019144 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8018fe2:	78fb      	ldrb	r3, [r7, #3]
 8018fe4:	f003 0310 	and.w	r3, r3, #16
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d008      	beq.n	8018ffe <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8018fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	db04      	blt.n	8018ffe <socket+0xc6>
 8018ff4:	f06f 0305 	mvn.w	r3, #5
 8018ff8:	e0a4      	b.n	8019144 <socket+0x20c>
   	      break;
 8018ffa:	bf00      	nop
 8018ffc:	e000      	b.n	8019000 <socket+0xc8>
   	      break;
 8018ffe:	bf00      	nop
   	}
   }
	close(sn);
 8019000:	79fb      	ldrb	r3, [r7, #7]
 8019002:	4618      	mov	r0, r3
 8019004:	f000 f8ac 	bl	8019160 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8019008:	79fb      	ldrb	r3, [r7, #7]
 801900a:	009b      	lsls	r3, r3, #2
 801900c:	3301      	adds	r3, #1
 801900e:	00db      	lsls	r3, r3, #3
 8019010:	4618      	mov	r0, r3
 8019012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019016:	f023 030f 	bic.w	r3, r3, #15
 801901a:	b25a      	sxtb	r2, r3
 801901c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019020:	4313      	orrs	r3, r2
 8019022:	b25b      	sxtb	r3, r3
 8019024:	b2db      	uxtb	r3, r3
 8019026:	4619      	mov	r1, r3
 8019028:	f7ff fcec 	bl	8018a04 <WIZCHIP_WRITE>
    #endif
	if(!port)
 801902c:	88bb      	ldrh	r3, [r7, #4]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d110      	bne.n	8019054 <socket+0x11c>
	{
	   port = sock_any_port++;
 8019032:	4b46      	ldr	r3, [pc, #280]	@ (801914c <socket+0x214>)
 8019034:	881b      	ldrh	r3, [r3, #0]
 8019036:	1c5a      	adds	r2, r3, #1
 8019038:	b291      	uxth	r1, r2
 801903a:	4a44      	ldr	r2, [pc, #272]	@ (801914c <socket+0x214>)
 801903c:	8011      	strh	r1, [r2, #0]
 801903e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8019040:	4b42      	ldr	r3, [pc, #264]	@ (801914c <socket+0x214>)
 8019042:	881b      	ldrh	r3, [r3, #0]
 8019044:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8019048:	4293      	cmp	r3, r2
 801904a:	d103      	bne.n	8019054 <socket+0x11c>
 801904c:	4b3f      	ldr	r3, [pc, #252]	@ (801914c <socket+0x214>)
 801904e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8019052:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8019054:	79fb      	ldrb	r3, [r7, #7]
 8019056:	009b      	lsls	r3, r3, #2
 8019058:	3301      	adds	r3, #1
 801905a:	00db      	lsls	r3, r3, #3
 801905c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8019060:	461a      	mov	r2, r3
 8019062:	88bb      	ldrh	r3, [r7, #4]
 8019064:	0a1b      	lsrs	r3, r3, #8
 8019066:	b29b      	uxth	r3, r3
 8019068:	b2db      	uxtb	r3, r3
 801906a:	4619      	mov	r1, r3
 801906c:	4610      	mov	r0, r2
 801906e:	f7ff fcc9 	bl	8018a04 <WIZCHIP_WRITE>
 8019072:	79fb      	ldrb	r3, [r7, #7]
 8019074:	009b      	lsls	r3, r3, #2
 8019076:	3301      	adds	r3, #1
 8019078:	00db      	lsls	r3, r3, #3
 801907a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801907e:	461a      	mov	r2, r3
 8019080:	88bb      	ldrh	r3, [r7, #4]
 8019082:	b2db      	uxtb	r3, r3
 8019084:	4619      	mov	r1, r3
 8019086:	4610      	mov	r0, r2
 8019088:	f7ff fcbc 	bl	8018a04 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 801908c:	79fb      	ldrb	r3, [r7, #7]
 801908e:	009b      	lsls	r3, r3, #2
 8019090:	3301      	adds	r3, #1
 8019092:	00db      	lsls	r3, r3, #3
 8019094:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019098:	2101      	movs	r1, #1
 801909a:	4618      	mov	r0, r3
 801909c:	f7ff fcb2 	bl	8018a04 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80190a0:	bf00      	nop
 80190a2:	79fb      	ldrb	r3, [r7, #7]
 80190a4:	009b      	lsls	r3, r3, #2
 80190a6:	3301      	adds	r3, #1
 80190a8:	00db      	lsls	r3, r3, #3
 80190aa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80190ae:	4618      	mov	r0, r3
 80190b0:	f7ff fc5c 	bl	801896c <WIZCHIP_READ>
 80190b4:	4603      	mov	r3, r0
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d1f3      	bne.n	80190a2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80190ba:	79fb      	ldrb	r3, [r7, #7]
 80190bc:	2201      	movs	r2, #1
 80190be:	fa02 f303 	lsl.w	r3, r2, r3
 80190c2:	b21b      	sxth	r3, r3
 80190c4:	43db      	mvns	r3, r3
 80190c6:	b21a      	sxth	r2, r3
 80190c8:	4b21      	ldr	r3, [pc, #132]	@ (8019150 <socket+0x218>)
 80190ca:	881b      	ldrh	r3, [r3, #0]
 80190cc:	b21b      	sxth	r3, r3
 80190ce:	4013      	ands	r3, r2
 80190d0:	b21b      	sxth	r3, r3
 80190d2:	b29a      	uxth	r2, r3
 80190d4:	4b1e      	ldr	r3, [pc, #120]	@ (8019150 <socket+0x218>)
 80190d6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80190d8:	78fb      	ldrb	r3, [r7, #3]
 80190da:	f003 0201 	and.w	r2, r3, #1
 80190de:	79fb      	ldrb	r3, [r7, #7]
 80190e0:	fa02 f303 	lsl.w	r3, r2, r3
 80190e4:	b21a      	sxth	r2, r3
 80190e6:	4b1a      	ldr	r3, [pc, #104]	@ (8019150 <socket+0x218>)
 80190e8:	881b      	ldrh	r3, [r3, #0]
 80190ea:	b21b      	sxth	r3, r3
 80190ec:	4313      	orrs	r3, r2
 80190ee:	b21b      	sxth	r3, r3
 80190f0:	b29a      	uxth	r2, r3
 80190f2:	4b17      	ldr	r3, [pc, #92]	@ (8019150 <socket+0x218>)
 80190f4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80190f6:	79fb      	ldrb	r3, [r7, #7]
 80190f8:	2201      	movs	r2, #1
 80190fa:	fa02 f303 	lsl.w	r3, r2, r3
 80190fe:	b21b      	sxth	r3, r3
 8019100:	43db      	mvns	r3, r3
 8019102:	b21a      	sxth	r2, r3
 8019104:	4b13      	ldr	r3, [pc, #76]	@ (8019154 <socket+0x21c>)
 8019106:	881b      	ldrh	r3, [r3, #0]
 8019108:	b21b      	sxth	r3, r3
 801910a:	4013      	ands	r3, r2
 801910c:	b21b      	sxth	r3, r3
 801910e:	b29a      	uxth	r2, r3
 8019110:	4b10      	ldr	r3, [pc, #64]	@ (8019154 <socket+0x21c>)
 8019112:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8019114:	79fb      	ldrb	r3, [r7, #7]
 8019116:	4a10      	ldr	r2, [pc, #64]	@ (8019158 <socket+0x220>)
 8019118:	2100      	movs	r1, #0
 801911a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 801911e:	79fb      	ldrb	r3, [r7, #7]
 8019120:	4a0e      	ldr	r2, [pc, #56]	@ (801915c <socket+0x224>)
 8019122:	2100      	movs	r1, #0
 8019124:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8019126:	bf00      	nop
 8019128:	79fb      	ldrb	r3, [r7, #7]
 801912a:	009b      	lsls	r3, r3, #2
 801912c:	3301      	adds	r3, #1
 801912e:	00db      	lsls	r3, r3, #3
 8019130:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8019134:	4618      	mov	r0, r3
 8019136:	f7ff fc19 	bl	801896c <WIZCHIP_READ>
 801913a:	4603      	mov	r3, r0
 801913c:	2b00      	cmp	r3, #0
 801913e:	d0f3      	beq.n	8019128 <socket+0x1f0>
   return (int8_t)sn;
 8019140:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8019144:	4618      	mov	r0, r3
 8019146:	3714      	adds	r7, #20
 8019148:	46bd      	mov	sp, r7
 801914a:	bd90      	pop	{r4, r7, pc}
 801914c:	200000c2 	.word	0x200000c2
 8019150:	20000984 	.word	0x20000984
 8019154:	20000986 	.word	0x20000986
 8019158:	20000988 	.word	0x20000988
 801915c:	20000998 	.word	0x20000998

08019160 <close>:

int8_t close(uint8_t sn)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b082      	sub	sp, #8
 8019164:	af00      	add	r7, sp, #0
 8019166:	4603      	mov	r3, r0
 8019168:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 801916a:	79fb      	ldrb	r3, [r7, #7]
 801916c:	2b08      	cmp	r3, #8
 801916e:	d902      	bls.n	8019176 <close+0x16>
 8019170:	f04f 33ff 	mov.w	r3, #4294967295
 8019174:	e055      	b.n	8019222 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8019176:	79fb      	ldrb	r3, [r7, #7]
 8019178:	009b      	lsls	r3, r3, #2
 801917a:	3301      	adds	r3, #1
 801917c:	00db      	lsls	r3, r3, #3
 801917e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019182:	2110      	movs	r1, #16
 8019184:	4618      	mov	r0, r3
 8019186:	f7ff fc3d 	bl	8018a04 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 801918a:	bf00      	nop
 801918c:	79fb      	ldrb	r3, [r7, #7]
 801918e:	009b      	lsls	r3, r3, #2
 8019190:	3301      	adds	r3, #1
 8019192:	00db      	lsls	r3, r3, #3
 8019194:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019198:	4618      	mov	r0, r3
 801919a:	f7ff fbe7 	bl	801896c <WIZCHIP_READ>
 801919e:	4603      	mov	r3, r0
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d1f3      	bne.n	801918c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80191a4:	79fb      	ldrb	r3, [r7, #7]
 80191a6:	009b      	lsls	r3, r3, #2
 80191a8:	3301      	adds	r3, #1
 80191aa:	00db      	lsls	r3, r3, #3
 80191ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80191b0:	211f      	movs	r1, #31
 80191b2:	4618      	mov	r0, r3
 80191b4:	f7ff fc26 	bl	8018a04 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80191b8:	79fb      	ldrb	r3, [r7, #7]
 80191ba:	2201      	movs	r2, #1
 80191bc:	fa02 f303 	lsl.w	r3, r2, r3
 80191c0:	b21b      	sxth	r3, r3
 80191c2:	43db      	mvns	r3, r3
 80191c4:	b21a      	sxth	r2, r3
 80191c6:	4b19      	ldr	r3, [pc, #100]	@ (801922c <close+0xcc>)
 80191c8:	881b      	ldrh	r3, [r3, #0]
 80191ca:	b21b      	sxth	r3, r3
 80191cc:	4013      	ands	r3, r2
 80191ce:	b21b      	sxth	r3, r3
 80191d0:	b29a      	uxth	r2, r3
 80191d2:	4b16      	ldr	r3, [pc, #88]	@ (801922c <close+0xcc>)
 80191d4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80191d6:	79fb      	ldrb	r3, [r7, #7]
 80191d8:	2201      	movs	r2, #1
 80191da:	fa02 f303 	lsl.w	r3, r2, r3
 80191de:	b21b      	sxth	r3, r3
 80191e0:	43db      	mvns	r3, r3
 80191e2:	b21a      	sxth	r2, r3
 80191e4:	4b12      	ldr	r3, [pc, #72]	@ (8019230 <close+0xd0>)
 80191e6:	881b      	ldrh	r3, [r3, #0]
 80191e8:	b21b      	sxth	r3, r3
 80191ea:	4013      	ands	r3, r2
 80191ec:	b21b      	sxth	r3, r3
 80191ee:	b29a      	uxth	r2, r3
 80191f0:	4b0f      	ldr	r3, [pc, #60]	@ (8019230 <close+0xd0>)
 80191f2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80191f4:	79fb      	ldrb	r3, [r7, #7]
 80191f6:	4a0f      	ldr	r2, [pc, #60]	@ (8019234 <close+0xd4>)
 80191f8:	2100      	movs	r1, #0
 80191fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80191fe:	79fb      	ldrb	r3, [r7, #7]
 8019200:	4a0d      	ldr	r2, [pc, #52]	@ (8019238 <close+0xd8>)
 8019202:	2100      	movs	r1, #0
 8019204:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8019206:	bf00      	nop
 8019208:	79fb      	ldrb	r3, [r7, #7]
 801920a:	009b      	lsls	r3, r3, #2
 801920c:	3301      	adds	r3, #1
 801920e:	00db      	lsls	r3, r3, #3
 8019210:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8019214:	4618      	mov	r0, r3
 8019216:	f7ff fba9 	bl	801896c <WIZCHIP_READ>
 801921a:	4603      	mov	r3, r0
 801921c:	2b00      	cmp	r3, #0
 801921e:	d1f3      	bne.n	8019208 <close+0xa8>
	return SOCK_OK;
 8019220:	2301      	movs	r3, #1
}
 8019222:	4618      	mov	r0, r3
 8019224:	3708      	adds	r7, #8
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}
 801922a:	bf00      	nop
 801922c:	20000984 	.word	0x20000984
 8019230:	20000986 	.word	0x20000986
 8019234:	20000988 	.word	0x20000988
 8019238:	20000998 	.word	0x20000998

0801923c <listen>:

int8_t listen(uint8_t sn)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	4603      	mov	r3, r0
 8019244:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8019246:	79fb      	ldrb	r3, [r7, #7]
 8019248:	2b08      	cmp	r3, #8
 801924a:	d902      	bls.n	8019252 <listen+0x16>
 801924c:	f04f 33ff 	mov.w	r3, #4294967295
 8019250:	e049      	b.n	80192e6 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019252:	79fb      	ldrb	r3, [r7, #7]
 8019254:	009b      	lsls	r3, r3, #2
 8019256:	3301      	adds	r3, #1
 8019258:	00db      	lsls	r3, r3, #3
 801925a:	4618      	mov	r0, r3
 801925c:	f7ff fb86 	bl	801896c <WIZCHIP_READ>
 8019260:	4603      	mov	r3, r0
 8019262:	f003 030f 	and.w	r3, r3, #15
 8019266:	2b01      	cmp	r3, #1
 8019268:	d002      	beq.n	8019270 <listen+0x34>
 801926a:	f06f 0304 	mvn.w	r3, #4
 801926e:	e03a      	b.n	80192e6 <listen+0xaa>
	CHECK_SOCKINIT();
 8019270:	79fb      	ldrb	r3, [r7, #7]
 8019272:	009b      	lsls	r3, r3, #2
 8019274:	3301      	adds	r3, #1
 8019276:	00db      	lsls	r3, r3, #3
 8019278:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801927c:	4618      	mov	r0, r3
 801927e:	f7ff fb75 	bl	801896c <WIZCHIP_READ>
 8019282:	4603      	mov	r3, r0
 8019284:	2b13      	cmp	r3, #19
 8019286:	d002      	beq.n	801928e <listen+0x52>
 8019288:	f06f 0302 	mvn.w	r3, #2
 801928c:	e02b      	b.n	80192e6 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 801928e:	79fb      	ldrb	r3, [r7, #7]
 8019290:	009b      	lsls	r3, r3, #2
 8019292:	3301      	adds	r3, #1
 8019294:	00db      	lsls	r3, r3, #3
 8019296:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801929a:	2102      	movs	r1, #2
 801929c:	4618      	mov	r0, r3
 801929e:	f7ff fbb1 	bl	8018a04 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80192a2:	bf00      	nop
 80192a4:	79fb      	ldrb	r3, [r7, #7]
 80192a6:	009b      	lsls	r3, r3, #2
 80192a8:	3301      	adds	r3, #1
 80192aa:	00db      	lsls	r3, r3, #3
 80192ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80192b0:	4618      	mov	r0, r3
 80192b2:	f7ff fb5b 	bl	801896c <WIZCHIP_READ>
 80192b6:	4603      	mov	r3, r0
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d1f3      	bne.n	80192a4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80192bc:	e006      	b.n	80192cc <listen+0x90>
   {
         close(sn);
 80192be:	79fb      	ldrb	r3, [r7, #7]
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7ff ff4d 	bl	8019160 <close>
         return SOCKERR_SOCKCLOSED;
 80192c6:	f06f 0303 	mvn.w	r3, #3
 80192ca:	e00c      	b.n	80192e6 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80192cc:	79fb      	ldrb	r3, [r7, #7]
 80192ce:	009b      	lsls	r3, r3, #2
 80192d0:	3301      	adds	r3, #1
 80192d2:	00db      	lsls	r3, r3, #3
 80192d4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80192d8:	4618      	mov	r0, r3
 80192da:	f7ff fb47 	bl	801896c <WIZCHIP_READ>
 80192de:	4603      	mov	r3, r0
 80192e0:	2b14      	cmp	r3, #20
 80192e2:	d1ec      	bne.n	80192be <listen+0x82>
   }
   return SOCK_OK;
 80192e4:	2301      	movs	r3, #1
}
 80192e6:	4618      	mov	r0, r3
 80192e8:	3708      	adds	r7, #8
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
	...

080192f0 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b084      	sub	sp, #16
 80192f4:	af00      	add	r7, sp, #0
 80192f6:	4603      	mov	r3, r0
 80192f8:	6039      	str	r1, [r7, #0]
 80192fa:	71fb      	strb	r3, [r7, #7]
 80192fc:	4613      	mov	r3, r2
 80192fe:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8019300:	79fb      	ldrb	r3, [r7, #7]
 8019302:	2b08      	cmp	r3, #8
 8019304:	d902      	bls.n	801930c <connect+0x1c>
 8019306:	f04f 33ff 	mov.w	r3, #4294967295
 801930a:	e0c6      	b.n	801949a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801930c:	79fb      	ldrb	r3, [r7, #7]
 801930e:	009b      	lsls	r3, r3, #2
 8019310:	3301      	adds	r3, #1
 8019312:	00db      	lsls	r3, r3, #3
 8019314:	4618      	mov	r0, r3
 8019316:	f7ff fb29 	bl	801896c <WIZCHIP_READ>
 801931a:	4603      	mov	r3, r0
 801931c:	f003 030f 	and.w	r3, r3, #15
 8019320:	2b01      	cmp	r3, #1
 8019322:	d002      	beq.n	801932a <connect+0x3a>
 8019324:	f06f 0304 	mvn.w	r3, #4
 8019328:	e0b7      	b.n	801949a <connect+0x1aa>
   CHECK_SOCKINIT();
 801932a:	79fb      	ldrb	r3, [r7, #7]
 801932c:	009b      	lsls	r3, r3, #2
 801932e:	3301      	adds	r3, #1
 8019330:	00db      	lsls	r3, r3, #3
 8019332:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8019336:	4618      	mov	r0, r3
 8019338:	f7ff fb18 	bl	801896c <WIZCHIP_READ>
 801933c:	4603      	mov	r3, r0
 801933e:	2b13      	cmp	r3, #19
 8019340:	d002      	beq.n	8019348 <connect+0x58>
 8019342:	f06f 0302 	mvn.w	r3, #2
 8019346:	e0a8      	b.n	801949a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	781b      	ldrb	r3, [r3, #0]
 801934c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	021b      	lsls	r3, r3, #8
 8019352:	683a      	ldr	r2, [r7, #0]
 8019354:	3201      	adds	r2, #1
 8019356:	7812      	ldrb	r2, [r2, #0]
 8019358:	4413      	add	r3, r2
 801935a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	021b      	lsls	r3, r3, #8
 8019360:	683a      	ldr	r2, [r7, #0]
 8019362:	3202      	adds	r2, #2
 8019364:	7812      	ldrb	r2, [r2, #0]
 8019366:	4413      	add	r3, r2
 8019368:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	021b      	lsls	r3, r3, #8
 801936e:	683a      	ldr	r2, [r7, #0]
 8019370:	3203      	adds	r2, #3
 8019372:	7812      	ldrb	r2, [r2, #0]
 8019374:	4413      	add	r3, r2
 8019376:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801937e:	d002      	beq.n	8019386 <connect+0x96>
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d102      	bne.n	801938c <connect+0x9c>
 8019386:	f06f 030b 	mvn.w	r3, #11
 801938a:	e086      	b.n	801949a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 801938c:	88bb      	ldrh	r3, [r7, #4]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d102      	bne.n	8019398 <connect+0xa8>
 8019392:	f06f 030a 	mvn.w	r3, #10
 8019396:	e080      	b.n	801949a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8019398:	79fb      	ldrb	r3, [r7, #7]
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	3301      	adds	r3, #1
 801939e:	00db      	lsls	r3, r3, #3
 80193a0:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80193a4:	2204      	movs	r2, #4
 80193a6:	6839      	ldr	r1, [r7, #0]
 80193a8:	4618      	mov	r0, r3
 80193aa:	f7ff fbd9 	bl	8018b60 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80193ae:	79fb      	ldrb	r3, [r7, #7]
 80193b0:	009b      	lsls	r3, r3, #2
 80193b2:	3301      	adds	r3, #1
 80193b4:	00db      	lsls	r3, r3, #3
 80193b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80193ba:	461a      	mov	r2, r3
 80193bc:	88bb      	ldrh	r3, [r7, #4]
 80193be:	0a1b      	lsrs	r3, r3, #8
 80193c0:	b29b      	uxth	r3, r3
 80193c2:	b2db      	uxtb	r3, r3
 80193c4:	4619      	mov	r1, r3
 80193c6:	4610      	mov	r0, r2
 80193c8:	f7ff fb1c 	bl	8018a04 <WIZCHIP_WRITE>
 80193cc:	79fb      	ldrb	r3, [r7, #7]
 80193ce:	009b      	lsls	r3, r3, #2
 80193d0:	3301      	adds	r3, #1
 80193d2:	00db      	lsls	r3, r3, #3
 80193d4:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80193d8:	461a      	mov	r2, r3
 80193da:	88bb      	ldrh	r3, [r7, #4]
 80193dc:	b2db      	uxtb	r3, r3
 80193de:	4619      	mov	r1, r3
 80193e0:	4610      	mov	r0, r2
 80193e2:	f7ff fb0f 	bl	8018a04 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80193e6:	79fb      	ldrb	r3, [r7, #7]
 80193e8:	009b      	lsls	r3, r3, #2
 80193ea:	3301      	adds	r3, #1
 80193ec:	00db      	lsls	r3, r3, #3
 80193ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80193f2:	2104      	movs	r1, #4
 80193f4:	4618      	mov	r0, r3
 80193f6:	f7ff fb05 	bl	8018a04 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80193fa:	bf00      	nop
 80193fc:	79fb      	ldrb	r3, [r7, #7]
 80193fe:	009b      	lsls	r3, r3, #2
 8019400:	3301      	adds	r3, #1
 8019402:	00db      	lsls	r3, r3, #3
 8019404:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019408:	4618      	mov	r0, r3
 801940a:	f7ff faaf 	bl	801896c <WIZCHIP_READ>
 801940e:	4603      	mov	r3, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d1f3      	bne.n	80193fc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019414:	4b23      	ldr	r3, [pc, #140]	@ (80194a4 <connect+0x1b4>)
 8019416:	881b      	ldrh	r3, [r3, #0]
 8019418:	461a      	mov	r2, r3
 801941a:	79fb      	ldrb	r3, [r7, #7]
 801941c:	fa42 f303 	asr.w	r3, r2, r3
 8019420:	f003 0301 	and.w	r3, r3, #1
 8019424:	2b00      	cmp	r3, #0
 8019426:	d02b      	beq.n	8019480 <connect+0x190>
 8019428:	2300      	movs	r3, #0
 801942a:	e036      	b.n	801949a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801942c:	79fb      	ldrb	r3, [r7, #7]
 801942e:	009b      	lsls	r3, r3, #2
 8019430:	3301      	adds	r3, #1
 8019432:	00db      	lsls	r3, r3, #3
 8019434:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8019438:	4618      	mov	r0, r3
 801943a:	f7ff fa97 	bl	801896c <WIZCHIP_READ>
 801943e:	4603      	mov	r3, r0
 8019440:	f003 0308 	and.w	r3, r3, #8
 8019444:	2b00      	cmp	r3, #0
 8019446:	d00c      	beq.n	8019462 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8019448:	79fb      	ldrb	r3, [r7, #7]
 801944a:	009b      	lsls	r3, r3, #2
 801944c:	3301      	adds	r3, #1
 801944e:	00db      	lsls	r3, r3, #3
 8019450:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8019454:	2108      	movs	r1, #8
 8019456:	4618      	mov	r0, r3
 8019458:	f7ff fad4 	bl	8018a04 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801945c:	f06f 030c 	mvn.w	r3, #12
 8019460:	e01b      	b.n	801949a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8019462:	79fb      	ldrb	r3, [r7, #7]
 8019464:	009b      	lsls	r3, r3, #2
 8019466:	3301      	adds	r3, #1
 8019468:	00db      	lsls	r3, r3, #3
 801946a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801946e:	4618      	mov	r0, r3
 8019470:	f7ff fa7c 	bl	801896c <WIZCHIP_READ>
 8019474:	4603      	mov	r3, r0
 8019476:	2b00      	cmp	r3, #0
 8019478:	d102      	bne.n	8019480 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 801947a:	f06f 0303 	mvn.w	r3, #3
 801947e:	e00c      	b.n	801949a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8019480:	79fb      	ldrb	r3, [r7, #7]
 8019482:	009b      	lsls	r3, r3, #2
 8019484:	3301      	adds	r3, #1
 8019486:	00db      	lsls	r3, r3, #3
 8019488:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801948c:	4618      	mov	r0, r3
 801948e:	f7ff fa6d 	bl	801896c <WIZCHIP_READ>
 8019492:	4603      	mov	r3, r0
 8019494:	2b17      	cmp	r3, #23
 8019496:	d1c9      	bne.n	801942c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8019498:	2301      	movs	r3, #1
}
 801949a:	4618      	mov	r0, r3
 801949c:	3710      	adds	r7, #16
 801949e:	46bd      	mov	sp, r7
 80194a0:	bd80      	pop	{r7, pc}
 80194a2:	bf00      	nop
 80194a4:	20000984 	.word	0x20000984

080194a8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b082      	sub	sp, #8
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	4603      	mov	r3, r0
 80194b0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80194b2:	79fb      	ldrb	r3, [r7, #7]
 80194b4:	2b08      	cmp	r3, #8
 80194b6:	d902      	bls.n	80194be <disconnect+0x16>
 80194b8:	f04f 33ff 	mov.w	r3, #4294967295
 80194bc:	e062      	b.n	8019584 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80194be:	79fb      	ldrb	r3, [r7, #7]
 80194c0:	009b      	lsls	r3, r3, #2
 80194c2:	3301      	adds	r3, #1
 80194c4:	00db      	lsls	r3, r3, #3
 80194c6:	4618      	mov	r0, r3
 80194c8:	f7ff fa50 	bl	801896c <WIZCHIP_READ>
 80194cc:	4603      	mov	r3, r0
 80194ce:	f003 030f 	and.w	r3, r3, #15
 80194d2:	2b01      	cmp	r3, #1
 80194d4:	d002      	beq.n	80194dc <disconnect+0x34>
 80194d6:	f06f 0304 	mvn.w	r3, #4
 80194da:	e053      	b.n	8019584 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80194dc:	79fb      	ldrb	r3, [r7, #7]
 80194de:	009b      	lsls	r3, r3, #2
 80194e0:	3301      	adds	r3, #1
 80194e2:	00db      	lsls	r3, r3, #3
 80194e4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80194e8:	2108      	movs	r1, #8
 80194ea:	4618      	mov	r0, r3
 80194ec:	f7ff fa8a 	bl	8018a04 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80194f0:	bf00      	nop
 80194f2:	79fb      	ldrb	r3, [r7, #7]
 80194f4:	009b      	lsls	r3, r3, #2
 80194f6:	3301      	adds	r3, #1
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80194fe:	4618      	mov	r0, r3
 8019500:	f7ff fa34 	bl	801896c <WIZCHIP_READ>
 8019504:	4603      	mov	r3, r0
 8019506:	2b00      	cmp	r3, #0
 8019508:	d1f3      	bne.n	80194f2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 801950a:	79fb      	ldrb	r3, [r7, #7]
 801950c:	2201      	movs	r2, #1
 801950e:	fa02 f303 	lsl.w	r3, r2, r3
 8019512:	b21b      	sxth	r3, r3
 8019514:	43db      	mvns	r3, r3
 8019516:	b21a      	sxth	r2, r3
 8019518:	4b1c      	ldr	r3, [pc, #112]	@ (801958c <disconnect+0xe4>)
 801951a:	881b      	ldrh	r3, [r3, #0]
 801951c:	b21b      	sxth	r3, r3
 801951e:	4013      	ands	r3, r2
 8019520:	b21b      	sxth	r3, r3
 8019522:	b29a      	uxth	r2, r3
 8019524:	4b19      	ldr	r3, [pc, #100]	@ (801958c <disconnect+0xe4>)
 8019526:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019528:	4b19      	ldr	r3, [pc, #100]	@ (8019590 <disconnect+0xe8>)
 801952a:	881b      	ldrh	r3, [r3, #0]
 801952c:	461a      	mov	r2, r3
 801952e:	79fb      	ldrb	r3, [r7, #7]
 8019530:	fa42 f303 	asr.w	r3, r2, r3
 8019534:	f003 0301 	and.w	r3, r3, #1
 8019538:	2b00      	cmp	r3, #0
 801953a:	d016      	beq.n	801956a <disconnect+0xc2>
 801953c:	2300      	movs	r3, #0
 801953e:	e021      	b.n	8019584 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8019540:	79fb      	ldrb	r3, [r7, #7]
 8019542:	009b      	lsls	r3, r3, #2
 8019544:	3301      	adds	r3, #1
 8019546:	00db      	lsls	r3, r3, #3
 8019548:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801954c:	4618      	mov	r0, r3
 801954e:	f7ff fa0d 	bl	801896c <WIZCHIP_READ>
 8019552:	4603      	mov	r3, r0
 8019554:	f003 0308 	and.w	r3, r3, #8
 8019558:	2b00      	cmp	r3, #0
 801955a:	d006      	beq.n	801956a <disconnect+0xc2>
	   {
	      close(sn);
 801955c:	79fb      	ldrb	r3, [r7, #7]
 801955e:	4618      	mov	r0, r3
 8019560:	f7ff fdfe 	bl	8019160 <close>
	      return SOCKERR_TIMEOUT;
 8019564:	f06f 030c 	mvn.w	r3, #12
 8019568:	e00c      	b.n	8019584 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 801956a:	79fb      	ldrb	r3, [r7, #7]
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	3301      	adds	r3, #1
 8019570:	00db      	lsls	r3, r3, #3
 8019572:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8019576:	4618      	mov	r0, r3
 8019578:	f7ff f9f8 	bl	801896c <WIZCHIP_READ>
 801957c:	4603      	mov	r3, r0
 801957e:	2b00      	cmp	r3, #0
 8019580:	d1de      	bne.n	8019540 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8019582:	2301      	movs	r3, #1
}
 8019584:	4618      	mov	r0, r3
 8019586:	3708      	adds	r7, #8
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}
 801958c:	20000986 	.word	0x20000986
 8019590:	20000984 	.word	0x20000984

08019594 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019594:	b580      	push	{r7, lr}
 8019596:	b084      	sub	sp, #16
 8019598:	af00      	add	r7, sp, #0
 801959a:	4603      	mov	r3, r0
 801959c:	6039      	str	r1, [r7, #0]
 801959e:	71fb      	strb	r3, [r7, #7]
 80195a0:	4613      	mov	r3, r2
 80195a2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80195a4:	2300      	movs	r3, #0
 80195a6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80195a8:	2300      	movs	r3, #0
 80195aa:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80195ac:	79fb      	ldrb	r3, [r7, #7]
 80195ae:	2b08      	cmp	r3, #8
 80195b0:	d902      	bls.n	80195b8 <send+0x24>
 80195b2:	f04f 33ff 	mov.w	r3, #4294967295
 80195b6:	e0dd      	b.n	8019774 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80195b8:	79fb      	ldrb	r3, [r7, #7]
 80195ba:	009b      	lsls	r3, r3, #2
 80195bc:	3301      	adds	r3, #1
 80195be:	00db      	lsls	r3, r3, #3
 80195c0:	4618      	mov	r0, r3
 80195c2:	f7ff f9d3 	bl	801896c <WIZCHIP_READ>
 80195c6:	4603      	mov	r3, r0
 80195c8:	f003 030f 	and.w	r3, r3, #15
 80195cc:	2b01      	cmp	r3, #1
 80195ce:	d002      	beq.n	80195d6 <send+0x42>
 80195d0:	f06f 0304 	mvn.w	r3, #4
 80195d4:	e0ce      	b.n	8019774 <send+0x1e0>
   CHECK_SOCKDATA();
 80195d6:	88bb      	ldrh	r3, [r7, #4]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d102      	bne.n	80195e2 <send+0x4e>
 80195dc:	f06f 030d 	mvn.w	r3, #13
 80195e0:	e0c8      	b.n	8019774 <send+0x1e0>
   tmp = getSn_SR(sn);
 80195e2:	79fb      	ldrb	r3, [r7, #7]
 80195e4:	009b      	lsls	r3, r3, #2
 80195e6:	3301      	adds	r3, #1
 80195e8:	00db      	lsls	r3, r3, #3
 80195ea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7ff f9bc 	bl	801896c <WIZCHIP_READ>
 80195f4:	4603      	mov	r3, r0
 80195f6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80195f8:	7bfb      	ldrb	r3, [r7, #15]
 80195fa:	2b17      	cmp	r3, #23
 80195fc:	d005      	beq.n	801960a <send+0x76>
 80195fe:	7bfb      	ldrb	r3, [r7, #15]
 8019600:	2b1c      	cmp	r3, #28
 8019602:	d002      	beq.n	801960a <send+0x76>
 8019604:	f06f 0306 	mvn.w	r3, #6
 8019608:	e0b4      	b.n	8019774 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 801960a:	4b5c      	ldr	r3, [pc, #368]	@ (801977c <send+0x1e8>)
 801960c:	881b      	ldrh	r3, [r3, #0]
 801960e:	461a      	mov	r2, r3
 8019610:	79fb      	ldrb	r3, [r7, #7]
 8019612:	fa42 f303 	asr.w	r3, r2, r3
 8019616:	f003 0301 	and.w	r3, r3, #1
 801961a:	2b00      	cmp	r3, #0
 801961c:	d039      	beq.n	8019692 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 801961e:	79fb      	ldrb	r3, [r7, #7]
 8019620:	009b      	lsls	r3, r3, #2
 8019622:	3301      	adds	r3, #1
 8019624:	00db      	lsls	r3, r3, #3
 8019626:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801962a:	4618      	mov	r0, r3
 801962c:	f7ff f99e 	bl	801896c <WIZCHIP_READ>
 8019630:	4603      	mov	r3, r0
 8019632:	f003 031f 	and.w	r3, r3, #31
 8019636:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8019638:	7bfb      	ldrb	r3, [r7, #15]
 801963a:	f003 0310 	and.w	r3, r3, #16
 801963e:	2b00      	cmp	r3, #0
 8019640:	d019      	beq.n	8019676 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019642:	79fb      	ldrb	r3, [r7, #7]
 8019644:	009b      	lsls	r3, r3, #2
 8019646:	3301      	adds	r3, #1
 8019648:	00db      	lsls	r3, r3, #3
 801964a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801964e:	2110      	movs	r1, #16
 8019650:	4618      	mov	r0, r3
 8019652:	f7ff f9d7 	bl	8018a04 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8019656:	79fb      	ldrb	r3, [r7, #7]
 8019658:	2201      	movs	r2, #1
 801965a:	fa02 f303 	lsl.w	r3, r2, r3
 801965e:	b21b      	sxth	r3, r3
 8019660:	43db      	mvns	r3, r3
 8019662:	b21a      	sxth	r2, r3
 8019664:	4b45      	ldr	r3, [pc, #276]	@ (801977c <send+0x1e8>)
 8019666:	881b      	ldrh	r3, [r3, #0]
 8019668:	b21b      	sxth	r3, r3
 801966a:	4013      	ands	r3, r2
 801966c:	b21b      	sxth	r3, r3
 801966e:	b29a      	uxth	r2, r3
 8019670:	4b42      	ldr	r3, [pc, #264]	@ (801977c <send+0x1e8>)
 8019672:	801a      	strh	r2, [r3, #0]
 8019674:	e00d      	b.n	8019692 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8019676:	7bfb      	ldrb	r3, [r7, #15]
 8019678:	f003 0308 	and.w	r3, r3, #8
 801967c:	2b00      	cmp	r3, #0
 801967e:	d006      	beq.n	801968e <send+0xfa>
      {
         close(sn);
 8019680:	79fb      	ldrb	r3, [r7, #7]
 8019682:	4618      	mov	r0, r3
 8019684:	f7ff fd6c 	bl	8019160 <close>
         return SOCKERR_TIMEOUT;
 8019688:	f06f 030c 	mvn.w	r3, #12
 801968c:	e072      	b.n	8019774 <send+0x1e0>
      }
      else return SOCK_BUSY;
 801968e:	2300      	movs	r3, #0
 8019690:	e070      	b.n	8019774 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8019692:	79fb      	ldrb	r3, [r7, #7]
 8019694:	009b      	lsls	r3, r3, #2
 8019696:	3301      	adds	r3, #1
 8019698:	00db      	lsls	r3, r3, #3
 801969a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 801969e:	4618      	mov	r0, r3
 80196a0:	f7ff f964 	bl	801896c <WIZCHIP_READ>
 80196a4:	4603      	mov	r3, r0
 80196a6:	029b      	lsls	r3, r3, #10
 80196a8:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80196aa:	88ba      	ldrh	r2, [r7, #4]
 80196ac:	89bb      	ldrh	r3, [r7, #12]
 80196ae:	429a      	cmp	r2, r3
 80196b0:	d901      	bls.n	80196b6 <send+0x122>
 80196b2:	89bb      	ldrh	r3, [r7, #12]
 80196b4:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80196b6:	79fb      	ldrb	r3, [r7, #7]
 80196b8:	4618      	mov	r0, r3
 80196ba:	f7ff fab1 	bl	8018c20 <getSn_TX_FSR>
 80196be:	4603      	mov	r3, r0
 80196c0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80196c2:	79fb      	ldrb	r3, [r7, #7]
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	3301      	adds	r3, #1
 80196c8:	00db      	lsls	r3, r3, #3
 80196ca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7ff f94c 	bl	801896c <WIZCHIP_READ>
 80196d4:	4603      	mov	r3, r0
 80196d6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80196d8:	7bfb      	ldrb	r3, [r7, #15]
 80196da:	2b17      	cmp	r3, #23
 80196dc:	d009      	beq.n	80196f2 <send+0x15e>
 80196de:	7bfb      	ldrb	r3, [r7, #15]
 80196e0:	2b1c      	cmp	r3, #28
 80196e2:	d006      	beq.n	80196f2 <send+0x15e>
      {
         close(sn);
 80196e4:	79fb      	ldrb	r3, [r7, #7]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7ff fd3a 	bl	8019160 <close>
         return SOCKERR_SOCKSTATUS;
 80196ec:	f06f 0306 	mvn.w	r3, #6
 80196f0:	e040      	b.n	8019774 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80196f2:	4b23      	ldr	r3, [pc, #140]	@ (8019780 <send+0x1ec>)
 80196f4:	881b      	ldrh	r3, [r3, #0]
 80196f6:	461a      	mov	r2, r3
 80196f8:	79fb      	ldrb	r3, [r7, #7]
 80196fa:	fa42 f303 	asr.w	r3, r2, r3
 80196fe:	f003 0301 	and.w	r3, r3, #1
 8019702:	2b00      	cmp	r3, #0
 8019704:	d005      	beq.n	8019712 <send+0x17e>
 8019706:	88ba      	ldrh	r2, [r7, #4]
 8019708:	89bb      	ldrh	r3, [r7, #12]
 801970a:	429a      	cmp	r2, r3
 801970c:	d901      	bls.n	8019712 <send+0x17e>
 801970e:	2300      	movs	r3, #0
 8019710:	e030      	b.n	8019774 <send+0x1e0>
      if(len <= freesize) break;
 8019712:	88ba      	ldrh	r2, [r7, #4]
 8019714:	89bb      	ldrh	r3, [r7, #12]
 8019716:	429a      	cmp	r2, r3
 8019718:	d900      	bls.n	801971c <send+0x188>
      freesize = getSn_TX_FSR(sn);
 801971a:	e7cc      	b.n	80196b6 <send+0x122>
      if(len <= freesize) break;
 801971c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 801971e:	88ba      	ldrh	r2, [r7, #4]
 8019720:	79fb      	ldrb	r3, [r7, #7]
 8019722:	6839      	ldr	r1, [r7, #0]
 8019724:	4618      	mov	r0, r3
 8019726:	f7ff fb0d 	bl	8018d44 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801972a:	79fb      	ldrb	r3, [r7, #7]
 801972c:	009b      	lsls	r3, r3, #2
 801972e:	3301      	adds	r3, #1
 8019730:	00db      	lsls	r3, r3, #3
 8019732:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019736:	2120      	movs	r1, #32
 8019738:	4618      	mov	r0, r3
 801973a:	f7ff f963 	bl	8018a04 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 801973e:	bf00      	nop
 8019740:	79fb      	ldrb	r3, [r7, #7]
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	3301      	adds	r3, #1
 8019746:	00db      	lsls	r3, r3, #3
 8019748:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801974c:	4618      	mov	r0, r3
 801974e:	f7ff f90d 	bl	801896c <WIZCHIP_READ>
 8019752:	4603      	mov	r3, r0
 8019754:	2b00      	cmp	r3, #0
 8019756:	d1f3      	bne.n	8019740 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8019758:	79fb      	ldrb	r3, [r7, #7]
 801975a:	2201      	movs	r2, #1
 801975c:	fa02 f303 	lsl.w	r3, r2, r3
 8019760:	b21a      	sxth	r2, r3
 8019762:	4b06      	ldr	r3, [pc, #24]	@ (801977c <send+0x1e8>)
 8019764:	881b      	ldrh	r3, [r3, #0]
 8019766:	b21b      	sxth	r3, r3
 8019768:	4313      	orrs	r3, r2
 801976a:	b21b      	sxth	r3, r3
 801976c:	b29a      	uxth	r2, r3
 801976e:	4b03      	ldr	r3, [pc, #12]	@ (801977c <send+0x1e8>)
 8019770:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019772:	88bb      	ldrh	r3, [r7, #4]
}
 8019774:	4618      	mov	r0, r3
 8019776:	3710      	adds	r7, #16
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}
 801977c:	20000986 	.word	0x20000986
 8019780:	20000984 	.word	0x20000984

08019784 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019784:	b590      	push	{r4, r7, lr}
 8019786:	b085      	sub	sp, #20
 8019788:	af00      	add	r7, sp, #0
 801978a:	4603      	mov	r3, r0
 801978c:	6039      	str	r1, [r7, #0]
 801978e:	71fb      	strb	r3, [r7, #7]
 8019790:	4613      	mov	r3, r2
 8019792:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8019794:	2300      	movs	r3, #0
 8019796:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8019798:	2300      	movs	r3, #0
 801979a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 801979c:	79fb      	ldrb	r3, [r7, #7]
 801979e:	2b08      	cmp	r3, #8
 80197a0:	d902      	bls.n	80197a8 <recv+0x24>
 80197a2:	f04f 33ff 	mov.w	r3, #4294967295
 80197a6:	e09b      	b.n	80198e0 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80197a8:	79fb      	ldrb	r3, [r7, #7]
 80197aa:	009b      	lsls	r3, r3, #2
 80197ac:	3301      	adds	r3, #1
 80197ae:	00db      	lsls	r3, r3, #3
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7ff f8db 	bl	801896c <WIZCHIP_READ>
 80197b6:	4603      	mov	r3, r0
 80197b8:	f003 030f 	and.w	r3, r3, #15
 80197bc:	2b01      	cmp	r3, #1
 80197be:	d002      	beq.n	80197c6 <recv+0x42>
 80197c0:	f06f 0304 	mvn.w	r3, #4
 80197c4:	e08c      	b.n	80198e0 <recv+0x15c>
   CHECK_SOCKDATA();
 80197c6:	88bb      	ldrh	r3, [r7, #4]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d102      	bne.n	80197d2 <recv+0x4e>
 80197cc:	f06f 030d 	mvn.w	r3, #13
 80197d0:	e086      	b.n	80198e0 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80197d2:	79fb      	ldrb	r3, [r7, #7]
 80197d4:	009b      	lsls	r3, r3, #2
 80197d6:	3301      	adds	r3, #1
 80197d8:	00db      	lsls	r3, r3, #3
 80197da:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80197de:	4618      	mov	r0, r3
 80197e0:	f7ff f8c4 	bl	801896c <WIZCHIP_READ>
 80197e4:	4603      	mov	r3, r0
 80197e6:	029b      	lsls	r3, r3, #10
 80197e8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80197ea:	89ba      	ldrh	r2, [r7, #12]
 80197ec:	88bb      	ldrh	r3, [r7, #4]
 80197ee:	429a      	cmp	r2, r3
 80197f0:	d201      	bcs.n	80197f6 <recv+0x72>
 80197f2:	89bb      	ldrh	r3, [r7, #12]
 80197f4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80197f6:	79fb      	ldrb	r3, [r7, #7]
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7ff fa5a 	bl	8018cb2 <getSn_RX_RSR>
 80197fe:	4603      	mov	r3, r0
 8019800:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8019802:	79fb      	ldrb	r3, [r7, #7]
 8019804:	009b      	lsls	r3, r3, #2
 8019806:	3301      	adds	r3, #1
 8019808:	00db      	lsls	r3, r3, #3
 801980a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801980e:	4618      	mov	r0, r3
 8019810:	f7ff f8ac 	bl	801896c <WIZCHIP_READ>
 8019814:	4603      	mov	r3, r0
 8019816:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8019818:	7bfb      	ldrb	r3, [r7, #15]
 801981a:	2b17      	cmp	r3, #23
 801981c:	d026      	beq.n	801986c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 801981e:	7bfb      	ldrb	r3, [r7, #15]
 8019820:	2b1c      	cmp	r3, #28
 8019822:	d11c      	bne.n	801985e <recv+0xda>
            {
               if(recvsize != 0) break;
 8019824:	89bb      	ldrh	r3, [r7, #12]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d133      	bne.n	8019892 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 801982a:	79fb      	ldrb	r3, [r7, #7]
 801982c:	4618      	mov	r0, r3
 801982e:	f7ff f9f7 	bl	8018c20 <getSn_TX_FSR>
 8019832:	4603      	mov	r3, r0
 8019834:	461c      	mov	r4, r3
 8019836:	79fb      	ldrb	r3, [r7, #7]
 8019838:	009b      	lsls	r3, r3, #2
 801983a:	3301      	adds	r3, #1
 801983c:	00db      	lsls	r3, r3, #3
 801983e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8019842:	4618      	mov	r0, r3
 8019844:	f7ff f892 	bl	801896c <WIZCHIP_READ>
 8019848:	4603      	mov	r3, r0
 801984a:	029b      	lsls	r3, r3, #10
 801984c:	429c      	cmp	r4, r3
 801984e:	d10d      	bne.n	801986c <recv+0xe8>
               {
                  close(sn);
 8019850:	79fb      	ldrb	r3, [r7, #7]
 8019852:	4618      	mov	r0, r3
 8019854:	f7ff fc84 	bl	8019160 <close>
                  return SOCKERR_SOCKSTATUS;
 8019858:	f06f 0306 	mvn.w	r3, #6
 801985c:	e040      	b.n	80198e0 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 801985e:	79fb      	ldrb	r3, [r7, #7]
 8019860:	4618      	mov	r0, r3
 8019862:	f7ff fc7d 	bl	8019160 <close>
               return SOCKERR_SOCKSTATUS;
 8019866:	f06f 0306 	mvn.w	r3, #6
 801986a:	e039      	b.n	80198e0 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 801986c:	4b1e      	ldr	r3, [pc, #120]	@ (80198e8 <recv+0x164>)
 801986e:	881b      	ldrh	r3, [r3, #0]
 8019870:	461a      	mov	r2, r3
 8019872:	79fb      	ldrb	r3, [r7, #7]
 8019874:	fa42 f303 	asr.w	r3, r2, r3
 8019878:	f003 0301 	and.w	r3, r3, #1
 801987c:	2b00      	cmp	r3, #0
 801987e:	d004      	beq.n	801988a <recv+0x106>
 8019880:	89bb      	ldrh	r3, [r7, #12]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d101      	bne.n	801988a <recv+0x106>
 8019886:	2300      	movs	r3, #0
 8019888:	e02a      	b.n	80198e0 <recv+0x15c>
         if(recvsize != 0) break;
 801988a:	89bb      	ldrh	r3, [r7, #12]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d102      	bne.n	8019896 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8019890:	e7b1      	b.n	80197f6 <recv+0x72>
               if(recvsize != 0) break;
 8019892:	bf00      	nop
 8019894:	e000      	b.n	8019898 <recv+0x114>
         if(recvsize != 0) break;
 8019896:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8019898:	89ba      	ldrh	r2, [r7, #12]
 801989a:	88bb      	ldrh	r3, [r7, #4]
 801989c:	429a      	cmp	r2, r3
 801989e:	d201      	bcs.n	80198a4 <recv+0x120>
 80198a0:	89bb      	ldrh	r3, [r7, #12]
 80198a2:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80198a4:	88ba      	ldrh	r2, [r7, #4]
 80198a6:	79fb      	ldrb	r3, [r7, #7]
 80198a8:	6839      	ldr	r1, [r7, #0]
 80198aa:	4618      	mov	r0, r3
 80198ac:	f7ff faa4 	bl	8018df8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80198b0:	79fb      	ldrb	r3, [r7, #7]
 80198b2:	009b      	lsls	r3, r3, #2
 80198b4:	3301      	adds	r3, #1
 80198b6:	00db      	lsls	r3, r3, #3
 80198b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80198bc:	2140      	movs	r1, #64	@ 0x40
 80198be:	4618      	mov	r0, r3
 80198c0:	f7ff f8a0 	bl	8018a04 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80198c4:	bf00      	nop
 80198c6:	79fb      	ldrb	r3, [r7, #7]
 80198c8:	009b      	lsls	r3, r3, #2
 80198ca:	3301      	adds	r3, #1
 80198cc:	00db      	lsls	r3, r3, #3
 80198ce:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7ff f84a 	bl	801896c <WIZCHIP_READ>
 80198d8:	4603      	mov	r3, r0
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d1f3      	bne.n	80198c6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80198de:	88bb      	ldrh	r3, [r7, #4]
}
 80198e0:	4618      	mov	r0, r3
 80198e2:	3714      	adds	r7, #20
 80198e4:	46bd      	mov	sp, r7
 80198e6:	bd90      	pop	{r4, r7, pc}
 80198e8:	20000984 	.word	0x20000984

080198ec <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b086      	sub	sp, #24
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	60b9      	str	r1, [r7, #8]
 80198f4:	607b      	str	r3, [r7, #4]
 80198f6:	4603      	mov	r3, r0
 80198f8:	73fb      	strb	r3, [r7, #15]
 80198fa:	4613      	mov	r3, r2
 80198fc:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80198fe:	2300      	movs	r3, #0
 8019900:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8019902:	2300      	movs	r3, #0
 8019904:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8019906:	7bfb      	ldrb	r3, [r7, #15]
 8019908:	2b08      	cmp	r3, #8
 801990a:	d902      	bls.n	8019912 <sendto+0x26>
 801990c:	f04f 33ff 	mov.w	r3, #4294967295
 8019910:	e11a      	b.n	8019b48 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8019912:	7bfb      	ldrb	r3, [r7, #15]
 8019914:	009b      	lsls	r3, r3, #2
 8019916:	3301      	adds	r3, #1
 8019918:	00db      	lsls	r3, r3, #3
 801991a:	4618      	mov	r0, r3
 801991c:	f7ff f826 	bl	801896c <WIZCHIP_READ>
 8019920:	4603      	mov	r3, r0
 8019922:	f003 030f 	and.w	r3, r3, #15
 8019926:	3b02      	subs	r3, #2
 8019928:	2b02      	cmp	r3, #2
 801992a:	d902      	bls.n	8019932 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 801992c:	f06f 0304 	mvn.w	r3, #4
 8019930:	e10a      	b.n	8019b48 <sendto+0x25c>
         break;
 8019932:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019934:	89bb      	ldrh	r3, [r7, #12]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d102      	bne.n	8019940 <sendto+0x54>
 801993a:	f06f 030d 	mvn.w	r3, #13
 801993e:	e103      	b.n	8019b48 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	781b      	ldrb	r3, [r3, #0]
 8019944:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8019946:	693b      	ldr	r3, [r7, #16]
 8019948:	021b      	lsls	r3, r3, #8
 801994a:	687a      	ldr	r2, [r7, #4]
 801994c:	3201      	adds	r2, #1
 801994e:	7812      	ldrb	r2, [r2, #0]
 8019950:	4413      	add	r3, r2
 8019952:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8019954:	693b      	ldr	r3, [r7, #16]
 8019956:	021b      	lsls	r3, r3, #8
 8019958:	687a      	ldr	r2, [r7, #4]
 801995a:	3202      	adds	r2, #2
 801995c:	7812      	ldrb	r2, [r2, #0]
 801995e:	4413      	add	r3, r2
 8019960:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8019962:	693b      	ldr	r3, [r7, #16]
 8019964:	021b      	lsls	r3, r3, #8
 8019966:	687a      	ldr	r2, [r7, #4]
 8019968:	3203      	adds	r2, #3
 801996a:	7812      	ldrb	r2, [r2, #0]
 801996c:	4413      	add	r3, r2
 801996e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8019970:	693b      	ldr	r3, [r7, #16]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d10e      	bne.n	8019994 <sendto+0xa8>
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	009b      	lsls	r3, r3, #2
 801997a:	3301      	adds	r3, #1
 801997c:	00db      	lsls	r3, r3, #3
 801997e:	4618      	mov	r0, r3
 8019980:	f7fe fff4 	bl	801896c <WIZCHIP_READ>
 8019984:	4603      	mov	r3, r0
 8019986:	f003 0304 	and.w	r3, r3, #4
 801998a:	2b04      	cmp	r3, #4
 801998c:	d002      	beq.n	8019994 <sendto+0xa8>
 801998e:	f06f 030b 	mvn.w	r3, #11
 8019992:	e0d9      	b.n	8019b48 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8019994:	8c3b      	ldrh	r3, [r7, #32]
 8019996:	2b00      	cmp	r3, #0
 8019998:	d10e      	bne.n	80199b8 <sendto+0xcc>
 801999a:	7bfb      	ldrb	r3, [r7, #15]
 801999c:	009b      	lsls	r3, r3, #2
 801999e:	3301      	adds	r3, #1
 80199a0:	00db      	lsls	r3, r3, #3
 80199a2:	4618      	mov	r0, r3
 80199a4:	f7fe ffe2 	bl	801896c <WIZCHIP_READ>
 80199a8:	4603      	mov	r3, r0
 80199aa:	f003 0304 	and.w	r3, r3, #4
 80199ae:	2b04      	cmp	r3, #4
 80199b0:	d002      	beq.n	80199b8 <sendto+0xcc>
 80199b2:	f06f 030a 	mvn.w	r3, #10
 80199b6:	e0c7      	b.n	8019b48 <sendto+0x25c>
   tmp = getSn_SR(sn);
 80199b8:	7bfb      	ldrb	r3, [r7, #15]
 80199ba:	009b      	lsls	r3, r3, #2
 80199bc:	3301      	adds	r3, #1
 80199be:	00db      	lsls	r3, r3, #3
 80199c0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80199c4:	4618      	mov	r0, r3
 80199c6:	f7fe ffd1 	bl	801896c <WIZCHIP_READ>
 80199ca:	4603      	mov	r3, r0
 80199cc:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80199ce:	7dfb      	ldrb	r3, [r7, #23]
 80199d0:	2b42      	cmp	r3, #66	@ 0x42
 80199d2:	d008      	beq.n	80199e6 <sendto+0xfa>
 80199d4:	7dfb      	ldrb	r3, [r7, #23]
 80199d6:	2b22      	cmp	r3, #34	@ 0x22
 80199d8:	d005      	beq.n	80199e6 <sendto+0xfa>
 80199da:	7dfb      	ldrb	r3, [r7, #23]
 80199dc:	2b32      	cmp	r3, #50	@ 0x32
 80199de:	d002      	beq.n	80199e6 <sendto+0xfa>
 80199e0:	f06f 0306 	mvn.w	r3, #6
 80199e4:	e0b0      	b.n	8019b48 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80199e6:	7bfb      	ldrb	r3, [r7, #15]
 80199e8:	009b      	lsls	r3, r3, #2
 80199ea:	3301      	adds	r3, #1
 80199ec:	00db      	lsls	r3, r3, #3
 80199ee:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 80199f2:	2204      	movs	r2, #4
 80199f4:	6879      	ldr	r1, [r7, #4]
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7ff f8b2 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80199fc:	7bfb      	ldrb	r3, [r7, #15]
 80199fe:	009b      	lsls	r3, r3, #2
 8019a00:	3301      	adds	r3, #1
 8019a02:	00db      	lsls	r3, r3, #3
 8019a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019a08:	461a      	mov	r2, r3
 8019a0a:	8c3b      	ldrh	r3, [r7, #32]
 8019a0c:	0a1b      	lsrs	r3, r3, #8
 8019a0e:	b29b      	uxth	r3, r3
 8019a10:	b2db      	uxtb	r3, r3
 8019a12:	4619      	mov	r1, r3
 8019a14:	4610      	mov	r0, r2
 8019a16:	f7fe fff5 	bl	8018a04 <WIZCHIP_WRITE>
 8019a1a:	7bfb      	ldrb	r3, [r7, #15]
 8019a1c:	009b      	lsls	r3, r3, #2
 8019a1e:	3301      	adds	r3, #1
 8019a20:	00db      	lsls	r3, r3, #3
 8019a22:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8019a26:	461a      	mov	r2, r3
 8019a28:	8c3b      	ldrh	r3, [r7, #32]
 8019a2a:	b2db      	uxtb	r3, r3
 8019a2c:	4619      	mov	r1, r3
 8019a2e:	4610      	mov	r0, r2
 8019a30:	f7fe ffe8 	bl	8018a04 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8019a34:	7bfb      	ldrb	r3, [r7, #15]
 8019a36:	009b      	lsls	r3, r3, #2
 8019a38:	3301      	adds	r3, #1
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8019a40:	4618      	mov	r0, r3
 8019a42:	f7fe ff93 	bl	801896c <WIZCHIP_READ>
 8019a46:	4603      	mov	r3, r0
 8019a48:	029b      	lsls	r3, r3, #10
 8019a4a:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8019a4c:	89ba      	ldrh	r2, [r7, #12]
 8019a4e:	8abb      	ldrh	r3, [r7, #20]
 8019a50:	429a      	cmp	r2, r3
 8019a52:	d901      	bls.n	8019a58 <sendto+0x16c>
 8019a54:	8abb      	ldrh	r3, [r7, #20]
 8019a56:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8019a58:	7bfb      	ldrb	r3, [r7, #15]
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f7ff f8e0 	bl	8018c20 <getSn_TX_FSR>
 8019a60:	4603      	mov	r3, r0
 8019a62:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8019a64:	7bfb      	ldrb	r3, [r7, #15]
 8019a66:	009b      	lsls	r3, r3, #2
 8019a68:	3301      	adds	r3, #1
 8019a6a:	00db      	lsls	r3, r3, #3
 8019a6c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7fe ff7b 	bl	801896c <WIZCHIP_READ>
 8019a76:	4603      	mov	r3, r0
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d102      	bne.n	8019a82 <sendto+0x196>
 8019a7c:	f06f 0303 	mvn.w	r3, #3
 8019a80:	e062      	b.n	8019b48 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8019a82:	4b33      	ldr	r3, [pc, #204]	@ (8019b50 <sendto+0x264>)
 8019a84:	881b      	ldrh	r3, [r3, #0]
 8019a86:	461a      	mov	r2, r3
 8019a88:	7bfb      	ldrb	r3, [r7, #15]
 8019a8a:	fa42 f303 	asr.w	r3, r2, r3
 8019a8e:	f003 0301 	and.w	r3, r3, #1
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	d005      	beq.n	8019aa2 <sendto+0x1b6>
 8019a96:	89ba      	ldrh	r2, [r7, #12]
 8019a98:	8abb      	ldrh	r3, [r7, #20]
 8019a9a:	429a      	cmp	r2, r3
 8019a9c:	d901      	bls.n	8019aa2 <sendto+0x1b6>
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	e052      	b.n	8019b48 <sendto+0x25c>
      if(len <= freesize) break;
 8019aa2:	89ba      	ldrh	r2, [r7, #12]
 8019aa4:	8abb      	ldrh	r3, [r7, #20]
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	d900      	bls.n	8019aac <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 8019aaa:	e7d5      	b.n	8019a58 <sendto+0x16c>
      if(len <= freesize) break;
 8019aac:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8019aae:	89ba      	ldrh	r2, [r7, #12]
 8019ab0:	7bfb      	ldrb	r3, [r7, #15]
 8019ab2:	68b9      	ldr	r1, [r7, #8]
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	f7ff f945 	bl	8018d44 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8019aba:	7bfb      	ldrb	r3, [r7, #15]
 8019abc:	009b      	lsls	r3, r3, #2
 8019abe:	3301      	adds	r3, #1
 8019ac0:	00db      	lsls	r3, r3, #3
 8019ac2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019ac6:	2120      	movs	r1, #32
 8019ac8:	4618      	mov	r0, r3
 8019aca:	f7fe ff9b 	bl	8018a04 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019ace:	bf00      	nop
 8019ad0:	7bfb      	ldrb	r3, [r7, #15]
 8019ad2:	009b      	lsls	r3, r3, #2
 8019ad4:	3301      	adds	r3, #1
 8019ad6:	00db      	lsls	r3, r3, #3
 8019ad8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7fe ff45 	bl	801896c <WIZCHIP_READ>
 8019ae2:	4603      	mov	r3, r0
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d1f3      	bne.n	8019ad0 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8019ae8:	7bfb      	ldrb	r3, [r7, #15]
 8019aea:	009b      	lsls	r3, r3, #2
 8019aec:	3301      	adds	r3, #1
 8019aee:	00db      	lsls	r3, r3, #3
 8019af0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8019af4:	4618      	mov	r0, r3
 8019af6:	f7fe ff39 	bl	801896c <WIZCHIP_READ>
 8019afa:	4603      	mov	r3, r0
 8019afc:	f003 031f 	and.w	r3, r3, #31
 8019b00:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8019b02:	7dfb      	ldrb	r3, [r7, #23]
 8019b04:	f003 0310 	and.w	r3, r3, #16
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d00c      	beq.n	8019b26 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019b0c:	7bfb      	ldrb	r3, [r7, #15]
 8019b0e:	009b      	lsls	r3, r3, #2
 8019b10:	3301      	adds	r3, #1
 8019b12:	00db      	lsls	r3, r3, #3
 8019b14:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8019b18:	2110      	movs	r1, #16
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f7fe ff72 	bl	8018a04 <WIZCHIP_WRITE>
         break;
 8019b20:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019b22:	89bb      	ldrh	r3, [r7, #12]
 8019b24:	e010      	b.n	8019b48 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8019b26:	7dfb      	ldrb	r3, [r7, #23]
 8019b28:	f003 0308 	and.w	r3, r3, #8
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d0db      	beq.n	8019ae8 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8019b30:	7bfb      	ldrb	r3, [r7, #15]
 8019b32:	009b      	lsls	r3, r3, #2
 8019b34:	3301      	adds	r3, #1
 8019b36:	00db      	lsls	r3, r3, #3
 8019b38:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8019b3c:	2108      	movs	r1, #8
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f7fe ff60 	bl	8018a04 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8019b44:	f06f 030c 	mvn.w	r3, #12
}
 8019b48:	4618      	mov	r0, r3
 8019b4a:	3718      	adds	r7, #24
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}
 8019b50:	20000984 	.word	0x20000984

08019b54 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8019b54:	b580      	push	{r7, lr}
 8019b56:	b088      	sub	sp, #32
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	60b9      	str	r1, [r7, #8]
 8019b5c:	607b      	str	r3, [r7, #4]
 8019b5e:	4603      	mov	r3, r0
 8019b60:	73fb      	strb	r3, [r7, #15]
 8019b62:	4613      	mov	r3, r2
 8019b64:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8019b66:	2300      	movs	r3, #0
 8019b68:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019b6a:	7bfb      	ldrb	r3, [r7, #15]
 8019b6c:	2b08      	cmp	r3, #8
 8019b6e:	d902      	bls.n	8019b76 <recvfrom+0x22>
 8019b70:	f04f 33ff 	mov.w	r3, #4294967295
 8019b74:	e1d2      	b.n	8019f1c <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8019b76:	7bfb      	ldrb	r3, [r7, #15]
 8019b78:	009b      	lsls	r3, r3, #2
 8019b7a:	3301      	adds	r3, #1
 8019b7c:	00db      	lsls	r3, r3, #3
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7fe fef4 	bl	801896c <WIZCHIP_READ>
 8019b84:	4603      	mov	r3, r0
 8019b86:	777b      	strb	r3, [r7, #29]
 8019b88:	7f7b      	ldrb	r3, [r7, #29]
 8019b8a:	f003 030f 	and.w	r3, r3, #15
 8019b8e:	3b02      	subs	r3, #2
 8019b90:	2b02      	cmp	r3, #2
 8019b92:	d902      	bls.n	8019b9a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019b94:	f06f 0304 	mvn.w	r3, #4
 8019b98:	e1c0      	b.n	8019f1c <recvfrom+0x3c8>
         break;
 8019b9a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019b9c:	89bb      	ldrh	r3, [r7, #12]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d102      	bne.n	8019ba8 <recvfrom+0x54>
 8019ba2:	f06f 030d 	mvn.w	r3, #13
 8019ba6:	e1b9      	b.n	8019f1c <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 8019ba8:	7bfb      	ldrb	r3, [r7, #15]
 8019baa:	4a87      	ldr	r2, [pc, #540]	@ (8019dc8 <recvfrom+0x274>)
 8019bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d128      	bne.n	8019c06 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8019bb4:	7bfb      	ldrb	r3, [r7, #15]
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7ff f87b 	bl	8018cb2 <getSn_RX_RSR>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8019bc0:	7bfb      	ldrb	r3, [r7, #15]
 8019bc2:	009b      	lsls	r3, r3, #2
 8019bc4:	3301      	adds	r3, #1
 8019bc6:	00db      	lsls	r3, r3, #3
 8019bc8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f7fe fecd 	bl	801896c <WIZCHIP_READ>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d102      	bne.n	8019bde <recvfrom+0x8a>
 8019bd8:	f06f 0303 	mvn.w	r3, #3
 8019bdc:	e19e      	b.n	8019f1c <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8019bde:	4b7b      	ldr	r3, [pc, #492]	@ (8019dcc <recvfrom+0x278>)
 8019be0:	881b      	ldrh	r3, [r3, #0]
 8019be2:	461a      	mov	r2, r3
 8019be4:	7bfb      	ldrb	r3, [r7, #15]
 8019be6:	fa42 f303 	asr.w	r3, r2, r3
 8019bea:	f003 0301 	and.w	r3, r3, #1
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d004      	beq.n	8019bfc <recvfrom+0xa8>
 8019bf2:	8bfb      	ldrh	r3, [r7, #30]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d101      	bne.n	8019bfc <recvfrom+0xa8>
 8019bf8:	2300      	movs	r3, #0
 8019bfa:	e18f      	b.n	8019f1c <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8019bfc:	8bfb      	ldrh	r3, [r7, #30]
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d100      	bne.n	8019c04 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8019c02:	e7d7      	b.n	8019bb4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8019c04:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8019c06:	7f7b      	ldrb	r3, [r7, #29]
 8019c08:	f003 0307 	and.w	r3, r3, #7
 8019c0c:	2b04      	cmp	r3, #4
 8019c0e:	d078      	beq.n	8019d02 <recvfrom+0x1ae>
 8019c10:	2b04      	cmp	r3, #4
 8019c12:	f300 8140 	bgt.w	8019e96 <recvfrom+0x342>
 8019c16:	2b02      	cmp	r3, #2
 8019c18:	d003      	beq.n	8019c22 <recvfrom+0xce>
 8019c1a:	2b03      	cmp	r3, #3
 8019c1c:	f000 80da 	beq.w	8019dd4 <recvfrom+0x280>
 8019c20:	e139      	b.n	8019e96 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8019c22:	7bfb      	ldrb	r3, [r7, #15]
 8019c24:	4a68      	ldr	r2, [pc, #416]	@ (8019dc8 <recvfrom+0x274>)
 8019c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d151      	bne.n	8019cd2 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8019c2e:	f107 0114 	add.w	r1, r7, #20
 8019c32:	7bfb      	ldrb	r3, [r7, #15]
 8019c34:	2208      	movs	r2, #8
 8019c36:	4618      	mov	r0, r3
 8019c38:	f7ff f8de 	bl	8018df8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019c3c:	7bfb      	ldrb	r3, [r7, #15]
 8019c3e:	009b      	lsls	r3, r3, #2
 8019c40:	3301      	adds	r3, #1
 8019c42:	00db      	lsls	r3, r3, #3
 8019c44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019c48:	2140      	movs	r1, #64	@ 0x40
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7fe feda 	bl	8018a04 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019c50:	bf00      	nop
 8019c52:	7bfb      	ldrb	r3, [r7, #15]
 8019c54:	009b      	lsls	r3, r3, #2
 8019c56:	3301      	adds	r3, #1
 8019c58:	00db      	lsls	r3, r3, #3
 8019c5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019c5e:	4618      	mov	r0, r3
 8019c60:	f7fe fe84 	bl	801896c <WIZCHIP_READ>
 8019c64:	4603      	mov	r3, r0
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d1f3      	bne.n	8019c52 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019c6a:	7d3a      	ldrb	r2, [r7, #20]
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	3301      	adds	r3, #1
 8019c74:	7d7a      	ldrb	r2, [r7, #21]
 8019c76:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	3302      	adds	r3, #2
 8019c7c:	7dba      	ldrb	r2, [r7, #22]
 8019c7e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	3303      	adds	r3, #3
 8019c84:	7dfa      	ldrb	r2, [r7, #23]
 8019c86:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8019c88:	7e3b      	ldrb	r3, [r7, #24]
 8019c8a:	461a      	mov	r2, r3
 8019c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c8e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8019c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019c92:	881b      	ldrh	r3, [r3, #0]
 8019c94:	021b      	lsls	r3, r3, #8
 8019c96:	b29b      	uxth	r3, r3
 8019c98:	7e7a      	ldrb	r2, [r7, #25]
 8019c9a:	4413      	add	r3, r2
 8019c9c:	b29a      	uxth	r2, r3
 8019c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ca0:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8019ca2:	7eba      	ldrb	r2, [r7, #26]
 8019ca4:	7bfb      	ldrb	r3, [r7, #15]
 8019ca6:	4611      	mov	r1, r2
 8019ca8:	4a47      	ldr	r2, [pc, #284]	@ (8019dc8 <recvfrom+0x274>)
 8019caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8019cae:	7bfb      	ldrb	r3, [r7, #15]
 8019cb0:	4a45      	ldr	r2, [pc, #276]	@ (8019dc8 <recvfrom+0x274>)
 8019cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cb6:	021b      	lsls	r3, r3, #8
 8019cb8:	b29a      	uxth	r2, r3
 8019cba:	7efb      	ldrb	r3, [r7, #27]
 8019cbc:	4619      	mov	r1, r3
 8019cbe:	7bfb      	ldrb	r3, [r7, #15]
 8019cc0:	440a      	add	r2, r1
 8019cc2:	b291      	uxth	r1, r2
 8019cc4:	4a40      	ldr	r2, [pc, #256]	@ (8019dc8 <recvfrom+0x274>)
 8019cc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8019cca:	7bfb      	ldrb	r3, [r7, #15]
 8019ccc:	4a40      	ldr	r2, [pc, #256]	@ (8019dd0 <recvfrom+0x27c>)
 8019cce:	2180      	movs	r1, #128	@ 0x80
 8019cd0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019cd2:	7bfb      	ldrb	r3, [r7, #15]
 8019cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8019dc8 <recvfrom+0x274>)
 8019cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cda:	89ba      	ldrh	r2, [r7, #12]
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d202      	bcs.n	8019ce6 <recvfrom+0x192>
 8019ce0:	89bb      	ldrh	r3, [r7, #12]
 8019ce2:	83fb      	strh	r3, [r7, #30]
 8019ce4:	e004      	b.n	8019cf0 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8019ce6:	7bfb      	ldrb	r3, [r7, #15]
 8019ce8:	4a37      	ldr	r2, [pc, #220]	@ (8019dc8 <recvfrom+0x274>)
 8019cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cee:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8019cf0:	8bfb      	ldrh	r3, [r7, #30]
 8019cf2:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019cf4:	8bfa      	ldrh	r2, [r7, #30]
 8019cf6:	7bfb      	ldrb	r3, [r7, #15]
 8019cf8:	68b9      	ldr	r1, [r7, #8]
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f7ff f87c 	bl	8018df8 <wiz_recv_data>
			break;
 8019d00:	e0d5      	b.n	8019eae <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8019d02:	7bfb      	ldrb	r3, [r7, #15]
 8019d04:	4a30      	ldr	r2, [pc, #192]	@ (8019dc8 <recvfrom+0x274>)
 8019d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d145      	bne.n	8019d9a <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8019d0e:	f107 0114 	add.w	r1, r7, #20
 8019d12:	7bfb      	ldrb	r3, [r7, #15]
 8019d14:	2202      	movs	r2, #2
 8019d16:	4618      	mov	r0, r3
 8019d18:	f7ff f86e 	bl	8018df8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019d1c:	7bfb      	ldrb	r3, [r7, #15]
 8019d1e:	009b      	lsls	r3, r3, #2
 8019d20:	3301      	adds	r3, #1
 8019d22:	00db      	lsls	r3, r3, #3
 8019d24:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019d28:	2140      	movs	r1, #64	@ 0x40
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	f7fe fe6a 	bl	8018a04 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019d30:	bf00      	nop
 8019d32:	7bfb      	ldrb	r3, [r7, #15]
 8019d34:	009b      	lsls	r3, r3, #2
 8019d36:	3301      	adds	r3, #1
 8019d38:	00db      	lsls	r3, r3, #3
 8019d3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f7fe fe14 	bl	801896c <WIZCHIP_READ>
 8019d44:	4603      	mov	r3, r0
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d1f3      	bne.n	8019d32 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019d4a:	7d3a      	ldrb	r2, [r7, #20]
 8019d4c:	7bfb      	ldrb	r3, [r7, #15]
 8019d4e:	4611      	mov	r1, r2
 8019d50:	4a1d      	ldr	r2, [pc, #116]	@ (8019dc8 <recvfrom+0x274>)
 8019d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019d56:	7bfb      	ldrb	r3, [r7, #15]
 8019d58:	4a1b      	ldr	r2, [pc, #108]	@ (8019dc8 <recvfrom+0x274>)
 8019d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d5e:	021b      	lsls	r3, r3, #8
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	7d7a      	ldrb	r2, [r7, #21]
 8019d64:	4413      	add	r3, r2
 8019d66:	b29a      	uxth	r2, r3
 8019d68:	7bfb      	ldrb	r3, [r7, #15]
 8019d6a:	3a02      	subs	r2, #2
 8019d6c:	b291      	uxth	r1, r2
 8019d6e:	4a16      	ldr	r2, [pc, #88]	@ (8019dc8 <recvfrom+0x274>)
 8019d70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8019d74:	7bfb      	ldrb	r3, [r7, #15]
 8019d76:	4a14      	ldr	r2, [pc, #80]	@ (8019dc8 <recvfrom+0x274>)
 8019d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d7c:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 8019d80:	4293      	cmp	r3, r2
 8019d82:	d906      	bls.n	8019d92 <recvfrom+0x23e>
   			{
   			   close(sn);
 8019d84:	7bfb      	ldrb	r3, [r7, #15]
 8019d86:	4618      	mov	r0, r3
 8019d88:	f7ff f9ea 	bl	8019160 <close>
   			   return SOCKFATAL_PACKLEN;
 8019d8c:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 8019d90:	e0c4      	b.n	8019f1c <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8019d92:	7bfb      	ldrb	r3, [r7, #15]
 8019d94:	4a0e      	ldr	r2, [pc, #56]	@ (8019dd0 <recvfrom+0x27c>)
 8019d96:	2180      	movs	r1, #128	@ 0x80
 8019d98:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019d9a:	7bfb      	ldrb	r3, [r7, #15]
 8019d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8019dc8 <recvfrom+0x274>)
 8019d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019da2:	89ba      	ldrh	r2, [r7, #12]
 8019da4:	429a      	cmp	r2, r3
 8019da6:	d202      	bcs.n	8019dae <recvfrom+0x25a>
 8019da8:	89bb      	ldrh	r3, [r7, #12]
 8019daa:	83fb      	strh	r3, [r7, #30]
 8019dac:	e004      	b.n	8019db8 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 8019dae:	7bfb      	ldrb	r3, [r7, #15]
 8019db0:	4a05      	ldr	r2, [pc, #20]	@ (8019dc8 <recvfrom+0x274>)
 8019db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019db6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8019db8:	8bfa      	ldrh	r2, [r7, #30]
 8019dba:	7bfb      	ldrb	r3, [r7, #15]
 8019dbc:	68b9      	ldr	r1, [r7, #8]
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	f7ff f81a 	bl	8018df8 <wiz_recv_data>
		   break;
 8019dc4:	e073      	b.n	8019eae <recvfrom+0x35a>
 8019dc6:	bf00      	nop
 8019dc8:	20000988 	.word	0x20000988
 8019dcc:	20000984 	.word	0x20000984
 8019dd0:	20000998 	.word	0x20000998
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8019dd4:	7bfb      	ldrb	r3, [r7, #15]
 8019dd6:	4a53      	ldr	r2, [pc, #332]	@ (8019f24 <recvfrom+0x3d0>)
 8019dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d144      	bne.n	8019e6a <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8019de0:	f107 0114 	add.w	r1, r7, #20
 8019de4:	7bfb      	ldrb	r3, [r7, #15]
 8019de6:	2206      	movs	r2, #6
 8019de8:	4618      	mov	r0, r3
 8019dea:	f7ff f805 	bl	8018df8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019dee:	7bfb      	ldrb	r3, [r7, #15]
 8019df0:	009b      	lsls	r3, r3, #2
 8019df2:	3301      	adds	r3, #1
 8019df4:	00db      	lsls	r3, r3, #3
 8019df6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019dfa:	2140      	movs	r1, #64	@ 0x40
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	f7fe fe01 	bl	8018a04 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019e02:	bf00      	nop
 8019e04:	7bfb      	ldrb	r3, [r7, #15]
 8019e06:	009b      	lsls	r3, r3, #2
 8019e08:	3301      	adds	r3, #1
 8019e0a:	00db      	lsls	r3, r3, #3
 8019e0c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7fe fdab 	bl	801896c <WIZCHIP_READ>
 8019e16:	4603      	mov	r3, r0
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d1f3      	bne.n	8019e04 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8019e1c:	7d3a      	ldrb	r2, [r7, #20]
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	3301      	adds	r3, #1
 8019e26:	7d7a      	ldrb	r2, [r7, #21]
 8019e28:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	3302      	adds	r3, #2
 8019e2e:	7dba      	ldrb	r2, [r7, #22]
 8019e30:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	3303      	adds	r3, #3
 8019e36:	7dfa      	ldrb	r2, [r7, #23]
 8019e38:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019e3a:	7e3a      	ldrb	r2, [r7, #24]
 8019e3c:	7bfb      	ldrb	r3, [r7, #15]
 8019e3e:	4611      	mov	r1, r2
 8019e40:	4a38      	ldr	r2, [pc, #224]	@ (8019f24 <recvfrom+0x3d0>)
 8019e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019e46:	7bfb      	ldrb	r3, [r7, #15]
 8019e48:	4a36      	ldr	r2, [pc, #216]	@ (8019f24 <recvfrom+0x3d0>)
 8019e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e4e:	021b      	lsls	r3, r3, #8
 8019e50:	b29a      	uxth	r2, r3
 8019e52:	7e7b      	ldrb	r3, [r7, #25]
 8019e54:	4619      	mov	r1, r3
 8019e56:	7bfb      	ldrb	r3, [r7, #15]
 8019e58:	440a      	add	r2, r1
 8019e5a:	b291      	uxth	r1, r2
 8019e5c:	4a31      	ldr	r2, [pc, #196]	@ (8019f24 <recvfrom+0x3d0>)
 8019e5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8019e62:	7bfb      	ldrb	r3, [r7, #15]
 8019e64:	4a30      	ldr	r2, [pc, #192]	@ (8019f28 <recvfrom+0x3d4>)
 8019e66:	2180      	movs	r1, #128	@ 0x80
 8019e68:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019e6a:	7bfb      	ldrb	r3, [r7, #15]
 8019e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8019f24 <recvfrom+0x3d0>)
 8019e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e72:	89ba      	ldrh	r2, [r7, #12]
 8019e74:	429a      	cmp	r2, r3
 8019e76:	d202      	bcs.n	8019e7e <recvfrom+0x32a>
 8019e78:	89bb      	ldrh	r3, [r7, #12]
 8019e7a:	83fb      	strh	r3, [r7, #30]
 8019e7c:	e004      	b.n	8019e88 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8019e7e:	7bfb      	ldrb	r3, [r7, #15]
 8019e80:	4a28      	ldr	r2, [pc, #160]	@ (8019f24 <recvfrom+0x3d0>)
 8019e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e86:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019e88:	8bfa      	ldrh	r2, [r7, #30]
 8019e8a:	7bfb      	ldrb	r3, [r7, #15]
 8019e8c:	68b9      	ldr	r1, [r7, #8]
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f7fe ffb2 	bl	8018df8 <wiz_recv_data>
			break;
 8019e94:	e00b      	b.n	8019eae <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019e96:	8bfa      	ldrh	r2, [r7, #30]
 8019e98:	7bfb      	ldrb	r3, [r7, #15]
 8019e9a:	4611      	mov	r1, r2
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7ff f805 	bl	8018eac <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8019ea2:	7bfb      	ldrb	r3, [r7, #15]
 8019ea4:	491f      	ldr	r1, [pc, #124]	@ (8019f24 <recvfrom+0x3d0>)
 8019ea6:	8bfa      	ldrh	r2, [r7, #30]
 8019ea8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019eac:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8019eae:	7bfb      	ldrb	r3, [r7, #15]
 8019eb0:	009b      	lsls	r3, r3, #2
 8019eb2:	3301      	adds	r3, #1
 8019eb4:	00db      	lsls	r3, r3, #3
 8019eb6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019eba:	2140      	movs	r1, #64	@ 0x40
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	f7fe fda1 	bl	8018a04 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8019ec2:	bf00      	nop
 8019ec4:	7bfb      	ldrb	r3, [r7, #15]
 8019ec6:	009b      	lsls	r3, r3, #2
 8019ec8:	3301      	adds	r3, #1
 8019eca:	00db      	lsls	r3, r3, #3
 8019ecc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f7fe fd4b 	bl	801896c <WIZCHIP_READ>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d1f3      	bne.n	8019ec4 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8019edc:	7bfb      	ldrb	r3, [r7, #15]
 8019ede:	4a11      	ldr	r2, [pc, #68]	@ (8019f24 <recvfrom+0x3d0>)
 8019ee0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8019ee4:	7bfb      	ldrb	r3, [r7, #15]
 8019ee6:	8bfa      	ldrh	r2, [r7, #30]
 8019ee8:	1a8a      	subs	r2, r1, r2
 8019eea:	b291      	uxth	r1, r2
 8019eec:	4a0d      	ldr	r2, [pc, #52]	@ (8019f24 <recvfrom+0x3d0>)
 8019eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8019ef2:	7bfb      	ldrb	r3, [r7, #15]
 8019ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8019f24 <recvfrom+0x3d0>)
 8019ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d009      	beq.n	8019f12 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8019efe:	7bfb      	ldrb	r3, [r7, #15]
 8019f00:	4a09      	ldr	r2, [pc, #36]	@ (8019f28 <recvfrom+0x3d4>)
 8019f02:	5cd2      	ldrb	r2, [r2, r3]
 8019f04:	7bfb      	ldrb	r3, [r7, #15]
 8019f06:	f042 0201 	orr.w	r2, r2, #1
 8019f0a:	b2d1      	uxtb	r1, r2
 8019f0c:	4a06      	ldr	r2, [pc, #24]	@ (8019f28 <recvfrom+0x3d4>)
 8019f0e:	54d1      	strb	r1, [r2, r3]
 8019f10:	e003      	b.n	8019f1a <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8019f12:	7bfb      	ldrb	r3, [r7, #15]
 8019f14:	4a04      	ldr	r2, [pc, #16]	@ (8019f28 <recvfrom+0x3d4>)
 8019f16:	2100      	movs	r1, #0
 8019f18:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019f1a:	8bfb      	ldrh	r3, [r7, #30]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3720      	adds	r7, #32
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}
 8019f24:	20000988 	.word	0x20000988
 8019f28:	20000998 	.word	0x20000998

08019f2c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019f2c:	b480      	push	{r7}
 8019f2e:	af00      	add	r7, sp, #0
 8019f30:	bf00      	nop
 8019f32:	46bd      	mov	sp, r7
 8019f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f38:	4770      	bx	lr

08019f3a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019f3a:	b480      	push	{r7}
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	bf00      	nop
 8019f40:	46bd      	mov	sp, r7
 8019f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f46:	4770      	bx	lr

08019f48 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019f48:	b480      	push	{r7}
 8019f4a:	af00      	add	r7, sp, #0
 8019f4c:	bf00      	nop
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f54:	4770      	bx	lr

08019f56 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019f56:	b480      	push	{r7}
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	bf00      	nop
 8019f5c:	46bd      	mov	sp, r7
 8019f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f62:	4770      	bx	lr

08019f64 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019f64:	b480      	push	{r7}
 8019f66:	b083      	sub	sp, #12
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	781b      	ldrb	r3, [r3, #0]
 8019f70:	b2db      	uxtb	r3, r3
 8019f72:	4618      	mov	r0, r3
 8019f74:	370c      	adds	r7, #12
 8019f76:	46bd      	mov	sp, r7
 8019f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7c:	4770      	bx	lr

08019f7e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8019f7e:	b480      	push	{r7}
 8019f80:	b083      	sub	sp, #12
 8019f82:	af00      	add	r7, sp, #0
 8019f84:	6078      	str	r0, [r7, #4]
 8019f86:	460b      	mov	r3, r1
 8019f88:	70fb      	strb	r3, [r7, #3]
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	78fa      	ldrb	r2, [r7, #3]
 8019f8e:	701a      	strb	r2, [r3, #0]
 8019f90:	bf00      	nop
 8019f92:	370c      	adds	r7, #12
 8019f94:	46bd      	mov	sp, r7
 8019f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9a:	4770      	bx	lr

08019f9c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019f9c:	b480      	push	{r7}
 8019f9e:	af00      	add	r7, sp, #0
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	4618      	mov	r0, r3
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019faa:	4770      	bx	lr

08019fac <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019fac:	b480      	push	{r7}
 8019fae:	b083      	sub	sp, #12
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	71fb      	strb	r3, [r7, #7]
 8019fb6:	bf00      	nop
 8019fb8:	370c      	adds	r7, #12
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc0:	4770      	bx	lr
	...

08019fc4 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8019fc4:	b480      	push	{r7}
 8019fc6:	b083      	sub	sp, #12
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
 8019fcc:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d002      	beq.n	8019fda <reg_wizchip_cris_cbfunc+0x16>
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d106      	bne.n	8019fe8 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8019fda:	4b0a      	ldr	r3, [pc, #40]	@ (801a004 <reg_wizchip_cris_cbfunc+0x40>)
 8019fdc:	4a0a      	ldr	r2, [pc, #40]	@ (801a008 <reg_wizchip_cris_cbfunc+0x44>)
 8019fde:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8019fe0:	4b08      	ldr	r3, [pc, #32]	@ (801a004 <reg_wizchip_cris_cbfunc+0x40>)
 8019fe2:	4a0a      	ldr	r2, [pc, #40]	@ (801a00c <reg_wizchip_cris_cbfunc+0x48>)
 8019fe4:	611a      	str	r2, [r3, #16]
 8019fe6:	e006      	b.n	8019ff6 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8019fe8:	4a06      	ldr	r2, [pc, #24]	@ (801a004 <reg_wizchip_cris_cbfunc+0x40>)
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8019fee:	4a05      	ldr	r2, [pc, #20]	@ (801a004 <reg_wizchip_cris_cbfunc+0x40>)
 8019ff0:	683b      	ldr	r3, [r7, #0]
 8019ff2:	6113      	str	r3, [r2, #16]
   }
}
 8019ff4:	bf00      	nop
 8019ff6:	bf00      	nop
 8019ff8:	370c      	adds	r7, #12
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a000:	4770      	bx	lr
 801a002:	bf00      	nop
 801a004:	200000c4 	.word	0x200000c4
 801a008:	08019f2d 	.word	0x08019f2d
 801a00c:	08019f3b 	.word	0x08019f3b

0801a010 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 801a010:	b480      	push	{r7}
 801a012:	b083      	sub	sp, #12
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d002      	beq.n	801a026 <reg_wizchip_cs_cbfunc+0x16>
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d106      	bne.n	801a034 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 801a026:	4b0a      	ldr	r3, [pc, #40]	@ (801a050 <reg_wizchip_cs_cbfunc+0x40>)
 801a028:	4a0a      	ldr	r2, [pc, #40]	@ (801a054 <reg_wizchip_cs_cbfunc+0x44>)
 801a02a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 801a02c:	4b08      	ldr	r3, [pc, #32]	@ (801a050 <reg_wizchip_cs_cbfunc+0x40>)
 801a02e:	4a0a      	ldr	r2, [pc, #40]	@ (801a058 <reg_wizchip_cs_cbfunc+0x48>)
 801a030:	619a      	str	r2, [r3, #24]
 801a032:	e006      	b.n	801a042 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 801a034:	4a06      	ldr	r2, [pc, #24]	@ (801a050 <reg_wizchip_cs_cbfunc+0x40>)
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 801a03a:	4a05      	ldr	r2, [pc, #20]	@ (801a050 <reg_wizchip_cs_cbfunc+0x40>)
 801a03c:	683b      	ldr	r3, [r7, #0]
 801a03e:	6193      	str	r3, [r2, #24]
   }
}
 801a040:	bf00      	nop
 801a042:	bf00      	nop
 801a044:	370c      	adds	r7, #12
 801a046:	46bd      	mov	sp, r7
 801a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04c:	4770      	bx	lr
 801a04e:	bf00      	nop
 801a050:	200000c4 	.word	0x200000c4
 801a054:	08019f49 	.word	0x08019f49
 801a058:	08019f57 	.word	0x08019f57

0801a05c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 801a05c:	b480      	push	{r7}
 801a05e:	b083      	sub	sp, #12
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
 801a064:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 801a066:	bf00      	nop
 801a068:	4b0f      	ldr	r3, [pc, #60]	@ (801a0a8 <reg_wizchip_spi_cbfunc+0x4c>)
 801a06a:	881b      	ldrh	r3, [r3, #0]
 801a06c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801a070:	2b00      	cmp	r3, #0
 801a072:	d0f9      	beq.n	801a068 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d002      	beq.n	801a080 <reg_wizchip_spi_cbfunc+0x24>
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d106      	bne.n	801a08e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801a080:	4b09      	ldr	r3, [pc, #36]	@ (801a0a8 <reg_wizchip_spi_cbfunc+0x4c>)
 801a082:	4a0a      	ldr	r2, [pc, #40]	@ (801a0ac <reg_wizchip_spi_cbfunc+0x50>)
 801a084:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801a086:	4b08      	ldr	r3, [pc, #32]	@ (801a0a8 <reg_wizchip_spi_cbfunc+0x4c>)
 801a088:	4a09      	ldr	r2, [pc, #36]	@ (801a0b0 <reg_wizchip_spi_cbfunc+0x54>)
 801a08a:	621a      	str	r2, [r3, #32]
 801a08c:	e006      	b.n	801a09c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801a08e:	4a06      	ldr	r2, [pc, #24]	@ (801a0a8 <reg_wizchip_spi_cbfunc+0x4c>)
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 801a094:	4a04      	ldr	r2, [pc, #16]	@ (801a0a8 <reg_wizchip_spi_cbfunc+0x4c>)
 801a096:	683b      	ldr	r3, [r7, #0]
 801a098:	6213      	str	r3, [r2, #32]
   }
}
 801a09a:	bf00      	nop
 801a09c:	bf00      	nop
 801a09e:	370c      	adds	r7, #12
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a6:	4770      	bx	lr
 801a0a8:	200000c4 	.word	0x200000c4
 801a0ac:	08019f9d 	.word	0x08019f9d
 801a0b0:	08019fad 	.word	0x08019fad

0801a0b4 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 801a0b4:	b590      	push	{r4, r7, lr}
 801a0b6:	b087      	sub	sp, #28
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	6039      	str	r1, [r7, #0]
 801a0be:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	60fb      	str	r3, [r7, #12]
 801a0c8:	2300      	movs	r3, #0
 801a0ca:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 801a0cc:	79fb      	ldrb	r3, [r7, #7]
 801a0ce:	2b0f      	cmp	r3, #15
 801a0d0:	f200 80c5 	bhi.w	801a25e <ctlwizchip+0x1aa>
 801a0d4:	a201      	add	r2, pc, #4	@ (adr r2, 801a0dc <ctlwizchip+0x28>)
 801a0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0da:	bf00      	nop
 801a0dc:	0801a11d 	.word	0x0801a11d
 801a0e0:	0801a123 	.word	0x0801a123
 801a0e4:	0801a14f 	.word	0x0801a14f
 801a0e8:	0801a143 	.word	0x0801a143
 801a0ec:	0801a15d 	.word	0x0801a15d
 801a0f0:	0801a169 	.word	0x0801a169
 801a0f4:	0801a177 	.word	0x0801a177
 801a0f8:	0801a19d 	.word	0x0801a19d
 801a0fc:	0801a1bf 	.word	0x0801a1bf
 801a100:	0801a203 	.word	0x0801a203
 801a104:	0801a209 	.word	0x0801a209
 801a108:	0801a211 	.word	0x0801a211
 801a10c:	0801a265 	.word	0x0801a265
 801a110:	0801a219 	.word	0x0801a219
 801a114:	0801a227 	.word	0x0801a227
 801a118:	0801a243 	.word	0x0801a243
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 801a11c:	f000 f8e8 	bl	801a2f0 <wizchip_sw_reset>
         break;
 801a120:	e0a1      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d004      	beq.n	801a132 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 801a128:	683b      	ldr	r3, [r7, #0]
 801a12a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	3308      	adds	r3, #8
 801a130:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	693a      	ldr	r2, [r7, #16]
 801a136:	4611      	mov	r1, r2
 801a138:	4618      	mov	r0, r3
 801a13a:	f000 f925 	bl	801a388 <wizchip_init>
 801a13e:	4603      	mov	r3, r0
 801a140:	e092      	b.n	801a268 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	881b      	ldrh	r3, [r3, #0]
 801a146:	4618      	mov	r0, r3
 801a148:	f000 f9aa 	bl	801a4a0 <wizchip_clrinterrupt>
         break;
 801a14c:	e08b      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 801a14e:	f000 f9db 	bl	801a508 <wizchip_getinterrupt>
 801a152:	4603      	mov	r3, r0
 801a154:	461a      	mov	r2, r3
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	801a      	strh	r2, [r3, #0]
         break;
 801a15a:	e084      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	881b      	ldrh	r3, [r3, #0]
 801a160:	4618      	mov	r0, r3
 801a162:	f000 f9f6 	bl	801a552 <wizchip_setinterruptmask>
         break;         
 801a166:	e07e      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 801a168:	f000 fa0e 	bl	801a588 <wizchip_getinterruptmask>
 801a16c:	4603      	mov	r3, r0
 801a16e:	461a      	mov	r2, r3
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	801a      	strh	r2, [r3, #0]
         break;
 801a174:	e077      	b.n	801a266 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	881b      	ldrh	r3, [r3, #0]
 801a17a:	0a1b      	lsrs	r3, r3, #8
 801a17c:	b29b      	uxth	r3, r3
 801a17e:	b2db      	uxtb	r3, r3
 801a180:	4619      	mov	r1, r3
 801a182:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 801a186:	f7fe fc3d 	bl	8018a04 <WIZCHIP_WRITE>
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	881b      	ldrh	r3, [r3, #0]
 801a18e:	b2db      	uxtb	r3, r3
 801a190:	4619      	mov	r1, r3
 801a192:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 801a196:	f7fe fc35 	bl	8018a04 <WIZCHIP_WRITE>
         break;
 801a19a:	e064      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 801a19c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 801a1a0:	f7fe fbe4 	bl	801896c <WIZCHIP_READ>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	021b      	lsls	r3, r3, #8
 801a1a8:	b29c      	uxth	r4, r3
 801a1aa:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 801a1ae:	f7fe fbdd 	bl	801896c <WIZCHIP_READ>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	4423      	add	r3, r4
 801a1b6:	b29a      	uxth	r2, r3
 801a1b8:	683b      	ldr	r3, [r7, #0]
 801a1ba:	801a      	strh	r2, [r3, #0]
         break;
 801a1bc:	e053      	b.n	801a266 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801a1be:	4b2c      	ldr	r3, [pc, #176]	@ (801a270 <ctlwizchip+0x1bc>)
 801a1c0:	789a      	ldrb	r2, [r3, #2]
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	3301      	adds	r3, #1
 801a1ca:	4a29      	ldr	r2, [pc, #164]	@ (801a270 <ctlwizchip+0x1bc>)
 801a1cc:	78d2      	ldrb	r2, [r2, #3]
 801a1ce:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	3302      	adds	r3, #2
 801a1d4:	4a26      	ldr	r2, [pc, #152]	@ (801a270 <ctlwizchip+0x1bc>)
 801a1d6:	7912      	ldrb	r2, [r2, #4]
 801a1d8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 801a1da:	683b      	ldr	r3, [r7, #0]
 801a1dc:	3303      	adds	r3, #3
 801a1de:	4a24      	ldr	r2, [pc, #144]	@ (801a270 <ctlwizchip+0x1bc>)
 801a1e0:	7952      	ldrb	r2, [r2, #5]
 801a1e2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 801a1e4:	683b      	ldr	r3, [r7, #0]
 801a1e6:	3304      	adds	r3, #4
 801a1e8:	4a21      	ldr	r2, [pc, #132]	@ (801a270 <ctlwizchip+0x1bc>)
 801a1ea:	7992      	ldrb	r2, [r2, #6]
 801a1ec:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	3305      	adds	r3, #5
 801a1f2:	4a1f      	ldr	r2, [pc, #124]	@ (801a270 <ctlwizchip+0x1bc>)
 801a1f4:	79d2      	ldrb	r2, [r2, #7]
 801a1f6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 801a1f8:	683b      	ldr	r3, [r7, #0]
 801a1fa:	3306      	adds	r3, #6
 801a1fc:	2200      	movs	r2, #0
 801a1fe:	701a      	strb	r2, [r3, #0]
         break;
 801a200:	e031      	b.n	801a266 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 801a202:	f000 fa13 	bl	801a62c <wizphy_reset>
         break;
 801a206:	e02e      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 801a208:	6838      	ldr	r0, [r7, #0]
 801a20a:	f000 fa36 	bl	801a67a <wizphy_setphyconf>
         break;
 801a20e:	e02a      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 801a210:	6838      	ldr	r0, [r7, #0]
 801a212:	f000 fa75 	bl	801a700 <wizphy_getphyconf>
         break;
 801a216:	e026      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	781b      	ldrb	r3, [r3, #0]
 801a21c:	4618      	mov	r0, r3
 801a21e:	f000 faf7 	bl	801a810 <wizphy_setphypmode>
 801a222:	4603      	mov	r3, r0
 801a224:	e020      	b.n	801a268 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 801a226:	f000 f9e8 	bl	801a5fa <wizphy_getphypmode>
 801a22a:	4603      	mov	r3, r0
 801a22c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a22e:	7dfb      	ldrb	r3, [r7, #23]
 801a230:	2bff      	cmp	r3, #255	@ 0xff
 801a232:	d102      	bne.n	801a23a <ctlwizchip+0x186>
 801a234:	f04f 33ff 	mov.w	r3, #4294967295
 801a238:	e016      	b.n	801a268 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 801a23a:	683b      	ldr	r3, [r7, #0]
 801a23c:	7dfa      	ldrb	r2, [r7, #23]
 801a23e:	701a      	strb	r2, [r3, #0]
         break;
 801a240:	e011      	b.n	801a266 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 801a242:	f000 f9c4 	bl	801a5ce <wizphy_getphylink>
 801a246:	4603      	mov	r3, r0
 801a248:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a24a:	7dfb      	ldrb	r3, [r7, #23]
 801a24c:	2bff      	cmp	r3, #255	@ 0xff
 801a24e:	d102      	bne.n	801a256 <ctlwizchip+0x1a2>
 801a250:	f04f 33ff 	mov.w	r3, #4294967295
 801a254:	e008      	b.n	801a268 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 801a256:	683b      	ldr	r3, [r7, #0]
 801a258:	7dfa      	ldrb	r2, [r7, #23]
 801a25a:	701a      	strb	r2, [r3, #0]
         break;
 801a25c:	e003      	b.n	801a266 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 801a25e:	f04f 33ff 	mov.w	r3, #4294967295
 801a262:	e001      	b.n	801a268 <ctlwizchip+0x1b4>
         break;
 801a264:	bf00      	nop
   }
   return 0;
 801a266:	2300      	movs	r3, #0
}
 801a268:	4618      	mov	r0, r3
 801a26a:	371c      	adds	r7, #28
 801a26c:	46bd      	mov	sp, r7
 801a26e:	bd90      	pop	{r4, r7, pc}
 801a270:	200000c4 	.word	0x200000c4

0801a274 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 801a274:	b580      	push	{r7, lr}
 801a276:	b082      	sub	sp, #8
 801a278:	af00      	add	r7, sp, #0
 801a27a:	4603      	mov	r3, r0
 801a27c:	6039      	str	r1, [r7, #0]
 801a27e:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 801a280:	79fb      	ldrb	r3, [r7, #7]
 801a282:	2b05      	cmp	r3, #5
 801a284:	d82c      	bhi.n	801a2e0 <ctlnetwork+0x6c>
 801a286:	a201      	add	r2, pc, #4	@ (adr r2, 801a28c <ctlnetwork+0x18>)
 801a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a28c:	0801a2a5 	.word	0x0801a2a5
 801a290:	0801a2ad 	.word	0x0801a2ad
 801a294:	0801a2b5 	.word	0x0801a2b5
 801a298:	0801a2c3 	.word	0x0801a2c3
 801a29c:	0801a2d1 	.word	0x0801a2d1
 801a2a0:	0801a2d9 	.word	0x0801a2d9
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 801a2a4:	6838      	ldr	r0, [r7, #0]
 801a2a6:	f000 fafd 	bl	801a8a4 <wizchip_setnetinfo>
         break;
 801a2aa:	e01c      	b.n	801a2e6 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 801a2ac:	6838      	ldr	r0, [r7, #0]
 801a2ae:	f000 fb39 	bl	801a924 <wizchip_getnetinfo>
         break;
 801a2b2:	e018      	b.n	801a2e6 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	f000 fb73 	bl	801a9a4 <wizchip_setnetmode>
 801a2be:	4603      	mov	r3, r0
 801a2c0:	e012      	b.n	801a2e8 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 801a2c2:	f000 fb91 	bl	801a9e8 <wizchip_getnetmode>
 801a2c6:	4603      	mov	r3, r0
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	683b      	ldr	r3, [r7, #0]
 801a2cc:	701a      	strb	r2, [r3, #0]
         break;
 801a2ce:	e00a      	b.n	801a2e6 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 801a2d0:	6838      	ldr	r0, [r7, #0]
 801a2d2:	f000 fb91 	bl	801a9f8 <wizchip_settimeout>
         break;
 801a2d6:	e006      	b.n	801a2e6 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 801a2d8:	6838      	ldr	r0, [r7, #0]
 801a2da:	f000 fbae 	bl	801aa3a <wizchip_gettimeout>
         break;
 801a2de:	e002      	b.n	801a2e6 <ctlnetwork+0x72>
      default:
         return -1;
 801a2e0:	f04f 33ff 	mov.w	r3, #4294967295
 801a2e4:	e000      	b.n	801a2e8 <ctlnetwork+0x74>
   }
   return 0;
 801a2e6:	2300      	movs	r3, #0
}
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	3708      	adds	r7, #8
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	bd80      	pop	{r7, pc}

0801a2f0 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b086      	sub	sp, #24
 801a2f4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801a2f6:	1d3b      	adds	r3, r7, #4
 801a2f8:	2206      	movs	r2, #6
 801a2fa:	4619      	mov	r1, r3
 801a2fc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801a300:	f7fe fbce 	bl	8018aa0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801a304:	f107 0314 	add.w	r3, r7, #20
 801a308:	2204      	movs	r2, #4
 801a30a:	4619      	mov	r1, r3
 801a30c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a310:	f7fe fbc6 	bl	8018aa0 <WIZCHIP_READ_BUF>
 801a314:	f107 0310 	add.w	r3, r7, #16
 801a318:	2204      	movs	r2, #4
 801a31a:	4619      	mov	r1, r3
 801a31c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 801a320:	f7fe fbbe 	bl	8018aa0 <WIZCHIP_READ_BUF>
 801a324:	f107 030c 	add.w	r3, r7, #12
 801a328:	2204      	movs	r2, #4
 801a32a:	4619      	mov	r1, r3
 801a32c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 801a330:	f7fe fbb6 	bl	8018aa0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801a334:	2180      	movs	r1, #128	@ 0x80
 801a336:	2000      	movs	r0, #0
 801a338:	f7fe fb64 	bl	8018a04 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a33c:	2000      	movs	r0, #0
 801a33e:	f7fe fb15 	bl	801896c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801a342:	1d3b      	adds	r3, r7, #4
 801a344:	2206      	movs	r2, #6
 801a346:	4619      	mov	r1, r3
 801a348:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801a34c:	f7fe fc08 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801a350:	f107 0314 	add.w	r3, r7, #20
 801a354:	2204      	movs	r2, #4
 801a356:	4619      	mov	r1, r3
 801a358:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a35c:	f7fe fc00 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801a360:	f107 0310 	add.w	r3, r7, #16
 801a364:	2204      	movs	r2, #4
 801a366:	4619      	mov	r1, r3
 801a368:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 801a36c:	f7fe fbf8 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801a370:	f107 030c 	add.w	r3, r7, #12
 801a374:	2204      	movs	r2, #4
 801a376:	4619      	mov	r1, r3
 801a378:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 801a37c:	f7fe fbf0 	bl	8018b60 <WIZCHIP_WRITE_BUF>
}
 801a380:	bf00      	nop
 801a382:	3718      	adds	r7, #24
 801a384:	46bd      	mov	sp, r7
 801a386:	bd80      	pop	{r7, pc}

0801a388 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b084      	sub	sp, #16
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801a392:	2300      	movs	r3, #0
 801a394:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801a396:	f7ff ffab 	bl	801a2f0 <wizchip_sw_reset>
   if(txsize)
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d03b      	beq.n	801a418 <wizchip_init+0x90>
   {
      tmp = 0;
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	73fb      	strb	r3, [r7, #15]
 801a3a8:	e015      	b.n	801a3d6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801a3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3ae:	687a      	ldr	r2, [r7, #4]
 801a3b0:	4413      	add	r3, r2
 801a3b2:	781a      	ldrb	r2, [r3, #0]
 801a3b4:	7bbb      	ldrb	r3, [r7, #14]
 801a3b6:	4413      	add	r3, r2
 801a3b8:	b2db      	uxtb	r3, r3
 801a3ba:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a3bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a3c0:	2b10      	cmp	r3, #16
 801a3c2:	dd02      	ble.n	801a3ca <wizchip_init+0x42>
 801a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a3c8:	e066      	b.n	801a498 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3ce:	b2db      	uxtb	r3, r3
 801a3d0:	3301      	adds	r3, #1
 801a3d2:	b2db      	uxtb	r3, r3
 801a3d4:	73fb      	strb	r3, [r7, #15]
 801a3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3da:	2b07      	cmp	r3, #7
 801a3dc:	dde5      	ble.n	801a3aa <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3de:	2300      	movs	r3, #0
 801a3e0:	73fb      	strb	r3, [r7, #15]
 801a3e2:	e015      	b.n	801a410 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801a3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3e8:	009b      	lsls	r3, r3, #2
 801a3ea:	3301      	adds	r3, #1
 801a3ec:	00db      	lsls	r3, r3, #3
 801a3ee:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3f8:	687a      	ldr	r2, [r7, #4]
 801a3fa:	4413      	add	r3, r2
 801a3fc:	781b      	ldrb	r3, [r3, #0]
 801a3fe:	4619      	mov	r1, r3
 801a400:	f7fe fb00 	bl	8018a04 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a408:	b2db      	uxtb	r3, r3
 801a40a:	3301      	adds	r3, #1
 801a40c:	b2db      	uxtb	r3, r3
 801a40e:	73fb      	strb	r3, [r7, #15]
 801a410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a414:	2b07      	cmp	r3, #7
 801a416:	dde5      	ble.n	801a3e4 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d03b      	beq.n	801a496 <wizchip_init+0x10e>
   {
      tmp = 0;
 801a41e:	2300      	movs	r3, #0
 801a420:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a422:	2300      	movs	r3, #0
 801a424:	73fb      	strb	r3, [r7, #15]
 801a426:	e015      	b.n	801a454 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801a428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a42c:	683a      	ldr	r2, [r7, #0]
 801a42e:	4413      	add	r3, r2
 801a430:	781a      	ldrb	r2, [r3, #0]
 801a432:	7bbb      	ldrb	r3, [r7, #14]
 801a434:	4413      	add	r3, r2
 801a436:	b2db      	uxtb	r3, r3
 801a438:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a43a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a43e:	2b10      	cmp	r3, #16
 801a440:	dd02      	ble.n	801a448 <wizchip_init+0xc0>
 801a442:	f04f 33ff 	mov.w	r3, #4294967295
 801a446:	e027      	b.n	801a498 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a44c:	b2db      	uxtb	r3, r3
 801a44e:	3301      	adds	r3, #1
 801a450:	b2db      	uxtb	r3, r3
 801a452:	73fb      	strb	r3, [r7, #15]
 801a454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a458:	2b07      	cmp	r3, #7
 801a45a:	dde5      	ble.n	801a428 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a45c:	2300      	movs	r3, #0
 801a45e:	73fb      	strb	r3, [r7, #15]
 801a460:	e015      	b.n	801a48e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801a462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a466:	009b      	lsls	r3, r3, #2
 801a468:	3301      	adds	r3, #1
 801a46a:	00db      	lsls	r3, r3, #3
 801a46c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 801a470:	4618      	mov	r0, r3
 801a472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a476:	683a      	ldr	r2, [r7, #0]
 801a478:	4413      	add	r3, r2
 801a47a:	781b      	ldrb	r3, [r3, #0]
 801a47c:	4619      	mov	r1, r3
 801a47e:	f7fe fac1 	bl	8018a04 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a486:	b2db      	uxtb	r3, r3
 801a488:	3301      	adds	r3, #1
 801a48a:	b2db      	uxtb	r3, r3
 801a48c:	73fb      	strb	r3, [r7, #15]
 801a48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a492:	2b07      	cmp	r3, #7
 801a494:	dde5      	ble.n	801a462 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801a496:	2300      	movs	r3, #0
}
 801a498:	4618      	mov	r0, r3
 801a49a:	3710      	adds	r7, #16
 801a49c:	46bd      	mov	sp, r7
 801a49e:	bd80      	pop	{r7, pc}

0801a4a0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b084      	sub	sp, #16
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 801a4aa:	88fb      	ldrh	r3, [r7, #6]
 801a4ac:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801a4ae:	88fb      	ldrh	r3, [r7, #6]
 801a4b0:	0a1b      	lsrs	r3, r3, #8
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801a4b6:	7bfb      	ldrb	r3, [r7, #15]
 801a4b8:	f023 030f 	bic.w	r3, r3, #15
 801a4bc:	b2db      	uxtb	r3, r3
 801a4be:	4619      	mov	r1, r3
 801a4c0:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 801a4c4:	f7fe fa9e 	bl	8018a04 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	73fb      	strb	r3, [r7, #15]
 801a4cc:	e014      	b.n	801a4f8 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801a4ce:	7bba      	ldrb	r2, [r7, #14]
 801a4d0:	7bfb      	ldrb	r3, [r7, #15]
 801a4d2:	fa42 f303 	asr.w	r3, r2, r3
 801a4d6:	f003 0301 	and.w	r3, r3, #1
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d009      	beq.n	801a4f2 <wizchip_clrinterrupt+0x52>
 801a4de:	7bfb      	ldrb	r3, [r7, #15]
 801a4e0:	009b      	lsls	r3, r3, #2
 801a4e2:	3301      	adds	r3, #1
 801a4e4:	00db      	lsls	r3, r3, #3
 801a4e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801a4ea:	211f      	movs	r1, #31
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f7fe fa89 	bl	8018a04 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801a4f2:	7bfb      	ldrb	r3, [r7, #15]
 801a4f4:	3301      	adds	r3, #1
 801a4f6:	73fb      	strb	r3, [r7, #15]
 801a4f8:	7bfb      	ldrb	r3, [r7, #15]
 801a4fa:	2b07      	cmp	r3, #7
 801a4fc:	d9e7      	bls.n	801a4ce <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 801a4fe:	bf00      	nop
 801a500:	bf00      	nop
 801a502:	3710      	adds	r7, #16
 801a504:	46bd      	mov	sp, r7
 801a506:	bd80      	pop	{r7, pc}

0801a508 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b082      	sub	sp, #8
 801a50c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801a50e:	2300      	movs	r3, #0
 801a510:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 801a512:	2300      	movs	r3, #0
 801a514:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a516:	2300      	movs	r3, #0
 801a518:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801a51a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 801a51e:	f7fe fa25 	bl	801896c <WIZCHIP_READ>
 801a522:	4603      	mov	r3, r0
 801a524:	f023 030f 	bic.w	r3, r3, #15
 801a528:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 801a52a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 801a52e:	f7fe fa1d 	bl	801896c <WIZCHIP_READ>
 801a532:	4603      	mov	r3, r0
 801a534:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801a536:	79bb      	ldrb	r3, [r7, #6]
 801a538:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 801a53a:	88bb      	ldrh	r3, [r7, #4]
 801a53c:	021b      	lsls	r3, r3, #8
 801a53e:	b29a      	uxth	r2, r3
 801a540:	79fb      	ldrb	r3, [r7, #7]
 801a542:	b29b      	uxth	r3, r3
 801a544:	4413      	add	r3, r2
 801a546:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a548:	88bb      	ldrh	r3, [r7, #4]
}
 801a54a:	4618      	mov	r0, r3
 801a54c:	3708      	adds	r7, #8
 801a54e:	46bd      	mov	sp, r7
 801a550:	bd80      	pop	{r7, pc}

0801a552 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801a552:	b580      	push	{r7, lr}
 801a554:	b084      	sub	sp, #16
 801a556:	af00      	add	r7, sp, #0
 801a558:	4603      	mov	r3, r0
 801a55a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 801a55c:	88fb      	ldrh	r3, [r7, #6]
 801a55e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801a560:	88fb      	ldrh	r3, [r7, #6]
 801a562:	0a1b      	lsrs	r3, r3, #8
 801a564:	b29b      	uxth	r3, r3
 801a566:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801a568:	7bfb      	ldrb	r3, [r7, #15]
 801a56a:	4619      	mov	r1, r3
 801a56c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 801a570:	f7fe fa48 	bl	8018a04 <WIZCHIP_WRITE>
   setSIMR(simr);
 801a574:	7bbb      	ldrb	r3, [r7, #14]
 801a576:	4619      	mov	r1, r3
 801a578:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 801a57c:	f7fe fa42 	bl	8018a04 <WIZCHIP_WRITE>
#endif   
}
 801a580:	bf00      	nop
 801a582:	3710      	adds	r7, #16
 801a584:	46bd      	mov	sp, r7
 801a586:	bd80      	pop	{r7, pc}

0801a588 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b082      	sub	sp, #8
 801a58c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801a58e:	2300      	movs	r3, #0
 801a590:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 801a592:	2300      	movs	r3, #0
 801a594:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a596:	2300      	movs	r3, #0
 801a598:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801a59a:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 801a59e:	f7fe f9e5 	bl	801896c <WIZCHIP_READ>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 801a5a6:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 801a5aa:	f7fe f9df 	bl	801896c <WIZCHIP_READ>
 801a5ae:	4603      	mov	r3, r0
 801a5b0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801a5b2:	79bb      	ldrb	r3, [r7, #6]
 801a5b4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 801a5b6:	88bb      	ldrh	r3, [r7, #4]
 801a5b8:	021b      	lsls	r3, r3, #8
 801a5ba:	b29a      	uxth	r2, r3
 801a5bc:	79fb      	ldrb	r3, [r7, #7]
 801a5be:	b29b      	uxth	r3, r3
 801a5c0:	4413      	add	r3, r2
 801a5c2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a5c4:	88bb      	ldrh	r3, [r7, #4]
}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	3708      	adds	r7, #8
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	bd80      	pop	{r7, pc}

0801a5ce <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801a5ce:	b580      	push	{r7, lr}
 801a5d0:	b082      	sub	sp, #8
 801a5d2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801a5d8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a5dc:	f7fe f9c6 	bl	801896c <WIZCHIP_READ>
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	f003 0301 	and.w	r3, r3, #1
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d001      	beq.n	801a5ee <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 801a5ea:	2301      	movs	r3, #1
 801a5ec:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 801a5ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	3708      	adds	r7, #8
 801a5f6:	46bd      	mov	sp, r7
 801a5f8:	bd80      	pop	{r7, pc}

0801a5fa <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801a5fa:	b580      	push	{r7, lr}
 801a5fc:	b082      	sub	sp, #8
 801a5fe:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801a600:	2300      	movs	r3, #0
 801a602:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801a604:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a608:	f7fe f9b0 	bl	801896c <WIZCHIP_READ>
 801a60c:	4603      	mov	r3, r0
 801a60e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a612:	2b30      	cmp	r3, #48	@ 0x30
 801a614:	d102      	bne.n	801a61c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 801a616:	2301      	movs	r3, #1
 801a618:	71fb      	strb	r3, [r7, #7]
 801a61a:	e001      	b.n	801a620 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 801a61c:	2300      	movs	r3, #0
 801a61e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 801a620:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a624:	4618      	mov	r0, r3
 801a626:	3708      	adds	r7, #8
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}

0801a62c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b082      	sub	sp, #8
 801a630:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801a632:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a636:	f7fe f999 	bl	801896c <WIZCHIP_READ>
 801a63a:	4603      	mov	r3, r0
 801a63c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 801a63e:	79fb      	ldrb	r3, [r7, #7]
 801a640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a644:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a646:	79fb      	ldrb	r3, [r7, #7]
 801a648:	4619      	mov	r1, r3
 801a64a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a64e:	f7fe f9d9 	bl	8018a04 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801a652:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a656:	f7fe f989 	bl	801896c <WIZCHIP_READ>
 801a65a:	4603      	mov	r3, r0
 801a65c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 801a65e:	79fb      	ldrb	r3, [r7, #7]
 801a660:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801a664:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a666:	79fb      	ldrb	r3, [r7, #7]
 801a668:	4619      	mov	r1, r3
 801a66a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a66e:	f7fe f9c9 	bl	8018a04 <WIZCHIP_WRITE>
}
 801a672:	bf00      	nop
 801a674:	3708      	adds	r7, #8
 801a676:	46bd      	mov	sp, r7
 801a678:	bd80      	pop	{r7, pc}

0801a67a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801a67a:	b580      	push	{r7, lr}
 801a67c:	b084      	sub	sp, #16
 801a67e:	af00      	add	r7, sp, #0
 801a680:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a682:	2300      	movs	r3, #0
 801a684:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	781b      	ldrb	r3, [r3, #0]
 801a68a:	2b01      	cmp	r3, #1
 801a68c:	d104      	bne.n	801a698 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 801a68e:	7bfb      	ldrb	r3, [r7, #15]
 801a690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a694:	73fb      	strb	r3, [r7, #15]
 801a696:	e003      	b.n	801a6a0 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 801a698:	7bfb      	ldrb	r3, [r7, #15]
 801a69a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a69e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	785b      	ldrb	r3, [r3, #1]
 801a6a4:	2b01      	cmp	r3, #1
 801a6a6:	d104      	bne.n	801a6b2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a6a8:	7bfb      	ldrb	r3, [r7, #15]
 801a6aa:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 801a6ae:	73fb      	strb	r3, [r7, #15]
 801a6b0:	e019      	b.n	801a6e6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	78db      	ldrb	r3, [r3, #3]
 801a6b6:	2b01      	cmp	r3, #1
 801a6b8:	d10d      	bne.n	801a6d6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	789b      	ldrb	r3, [r3, #2]
 801a6be:	2b01      	cmp	r3, #1
 801a6c0:	d104      	bne.n	801a6cc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 801a6c2:	7bfb      	ldrb	r3, [r7, #15]
 801a6c4:	f043 0318 	orr.w	r3, r3, #24
 801a6c8:	73fb      	strb	r3, [r7, #15]
 801a6ca:	e00c      	b.n	801a6e6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801a6cc:	7bfb      	ldrb	r3, [r7, #15]
 801a6ce:	f043 0308 	orr.w	r3, r3, #8
 801a6d2:	73fb      	strb	r3, [r7, #15]
 801a6d4:	e007      	b.n	801a6e6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	789b      	ldrb	r3, [r3, #2]
 801a6da:	2b01      	cmp	r3, #1
 801a6dc:	d103      	bne.n	801a6e6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 801a6de:	7bfb      	ldrb	r3, [r7, #15]
 801a6e0:	f043 0310 	orr.w	r3, r3, #16
 801a6e4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 801a6e6:	7bfb      	ldrb	r3, [r7, #15]
 801a6e8:	4619      	mov	r1, r3
 801a6ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a6ee:	f7fe f989 	bl	8018a04 <WIZCHIP_WRITE>
   wizphy_reset();
 801a6f2:	f7ff ff9b 	bl	801a62c <wizphy_reset>
}
 801a6f6:	bf00      	nop
 801a6f8:	3710      	adds	r7, #16
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	bd80      	pop	{r7, pc}
	...

0801a700 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b084      	sub	sp, #16
 801a704:	af00      	add	r7, sp, #0
 801a706:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a708:	2300      	movs	r3, #0
 801a70a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a70c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a710:	f7fe f92c 	bl	801896c <WIZCHIP_READ>
 801a714:	4603      	mov	r3, r0
 801a716:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a718:	7bfb      	ldrb	r3, [r7, #15]
 801a71a:	119b      	asrs	r3, r3, #6
 801a71c:	b2db      	uxtb	r3, r3
 801a71e:	f003 0301 	and.w	r3, r3, #1
 801a722:	b2da      	uxtb	r2, r3
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a728:	7bfb      	ldrb	r3, [r7, #15]
 801a72a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a72e:	2b20      	cmp	r3, #32
 801a730:	d001      	beq.n	801a736 <wizphy_getphyconf+0x36>
 801a732:	2b38      	cmp	r3, #56	@ 0x38
 801a734:	d103      	bne.n	801a73e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	2201      	movs	r2, #1
 801a73a:	705a      	strb	r2, [r3, #1]
         break;
 801a73c:	e003      	b.n	801a746 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	2200      	movs	r2, #0
 801a742:	705a      	strb	r2, [r3, #1]
         break;
 801a744:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a746:	7bfb      	ldrb	r3, [r7, #15]
 801a748:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a74c:	3b10      	subs	r3, #16
 801a74e:	2b10      	cmp	r3, #16
 801a750:	bf8c      	ite	hi
 801a752:	2201      	movhi	r2, #1
 801a754:	2200      	movls	r2, #0
 801a756:	b2d2      	uxtb	r2, r2
 801a758:	2a00      	cmp	r2, #0
 801a75a:	d10f      	bne.n	801a77c <wizphy_getphyconf+0x7c>
 801a75c:	4a1b      	ldr	r2, [pc, #108]	@ (801a7cc <wizphy_getphyconf+0xcc>)
 801a75e:	fa22 f303 	lsr.w	r3, r2, r3
 801a762:	f003 0301 	and.w	r3, r3, #1
 801a766:	2b00      	cmp	r3, #0
 801a768:	bf14      	ite	ne
 801a76a:	2301      	movne	r3, #1
 801a76c:	2300      	moveq	r3, #0
 801a76e:	b2db      	uxtb	r3, r3
 801a770:	2b00      	cmp	r3, #0
 801a772:	d003      	beq.n	801a77c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	2201      	movs	r2, #1
 801a778:	709a      	strb	r2, [r3, #2]
         break;
 801a77a:	e003      	b.n	801a784 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	2200      	movs	r2, #0
 801a780:	709a      	strb	r2, [r3, #2]
         break;
 801a782:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a784:	7bfb      	ldrb	r3, [r7, #15]
 801a786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a78a:	3b08      	subs	r3, #8
 801a78c:	2b18      	cmp	r3, #24
 801a78e:	bf8c      	ite	hi
 801a790:	2201      	movhi	r2, #1
 801a792:	2200      	movls	r2, #0
 801a794:	b2d2      	uxtb	r2, r2
 801a796:	2a00      	cmp	r2, #0
 801a798:	d10f      	bne.n	801a7ba <wizphy_getphyconf+0xba>
 801a79a:	4a0d      	ldr	r2, [pc, #52]	@ (801a7d0 <wizphy_getphyconf+0xd0>)
 801a79c:	fa22 f303 	lsr.w	r3, r2, r3
 801a7a0:	f003 0301 	and.w	r3, r3, #1
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	bf14      	ite	ne
 801a7a8:	2301      	movne	r3, #1
 801a7aa:	2300      	moveq	r3, #0
 801a7ac:	b2db      	uxtb	r3, r3
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d003      	beq.n	801a7ba <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	2201      	movs	r2, #1
 801a7b6:	70da      	strb	r2, [r3, #3]
         break;
 801a7b8:	e003      	b.n	801a7c2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	2200      	movs	r2, #0
 801a7be:	70da      	strb	r2, [r3, #3]
         break;
 801a7c0:	bf00      	nop
   }
}
 801a7c2:	bf00      	nop
 801a7c4:	3710      	adds	r7, #16
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}
 801a7ca:	bf00      	nop
 801a7cc:	00010101 	.word	0x00010101
 801a7d0:	01010001 	.word	0x01010001

0801a7d4 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b084      	sub	sp, #16
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a7dc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a7e0:	f7fe f8c4 	bl	801896c <WIZCHIP_READ>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a7e8:	7bfb      	ldrb	r3, [r7, #15]
 801a7ea:	109b      	asrs	r3, r3, #2
 801a7ec:	b2db      	uxtb	r3, r3
 801a7ee:	f003 0301 	and.w	r3, r3, #1
 801a7f2:	b2da      	uxtb	r2, r3
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a7f8:	7bfb      	ldrb	r3, [r7, #15]
 801a7fa:	105b      	asrs	r3, r3, #1
 801a7fc:	b2db      	uxtb	r3, r3
 801a7fe:	f003 0301 	and.w	r3, r3, #1
 801a802:	b2da      	uxtb	r2, r3
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	709a      	strb	r2, [r3, #2]
}
 801a808:	bf00      	nop
 801a80a:	3710      	adds	r7, #16
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd80      	pop	{r7, pc}

0801a810 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b084      	sub	sp, #16
 801a814:	af00      	add	r7, sp, #0
 801a816:	4603      	mov	r3, r0
 801a818:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a81a:	2300      	movs	r3, #0
 801a81c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a81e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a822:	f7fe f8a3 	bl	801896c <WIZCHIP_READ>
 801a826:	4603      	mov	r3, r0
 801a828:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a82a:	7bfb      	ldrb	r3, [r7, #15]
 801a82c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a830:	2b00      	cmp	r3, #0
 801a832:	d102      	bne.n	801a83a <wizphy_setphypmode+0x2a>
 801a834:	f04f 33ff 	mov.w	r3, #4294967295
 801a838:	e030      	b.n	801a89c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a83a:	7bfb      	ldrb	r3, [r7, #15]
 801a83c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 801a840:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a842:	79fb      	ldrb	r3, [r7, #7]
 801a844:	2b01      	cmp	r3, #1
 801a846:	d104      	bne.n	801a852 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a848:	7bfb      	ldrb	r3, [r7, #15]
 801a84a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 801a84e:	73fb      	strb	r3, [r7, #15]
 801a850:	e003      	b.n	801a85a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a852:	7bfb      	ldrb	r3, [r7, #15]
 801a854:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 801a858:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a85a:	7bfb      	ldrb	r3, [r7, #15]
 801a85c:	4619      	mov	r1, r3
 801a85e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a862:	f7fe f8cf 	bl	8018a04 <WIZCHIP_WRITE>
   wizphy_reset();
 801a866:	f7ff fee1 	bl	801a62c <wizphy_reset>
   tmp = getPHYCFGR();
 801a86a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 801a86e:	f7fe f87d 	bl	801896c <WIZCHIP_READ>
 801a872:	4603      	mov	r3, r0
 801a874:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a876:	79fb      	ldrb	r3, [r7, #7]
 801a878:	2b01      	cmp	r3, #1
 801a87a:	d106      	bne.n	801a88a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a87c:	7bfb      	ldrb	r3, [r7, #15]
 801a87e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801a882:	2b00      	cmp	r3, #0
 801a884:	d008      	beq.n	801a898 <wizphy_setphypmode+0x88>
 801a886:	2300      	movs	r3, #0
 801a888:	e008      	b.n	801a89c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a88a:	7bfb      	ldrb	r3, [r7, #15]
 801a88c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a890:	2b00      	cmp	r3, #0
 801a892:	d001      	beq.n	801a898 <wizphy_setphypmode+0x88>
 801a894:	2300      	movs	r3, #0
 801a896:	e001      	b.n	801a89c <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a898:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a89c:	4618      	mov	r0, r3
 801a89e:	3710      	adds	r7, #16
 801a8a0:	46bd      	mov	sp, r7
 801a8a2:	bd80      	pop	{r7, pc}

0801a8a4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b082      	sub	sp, #8
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2206      	movs	r2, #6
 801a8b0:	4619      	mov	r1, r3
 801a8b2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801a8b6:	f7fe f953 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	330e      	adds	r3, #14
 801a8be:	2204      	movs	r2, #4
 801a8c0:	4619      	mov	r1, r3
 801a8c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a8c6:	f7fe f94b 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	330a      	adds	r3, #10
 801a8ce:	2204      	movs	r2, #4
 801a8d0:	4619      	mov	r1, r3
 801a8d2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 801a8d6:	f7fe f943 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	3306      	adds	r3, #6
 801a8de:	2204      	movs	r2, #4
 801a8e0:	4619      	mov	r1, r3
 801a8e2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 801a8e6:	f7fe f93b 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	7c9a      	ldrb	r2, [r3, #18]
 801a8ee:	4b0b      	ldr	r3, [pc, #44]	@ (801a91c <wizchip_setnetinfo+0x78>)
 801a8f0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	7cda      	ldrb	r2, [r3, #19]
 801a8f6:	4b09      	ldr	r3, [pc, #36]	@ (801a91c <wizchip_setnetinfo+0x78>)
 801a8f8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	7d1a      	ldrb	r2, [r3, #20]
 801a8fe:	4b07      	ldr	r3, [pc, #28]	@ (801a91c <wizchip_setnetinfo+0x78>)
 801a900:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	7d5a      	ldrb	r2, [r3, #21]
 801a906:	4b05      	ldr	r3, [pc, #20]	@ (801a91c <wizchip_setnetinfo+0x78>)
 801a908:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	7d9a      	ldrb	r2, [r3, #22]
 801a90e:	4b04      	ldr	r3, [pc, #16]	@ (801a920 <wizchip_setnetinfo+0x7c>)
 801a910:	701a      	strb	r2, [r3, #0]
}
 801a912:	bf00      	nop
 801a914:	3708      	adds	r7, #8
 801a916:	46bd      	mov	sp, r7
 801a918:	bd80      	pop	{r7, pc}
 801a91a:	bf00      	nop
 801a91c:	200009a0 	.word	0x200009a0
 801a920:	200009a4 	.word	0x200009a4

0801a924 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a924:	b580      	push	{r7, lr}
 801a926:	b082      	sub	sp, #8
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	2206      	movs	r2, #6
 801a930:	4619      	mov	r1, r3
 801a932:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801a936:	f7fe f8b3 	bl	8018aa0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	330e      	adds	r3, #14
 801a93e:	2204      	movs	r2, #4
 801a940:	4619      	mov	r1, r3
 801a942:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801a946:	f7fe f8ab 	bl	8018aa0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	330a      	adds	r3, #10
 801a94e:	2204      	movs	r2, #4
 801a950:	4619      	mov	r1, r3
 801a952:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 801a956:	f7fe f8a3 	bl	8018aa0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	3306      	adds	r3, #6
 801a95e:	2204      	movs	r2, #4
 801a960:	4619      	mov	r1, r3
 801a962:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 801a966:	f7fe f89b 	bl	8018aa0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a96a:	4b0c      	ldr	r3, [pc, #48]	@ (801a99c <wizchip_getnetinfo+0x78>)
 801a96c:	781a      	ldrb	r2, [r3, #0]
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a972:	4b0a      	ldr	r3, [pc, #40]	@ (801a99c <wizchip_getnetinfo+0x78>)
 801a974:	785a      	ldrb	r2, [r3, #1]
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a97a:	4b08      	ldr	r3, [pc, #32]	@ (801a99c <wizchip_getnetinfo+0x78>)
 801a97c:	789a      	ldrb	r2, [r3, #2]
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a982:	4b06      	ldr	r3, [pc, #24]	@ (801a99c <wizchip_getnetinfo+0x78>)
 801a984:	78da      	ldrb	r2, [r3, #3]
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a98a:	4b05      	ldr	r3, [pc, #20]	@ (801a9a0 <wizchip_getnetinfo+0x7c>)
 801a98c:	781a      	ldrb	r2, [r3, #0]
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	759a      	strb	r2, [r3, #22]
}
 801a992:	bf00      	nop
 801a994:	3708      	adds	r7, #8
 801a996:	46bd      	mov	sp, r7
 801a998:	bd80      	pop	{r7, pc}
 801a99a:	bf00      	nop
 801a99c:	200009a0 	.word	0x200009a0
 801a9a0:	200009a4 	.word	0x200009a4

0801a9a4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b084      	sub	sp, #16
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a9b2:	79fb      	ldrb	r3, [r7, #7]
 801a9b4:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d002      	beq.n	801a9c2 <wizchip_setnetmode+0x1e>
 801a9bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a9c0:	e00e      	b.n	801a9e0 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a9c2:	2000      	movs	r0, #0
 801a9c4:	f7fd ffd2 	bl	801896c <WIZCHIP_READ>
 801a9c8:	4603      	mov	r3, r0
 801a9ca:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a9cc:	7bfa      	ldrb	r2, [r7, #15]
 801a9ce:	79fb      	ldrb	r3, [r7, #7]
 801a9d0:	4313      	orrs	r3, r2
 801a9d2:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a9d4:	7bfb      	ldrb	r3, [r7, #15]
 801a9d6:	4619      	mov	r1, r3
 801a9d8:	2000      	movs	r0, #0
 801a9da:	f7fe f813 	bl	8018a04 <WIZCHIP_WRITE>
   return 0;
 801a9de:	2300      	movs	r3, #0
}
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	3710      	adds	r7, #16
 801a9e4:	46bd      	mov	sp, r7
 801a9e6:	bd80      	pop	{r7, pc}

0801a9e8 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a9ec:	2000      	movs	r0, #0
 801a9ee:	f7fd ffbd 	bl	801896c <WIZCHIP_READ>
 801a9f2:	4603      	mov	r3, r0
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	bd80      	pop	{r7, pc}

0801a9f8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b082      	sub	sp, #8
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	781b      	ldrb	r3, [r3, #0]
 801aa04:	4619      	mov	r1, r3
 801aa06:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 801aa0a:	f7fd fffb 	bl	8018a04 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	885b      	ldrh	r3, [r3, #2]
 801aa12:	0a1b      	lsrs	r3, r3, #8
 801aa14:	b29b      	uxth	r3, r3
 801aa16:	b2db      	uxtb	r3, r3
 801aa18:	4619      	mov	r1, r3
 801aa1a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 801aa1e:	f7fd fff1 	bl	8018a04 <WIZCHIP_WRITE>
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	885b      	ldrh	r3, [r3, #2]
 801aa26:	b2db      	uxtb	r3, r3
 801aa28:	4619      	mov	r1, r3
 801aa2a:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 801aa2e:	f7fd ffe9 	bl	8018a04 <WIZCHIP_WRITE>
}
 801aa32:	bf00      	nop
 801aa34:	3708      	adds	r7, #8
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}

0801aa3a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801aa3a:	b590      	push	{r4, r7, lr}
 801aa3c:	b083      	sub	sp, #12
 801aa3e:	af00      	add	r7, sp, #0
 801aa40:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801aa42:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 801aa46:	f7fd ff91 	bl	801896c <WIZCHIP_READ>
 801aa4a:	4603      	mov	r3, r0
 801aa4c:	461a      	mov	r2, r3
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801aa52:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 801aa56:	f7fd ff89 	bl	801896c <WIZCHIP_READ>
 801aa5a:	4603      	mov	r3, r0
 801aa5c:	021b      	lsls	r3, r3, #8
 801aa5e:	b29c      	uxth	r4, r3
 801aa60:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 801aa64:	f7fd ff82 	bl	801896c <WIZCHIP_READ>
 801aa68:	4603      	mov	r3, r0
 801aa6a:	4423      	add	r3, r4
 801aa6c:	b29a      	uxth	r2, r3
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	805a      	strh	r2, [r3, #2]
}
 801aa72:	bf00      	nop
 801aa74:	370c      	adds	r7, #12
 801aa76:	46bd      	mov	sp, r7
 801aa78:	bd90      	pop	{r4, r7, pc}
	...

0801aa7c <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801aa80:	2204      	movs	r2, #4
 801aa82:	4909      	ldr	r1, [pc, #36]	@ (801aaa8 <default_ip_assign+0x2c>)
 801aa84:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 801aa88:	f7fe f86a 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801aa8c:	2204      	movs	r2, #4
 801aa8e:	4907      	ldr	r1, [pc, #28]	@ (801aaac <default_ip_assign+0x30>)
 801aa90:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 801aa94:	f7fe f864 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801aa98:	2204      	movs	r2, #4
 801aa9a:	4905      	ldr	r1, [pc, #20]	@ (801aab0 <default_ip_assign+0x34>)
 801aa9c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801aaa0:	f7fe f85e 	bl	8018b60 <WIZCHIP_WRITE_BUF>
}
 801aaa4:	bf00      	nop
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	200009b4 	.word	0x200009b4
 801aaac:	200009bc 	.word	0x200009bc
 801aab0:	200009b8 	.word	0x200009b8

0801aab4 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801aab4:	b580      	push	{r7, lr}
 801aab6:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801aab8:	2180      	movs	r1, #128	@ 0x80
 801aaba:	2000      	movs	r0, #0
 801aabc:	f7fd ffa2 	bl	8018a04 <WIZCHIP_WRITE>
   getMR(); // for delay
 801aac0:	2000      	movs	r0, #0
 801aac2:	f7fd ff53 	bl	801896c <WIZCHIP_READ>
   default_ip_assign();
 801aac6:	f7ff ffd9 	bl	801aa7c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801aaca:	2206      	movs	r2, #6
 801aacc:	4903      	ldr	r1, [pc, #12]	@ (801aadc <default_ip_update+0x28>)
 801aace:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801aad2:	f7fe f845 	bl	8018b60 <WIZCHIP_WRITE_BUF>
}
 801aad6:	bf00      	nop
 801aad8:	bd80      	pop	{r7, pc}
 801aada:	bf00      	nop
 801aadc:	200009d4 	.word	0x200009d4

0801aae0 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801aae0:	b580      	push	{r7, lr}
 801aae2:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801aae4:	2180      	movs	r1, #128	@ 0x80
 801aae6:	2000      	movs	r0, #0
 801aae8:	f7fd ff8c 	bl	8018a04 <WIZCHIP_WRITE>
	getMR(); // for delay
 801aaec:	2000      	movs	r0, #0
 801aaee:	f7fd ff3d 	bl	801896c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801aaf2:	2206      	movs	r2, #6
 801aaf4:	4903      	ldr	r1, [pc, #12]	@ (801ab04 <default_ip_conflict+0x24>)
 801aaf6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801aafa:	f7fe f831 	bl	8018b60 <WIZCHIP_WRITE_BUF>
}
 801aafe:	bf00      	nop
 801ab00:	bd80      	pop	{r7, pc}
 801ab02:	bf00      	nop
 801ab04:	200009d4 	.word	0x200009d4

0801ab08 <default_delay>:

void default_delay(uint32_t time){}
 801ab08:	b480      	push	{r7}
 801ab0a:	b083      	sub	sp, #12
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
 801ab10:	bf00      	nop
 801ab12:	370c      	adds	r7, #12
 801ab14:	46bd      	mov	sp, r7
 801ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab1a:	4770      	bx	lr

0801ab1c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801ab1c:	b480      	push	{r7}
 801ab1e:	b085      	sub	sp, #20
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	60f8      	str	r0, [r7, #12]
 801ab24:	60b9      	str	r1, [r7, #8]
 801ab26:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801ab28:	4b10      	ldr	r3, [pc, #64]	@ (801ab6c <reg_dhcp_cbfunc+0x50>)
 801ab2a:	4a11      	ldr	r2, [pc, #68]	@ (801ab70 <reg_dhcp_cbfunc+0x54>)
 801ab2c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801ab2e:	4b11      	ldr	r3, [pc, #68]	@ (801ab74 <reg_dhcp_cbfunc+0x58>)
 801ab30:	4a11      	ldr	r2, [pc, #68]	@ (801ab78 <reg_dhcp_cbfunc+0x5c>)
 801ab32:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801ab34:	4b11      	ldr	r3, [pc, #68]	@ (801ab7c <reg_dhcp_cbfunc+0x60>)
 801ab36:	4a12      	ldr	r2, [pc, #72]	@ (801ab80 <reg_dhcp_cbfunc+0x64>)
 801ab38:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d002      	beq.n	801ab46 <reg_dhcp_cbfunc+0x2a>
 801ab40:	4a0a      	ldr	r2, [pc, #40]	@ (801ab6c <reg_dhcp_cbfunc+0x50>)
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801ab46:	68bb      	ldr	r3, [r7, #8]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d002      	beq.n	801ab52 <reg_dhcp_cbfunc+0x36>
 801ab4c:	4a09      	ldr	r2, [pc, #36]	@ (801ab74 <reg_dhcp_cbfunc+0x58>)
 801ab4e:	68bb      	ldr	r3, [r7, #8]
 801ab50:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d002      	beq.n	801ab5e <reg_dhcp_cbfunc+0x42>
 801ab58:	4a08      	ldr	r2, [pc, #32]	@ (801ab7c <reg_dhcp_cbfunc+0x60>)
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	6013      	str	r3, [r2, #0]
}
 801ab5e:	bf00      	nop
 801ab60:	3714      	adds	r7, #20
 801ab62:	46bd      	mov	sp, r7
 801ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab68:	4770      	bx	lr
 801ab6a:	bf00      	nop
 801ab6c:	20000104 	.word	0x20000104
 801ab70:	0801aa7d 	.word	0x0801aa7d
 801ab74:	20000108 	.word	0x20000108
 801ab78:	0801aab5 	.word	0x0801aab5
 801ab7c:	2000010c 	.word	0x2000010c
 801ab80:	0801aae1 	.word	0x0801aae1

0801ab84 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b084      	sub	sp, #16
 801ab88:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801ab8a:	463b      	mov	r3, r7
 801ab8c:	2206      	movs	r2, #6
 801ab8e:	4619      	mov	r1, r3
 801ab90:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801ab94:	f7fd ff84 	bl	8018aa0 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801ab98:	4b72      	ldr	r3, [pc, #456]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	2201      	movs	r2, #1
 801ab9e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801aba0:	4b70      	ldr	r3, [pc, #448]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2201      	movs	r2, #1
 801aba6:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801aba8:	4b6e      	ldr	r3, [pc, #440]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	2206      	movs	r2, #6
 801abae:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801abb0:	4b6c      	ldr	r3, [pc, #432]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	2200      	movs	r2, #0
 801abb6:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801abb8:	4b6a      	ldr	r3, [pc, #424]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	3304      	adds	r3, #4
 801abbe:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801abc0:	4b69      	ldr	r3, [pc, #420]	@ (801ad68 <makeDHCPMSG+0x1e4>)
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	0e1b      	lsrs	r3, r3, #24
 801abc6:	b2da      	uxtb	r2, r3
 801abc8:	68bb      	ldr	r3, [r7, #8]
 801abca:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801abcc:	4b66      	ldr	r3, [pc, #408]	@ (801ad68 <makeDHCPMSG+0x1e4>)
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	0c1a      	lsrs	r2, r3, #16
 801abd2:	68bb      	ldr	r3, [r7, #8]
 801abd4:	3301      	adds	r3, #1
 801abd6:	b2d2      	uxtb	r2, r2
 801abd8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801abda:	4b63      	ldr	r3, [pc, #396]	@ (801ad68 <makeDHCPMSG+0x1e4>)
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	0a1a      	lsrs	r2, r3, #8
 801abe0:	68bb      	ldr	r3, [r7, #8]
 801abe2:	3302      	adds	r3, #2
 801abe4:	b2d2      	uxtb	r2, r2
 801abe6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801abe8:	4b5f      	ldr	r3, [pc, #380]	@ (801ad68 <makeDHCPMSG+0x1e4>)
 801abea:	681a      	ldr	r2, [r3, #0]
 801abec:	68bb      	ldr	r3, [r7, #8]
 801abee:	3303      	adds	r3, #3
 801abf0:	b2d2      	uxtb	r2, r2
 801abf2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801abf4:	4b5b      	ldr	r3, [pc, #364]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	2200      	movs	r2, #0
 801abfa:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801abfc:	4b59      	ldr	r3, [pc, #356]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	330a      	adds	r3, #10
 801ac02:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801ac04:	68bb      	ldr	r3, [r7, #8]
 801ac06:	2280      	movs	r2, #128	@ 0x80
 801ac08:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801ac0a:	68bb      	ldr	r3, [r7, #8]
 801ac0c:	3301      	adds	r3, #1
 801ac0e:	2200      	movs	r2, #0
 801ac10:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801ac12:	4b54      	ldr	r3, [pc, #336]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	2200      	movs	r2, #0
 801ac18:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801ac1a:	4b52      	ldr	r3, [pc, #328]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	2200      	movs	r2, #0
 801ac20:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801ac22:	4b50      	ldr	r3, [pc, #320]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	2200      	movs	r2, #0
 801ac28:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801ac2a:	4b4e      	ldr	r3, [pc, #312]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2200      	movs	r2, #0
 801ac30:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801ac32:	4b4c      	ldr	r3, [pc, #304]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	2200      	movs	r2, #0
 801ac38:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801ac3a:	4b4a      	ldr	r3, [pc, #296]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	2200      	movs	r2, #0
 801ac40:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801ac42:	4b48      	ldr	r3, [pc, #288]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	2200      	movs	r2, #0
 801ac48:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801ac4a:	4b46      	ldr	r3, [pc, #280]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	2200      	movs	r2, #0
 801ac50:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801ac52:	4b44      	ldr	r3, [pc, #272]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2200      	movs	r2, #0
 801ac58:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801ac5a:	4b42      	ldr	r3, [pc, #264]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	2200      	movs	r2, #0
 801ac60:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801ac62:	4b40      	ldr	r3, [pc, #256]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	2200      	movs	r2, #0
 801ac68:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801ac6a:	4b3e      	ldr	r3, [pc, #248]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	2200      	movs	r2, #0
 801ac70:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801ac72:	4b3c      	ldr	r3, [pc, #240]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	2200      	movs	r2, #0
 801ac78:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801ac7a:	4b3a      	ldr	r3, [pc, #232]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	2200      	movs	r2, #0
 801ac80:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801ac82:	4b38      	ldr	r3, [pc, #224]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	2200      	movs	r2, #0
 801ac88:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801ac8a:	4b36      	ldr	r3, [pc, #216]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	2200      	movs	r2, #0
 801ac90:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801ac92:	4b34      	ldr	r3, [pc, #208]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	4a35      	ldr	r2, [pc, #212]	@ (801ad6c <makeDHCPMSG+0x1e8>)
 801ac98:	7812      	ldrb	r2, [r2, #0]
 801ac9a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801ac9c:	4b31      	ldr	r3, [pc, #196]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	4a32      	ldr	r2, [pc, #200]	@ (801ad6c <makeDHCPMSG+0x1e8>)
 801aca2:	7852      	ldrb	r2, [r2, #1]
 801aca4:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801aca6:	4b2f      	ldr	r3, [pc, #188]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	4a30      	ldr	r2, [pc, #192]	@ (801ad6c <makeDHCPMSG+0x1e8>)
 801acac:	7892      	ldrb	r2, [r2, #2]
 801acae:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801acb0:	4b2c      	ldr	r3, [pc, #176]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	4a2d      	ldr	r2, [pc, #180]	@ (801ad6c <makeDHCPMSG+0x1e8>)
 801acb6:	78d2      	ldrb	r2, [r2, #3]
 801acb8:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801acba:	4b2a      	ldr	r3, [pc, #168]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	4a2b      	ldr	r2, [pc, #172]	@ (801ad6c <makeDHCPMSG+0x1e8>)
 801acc0:	7912      	ldrb	r2, [r2, #4]
 801acc2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801acc6:	4b27      	ldr	r3, [pc, #156]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	4a28      	ldr	r2, [pc, #160]	@ (801ad6c <makeDHCPMSG+0x1e8>)
 801accc:	7952      	ldrb	r2, [r2, #5]
 801acce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801acd2:	2306      	movs	r3, #6
 801acd4:	73fb      	strb	r3, [r7, #15]
 801acd6:	e008      	b.n	801acea <makeDHCPMSG+0x166>
 801acd8:	4b22      	ldr	r3, [pc, #136]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	7bfb      	ldrb	r3, [r7, #15]
 801acde:	4413      	add	r3, r2
 801ace0:	2200      	movs	r2, #0
 801ace2:	771a      	strb	r2, [r3, #28]
 801ace4:	7bfb      	ldrb	r3, [r7, #15]
 801ace6:	3301      	adds	r3, #1
 801ace8:	73fb      	strb	r3, [r7, #15]
 801acea:	7bfb      	ldrb	r3, [r7, #15]
 801acec:	2b0f      	cmp	r3, #15
 801acee:	d9f3      	bls.n	801acd8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801acf0:	2300      	movs	r3, #0
 801acf2:	73fb      	strb	r3, [r7, #15]
 801acf4:	e009      	b.n	801ad0a <makeDHCPMSG+0x186>
 801acf6:	4b1b      	ldr	r3, [pc, #108]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801acf8:	681a      	ldr	r2, [r3, #0]
 801acfa:	7bfb      	ldrb	r3, [r7, #15]
 801acfc:	4413      	add	r3, r2
 801acfe:	2200      	movs	r2, #0
 801ad00:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 801ad04:	7bfb      	ldrb	r3, [r7, #15]
 801ad06:	3301      	adds	r3, #1
 801ad08:	73fb      	strb	r3, [r7, #15]
 801ad0a:	7bfb      	ldrb	r3, [r7, #15]
 801ad0c:	2b3f      	cmp	r3, #63	@ 0x3f
 801ad0e:	d9f2      	bls.n	801acf6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801ad10:	2300      	movs	r3, #0
 801ad12:	73fb      	strb	r3, [r7, #15]
 801ad14:	e009      	b.n	801ad2a <makeDHCPMSG+0x1a6>
 801ad16:	4b13      	ldr	r3, [pc, #76]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ad18:	681a      	ldr	r2, [r3, #0]
 801ad1a:	7bfb      	ldrb	r3, [r7, #15]
 801ad1c:	4413      	add	r3, r2
 801ad1e:	2200      	movs	r2, #0
 801ad20:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 801ad24:	7bfb      	ldrb	r3, [r7, #15]
 801ad26:	3301      	adds	r3, #1
 801ad28:	73fb      	strb	r3, [r7, #15]
 801ad2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	daf1      	bge.n	801ad16 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801ad32:	4b0c      	ldr	r3, [pc, #48]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	2263      	movs	r2, #99	@ 0x63
 801ad38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801ad3c:	4b09      	ldr	r3, [pc, #36]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	2282      	movs	r2, #130	@ 0x82
 801ad42:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801ad46:	4b07      	ldr	r3, [pc, #28]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	2253      	movs	r2, #83	@ 0x53
 801ad4c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801ad50:	4b04      	ldr	r3, [pc, #16]	@ (801ad64 <makeDHCPMSG+0x1e0>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2263      	movs	r2, #99	@ 0x63
 801ad56:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 801ad5a:	bf00      	nop
 801ad5c:	3710      	adds	r7, #16
 801ad5e:	46bd      	mov	sp, r7
 801ad60:	bd80      	pop	{r7, pc}
 801ad62:	bf00      	nop
 801ad64:	200009d0 	.word	0x200009d0
 801ad68:	200009cc 	.word	0x200009cc
 801ad6c:	200009d4 	.word	0x200009d4

0801ad70 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801ad70:	b5b0      	push	{r4, r5, r7, lr}
 801ad72:	b084      	sub	sp, #16
 801ad74:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801ad76:	2300      	movs	r3, #0
 801ad78:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801ad7a:	f7ff ff03 	bl	801ab84 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801ad7e:	4b56      	ldr	r3, [pc, #344]	@ (801aed8 <send_DHCP_DISCOVER+0x168>)
 801ad80:	2200      	movs	r2, #0
 801ad82:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801ad84:	4b54      	ldr	r3, [pc, #336]	@ (801aed8 <send_DHCP_DISCOVER+0x168>)
 801ad86:	2200      	movs	r2, #0
 801ad88:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801ad8a:	4b53      	ldr	r3, [pc, #332]	@ (801aed8 <send_DHCP_DISCOVER+0x168>)
 801ad8c:	2200      	movs	r2, #0
 801ad8e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801ad90:	4b51      	ldr	r3, [pc, #324]	@ (801aed8 <send_DHCP_DISCOVER+0x168>)
 801ad92:	2200      	movs	r2, #0
 801ad94:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801ad96:	4b51      	ldr	r3, [pc, #324]	@ (801aedc <send_DHCP_DISCOVER+0x16c>)
 801ad98:	2200      	movs	r2, #0
 801ad9a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801ad9c:	4b4f      	ldr	r3, [pc, #316]	@ (801aedc <send_DHCP_DISCOVER+0x16c>)
 801ad9e:	2200      	movs	r2, #0
 801ada0:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801ada2:	4b4e      	ldr	r3, [pc, #312]	@ (801aedc <send_DHCP_DISCOVER+0x16c>)
 801ada4:	2200      	movs	r2, #0
 801ada6:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801ada8:	4b4c      	ldr	r3, [pc, #304]	@ (801aedc <send_DHCP_DISCOVER+0x16c>)
 801adaa:	2200      	movs	r2, #0
 801adac:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801adae:	2304      	movs	r3, #4
 801adb0:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801adb2:	4b4b      	ldr	r3, [pc, #300]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801adb4:	681a      	ldr	r2, [r3, #0]
 801adb6:	88bb      	ldrh	r3, [r7, #4]
 801adb8:	1c59      	adds	r1, r3, #1
 801adba:	80b9      	strh	r1, [r7, #4]
 801adbc:	4413      	add	r3, r2
 801adbe:	2235      	movs	r2, #53	@ 0x35
 801adc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801adc4:	4b46      	ldr	r3, [pc, #280]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801adc6:	681a      	ldr	r2, [r3, #0]
 801adc8:	88bb      	ldrh	r3, [r7, #4]
 801adca:	1c59      	adds	r1, r3, #1
 801adcc:	80b9      	strh	r1, [r7, #4]
 801adce:	4413      	add	r3, r2
 801add0:	2201      	movs	r2, #1
 801add2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801add6:	4b42      	ldr	r3, [pc, #264]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801add8:	681a      	ldr	r2, [r3, #0]
 801adda:	88bb      	ldrh	r3, [r7, #4]
 801addc:	1c59      	adds	r1, r3, #1
 801adde:	80b9      	strh	r1, [r7, #4]
 801ade0:	4413      	add	r3, r2
 801ade2:	2201      	movs	r2, #1
 801ade4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801ade8:	4b3d      	ldr	r3, [pc, #244]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801adea:	681a      	ldr	r2, [r3, #0]
 801adec:	88bb      	ldrh	r3, [r7, #4]
 801adee:	1c59      	adds	r1, r3, #1
 801adf0:	80b9      	strh	r1, [r7, #4]
 801adf2:	4413      	add	r3, r2
 801adf4:	223d      	movs	r2, #61	@ 0x3d
 801adf6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801adfa:	4b39      	ldr	r3, [pc, #228]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801adfc:	681a      	ldr	r2, [r3, #0]
 801adfe:	88bb      	ldrh	r3, [r7, #4]
 801ae00:	1c59      	adds	r1, r3, #1
 801ae02:	80b9      	strh	r1, [r7, #4]
 801ae04:	4413      	add	r3, r2
 801ae06:	2207      	movs	r2, #7
 801ae08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ae0c:	4b34      	ldr	r3, [pc, #208]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801ae0e:	681a      	ldr	r2, [r3, #0]
 801ae10:	88bb      	ldrh	r3, [r7, #4]
 801ae12:	1c59      	adds	r1, r3, #1
 801ae14:	80b9      	strh	r1, [r7, #4]
 801ae16:	4413      	add	r3, r2
 801ae18:	2201      	movs	r2, #1
 801ae1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801ae1e:	4b30      	ldr	r3, [pc, #192]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801ae20:	681a      	ldr	r2, [r3, #0]
 801ae22:	88bb      	ldrh	r3, [r7, #4]
 801ae24:	1c59      	adds	r1, r3, #1
 801ae26:	80b9      	strh	r1, [r7, #4]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	4b2e      	ldr	r3, [pc, #184]	@ (801aee4 <send_DHCP_DISCOVER+0x174>)
 801ae2c:	7819      	ldrb	r1, [r3, #0]
 801ae2e:	1813      	adds	r3, r2, r0
 801ae30:	460a      	mov	r2, r1
 801ae32:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801ae36:	4b2a      	ldr	r3, [pc, #168]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801ae38:	681a      	ldr	r2, [r3, #0]
 801ae3a:	88bb      	ldrh	r3, [r7, #4]
 801ae3c:	1c59      	adds	r1, r3, #1
 801ae3e:	80b9      	strh	r1, [r7, #4]
 801ae40:	4618      	mov	r0, r3
 801ae42:	4b28      	ldr	r3, [pc, #160]	@ (801aee4 <send_DHCP_DISCOVER+0x174>)
 801ae44:	7859      	ldrb	r1, [r3, #1]
 801ae46:	1813      	adds	r3, r2, r0
 801ae48:	460a      	mov	r2, r1
 801ae4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801ae4e:	4b24      	ldr	r3, [pc, #144]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801ae50:	681a      	ldr	r2, [r3, #0]
 801ae52:	88bb      	ldrh	r3, [r7, #4]
 801ae54:	1c59      	adds	r1, r3, #1
 801ae56:	80b9      	strh	r1, [r7, #4]
 801ae58:	4618      	mov	r0, r3
 801ae5a:	4b22      	ldr	r3, [pc, #136]	@ (801aee4 <send_DHCP_DISCOVER+0x174>)
 801ae5c:	7899      	ldrb	r1, [r3, #2]
 801ae5e:	1813      	adds	r3, r2, r0
 801ae60:	460a      	mov	r2, r1
 801ae62:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801ae66:	4b1e      	ldr	r3, [pc, #120]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801ae68:	681a      	ldr	r2, [r3, #0]
 801ae6a:	88bb      	ldrh	r3, [r7, #4]
 801ae6c:	1c59      	adds	r1, r3, #1
 801ae6e:	80b9      	strh	r1, [r7, #4]
 801ae70:	4618      	mov	r0, r3
 801ae72:	4b1c      	ldr	r3, [pc, #112]	@ (801aee4 <send_DHCP_DISCOVER+0x174>)
 801ae74:	78d9      	ldrb	r1, [r3, #3]
 801ae76:	1813      	adds	r3, r2, r0
 801ae78:	460a      	mov	r2, r1
 801ae7a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801ae7e:	4b18      	ldr	r3, [pc, #96]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	88bb      	ldrh	r3, [r7, #4]
 801ae84:	1c59      	adds	r1, r3, #1
 801ae86:	80b9      	strh	r1, [r7, #4]
 801ae88:	4618      	mov	r0, r3
 801ae8a:	4b16      	ldr	r3, [pc, #88]	@ (801aee4 <send_DHCP_DISCOVER+0x174>)
 801ae8c:	7919      	ldrb	r1, [r3, #4]
 801ae8e:	1813      	adds	r3, r2, r0
 801ae90:	460a      	mov	r2, r1
 801ae92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801ae96:	4b12      	ldr	r3, [pc, #72]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801ae98:	681a      	ldr	r2, [r3, #0]
 801ae9a:	88bb      	ldrh	r3, [r7, #4]
 801ae9c:	1c59      	adds	r1, r3, #1
 801ae9e:	80b9      	strh	r1, [r7, #4]
 801aea0:	4618      	mov	r0, r3
 801aea2:	4b10      	ldr	r3, [pc, #64]	@ (801aee4 <send_DHCP_DISCOVER+0x174>)
 801aea4:	7959      	ldrb	r1, [r3, #5]
 801aea6:	1813      	adds	r3, r2, r0
 801aea8:	460a      	mov	r2, r1
 801aeaa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801aeae:	4b0c      	ldr	r3, [pc, #48]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801aeb0:	681a      	ldr	r2, [r3, #0]
 801aeb2:	88bb      	ldrh	r3, [r7, #4]
 801aeb4:	1c59      	adds	r1, r3, #1
 801aeb6:	80b9      	strh	r1, [r7, #4]
 801aeb8:	4413      	add	r3, r2
 801aeba:	220c      	movs	r2, #12
 801aebc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801aec0:	4b07      	ldr	r3, [pc, #28]	@ (801aee0 <send_DHCP_DISCOVER+0x170>)
 801aec2:	681a      	ldr	r2, [r3, #0]
 801aec4:	88bb      	ldrh	r3, [r7, #4]
 801aec6:	1c59      	adds	r1, r3, #1
 801aec8:	80b9      	strh	r1, [r7, #4]
 801aeca:	4413      	add	r3, r2
 801aecc:	2200      	movs	r2, #0
 801aece:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801aed2:	2300      	movs	r3, #0
 801aed4:	80fb      	strh	r3, [r7, #6]
 801aed6:	e017      	b.n	801af08 <send_DHCP_DISCOVER+0x198>
 801aed8:	200009a8 	.word	0x200009a8
 801aedc:	200009ac 	.word	0x200009ac
 801aee0:	200009d0 	.word	0x200009d0
 801aee4:	200009d4 	.word	0x200009d4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801aee8:	88f9      	ldrh	r1, [r7, #6]
 801aeea:	4b80      	ldr	r3, [pc, #512]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801aeec:	681a      	ldr	r2, [r3, #0]
 801aeee:	88bb      	ldrh	r3, [r7, #4]
 801aef0:	1c58      	adds	r0, r3, #1
 801aef2:	80b8      	strh	r0, [r7, #4]
 801aef4:	4618      	mov	r0, r3
 801aef6:	4b7e      	ldr	r3, [pc, #504]	@ (801b0f0 <send_DHCP_DISCOVER+0x380>)
 801aef8:	5c59      	ldrb	r1, [r3, r1]
 801aefa:	1813      	adds	r3, r2, r0
 801aefc:	460a      	mov	r2, r1
 801aefe:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801af02:	88fb      	ldrh	r3, [r7, #6]
 801af04:	3301      	adds	r3, #1
 801af06:	80fb      	strh	r3, [r7, #6]
 801af08:	88fb      	ldrh	r3, [r7, #6]
 801af0a:	4a79      	ldr	r2, [pc, #484]	@ (801b0f0 <send_DHCP_DISCOVER+0x380>)
 801af0c:	5cd3      	ldrb	r3, [r2, r3]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d1ea      	bne.n	801aee8 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801af12:	4b78      	ldr	r3, [pc, #480]	@ (801b0f4 <send_DHCP_DISCOVER+0x384>)
 801af14:	78db      	ldrb	r3, [r3, #3]
 801af16:	091b      	lsrs	r3, r3, #4
 801af18:	b2da      	uxtb	r2, r3
 801af1a:	4b74      	ldr	r3, [pc, #464]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801af1c:	681c      	ldr	r4, [r3, #0]
 801af1e:	88bb      	ldrh	r3, [r7, #4]
 801af20:	1c59      	adds	r1, r3, #1
 801af22:	80b9      	strh	r1, [r7, #4]
 801af24:	461d      	mov	r5, r3
 801af26:	4610      	mov	r0, r2
 801af28:	f001 f9c4 	bl	801c2b4 <NibbleToHex>
 801af2c:	4603      	mov	r3, r0
 801af2e:	461a      	mov	r2, r3
 801af30:	1963      	adds	r3, r4, r5
 801af32:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801af36:	4b6f      	ldr	r3, [pc, #444]	@ (801b0f4 <send_DHCP_DISCOVER+0x384>)
 801af38:	78da      	ldrb	r2, [r3, #3]
 801af3a:	4b6c      	ldr	r3, [pc, #432]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801af3c:	681c      	ldr	r4, [r3, #0]
 801af3e:	88bb      	ldrh	r3, [r7, #4]
 801af40:	1c59      	adds	r1, r3, #1
 801af42:	80b9      	strh	r1, [r7, #4]
 801af44:	461d      	mov	r5, r3
 801af46:	4610      	mov	r0, r2
 801af48:	f001 f9b4 	bl	801c2b4 <NibbleToHex>
 801af4c:	4603      	mov	r3, r0
 801af4e:	461a      	mov	r2, r3
 801af50:	1963      	adds	r3, r4, r5
 801af52:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801af56:	4b67      	ldr	r3, [pc, #412]	@ (801b0f4 <send_DHCP_DISCOVER+0x384>)
 801af58:	791b      	ldrb	r3, [r3, #4]
 801af5a:	091b      	lsrs	r3, r3, #4
 801af5c:	b2da      	uxtb	r2, r3
 801af5e:	4b63      	ldr	r3, [pc, #396]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801af60:	681c      	ldr	r4, [r3, #0]
 801af62:	88bb      	ldrh	r3, [r7, #4]
 801af64:	1c59      	adds	r1, r3, #1
 801af66:	80b9      	strh	r1, [r7, #4]
 801af68:	461d      	mov	r5, r3
 801af6a:	4610      	mov	r0, r2
 801af6c:	f001 f9a2 	bl	801c2b4 <NibbleToHex>
 801af70:	4603      	mov	r3, r0
 801af72:	461a      	mov	r2, r3
 801af74:	1963      	adds	r3, r4, r5
 801af76:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801af7a:	4b5e      	ldr	r3, [pc, #376]	@ (801b0f4 <send_DHCP_DISCOVER+0x384>)
 801af7c:	791a      	ldrb	r2, [r3, #4]
 801af7e:	4b5b      	ldr	r3, [pc, #364]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801af80:	681c      	ldr	r4, [r3, #0]
 801af82:	88bb      	ldrh	r3, [r7, #4]
 801af84:	1c59      	adds	r1, r3, #1
 801af86:	80b9      	strh	r1, [r7, #4]
 801af88:	461d      	mov	r5, r3
 801af8a:	4610      	mov	r0, r2
 801af8c:	f001 f992 	bl	801c2b4 <NibbleToHex>
 801af90:	4603      	mov	r3, r0
 801af92:	461a      	mov	r2, r3
 801af94:	1963      	adds	r3, r4, r5
 801af96:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801af9a:	4b56      	ldr	r3, [pc, #344]	@ (801b0f4 <send_DHCP_DISCOVER+0x384>)
 801af9c:	795b      	ldrb	r3, [r3, #5]
 801af9e:	091b      	lsrs	r3, r3, #4
 801afa0:	b2da      	uxtb	r2, r3
 801afa2:	4b52      	ldr	r3, [pc, #328]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801afa4:	681c      	ldr	r4, [r3, #0]
 801afa6:	88bb      	ldrh	r3, [r7, #4]
 801afa8:	1c59      	adds	r1, r3, #1
 801afaa:	80b9      	strh	r1, [r7, #4]
 801afac:	461d      	mov	r5, r3
 801afae:	4610      	mov	r0, r2
 801afb0:	f001 f980 	bl	801c2b4 <NibbleToHex>
 801afb4:	4603      	mov	r3, r0
 801afb6:	461a      	mov	r2, r3
 801afb8:	1963      	adds	r3, r4, r5
 801afba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801afbe:	4b4d      	ldr	r3, [pc, #308]	@ (801b0f4 <send_DHCP_DISCOVER+0x384>)
 801afc0:	795a      	ldrb	r2, [r3, #5]
 801afc2:	4b4a      	ldr	r3, [pc, #296]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801afc4:	681c      	ldr	r4, [r3, #0]
 801afc6:	88bb      	ldrh	r3, [r7, #4]
 801afc8:	1c59      	adds	r1, r3, #1
 801afca:	80b9      	strh	r1, [r7, #4]
 801afcc:	461d      	mov	r5, r3
 801afce:	4610      	mov	r0, r2
 801afd0:	f001 f970 	bl	801c2b4 <NibbleToHex>
 801afd4:	4603      	mov	r3, r0
 801afd6:	461a      	mov	r2, r3
 801afd8:	1963      	adds	r3, r4, r5
 801afda:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801afde:	88fb      	ldrh	r3, [r7, #6]
 801afe0:	b2d9      	uxtb	r1, r3
 801afe2:	4b42      	ldr	r3, [pc, #264]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801afe4:	681a      	ldr	r2, [r3, #0]
 801afe6:	88b8      	ldrh	r0, [r7, #4]
 801afe8:	88fb      	ldrh	r3, [r7, #6]
 801afea:	3307      	adds	r3, #7
 801afec:	1ac3      	subs	r3, r0, r3
 801afee:	3106      	adds	r1, #6
 801aff0:	b2c9      	uxtb	r1, r1
 801aff2:	4413      	add	r3, r2
 801aff4:	460a      	mov	r2, r1
 801aff6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801affa:	4b3c      	ldr	r3, [pc, #240]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801affc:	681a      	ldr	r2, [r3, #0]
 801affe:	88bb      	ldrh	r3, [r7, #4]
 801b000:	1c59      	adds	r1, r3, #1
 801b002:	80b9      	strh	r1, [r7, #4]
 801b004:	4413      	add	r3, r2
 801b006:	2237      	movs	r2, #55	@ 0x37
 801b008:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801b00c:	4b37      	ldr	r3, [pc, #220]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b00e:	681a      	ldr	r2, [r3, #0]
 801b010:	88bb      	ldrh	r3, [r7, #4]
 801b012:	1c59      	adds	r1, r3, #1
 801b014:	80b9      	strh	r1, [r7, #4]
 801b016:	4413      	add	r3, r2
 801b018:	2206      	movs	r2, #6
 801b01a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b01e:	4b33      	ldr	r3, [pc, #204]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b020:	681a      	ldr	r2, [r3, #0]
 801b022:	88bb      	ldrh	r3, [r7, #4]
 801b024:	1c59      	adds	r1, r3, #1
 801b026:	80b9      	strh	r1, [r7, #4]
 801b028:	4413      	add	r3, r2
 801b02a:	2201      	movs	r2, #1
 801b02c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b030:	4b2e      	ldr	r3, [pc, #184]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b032:	681a      	ldr	r2, [r3, #0]
 801b034:	88bb      	ldrh	r3, [r7, #4]
 801b036:	1c59      	adds	r1, r3, #1
 801b038:	80b9      	strh	r1, [r7, #4]
 801b03a:	4413      	add	r3, r2
 801b03c:	2203      	movs	r2, #3
 801b03e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b042:	4b2a      	ldr	r3, [pc, #168]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b044:	681a      	ldr	r2, [r3, #0]
 801b046:	88bb      	ldrh	r3, [r7, #4]
 801b048:	1c59      	adds	r1, r3, #1
 801b04a:	80b9      	strh	r1, [r7, #4]
 801b04c:	4413      	add	r3, r2
 801b04e:	2206      	movs	r2, #6
 801b050:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b054:	4b25      	ldr	r3, [pc, #148]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b056:	681a      	ldr	r2, [r3, #0]
 801b058:	88bb      	ldrh	r3, [r7, #4]
 801b05a:	1c59      	adds	r1, r3, #1
 801b05c:	80b9      	strh	r1, [r7, #4]
 801b05e:	4413      	add	r3, r2
 801b060:	220f      	movs	r2, #15
 801b062:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b066:	4b21      	ldr	r3, [pc, #132]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b068:	681a      	ldr	r2, [r3, #0]
 801b06a:	88bb      	ldrh	r3, [r7, #4]
 801b06c:	1c59      	adds	r1, r3, #1
 801b06e:	80b9      	strh	r1, [r7, #4]
 801b070:	4413      	add	r3, r2
 801b072:	223a      	movs	r2, #58	@ 0x3a
 801b074:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b078:	4b1c      	ldr	r3, [pc, #112]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b07a:	681a      	ldr	r2, [r3, #0]
 801b07c:	88bb      	ldrh	r3, [r7, #4]
 801b07e:	1c59      	adds	r1, r3, #1
 801b080:	80b9      	strh	r1, [r7, #4]
 801b082:	4413      	add	r3, r2
 801b084:	223b      	movs	r2, #59	@ 0x3b
 801b086:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b08a:	4b18      	ldr	r3, [pc, #96]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b08c:	681a      	ldr	r2, [r3, #0]
 801b08e:	88bb      	ldrh	r3, [r7, #4]
 801b090:	1c59      	adds	r1, r3, #1
 801b092:	80b9      	strh	r1, [r7, #4]
 801b094:	4413      	add	r3, r2
 801b096:	22ff      	movs	r2, #255	@ 0xff
 801b098:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b09c:	88bb      	ldrh	r3, [r7, #4]
 801b09e:	80fb      	strh	r3, [r7, #6]
 801b0a0:	e009      	b.n	801b0b6 <send_DHCP_DISCOVER+0x346>
 801b0a2:	4b12      	ldr	r3, [pc, #72]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b0a4:	681a      	ldr	r2, [r3, #0]
 801b0a6:	88fb      	ldrh	r3, [r7, #6]
 801b0a8:	4413      	add	r3, r2
 801b0aa:	2200      	movs	r2, #0
 801b0ac:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801b0b0:	88fb      	ldrh	r3, [r7, #6]
 801b0b2:	3301      	adds	r3, #1
 801b0b4:	80fb      	strh	r3, [r7, #6]
 801b0b6:	88fb      	ldrh	r3, [r7, #6]
 801b0b8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 801b0bc:	d3f1      	bcc.n	801b0a2 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801b0be:	23ff      	movs	r3, #255	@ 0xff
 801b0c0:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801b0c2:	23ff      	movs	r3, #255	@ 0xff
 801b0c4:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801b0c6:	23ff      	movs	r3, #255	@ 0xff
 801b0c8:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801b0ca:	23ff      	movs	r3, #255	@ 0xff
 801b0cc:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b0ce:	4b0a      	ldr	r3, [pc, #40]	@ (801b0f8 <send_DHCP_DISCOVER+0x388>)
 801b0d0:	7818      	ldrb	r0, [r3, #0]
 801b0d2:	4b06      	ldr	r3, [pc, #24]	@ (801b0ec <send_DHCP_DISCOVER+0x37c>)
 801b0d4:	6819      	ldr	r1, [r3, #0]
 801b0d6:	463b      	mov	r3, r7
 801b0d8:	2243      	movs	r2, #67	@ 0x43
 801b0da:	9200      	str	r2, [sp, #0]
 801b0dc:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801b0e0:	f7fe fc04 	bl	80198ec <sendto>
}
 801b0e4:	bf00      	nop
 801b0e6:	3708      	adds	r7, #8
 801b0e8:	46bd      	mov	sp, r7
 801b0ea:	bdb0      	pop	{r4, r5, r7, pc}
 801b0ec:	200009d0 	.word	0x200009d0
 801b0f0:	200000f8 	.word	0x200000f8
 801b0f4:	200009d4 	.word	0x200009d4
 801b0f8:	200009a5 	.word	0x200009a5

0801b0fc <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801b0fc:	b5b0      	push	{r4, r5, r7, lr}
 801b0fe:	b086      	sub	sp, #24
 801b100:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b102:	2300      	movs	r3, #0
 801b104:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801b106:	f7ff fd3d 	bl	801ab84 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801b10a:	4b1b      	ldr	r3, [pc, #108]	@ (801b178 <send_DHCP_REQUEST+0x7c>)
 801b10c:	f993 3000 	ldrsb.w	r3, [r3]
 801b110:	2b03      	cmp	r3, #3
 801b112:	d004      	beq.n	801b11e <send_DHCP_REQUEST+0x22>
 801b114:	4b18      	ldr	r3, [pc, #96]	@ (801b178 <send_DHCP_REQUEST+0x7c>)
 801b116:	f993 3000 	ldrsb.w	r3, [r3]
 801b11a:	2b04      	cmp	r3, #4
 801b11c:	d134      	bne.n	801b188 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b11e:	4b17      	ldr	r3, [pc, #92]	@ (801b17c <send_DHCP_REQUEST+0x80>)
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	330a      	adds	r3, #10
 801b124:	2200      	movs	r2, #0
 801b126:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b128:	4b14      	ldr	r3, [pc, #80]	@ (801b17c <send_DHCP_REQUEST+0x80>)
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	330a      	adds	r3, #10
 801b12e:	3301      	adds	r3, #1
 801b130:	2200      	movs	r2, #0
 801b132:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801b134:	4b11      	ldr	r3, [pc, #68]	@ (801b17c <send_DHCP_REQUEST+0x80>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	4a11      	ldr	r2, [pc, #68]	@ (801b180 <send_DHCP_REQUEST+0x84>)
 801b13a:	7812      	ldrb	r2, [r2, #0]
 801b13c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801b13e:	4b0f      	ldr	r3, [pc, #60]	@ (801b17c <send_DHCP_REQUEST+0x80>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	4a0f      	ldr	r2, [pc, #60]	@ (801b180 <send_DHCP_REQUEST+0x84>)
 801b144:	7852      	ldrb	r2, [r2, #1]
 801b146:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801b148:	4b0c      	ldr	r3, [pc, #48]	@ (801b17c <send_DHCP_REQUEST+0x80>)
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	4a0c      	ldr	r2, [pc, #48]	@ (801b180 <send_DHCP_REQUEST+0x84>)
 801b14e:	7892      	ldrb	r2, [r2, #2]
 801b150:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801b152:	4b0a      	ldr	r3, [pc, #40]	@ (801b17c <send_DHCP_REQUEST+0x80>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	4a0a      	ldr	r2, [pc, #40]	@ (801b180 <send_DHCP_REQUEST+0x84>)
 801b158:	78d2      	ldrb	r2, [r2, #3]
 801b15a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801b15c:	4b09      	ldr	r3, [pc, #36]	@ (801b184 <send_DHCP_REQUEST+0x88>)
 801b15e:	781b      	ldrb	r3, [r3, #0]
 801b160:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801b162:	4b08      	ldr	r3, [pc, #32]	@ (801b184 <send_DHCP_REQUEST+0x88>)
 801b164:	785b      	ldrb	r3, [r3, #1]
 801b166:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801b168:	4b06      	ldr	r3, [pc, #24]	@ (801b184 <send_DHCP_REQUEST+0x88>)
 801b16a:	789b      	ldrb	r3, [r3, #2]
 801b16c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801b16e:	4b05      	ldr	r3, [pc, #20]	@ (801b184 <send_DHCP_REQUEST+0x88>)
 801b170:	78db      	ldrb	r3, [r3, #3]
 801b172:	71fb      	strb	r3, [r7, #7]
 801b174:	e010      	b.n	801b198 <send_DHCP_REQUEST+0x9c>
 801b176:	bf00      	nop
 801b178:	200009c4 	.word	0x200009c4
 801b17c:	200009d0 	.word	0x200009d0
 801b180:	200009b4 	.word	0x200009b4
 801b184:	200009a8 	.word	0x200009a8
   }
   else
   {
   	ip[0] = 255;
 801b188:	23ff      	movs	r3, #255	@ 0xff
 801b18a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801b18c:	23ff      	movs	r3, #255	@ 0xff
 801b18e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801b190:	23ff      	movs	r3, #255	@ 0xff
 801b192:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801b194:	23ff      	movs	r3, #255	@ 0xff
 801b196:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b198:	2304      	movs	r3, #4
 801b19a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b19c:	4b8d      	ldr	r3, [pc, #564]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b19e:	681a      	ldr	r2, [r3, #0]
 801b1a0:	897b      	ldrh	r3, [r7, #10]
 801b1a2:	1c59      	adds	r1, r3, #1
 801b1a4:	8179      	strh	r1, [r7, #10]
 801b1a6:	4413      	add	r3, r2
 801b1a8:	2235      	movs	r2, #53	@ 0x35
 801b1aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b1ae:	4b89      	ldr	r3, [pc, #548]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b1b0:	681a      	ldr	r2, [r3, #0]
 801b1b2:	897b      	ldrh	r3, [r7, #10]
 801b1b4:	1c59      	adds	r1, r3, #1
 801b1b6:	8179      	strh	r1, [r7, #10]
 801b1b8:	4413      	add	r3, r2
 801b1ba:	2201      	movs	r2, #1
 801b1bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801b1c0:	4b84      	ldr	r3, [pc, #528]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b1c2:	681a      	ldr	r2, [r3, #0]
 801b1c4:	897b      	ldrh	r3, [r7, #10]
 801b1c6:	1c59      	adds	r1, r3, #1
 801b1c8:	8179      	strh	r1, [r7, #10]
 801b1ca:	4413      	add	r3, r2
 801b1cc:	2203      	movs	r2, #3
 801b1ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b1d2:	4b80      	ldr	r3, [pc, #512]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b1d4:	681a      	ldr	r2, [r3, #0]
 801b1d6:	897b      	ldrh	r3, [r7, #10]
 801b1d8:	1c59      	adds	r1, r3, #1
 801b1da:	8179      	strh	r1, [r7, #10]
 801b1dc:	4413      	add	r3, r2
 801b1de:	223d      	movs	r2, #61	@ 0x3d
 801b1e0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b1e4:	4b7b      	ldr	r3, [pc, #492]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b1e6:	681a      	ldr	r2, [r3, #0]
 801b1e8:	897b      	ldrh	r3, [r7, #10]
 801b1ea:	1c59      	adds	r1, r3, #1
 801b1ec:	8179      	strh	r1, [r7, #10]
 801b1ee:	4413      	add	r3, r2
 801b1f0:	2207      	movs	r2, #7
 801b1f2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b1f6:	4b77      	ldr	r3, [pc, #476]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b1f8:	681a      	ldr	r2, [r3, #0]
 801b1fa:	897b      	ldrh	r3, [r7, #10]
 801b1fc:	1c59      	adds	r1, r3, #1
 801b1fe:	8179      	strh	r1, [r7, #10]
 801b200:	4413      	add	r3, r2
 801b202:	2201      	movs	r2, #1
 801b204:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b208:	4b72      	ldr	r3, [pc, #456]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b20a:	681a      	ldr	r2, [r3, #0]
 801b20c:	897b      	ldrh	r3, [r7, #10]
 801b20e:	1c59      	adds	r1, r3, #1
 801b210:	8179      	strh	r1, [r7, #10]
 801b212:	4618      	mov	r0, r3
 801b214:	4b70      	ldr	r3, [pc, #448]	@ (801b3d8 <send_DHCP_REQUEST+0x2dc>)
 801b216:	7819      	ldrb	r1, [r3, #0]
 801b218:	1813      	adds	r3, r2, r0
 801b21a:	460a      	mov	r2, r1
 801b21c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b220:	4b6c      	ldr	r3, [pc, #432]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	897b      	ldrh	r3, [r7, #10]
 801b226:	1c59      	adds	r1, r3, #1
 801b228:	8179      	strh	r1, [r7, #10]
 801b22a:	4618      	mov	r0, r3
 801b22c:	4b6a      	ldr	r3, [pc, #424]	@ (801b3d8 <send_DHCP_REQUEST+0x2dc>)
 801b22e:	7859      	ldrb	r1, [r3, #1]
 801b230:	1813      	adds	r3, r2, r0
 801b232:	460a      	mov	r2, r1
 801b234:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b238:	4b66      	ldr	r3, [pc, #408]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b23a:	681a      	ldr	r2, [r3, #0]
 801b23c:	897b      	ldrh	r3, [r7, #10]
 801b23e:	1c59      	adds	r1, r3, #1
 801b240:	8179      	strh	r1, [r7, #10]
 801b242:	4618      	mov	r0, r3
 801b244:	4b64      	ldr	r3, [pc, #400]	@ (801b3d8 <send_DHCP_REQUEST+0x2dc>)
 801b246:	7899      	ldrb	r1, [r3, #2]
 801b248:	1813      	adds	r3, r2, r0
 801b24a:	460a      	mov	r2, r1
 801b24c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b250:	4b60      	ldr	r3, [pc, #384]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b252:	681a      	ldr	r2, [r3, #0]
 801b254:	897b      	ldrh	r3, [r7, #10]
 801b256:	1c59      	adds	r1, r3, #1
 801b258:	8179      	strh	r1, [r7, #10]
 801b25a:	4618      	mov	r0, r3
 801b25c:	4b5e      	ldr	r3, [pc, #376]	@ (801b3d8 <send_DHCP_REQUEST+0x2dc>)
 801b25e:	78d9      	ldrb	r1, [r3, #3]
 801b260:	1813      	adds	r3, r2, r0
 801b262:	460a      	mov	r2, r1
 801b264:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b268:	4b5a      	ldr	r3, [pc, #360]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b26a:	681a      	ldr	r2, [r3, #0]
 801b26c:	897b      	ldrh	r3, [r7, #10]
 801b26e:	1c59      	adds	r1, r3, #1
 801b270:	8179      	strh	r1, [r7, #10]
 801b272:	4618      	mov	r0, r3
 801b274:	4b58      	ldr	r3, [pc, #352]	@ (801b3d8 <send_DHCP_REQUEST+0x2dc>)
 801b276:	7919      	ldrb	r1, [r3, #4]
 801b278:	1813      	adds	r3, r2, r0
 801b27a:	460a      	mov	r2, r1
 801b27c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b280:	4b54      	ldr	r3, [pc, #336]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b282:	681a      	ldr	r2, [r3, #0]
 801b284:	897b      	ldrh	r3, [r7, #10]
 801b286:	1c59      	adds	r1, r3, #1
 801b288:	8179      	strh	r1, [r7, #10]
 801b28a:	4618      	mov	r0, r3
 801b28c:	4b52      	ldr	r3, [pc, #328]	@ (801b3d8 <send_DHCP_REQUEST+0x2dc>)
 801b28e:	7959      	ldrb	r1, [r3, #5]
 801b290:	1813      	adds	r3, r2, r0
 801b292:	460a      	mov	r2, r1
 801b294:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801b298:	79fb      	ldrb	r3, [r7, #7]
 801b29a:	2bff      	cmp	r3, #255	@ 0xff
 801b29c:	f040 8084 	bne.w	801b3a8 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b2a0:	4b4c      	ldr	r3, [pc, #304]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b2a2:	681a      	ldr	r2, [r3, #0]
 801b2a4:	897b      	ldrh	r3, [r7, #10]
 801b2a6:	1c59      	adds	r1, r3, #1
 801b2a8:	8179      	strh	r1, [r7, #10]
 801b2aa:	4413      	add	r3, r2
 801b2ac:	2232      	movs	r2, #50	@ 0x32
 801b2ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b2b2:	4b48      	ldr	r3, [pc, #288]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b2b4:	681a      	ldr	r2, [r3, #0]
 801b2b6:	897b      	ldrh	r3, [r7, #10]
 801b2b8:	1c59      	adds	r1, r3, #1
 801b2ba:	8179      	strh	r1, [r7, #10]
 801b2bc:	4413      	add	r3, r2
 801b2be:	2204      	movs	r2, #4
 801b2c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b2c4:	4b43      	ldr	r3, [pc, #268]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b2c6:	681a      	ldr	r2, [r3, #0]
 801b2c8:	897b      	ldrh	r3, [r7, #10]
 801b2ca:	1c59      	adds	r1, r3, #1
 801b2cc:	8179      	strh	r1, [r7, #10]
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	4b42      	ldr	r3, [pc, #264]	@ (801b3dc <send_DHCP_REQUEST+0x2e0>)
 801b2d2:	7819      	ldrb	r1, [r3, #0]
 801b2d4:	1813      	adds	r3, r2, r0
 801b2d6:	460a      	mov	r2, r1
 801b2d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b2dc:	4b3d      	ldr	r3, [pc, #244]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	897b      	ldrh	r3, [r7, #10]
 801b2e2:	1c59      	adds	r1, r3, #1
 801b2e4:	8179      	strh	r1, [r7, #10]
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	4b3c      	ldr	r3, [pc, #240]	@ (801b3dc <send_DHCP_REQUEST+0x2e0>)
 801b2ea:	7859      	ldrb	r1, [r3, #1]
 801b2ec:	1813      	adds	r3, r2, r0
 801b2ee:	460a      	mov	r2, r1
 801b2f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b2f4:	4b37      	ldr	r3, [pc, #220]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	897b      	ldrh	r3, [r7, #10]
 801b2fa:	1c59      	adds	r1, r3, #1
 801b2fc:	8179      	strh	r1, [r7, #10]
 801b2fe:	4618      	mov	r0, r3
 801b300:	4b36      	ldr	r3, [pc, #216]	@ (801b3dc <send_DHCP_REQUEST+0x2e0>)
 801b302:	7899      	ldrb	r1, [r3, #2]
 801b304:	1813      	adds	r3, r2, r0
 801b306:	460a      	mov	r2, r1
 801b308:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b30c:	4b31      	ldr	r3, [pc, #196]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b30e:	681a      	ldr	r2, [r3, #0]
 801b310:	897b      	ldrh	r3, [r7, #10]
 801b312:	1c59      	adds	r1, r3, #1
 801b314:	8179      	strh	r1, [r7, #10]
 801b316:	4618      	mov	r0, r3
 801b318:	4b30      	ldr	r3, [pc, #192]	@ (801b3dc <send_DHCP_REQUEST+0x2e0>)
 801b31a:	78d9      	ldrb	r1, [r3, #3]
 801b31c:	1813      	adds	r3, r2, r0
 801b31e:	460a      	mov	r2, r1
 801b320:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b324:	4b2b      	ldr	r3, [pc, #172]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b326:	681a      	ldr	r2, [r3, #0]
 801b328:	897b      	ldrh	r3, [r7, #10]
 801b32a:	1c59      	adds	r1, r3, #1
 801b32c:	8179      	strh	r1, [r7, #10]
 801b32e:	4413      	add	r3, r2
 801b330:	2236      	movs	r2, #54	@ 0x36
 801b332:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b336:	4b27      	ldr	r3, [pc, #156]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b338:	681a      	ldr	r2, [r3, #0]
 801b33a:	897b      	ldrh	r3, [r7, #10]
 801b33c:	1c59      	adds	r1, r3, #1
 801b33e:	8179      	strh	r1, [r7, #10]
 801b340:	4413      	add	r3, r2
 801b342:	2204      	movs	r2, #4
 801b344:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b348:	4b22      	ldr	r3, [pc, #136]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b34a:	681a      	ldr	r2, [r3, #0]
 801b34c:	897b      	ldrh	r3, [r7, #10]
 801b34e:	1c59      	adds	r1, r3, #1
 801b350:	8179      	strh	r1, [r7, #10]
 801b352:	4618      	mov	r0, r3
 801b354:	4b22      	ldr	r3, [pc, #136]	@ (801b3e0 <send_DHCP_REQUEST+0x2e4>)
 801b356:	7819      	ldrb	r1, [r3, #0]
 801b358:	1813      	adds	r3, r2, r0
 801b35a:	460a      	mov	r2, r1
 801b35c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b360:	4b1c      	ldr	r3, [pc, #112]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b362:	681a      	ldr	r2, [r3, #0]
 801b364:	897b      	ldrh	r3, [r7, #10]
 801b366:	1c59      	adds	r1, r3, #1
 801b368:	8179      	strh	r1, [r7, #10]
 801b36a:	4618      	mov	r0, r3
 801b36c:	4b1c      	ldr	r3, [pc, #112]	@ (801b3e0 <send_DHCP_REQUEST+0x2e4>)
 801b36e:	7859      	ldrb	r1, [r3, #1]
 801b370:	1813      	adds	r3, r2, r0
 801b372:	460a      	mov	r2, r1
 801b374:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b378:	4b16      	ldr	r3, [pc, #88]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b37a:	681a      	ldr	r2, [r3, #0]
 801b37c:	897b      	ldrh	r3, [r7, #10]
 801b37e:	1c59      	adds	r1, r3, #1
 801b380:	8179      	strh	r1, [r7, #10]
 801b382:	4618      	mov	r0, r3
 801b384:	4b16      	ldr	r3, [pc, #88]	@ (801b3e0 <send_DHCP_REQUEST+0x2e4>)
 801b386:	7899      	ldrb	r1, [r3, #2]
 801b388:	1813      	adds	r3, r2, r0
 801b38a:	460a      	mov	r2, r1
 801b38c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b390:	4b10      	ldr	r3, [pc, #64]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b392:	681a      	ldr	r2, [r3, #0]
 801b394:	897b      	ldrh	r3, [r7, #10]
 801b396:	1c59      	adds	r1, r3, #1
 801b398:	8179      	strh	r1, [r7, #10]
 801b39a:	4618      	mov	r0, r3
 801b39c:	4b10      	ldr	r3, [pc, #64]	@ (801b3e0 <send_DHCP_REQUEST+0x2e4>)
 801b39e:	78d9      	ldrb	r1, [r3, #3]
 801b3a0:	1813      	adds	r3, r2, r0
 801b3a2:	460a      	mov	r2, r1
 801b3a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801b3a8:	4b0a      	ldr	r3, [pc, #40]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b3aa:	681a      	ldr	r2, [r3, #0]
 801b3ac:	897b      	ldrh	r3, [r7, #10]
 801b3ae:	1c59      	adds	r1, r3, #1
 801b3b0:	8179      	strh	r1, [r7, #10]
 801b3b2:	4413      	add	r3, r2
 801b3b4:	220c      	movs	r2, #12
 801b3b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801b3ba:	4b06      	ldr	r3, [pc, #24]	@ (801b3d4 <send_DHCP_REQUEST+0x2d8>)
 801b3bc:	681a      	ldr	r2, [r3, #0]
 801b3be:	897b      	ldrh	r3, [r7, #10]
 801b3c0:	1c59      	adds	r1, r3, #1
 801b3c2:	8179      	strh	r1, [r7, #10]
 801b3c4:	4413      	add	r3, r2
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b3cc:	2300      	movs	r3, #0
 801b3ce:	60fb      	str	r3, [r7, #12]
 801b3d0:	e019      	b.n	801b406 <send_DHCP_REQUEST+0x30a>
 801b3d2:	bf00      	nop
 801b3d4:	200009d0 	.word	0x200009d0
 801b3d8:	200009d4 	.word	0x200009d4
 801b3dc:	200009b4 	.word	0x200009b4
 801b3e0:	200009a8 	.word	0x200009a8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801b3e4:	4b86      	ldr	r3, [pc, #536]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b3e6:	681a      	ldr	r2, [r3, #0]
 801b3e8:	897b      	ldrh	r3, [r7, #10]
 801b3ea:	1c59      	adds	r1, r3, #1
 801b3ec:	8179      	strh	r1, [r7, #10]
 801b3ee:	4618      	mov	r0, r3
 801b3f0:	4984      	ldr	r1, [pc, #528]	@ (801b604 <send_DHCP_REQUEST+0x508>)
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	440b      	add	r3, r1
 801b3f6:	7819      	ldrb	r1, [r3, #0]
 801b3f8:	1813      	adds	r3, r2, r0
 801b3fa:	460a      	mov	r2, r1
 801b3fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	3301      	adds	r3, #1
 801b404:	60fb      	str	r3, [r7, #12]
 801b406:	4a7f      	ldr	r2, [pc, #508]	@ (801b604 <send_DHCP_REQUEST+0x508>)
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	4413      	add	r3, r2
 801b40c:	781b      	ldrb	r3, [r3, #0]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d1e8      	bne.n	801b3e4 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801b412:	4b7d      	ldr	r3, [pc, #500]	@ (801b608 <send_DHCP_REQUEST+0x50c>)
 801b414:	78db      	ldrb	r3, [r3, #3]
 801b416:	091b      	lsrs	r3, r3, #4
 801b418:	b2da      	uxtb	r2, r3
 801b41a:	4b79      	ldr	r3, [pc, #484]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b41c:	681c      	ldr	r4, [r3, #0]
 801b41e:	897b      	ldrh	r3, [r7, #10]
 801b420:	1c59      	adds	r1, r3, #1
 801b422:	8179      	strh	r1, [r7, #10]
 801b424:	461d      	mov	r5, r3
 801b426:	4610      	mov	r0, r2
 801b428:	f000 ff44 	bl	801c2b4 <NibbleToHex>
 801b42c:	4603      	mov	r3, r0
 801b42e:	461a      	mov	r2, r3
 801b430:	1963      	adds	r3, r4, r5
 801b432:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801b436:	4b74      	ldr	r3, [pc, #464]	@ (801b608 <send_DHCP_REQUEST+0x50c>)
 801b438:	78da      	ldrb	r2, [r3, #3]
 801b43a:	4b71      	ldr	r3, [pc, #452]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b43c:	681c      	ldr	r4, [r3, #0]
 801b43e:	897b      	ldrh	r3, [r7, #10]
 801b440:	1c59      	adds	r1, r3, #1
 801b442:	8179      	strh	r1, [r7, #10]
 801b444:	461d      	mov	r5, r3
 801b446:	4610      	mov	r0, r2
 801b448:	f000 ff34 	bl	801c2b4 <NibbleToHex>
 801b44c:	4603      	mov	r3, r0
 801b44e:	461a      	mov	r2, r3
 801b450:	1963      	adds	r3, r4, r5
 801b452:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801b456:	4b6c      	ldr	r3, [pc, #432]	@ (801b608 <send_DHCP_REQUEST+0x50c>)
 801b458:	791b      	ldrb	r3, [r3, #4]
 801b45a:	091b      	lsrs	r3, r3, #4
 801b45c:	b2da      	uxtb	r2, r3
 801b45e:	4b68      	ldr	r3, [pc, #416]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b460:	681c      	ldr	r4, [r3, #0]
 801b462:	897b      	ldrh	r3, [r7, #10]
 801b464:	1c59      	adds	r1, r3, #1
 801b466:	8179      	strh	r1, [r7, #10]
 801b468:	461d      	mov	r5, r3
 801b46a:	4610      	mov	r0, r2
 801b46c:	f000 ff22 	bl	801c2b4 <NibbleToHex>
 801b470:	4603      	mov	r3, r0
 801b472:	461a      	mov	r2, r3
 801b474:	1963      	adds	r3, r4, r5
 801b476:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801b47a:	4b63      	ldr	r3, [pc, #396]	@ (801b608 <send_DHCP_REQUEST+0x50c>)
 801b47c:	791a      	ldrb	r2, [r3, #4]
 801b47e:	4b60      	ldr	r3, [pc, #384]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b480:	681c      	ldr	r4, [r3, #0]
 801b482:	897b      	ldrh	r3, [r7, #10]
 801b484:	1c59      	adds	r1, r3, #1
 801b486:	8179      	strh	r1, [r7, #10]
 801b488:	461d      	mov	r5, r3
 801b48a:	4610      	mov	r0, r2
 801b48c:	f000 ff12 	bl	801c2b4 <NibbleToHex>
 801b490:	4603      	mov	r3, r0
 801b492:	461a      	mov	r2, r3
 801b494:	1963      	adds	r3, r4, r5
 801b496:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801b49a:	4b5b      	ldr	r3, [pc, #364]	@ (801b608 <send_DHCP_REQUEST+0x50c>)
 801b49c:	795b      	ldrb	r3, [r3, #5]
 801b49e:	091b      	lsrs	r3, r3, #4
 801b4a0:	b2da      	uxtb	r2, r3
 801b4a2:	4b57      	ldr	r3, [pc, #348]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b4a4:	681c      	ldr	r4, [r3, #0]
 801b4a6:	897b      	ldrh	r3, [r7, #10]
 801b4a8:	1c59      	adds	r1, r3, #1
 801b4aa:	8179      	strh	r1, [r7, #10]
 801b4ac:	461d      	mov	r5, r3
 801b4ae:	4610      	mov	r0, r2
 801b4b0:	f000 ff00 	bl	801c2b4 <NibbleToHex>
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	461a      	mov	r2, r3
 801b4b8:	1963      	adds	r3, r4, r5
 801b4ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801b4be:	4b52      	ldr	r3, [pc, #328]	@ (801b608 <send_DHCP_REQUEST+0x50c>)
 801b4c0:	795a      	ldrb	r2, [r3, #5]
 801b4c2:	4b4f      	ldr	r3, [pc, #316]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b4c4:	681c      	ldr	r4, [r3, #0]
 801b4c6:	897b      	ldrh	r3, [r7, #10]
 801b4c8:	1c59      	adds	r1, r3, #1
 801b4ca:	8179      	strh	r1, [r7, #10]
 801b4cc:	461d      	mov	r5, r3
 801b4ce:	4610      	mov	r0, r2
 801b4d0:	f000 fef0 	bl	801c2b4 <NibbleToHex>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	461a      	mov	r2, r3
 801b4d8:	1963      	adds	r3, r4, r5
 801b4da:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801b4de:	68fb      	ldr	r3, [r7, #12]
 801b4e0:	b2d9      	uxtb	r1, r3
 801b4e2:	4b47      	ldr	r3, [pc, #284]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	8978      	ldrh	r0, [r7, #10]
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	3307      	adds	r3, #7
 801b4ec:	1ac3      	subs	r3, r0, r3
 801b4ee:	3106      	adds	r1, #6
 801b4f0:	b2c9      	uxtb	r1, r1
 801b4f2:	4413      	add	r3, r2
 801b4f4:	460a      	mov	r2, r1
 801b4f6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801b4fa:	4b41      	ldr	r3, [pc, #260]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b4fc:	681a      	ldr	r2, [r3, #0]
 801b4fe:	897b      	ldrh	r3, [r7, #10]
 801b500:	1c59      	adds	r1, r3, #1
 801b502:	8179      	strh	r1, [r7, #10]
 801b504:	4413      	add	r3, r2
 801b506:	2237      	movs	r2, #55	@ 0x37
 801b508:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801b50c:	4b3c      	ldr	r3, [pc, #240]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b50e:	681a      	ldr	r2, [r3, #0]
 801b510:	897b      	ldrh	r3, [r7, #10]
 801b512:	1c59      	adds	r1, r3, #1
 801b514:	8179      	strh	r1, [r7, #10]
 801b516:	4413      	add	r3, r2
 801b518:	2208      	movs	r2, #8
 801b51a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b51e:	4b38      	ldr	r3, [pc, #224]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b520:	681a      	ldr	r2, [r3, #0]
 801b522:	897b      	ldrh	r3, [r7, #10]
 801b524:	1c59      	adds	r1, r3, #1
 801b526:	8179      	strh	r1, [r7, #10]
 801b528:	4413      	add	r3, r2
 801b52a:	2201      	movs	r2, #1
 801b52c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b530:	4b33      	ldr	r3, [pc, #204]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b532:	681a      	ldr	r2, [r3, #0]
 801b534:	897b      	ldrh	r3, [r7, #10]
 801b536:	1c59      	adds	r1, r3, #1
 801b538:	8179      	strh	r1, [r7, #10]
 801b53a:	4413      	add	r3, r2
 801b53c:	2203      	movs	r2, #3
 801b53e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b542:	4b2f      	ldr	r3, [pc, #188]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b544:	681a      	ldr	r2, [r3, #0]
 801b546:	897b      	ldrh	r3, [r7, #10]
 801b548:	1c59      	adds	r1, r3, #1
 801b54a:	8179      	strh	r1, [r7, #10]
 801b54c:	4413      	add	r3, r2
 801b54e:	2206      	movs	r2, #6
 801b550:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b554:	4b2a      	ldr	r3, [pc, #168]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b556:	681a      	ldr	r2, [r3, #0]
 801b558:	897b      	ldrh	r3, [r7, #10]
 801b55a:	1c59      	adds	r1, r3, #1
 801b55c:	8179      	strh	r1, [r7, #10]
 801b55e:	4413      	add	r3, r2
 801b560:	220f      	movs	r2, #15
 801b562:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b566:	4b26      	ldr	r3, [pc, #152]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b568:	681a      	ldr	r2, [r3, #0]
 801b56a:	897b      	ldrh	r3, [r7, #10]
 801b56c:	1c59      	adds	r1, r3, #1
 801b56e:	8179      	strh	r1, [r7, #10]
 801b570:	4413      	add	r3, r2
 801b572:	223a      	movs	r2, #58	@ 0x3a
 801b574:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b578:	4b21      	ldr	r3, [pc, #132]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b57a:	681a      	ldr	r2, [r3, #0]
 801b57c:	897b      	ldrh	r3, [r7, #10]
 801b57e:	1c59      	adds	r1, r3, #1
 801b580:	8179      	strh	r1, [r7, #10]
 801b582:	4413      	add	r3, r2
 801b584:	223b      	movs	r2, #59	@ 0x3b
 801b586:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801b58a:	4b1d      	ldr	r3, [pc, #116]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b58c:	681a      	ldr	r2, [r3, #0]
 801b58e:	897b      	ldrh	r3, [r7, #10]
 801b590:	1c59      	adds	r1, r3, #1
 801b592:	8179      	strh	r1, [r7, #10]
 801b594:	4413      	add	r3, r2
 801b596:	221f      	movs	r2, #31
 801b598:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801b59c:	4b18      	ldr	r3, [pc, #96]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b59e:	681a      	ldr	r2, [r3, #0]
 801b5a0:	897b      	ldrh	r3, [r7, #10]
 801b5a2:	1c59      	adds	r1, r3, #1
 801b5a4:	8179      	strh	r1, [r7, #10]
 801b5a6:	4413      	add	r3, r2
 801b5a8:	2221      	movs	r2, #33	@ 0x21
 801b5aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b5ae:	4b14      	ldr	r3, [pc, #80]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b5b0:	681a      	ldr	r2, [r3, #0]
 801b5b2:	897b      	ldrh	r3, [r7, #10]
 801b5b4:	1c59      	adds	r1, r3, #1
 801b5b6:	8179      	strh	r1, [r7, #10]
 801b5b8:	4413      	add	r3, r2
 801b5ba:	22ff      	movs	r2, #255	@ 0xff
 801b5bc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b5c0:	897b      	ldrh	r3, [r7, #10]
 801b5c2:	60fb      	str	r3, [r7, #12]
 801b5c4:	e009      	b.n	801b5da <send_DHCP_REQUEST+0x4de>
 801b5c6:	4b0e      	ldr	r3, [pc, #56]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b5c8:	681a      	ldr	r2, [r3, #0]
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	4413      	add	r3, r2
 801b5ce:	33ec      	adds	r3, #236	@ 0xec
 801b5d0:	2200      	movs	r2, #0
 801b5d2:	701a      	strb	r2, [r3, #0]
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	3301      	adds	r3, #1
 801b5d8:	60fb      	str	r3, [r7, #12]
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 801b5e0:	dbf1      	blt.n	801b5c6 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b5e2:	4b0a      	ldr	r3, [pc, #40]	@ (801b60c <send_DHCP_REQUEST+0x510>)
 801b5e4:	7818      	ldrb	r0, [r3, #0]
 801b5e6:	4b06      	ldr	r3, [pc, #24]	@ (801b600 <send_DHCP_REQUEST+0x504>)
 801b5e8:	6819      	ldr	r1, [r3, #0]
 801b5ea:	1d3b      	adds	r3, r7, #4
 801b5ec:	2243      	movs	r2, #67	@ 0x43
 801b5ee:	9200      	str	r2, [sp, #0]
 801b5f0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801b5f4:	f7fe f97a 	bl	80198ec <sendto>

}
 801b5f8:	bf00      	nop
 801b5fa:	3710      	adds	r7, #16
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bdb0      	pop	{r4, r5, r7, pc}
 801b600:	200009d0 	.word	0x200009d0
 801b604:	200000f8 	.word	0x200000f8
 801b608:	200009d4 	.word	0x200009d4
 801b60c:	200009a5 	.word	0x200009a5

0801b610 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801b610:	b580      	push	{r7, lr}
 801b612:	b086      	sub	sp, #24
 801b614:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b616:	2300      	movs	r3, #0
 801b618:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801b61a:	f7ff fab3 	bl	801ab84 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b61e:	2304      	movs	r3, #4
 801b620:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b622:	4b9f      	ldr	r3, [pc, #636]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	330a      	adds	r3, #10
 801b628:	2200      	movs	r2, #0
 801b62a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b62c:	4b9c      	ldr	r3, [pc, #624]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	330a      	adds	r3, #10
 801b632:	3301      	adds	r3, #1
 801b634:	2200      	movs	r2, #0
 801b636:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b638:	4b99      	ldr	r3, [pc, #612]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b63a:	681a      	ldr	r2, [r3, #0]
 801b63c:	897b      	ldrh	r3, [r7, #10]
 801b63e:	1c59      	adds	r1, r3, #1
 801b640:	8179      	strh	r1, [r7, #10]
 801b642:	4413      	add	r3, r2
 801b644:	2235      	movs	r2, #53	@ 0x35
 801b646:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b64a:	4b95      	ldr	r3, [pc, #596]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b64c:	681a      	ldr	r2, [r3, #0]
 801b64e:	897b      	ldrh	r3, [r7, #10]
 801b650:	1c59      	adds	r1, r3, #1
 801b652:	8179      	strh	r1, [r7, #10]
 801b654:	4413      	add	r3, r2
 801b656:	2201      	movs	r2, #1
 801b658:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801b65c:	4b90      	ldr	r3, [pc, #576]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b65e:	681a      	ldr	r2, [r3, #0]
 801b660:	897b      	ldrh	r3, [r7, #10]
 801b662:	1c59      	adds	r1, r3, #1
 801b664:	8179      	strh	r1, [r7, #10]
 801b666:	4413      	add	r3, r2
 801b668:	2204      	movs	r2, #4
 801b66a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b66e:	4b8c      	ldr	r3, [pc, #560]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b670:	681a      	ldr	r2, [r3, #0]
 801b672:	897b      	ldrh	r3, [r7, #10]
 801b674:	1c59      	adds	r1, r3, #1
 801b676:	8179      	strh	r1, [r7, #10]
 801b678:	4413      	add	r3, r2
 801b67a:	223d      	movs	r2, #61	@ 0x3d
 801b67c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b680:	4b87      	ldr	r3, [pc, #540]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	897b      	ldrh	r3, [r7, #10]
 801b686:	1c59      	adds	r1, r3, #1
 801b688:	8179      	strh	r1, [r7, #10]
 801b68a:	4413      	add	r3, r2
 801b68c:	2207      	movs	r2, #7
 801b68e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b692:	4b83      	ldr	r3, [pc, #524]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b694:	681a      	ldr	r2, [r3, #0]
 801b696:	897b      	ldrh	r3, [r7, #10]
 801b698:	1c59      	adds	r1, r3, #1
 801b69a:	8179      	strh	r1, [r7, #10]
 801b69c:	4413      	add	r3, r2
 801b69e:	2201      	movs	r2, #1
 801b6a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b6a4:	4b7e      	ldr	r3, [pc, #504]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b6a6:	681a      	ldr	r2, [r3, #0]
 801b6a8:	897b      	ldrh	r3, [r7, #10]
 801b6aa:	1c59      	adds	r1, r3, #1
 801b6ac:	8179      	strh	r1, [r7, #10]
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	4b7c      	ldr	r3, [pc, #496]	@ (801b8a4 <send_DHCP_DECLINE+0x294>)
 801b6b2:	7819      	ldrb	r1, [r3, #0]
 801b6b4:	1813      	adds	r3, r2, r0
 801b6b6:	460a      	mov	r2, r1
 801b6b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b6bc:	4b78      	ldr	r3, [pc, #480]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b6be:	681a      	ldr	r2, [r3, #0]
 801b6c0:	897b      	ldrh	r3, [r7, #10]
 801b6c2:	1c59      	adds	r1, r3, #1
 801b6c4:	8179      	strh	r1, [r7, #10]
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	4b76      	ldr	r3, [pc, #472]	@ (801b8a4 <send_DHCP_DECLINE+0x294>)
 801b6ca:	7859      	ldrb	r1, [r3, #1]
 801b6cc:	1813      	adds	r3, r2, r0
 801b6ce:	460a      	mov	r2, r1
 801b6d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b6d4:	4b72      	ldr	r3, [pc, #456]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b6d6:	681a      	ldr	r2, [r3, #0]
 801b6d8:	897b      	ldrh	r3, [r7, #10]
 801b6da:	1c59      	adds	r1, r3, #1
 801b6dc:	8179      	strh	r1, [r7, #10]
 801b6de:	4618      	mov	r0, r3
 801b6e0:	4b70      	ldr	r3, [pc, #448]	@ (801b8a4 <send_DHCP_DECLINE+0x294>)
 801b6e2:	7899      	ldrb	r1, [r3, #2]
 801b6e4:	1813      	adds	r3, r2, r0
 801b6e6:	460a      	mov	r2, r1
 801b6e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b6ec:	4b6c      	ldr	r3, [pc, #432]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b6ee:	681a      	ldr	r2, [r3, #0]
 801b6f0:	897b      	ldrh	r3, [r7, #10]
 801b6f2:	1c59      	adds	r1, r3, #1
 801b6f4:	8179      	strh	r1, [r7, #10]
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	4b6a      	ldr	r3, [pc, #424]	@ (801b8a4 <send_DHCP_DECLINE+0x294>)
 801b6fa:	78d9      	ldrb	r1, [r3, #3]
 801b6fc:	1813      	adds	r3, r2, r0
 801b6fe:	460a      	mov	r2, r1
 801b700:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b704:	4b66      	ldr	r3, [pc, #408]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b706:	681a      	ldr	r2, [r3, #0]
 801b708:	897b      	ldrh	r3, [r7, #10]
 801b70a:	1c59      	adds	r1, r3, #1
 801b70c:	8179      	strh	r1, [r7, #10]
 801b70e:	4618      	mov	r0, r3
 801b710:	4b64      	ldr	r3, [pc, #400]	@ (801b8a4 <send_DHCP_DECLINE+0x294>)
 801b712:	7919      	ldrb	r1, [r3, #4]
 801b714:	1813      	adds	r3, r2, r0
 801b716:	460a      	mov	r2, r1
 801b718:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b71c:	4b60      	ldr	r3, [pc, #384]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	897b      	ldrh	r3, [r7, #10]
 801b722:	1c59      	adds	r1, r3, #1
 801b724:	8179      	strh	r1, [r7, #10]
 801b726:	4618      	mov	r0, r3
 801b728:	4b5e      	ldr	r3, [pc, #376]	@ (801b8a4 <send_DHCP_DECLINE+0x294>)
 801b72a:	7959      	ldrb	r1, [r3, #5]
 801b72c:	1813      	adds	r3, r2, r0
 801b72e:	460a      	mov	r2, r1
 801b730:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b734:	4b5a      	ldr	r3, [pc, #360]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b736:	681a      	ldr	r2, [r3, #0]
 801b738:	897b      	ldrh	r3, [r7, #10]
 801b73a:	1c59      	adds	r1, r3, #1
 801b73c:	8179      	strh	r1, [r7, #10]
 801b73e:	4413      	add	r3, r2
 801b740:	2232      	movs	r2, #50	@ 0x32
 801b742:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b746:	4b56      	ldr	r3, [pc, #344]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b748:	681a      	ldr	r2, [r3, #0]
 801b74a:	897b      	ldrh	r3, [r7, #10]
 801b74c:	1c59      	adds	r1, r3, #1
 801b74e:	8179      	strh	r1, [r7, #10]
 801b750:	4413      	add	r3, r2
 801b752:	2204      	movs	r2, #4
 801b754:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b758:	4b51      	ldr	r3, [pc, #324]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b75a:	681a      	ldr	r2, [r3, #0]
 801b75c:	897b      	ldrh	r3, [r7, #10]
 801b75e:	1c59      	adds	r1, r3, #1
 801b760:	8179      	strh	r1, [r7, #10]
 801b762:	4618      	mov	r0, r3
 801b764:	4b50      	ldr	r3, [pc, #320]	@ (801b8a8 <send_DHCP_DECLINE+0x298>)
 801b766:	7819      	ldrb	r1, [r3, #0]
 801b768:	1813      	adds	r3, r2, r0
 801b76a:	460a      	mov	r2, r1
 801b76c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b770:	4b4b      	ldr	r3, [pc, #300]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b772:	681a      	ldr	r2, [r3, #0]
 801b774:	897b      	ldrh	r3, [r7, #10]
 801b776:	1c59      	adds	r1, r3, #1
 801b778:	8179      	strh	r1, [r7, #10]
 801b77a:	4618      	mov	r0, r3
 801b77c:	4b4a      	ldr	r3, [pc, #296]	@ (801b8a8 <send_DHCP_DECLINE+0x298>)
 801b77e:	7859      	ldrb	r1, [r3, #1]
 801b780:	1813      	adds	r3, r2, r0
 801b782:	460a      	mov	r2, r1
 801b784:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b788:	4b45      	ldr	r3, [pc, #276]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b78a:	681a      	ldr	r2, [r3, #0]
 801b78c:	897b      	ldrh	r3, [r7, #10]
 801b78e:	1c59      	adds	r1, r3, #1
 801b790:	8179      	strh	r1, [r7, #10]
 801b792:	4618      	mov	r0, r3
 801b794:	4b44      	ldr	r3, [pc, #272]	@ (801b8a8 <send_DHCP_DECLINE+0x298>)
 801b796:	7899      	ldrb	r1, [r3, #2]
 801b798:	1813      	adds	r3, r2, r0
 801b79a:	460a      	mov	r2, r1
 801b79c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b7a0:	4b3f      	ldr	r3, [pc, #252]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b7a2:	681a      	ldr	r2, [r3, #0]
 801b7a4:	897b      	ldrh	r3, [r7, #10]
 801b7a6:	1c59      	adds	r1, r3, #1
 801b7a8:	8179      	strh	r1, [r7, #10]
 801b7aa:	4618      	mov	r0, r3
 801b7ac:	4b3e      	ldr	r3, [pc, #248]	@ (801b8a8 <send_DHCP_DECLINE+0x298>)
 801b7ae:	78d9      	ldrb	r1, [r3, #3]
 801b7b0:	1813      	adds	r3, r2, r0
 801b7b2:	460a      	mov	r2, r1
 801b7b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b7b8:	4b39      	ldr	r3, [pc, #228]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b7ba:	681a      	ldr	r2, [r3, #0]
 801b7bc:	897b      	ldrh	r3, [r7, #10]
 801b7be:	1c59      	adds	r1, r3, #1
 801b7c0:	8179      	strh	r1, [r7, #10]
 801b7c2:	4413      	add	r3, r2
 801b7c4:	2236      	movs	r2, #54	@ 0x36
 801b7c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b7ca:	4b35      	ldr	r3, [pc, #212]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b7cc:	681a      	ldr	r2, [r3, #0]
 801b7ce:	897b      	ldrh	r3, [r7, #10]
 801b7d0:	1c59      	adds	r1, r3, #1
 801b7d2:	8179      	strh	r1, [r7, #10]
 801b7d4:	4413      	add	r3, r2
 801b7d6:	2204      	movs	r2, #4
 801b7d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b7dc:	4b30      	ldr	r3, [pc, #192]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b7de:	681a      	ldr	r2, [r3, #0]
 801b7e0:	897b      	ldrh	r3, [r7, #10]
 801b7e2:	1c59      	adds	r1, r3, #1
 801b7e4:	8179      	strh	r1, [r7, #10]
 801b7e6:	4618      	mov	r0, r3
 801b7e8:	4b30      	ldr	r3, [pc, #192]	@ (801b8ac <send_DHCP_DECLINE+0x29c>)
 801b7ea:	7819      	ldrb	r1, [r3, #0]
 801b7ec:	1813      	adds	r3, r2, r0
 801b7ee:	460a      	mov	r2, r1
 801b7f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b7f4:	4b2a      	ldr	r3, [pc, #168]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b7f6:	681a      	ldr	r2, [r3, #0]
 801b7f8:	897b      	ldrh	r3, [r7, #10]
 801b7fa:	1c59      	adds	r1, r3, #1
 801b7fc:	8179      	strh	r1, [r7, #10]
 801b7fe:	4618      	mov	r0, r3
 801b800:	4b2a      	ldr	r3, [pc, #168]	@ (801b8ac <send_DHCP_DECLINE+0x29c>)
 801b802:	7859      	ldrb	r1, [r3, #1]
 801b804:	1813      	adds	r3, r2, r0
 801b806:	460a      	mov	r2, r1
 801b808:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b80c:	4b24      	ldr	r3, [pc, #144]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b80e:	681a      	ldr	r2, [r3, #0]
 801b810:	897b      	ldrh	r3, [r7, #10]
 801b812:	1c59      	adds	r1, r3, #1
 801b814:	8179      	strh	r1, [r7, #10]
 801b816:	4618      	mov	r0, r3
 801b818:	4b24      	ldr	r3, [pc, #144]	@ (801b8ac <send_DHCP_DECLINE+0x29c>)
 801b81a:	7899      	ldrb	r1, [r3, #2]
 801b81c:	1813      	adds	r3, r2, r0
 801b81e:	460a      	mov	r2, r1
 801b820:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b824:	4b1e      	ldr	r3, [pc, #120]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b826:	681a      	ldr	r2, [r3, #0]
 801b828:	897b      	ldrh	r3, [r7, #10]
 801b82a:	1c59      	adds	r1, r3, #1
 801b82c:	8179      	strh	r1, [r7, #10]
 801b82e:	4618      	mov	r0, r3
 801b830:	4b1e      	ldr	r3, [pc, #120]	@ (801b8ac <send_DHCP_DECLINE+0x29c>)
 801b832:	78d9      	ldrb	r1, [r3, #3]
 801b834:	1813      	adds	r3, r2, r0
 801b836:	460a      	mov	r2, r1
 801b838:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b83c:	4b18      	ldr	r3, [pc, #96]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b83e:	681a      	ldr	r2, [r3, #0]
 801b840:	897b      	ldrh	r3, [r7, #10]
 801b842:	1c59      	adds	r1, r3, #1
 801b844:	8179      	strh	r1, [r7, #10]
 801b846:	4413      	add	r3, r2
 801b848:	22ff      	movs	r2, #255	@ 0xff
 801b84a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b84e:	897b      	ldrh	r3, [r7, #10]
 801b850:	60fb      	str	r3, [r7, #12]
 801b852:	e009      	b.n	801b868 <send_DHCP_DECLINE+0x258>
 801b854:	4b12      	ldr	r3, [pc, #72]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b856:	681a      	ldr	r2, [r3, #0]
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	4413      	add	r3, r2
 801b85c:	33ec      	adds	r3, #236	@ 0xec
 801b85e:	2200      	movs	r2, #0
 801b860:	701a      	strb	r2, [r3, #0]
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	3301      	adds	r3, #1
 801b866:	60fb      	str	r3, [r7, #12]
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 801b86e:	dbf1      	blt.n	801b854 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b870:	23ff      	movs	r3, #255	@ 0xff
 801b872:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b874:	23ff      	movs	r3, #255	@ 0xff
 801b876:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b878:	23ff      	movs	r3, #255	@ 0xff
 801b87a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b87c:	23ff      	movs	r3, #255	@ 0xff
 801b87e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b880:	4b0b      	ldr	r3, [pc, #44]	@ (801b8b0 <send_DHCP_DECLINE+0x2a0>)
 801b882:	7818      	ldrb	r0, [r3, #0]
 801b884:	4b06      	ldr	r3, [pc, #24]	@ (801b8a0 <send_DHCP_DECLINE+0x290>)
 801b886:	6819      	ldr	r1, [r3, #0]
 801b888:	1d3b      	adds	r3, r7, #4
 801b88a:	2243      	movs	r2, #67	@ 0x43
 801b88c:	9200      	str	r2, [sp, #0]
 801b88e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 801b892:	f7fe f82b 	bl	80198ec <sendto>
}
 801b896:	bf00      	nop
 801b898:	3710      	adds	r7, #16
 801b89a:	46bd      	mov	sp, r7
 801b89c:	bd80      	pop	{r7, pc}
 801b89e:	bf00      	nop
 801b8a0:	200009d0 	.word	0x200009d0
 801b8a4:	200009d4 	.word	0x200009d4
 801b8a8:	200009b4 	.word	0x200009b4
 801b8ac:	200009a8 	.word	0x200009a8
 801b8b0:	200009a5 	.word	0x200009a5

0801b8b4 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b8b4:	b590      	push	{r4, r7, lr}
 801b8b6:	b089      	sub	sp, #36	@ 0x24
 801b8b8:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b8be:	4ba1      	ldr	r3, [pc, #644]	@ (801bb44 <parseDHCPMSG+0x290>)
 801b8c0:	781b      	ldrb	r3, [r3, #0]
 801b8c2:	4618      	mov	r0, r3
 801b8c4:	f7fd f9f5 	bl	8018cb2 <getSn_RX_RSR>
 801b8c8:	4603      	mov	r3, r0
 801b8ca:	823b      	strh	r3, [r7, #16]
 801b8cc:	8a3b      	ldrh	r3, [r7, #16]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d011      	beq.n	801b8f6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b8d2:	4b9c      	ldr	r3, [pc, #624]	@ (801bb44 <parseDHCPMSG+0x290>)
 801b8d4:	7818      	ldrb	r0, [r3, #0]
 801b8d6:	4b9c      	ldr	r3, [pc, #624]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b8d8:	6819      	ldr	r1, [r3, #0]
 801b8da:	1d3c      	adds	r4, r7, #4
 801b8dc:	8a3a      	ldrh	r2, [r7, #16]
 801b8de:	1cbb      	adds	r3, r7, #2
 801b8e0:	9300      	str	r3, [sp, #0]
 801b8e2:	4623      	mov	r3, r4
 801b8e4:	f7fe f936 	bl	8019b54 <recvfrom>
 801b8e8:	4603      	mov	r3, r0
 801b8ea:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b8ec:	887b      	ldrh	r3, [r7, #2]
 801b8ee:	2b43      	cmp	r3, #67	@ 0x43
 801b8f0:	f040 81ed 	bne.w	801bcce <parseDHCPMSG+0x41a>
 801b8f4:	e001      	b.n	801b8fa <parseDHCPMSG+0x46>
   else return 0;
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	e1eb      	b.n	801bcd2 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b8fa:	4b93      	ldr	r3, [pc, #588]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	7f1a      	ldrb	r2, [r3, #28]
 801b900:	4b92      	ldr	r3, [pc, #584]	@ (801bb4c <parseDHCPMSG+0x298>)
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	429a      	cmp	r2, r3
 801b906:	d124      	bne.n	801b952 <parseDHCPMSG+0x9e>
 801b908:	4b8f      	ldr	r3, [pc, #572]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	7f5a      	ldrb	r2, [r3, #29]
 801b90e:	4b8f      	ldr	r3, [pc, #572]	@ (801bb4c <parseDHCPMSG+0x298>)
 801b910:	785b      	ldrb	r3, [r3, #1]
 801b912:	429a      	cmp	r2, r3
 801b914:	d11d      	bne.n	801b952 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b916:	4b8c      	ldr	r3, [pc, #560]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	7f9a      	ldrb	r2, [r3, #30]
 801b91c:	4b8b      	ldr	r3, [pc, #556]	@ (801bb4c <parseDHCPMSG+0x298>)
 801b91e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b920:	429a      	cmp	r2, r3
 801b922:	d116      	bne.n	801b952 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b924:	4b88      	ldr	r3, [pc, #544]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	7fda      	ldrb	r2, [r3, #31]
 801b92a:	4b88      	ldr	r3, [pc, #544]	@ (801bb4c <parseDHCPMSG+0x298>)
 801b92c:	78db      	ldrb	r3, [r3, #3]
 801b92e:	429a      	cmp	r2, r3
 801b930:	d10f      	bne.n	801b952 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b932:	4b85      	ldr	r3, [pc, #532]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b93a:	4b84      	ldr	r3, [pc, #528]	@ (801bb4c <parseDHCPMSG+0x298>)
 801b93c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b93e:	429a      	cmp	r2, r3
 801b940:	d107      	bne.n	801b952 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b942:	4b81      	ldr	r3, [pc, #516]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801b94a:	4b80      	ldr	r3, [pc, #512]	@ (801bb4c <parseDHCPMSG+0x298>)
 801b94c:	795b      	ldrb	r3, [r3, #5]
 801b94e:	429a      	cmp	r2, r3
 801b950:	d001      	beq.n	801b956 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b952:	2300      	movs	r3, #0
 801b954:	e1bd      	b.n	801bcd2 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b956:	4b7e      	ldr	r3, [pc, #504]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b958:	781b      	ldrb	r3, [r3, #0]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d10b      	bne.n	801b976 <parseDHCPMSG+0xc2>
 801b95e:	4b7c      	ldr	r3, [pc, #496]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b960:	785b      	ldrb	r3, [r3, #1]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d107      	bne.n	801b976 <parseDHCPMSG+0xc2>
 801b966:	4b7a      	ldr	r3, [pc, #488]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b968:	789b      	ldrb	r3, [r3, #2]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d103      	bne.n	801b976 <parseDHCPMSG+0xc2>
 801b96e:	4b78      	ldr	r3, [pc, #480]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b970:	78db      	ldrb	r3, [r3, #3]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d029      	beq.n	801b9ca <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b976:	793a      	ldrb	r2, [r7, #4]
 801b978:	4b75      	ldr	r3, [pc, #468]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b97a:	781b      	ldrb	r3, [r3, #0]
 801b97c:	429a      	cmp	r2, r3
 801b97e:	d10e      	bne.n	801b99e <parseDHCPMSG+0xea>
 801b980:	797a      	ldrb	r2, [r7, #5]
 801b982:	4b73      	ldr	r3, [pc, #460]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b984:	785b      	ldrb	r3, [r3, #1]
 801b986:	429a      	cmp	r2, r3
 801b988:	d109      	bne.n	801b99e <parseDHCPMSG+0xea>
 801b98a:	79ba      	ldrb	r2, [r7, #6]
 801b98c:	4b70      	ldr	r3, [pc, #448]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b98e:	789b      	ldrb	r3, [r3, #2]
 801b990:	429a      	cmp	r2, r3
 801b992:	d104      	bne.n	801b99e <parseDHCPMSG+0xea>
 801b994:	79fa      	ldrb	r2, [r7, #7]
 801b996:	4b6e      	ldr	r3, [pc, #440]	@ (801bb50 <parseDHCPMSG+0x29c>)
 801b998:	78db      	ldrb	r3, [r3, #3]
 801b99a:	429a      	cmp	r2, r3
 801b99c:	d015      	beq.n	801b9ca <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b99e:	793a      	ldrb	r2, [r7, #4]
 801b9a0:	4b6c      	ldr	r3, [pc, #432]	@ (801bb54 <parseDHCPMSG+0x2a0>)
 801b9a2:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b9a4:	429a      	cmp	r2, r3
 801b9a6:	d10e      	bne.n	801b9c6 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b9a8:	797a      	ldrb	r2, [r7, #5]
 801b9aa:	4b6a      	ldr	r3, [pc, #424]	@ (801bb54 <parseDHCPMSG+0x2a0>)
 801b9ac:	785b      	ldrb	r3, [r3, #1]
 801b9ae:	429a      	cmp	r2, r3
 801b9b0:	d109      	bne.n	801b9c6 <parseDHCPMSG+0x112>
 801b9b2:	79ba      	ldrb	r2, [r7, #6]
 801b9b4:	4b67      	ldr	r3, [pc, #412]	@ (801bb54 <parseDHCPMSG+0x2a0>)
 801b9b6:	789b      	ldrb	r3, [r3, #2]
 801b9b8:	429a      	cmp	r2, r3
 801b9ba:	d104      	bne.n	801b9c6 <parseDHCPMSG+0x112>
 801b9bc:	79fa      	ldrb	r2, [r7, #7]
 801b9be:	4b65      	ldr	r3, [pc, #404]	@ (801bb54 <parseDHCPMSG+0x2a0>)
 801b9c0:	78db      	ldrb	r3, [r3, #3]
 801b9c2:	429a      	cmp	r2, r3
 801b9c4:	d001      	beq.n	801b9ca <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	e183      	b.n	801bcd2 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b9ca:	4b5f      	ldr	r3, [pc, #380]	@ (801bb48 <parseDHCPMSG+0x294>)
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b9d0:	697b      	ldr	r3, [r7, #20]
 801b9d2:	33f0      	adds	r3, #240	@ 0xf0
 801b9d4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b9d6:	8a3b      	ldrh	r3, [r7, #16]
 801b9d8:	3bf0      	subs	r3, #240	@ 0xf0
 801b9da:	697a      	ldr	r2, [r7, #20]
 801b9dc:	4413      	add	r3, r2
 801b9de:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b9e0:	e170      	b.n	801bcc4 <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b9e2:	697b      	ldr	r3, [r7, #20]
 801b9e4:	781b      	ldrb	r3, [r3, #0]
 801b9e6:	2b36      	cmp	r3, #54	@ 0x36
 801b9e8:	dc76      	bgt.n	801bad8 <parseDHCPMSG+0x224>
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	f2c0 815d 	blt.w	801bcaa <parseDHCPMSG+0x3f6>
 801b9f0:	2b36      	cmp	r3, #54	@ 0x36
 801b9f2:	f200 815a 	bhi.w	801bcaa <parseDHCPMSG+0x3f6>
 801b9f6:	a201      	add	r2, pc, #4	@ (adr r2, 801b9fc <parseDHCPMSG+0x148>)
 801b9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9fc:	0801bae5 	.word	0x0801bae5
 801ba00:	0801bb05 	.word	0x0801bb05
 801ba04:	0801bcab 	.word	0x0801bcab
 801ba08:	0801bb5d 	.word	0x0801bb5d
 801ba0c:	0801bcab 	.word	0x0801bcab
 801ba10:	0801bcab 	.word	0x0801bcab
 801ba14:	0801bba9 	.word	0x0801bba9
 801ba18:	0801bcab 	.word	0x0801bcab
 801ba1c:	0801bcab 	.word	0x0801bcab
 801ba20:	0801bcab 	.word	0x0801bcab
 801ba24:	0801bcab 	.word	0x0801bcab
 801ba28:	0801bcab 	.word	0x0801bcab
 801ba2c:	0801bcab 	.word	0x0801bcab
 801ba30:	0801bcab 	.word	0x0801bcab
 801ba34:	0801bcab 	.word	0x0801bcab
 801ba38:	0801bcab 	.word	0x0801bcab
 801ba3c:	0801bcab 	.word	0x0801bcab
 801ba40:	0801bcab 	.word	0x0801bcab
 801ba44:	0801bcab 	.word	0x0801bcab
 801ba48:	0801bcab 	.word	0x0801bcab
 801ba4c:	0801bcab 	.word	0x0801bcab
 801ba50:	0801bcab 	.word	0x0801bcab
 801ba54:	0801bcab 	.word	0x0801bcab
 801ba58:	0801bcab 	.word	0x0801bcab
 801ba5c:	0801bcab 	.word	0x0801bcab
 801ba60:	0801bcab 	.word	0x0801bcab
 801ba64:	0801bcab 	.word	0x0801bcab
 801ba68:	0801bcab 	.word	0x0801bcab
 801ba6c:	0801bcab 	.word	0x0801bcab
 801ba70:	0801bcab 	.word	0x0801bcab
 801ba74:	0801bcab 	.word	0x0801bcab
 801ba78:	0801bcab 	.word	0x0801bcab
 801ba7c:	0801bcab 	.word	0x0801bcab
 801ba80:	0801bcab 	.word	0x0801bcab
 801ba84:	0801bcab 	.word	0x0801bcab
 801ba88:	0801bcab 	.word	0x0801bcab
 801ba8c:	0801bcab 	.word	0x0801bcab
 801ba90:	0801bcab 	.word	0x0801bcab
 801ba94:	0801bcab 	.word	0x0801bcab
 801ba98:	0801bcab 	.word	0x0801bcab
 801ba9c:	0801bcab 	.word	0x0801bcab
 801baa0:	0801bcab 	.word	0x0801bcab
 801baa4:	0801bcab 	.word	0x0801bcab
 801baa8:	0801bcab 	.word	0x0801bcab
 801baac:	0801bcab 	.word	0x0801bcab
 801bab0:	0801bcab 	.word	0x0801bcab
 801bab4:	0801bcab 	.word	0x0801bcab
 801bab8:	0801bcab 	.word	0x0801bcab
 801babc:	0801bcab 	.word	0x0801bcab
 801bac0:	0801bcab 	.word	0x0801bcab
 801bac4:	0801bcab 	.word	0x0801bcab
 801bac8:	0801bbf5 	.word	0x0801bbf5
 801bacc:	0801bcab 	.word	0x0801bcab
 801bad0:	0801baed 	.word	0x0801baed
 801bad4:	0801bc51 	.word	0x0801bc51
 801bad8:	2bff      	cmp	r3, #255	@ 0xff
 801bada:	f040 80e6 	bne.w	801bcaa <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	617b      	str	r3, [r7, #20]
   				break;
 801bae2:	e0ef      	b.n	801bcc4 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	3301      	adds	r3, #1
 801bae8:	617b      	str	r3, [r7, #20]
   				break;
 801baea:	e0eb      	b.n	801bcc4 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801baec:	697b      	ldr	r3, [r7, #20]
 801baee:	3301      	adds	r3, #1
 801baf0:	617b      	str	r3, [r7, #20]
   				p++;
 801baf2:	697b      	ldr	r3, [r7, #20]
 801baf4:	3301      	adds	r3, #1
 801baf6:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801baf8:	697b      	ldr	r3, [r7, #20]
 801bafa:	1c5a      	adds	r2, r3, #1
 801bafc:	617a      	str	r2, [r7, #20]
 801bafe:	781b      	ldrb	r3, [r3, #0]
 801bb00:	74fb      	strb	r3, [r7, #19]
   				break;
 801bb02:	e0df      	b.n	801bcc4 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801bb04:	697b      	ldr	r3, [r7, #20]
 801bb06:	3301      	adds	r3, #1
 801bb08:	617b      	str	r3, [r7, #20]
   				p++;
 801bb0a:	697b      	ldr	r3, [r7, #20]
 801bb0c:	3301      	adds	r3, #1
 801bb0e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801bb10:	697b      	ldr	r3, [r7, #20]
 801bb12:	1c5a      	adds	r2, r3, #1
 801bb14:	617a      	str	r2, [r7, #20]
 801bb16:	781a      	ldrb	r2, [r3, #0]
 801bb18:	4b0f      	ldr	r3, [pc, #60]	@ (801bb58 <parseDHCPMSG+0x2a4>)
 801bb1a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801bb1c:	697b      	ldr	r3, [r7, #20]
 801bb1e:	1c5a      	adds	r2, r3, #1
 801bb20:	617a      	str	r2, [r7, #20]
 801bb22:	781a      	ldrb	r2, [r3, #0]
 801bb24:	4b0c      	ldr	r3, [pc, #48]	@ (801bb58 <parseDHCPMSG+0x2a4>)
 801bb26:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801bb28:	697b      	ldr	r3, [r7, #20]
 801bb2a:	1c5a      	adds	r2, r3, #1
 801bb2c:	617a      	str	r2, [r7, #20]
 801bb2e:	781a      	ldrb	r2, [r3, #0]
 801bb30:	4b09      	ldr	r3, [pc, #36]	@ (801bb58 <parseDHCPMSG+0x2a4>)
 801bb32:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801bb34:	697b      	ldr	r3, [r7, #20]
 801bb36:	1c5a      	adds	r2, r3, #1
 801bb38:	617a      	str	r2, [r7, #20]
 801bb3a:	781a      	ldrb	r2, [r3, #0]
 801bb3c:	4b06      	ldr	r3, [pc, #24]	@ (801bb58 <parseDHCPMSG+0x2a4>)
 801bb3e:	70da      	strb	r2, [r3, #3]
   				break;
 801bb40:	e0c0      	b.n	801bcc4 <parseDHCPMSG+0x410>
 801bb42:	bf00      	nop
 801bb44:	200009a5 	.word	0x200009a5
 801bb48:	200009d0 	.word	0x200009d0
 801bb4c:	200009d4 	.word	0x200009d4
 801bb50:	200009a8 	.word	0x200009a8
 801bb54:	200009ac 	.word	0x200009ac
 801bb58:	200009bc 	.word	0x200009bc
   			case routersOnSubnet :
   				p++;
 801bb5c:	697b      	ldr	r3, [r7, #20]
 801bb5e:	3301      	adds	r3, #1
 801bb60:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801bb62:	697b      	ldr	r3, [r7, #20]
 801bb64:	1c5a      	adds	r2, r3, #1
 801bb66:	617a      	str	r2, [r7, #20]
 801bb68:	781b      	ldrb	r3, [r3, #0]
 801bb6a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801bb6c:	697b      	ldr	r3, [r7, #20]
 801bb6e:	1c5a      	adds	r2, r3, #1
 801bb70:	617a      	str	r2, [r7, #20]
 801bb72:	781a      	ldrb	r2, [r3, #0]
 801bb74:	4b59      	ldr	r3, [pc, #356]	@ (801bcdc <parseDHCPMSG+0x428>)
 801bb76:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801bb78:	697b      	ldr	r3, [r7, #20]
 801bb7a:	1c5a      	adds	r2, r3, #1
 801bb7c:	617a      	str	r2, [r7, #20]
 801bb7e:	781a      	ldrb	r2, [r3, #0]
 801bb80:	4b56      	ldr	r3, [pc, #344]	@ (801bcdc <parseDHCPMSG+0x428>)
 801bb82:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801bb84:	697b      	ldr	r3, [r7, #20]
 801bb86:	1c5a      	adds	r2, r3, #1
 801bb88:	617a      	str	r2, [r7, #20]
 801bb8a:	781a      	ldrb	r2, [r3, #0]
 801bb8c:	4b53      	ldr	r3, [pc, #332]	@ (801bcdc <parseDHCPMSG+0x428>)
 801bb8e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801bb90:	697b      	ldr	r3, [r7, #20]
 801bb92:	1c5a      	adds	r2, r3, #1
 801bb94:	617a      	str	r2, [r7, #20]
 801bb96:	781a      	ldrb	r2, [r3, #0]
 801bb98:	4b50      	ldr	r3, [pc, #320]	@ (801bcdc <parseDHCPMSG+0x428>)
 801bb9a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801bb9c:	7afb      	ldrb	r3, [r7, #11]
 801bb9e:	3b04      	subs	r3, #4
 801bba0:	697a      	ldr	r2, [r7, #20]
 801bba2:	4413      	add	r3, r2
 801bba4:	617b      	str	r3, [r7, #20]
   				break;
 801bba6:	e08d      	b.n	801bcc4 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801bba8:	697b      	ldr	r3, [r7, #20]
 801bbaa:	3301      	adds	r3, #1
 801bbac:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801bbae:	697b      	ldr	r3, [r7, #20]
 801bbb0:	1c5a      	adds	r2, r3, #1
 801bbb2:	617a      	str	r2, [r7, #20]
 801bbb4:	781b      	ldrb	r3, [r3, #0]
 801bbb6:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801bbb8:	697b      	ldr	r3, [r7, #20]
 801bbba:	1c5a      	adds	r2, r3, #1
 801bbbc:	617a      	str	r2, [r7, #20]
 801bbbe:	781a      	ldrb	r2, [r3, #0]
 801bbc0:	4b47      	ldr	r3, [pc, #284]	@ (801bce0 <parseDHCPMSG+0x42c>)
 801bbc2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801bbc4:	697b      	ldr	r3, [r7, #20]
 801bbc6:	1c5a      	adds	r2, r3, #1
 801bbc8:	617a      	str	r2, [r7, #20]
 801bbca:	781a      	ldrb	r2, [r3, #0]
 801bbcc:	4b44      	ldr	r3, [pc, #272]	@ (801bce0 <parseDHCPMSG+0x42c>)
 801bbce:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801bbd0:	697b      	ldr	r3, [r7, #20]
 801bbd2:	1c5a      	adds	r2, r3, #1
 801bbd4:	617a      	str	r2, [r7, #20]
 801bbd6:	781a      	ldrb	r2, [r3, #0]
 801bbd8:	4b41      	ldr	r3, [pc, #260]	@ (801bce0 <parseDHCPMSG+0x42c>)
 801bbda:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801bbdc:	697b      	ldr	r3, [r7, #20]
 801bbde:	1c5a      	adds	r2, r3, #1
 801bbe0:	617a      	str	r2, [r7, #20]
 801bbe2:	781a      	ldrb	r2, [r3, #0]
 801bbe4:	4b3e      	ldr	r3, [pc, #248]	@ (801bce0 <parseDHCPMSG+0x42c>)
 801bbe6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801bbe8:	7afb      	ldrb	r3, [r7, #11]
 801bbea:	3b04      	subs	r3, #4
 801bbec:	697a      	ldr	r2, [r7, #20]
 801bbee:	4413      	add	r3, r2
 801bbf0:	617b      	str	r3, [r7, #20]
   				break;
 801bbf2:	e067      	b.n	801bcc4 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801bbf4:	697b      	ldr	r3, [r7, #20]
 801bbf6:	3301      	adds	r3, #1
 801bbf8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bbfa:	697b      	ldr	r3, [r7, #20]
 801bbfc:	1c5a      	adds	r2, r3, #1
 801bbfe:	617a      	str	r2, [r7, #20]
 801bc00:	781b      	ldrb	r3, [r3, #0]
 801bc02:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801bc04:	697b      	ldr	r3, [r7, #20]
 801bc06:	1c5a      	adds	r2, r3, #1
 801bc08:	617a      	str	r2, [r7, #20]
 801bc0a:	781b      	ldrb	r3, [r3, #0]
 801bc0c:	461a      	mov	r2, r3
 801bc0e:	4b35      	ldr	r3, [pc, #212]	@ (801bce4 <parseDHCPMSG+0x430>)
 801bc10:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bc12:	4b34      	ldr	r3, [pc, #208]	@ (801bce4 <parseDHCPMSG+0x430>)
 801bc14:	681b      	ldr	r3, [r3, #0]
 801bc16:	021a      	lsls	r2, r3, #8
 801bc18:	697b      	ldr	r3, [r7, #20]
 801bc1a:	1c59      	adds	r1, r3, #1
 801bc1c:	6179      	str	r1, [r7, #20]
 801bc1e:	781b      	ldrb	r3, [r3, #0]
 801bc20:	4413      	add	r3, r2
 801bc22:	4a30      	ldr	r2, [pc, #192]	@ (801bce4 <parseDHCPMSG+0x430>)
 801bc24:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bc26:	4b2f      	ldr	r3, [pc, #188]	@ (801bce4 <parseDHCPMSG+0x430>)
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	021a      	lsls	r2, r3, #8
 801bc2c:	697b      	ldr	r3, [r7, #20]
 801bc2e:	1c59      	adds	r1, r3, #1
 801bc30:	6179      	str	r1, [r7, #20]
 801bc32:	781b      	ldrb	r3, [r3, #0]
 801bc34:	4413      	add	r3, r2
 801bc36:	4a2b      	ldr	r2, [pc, #172]	@ (801bce4 <parseDHCPMSG+0x430>)
 801bc38:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bc3a:	4b2a      	ldr	r3, [pc, #168]	@ (801bce4 <parseDHCPMSG+0x430>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	021a      	lsls	r2, r3, #8
 801bc40:	697b      	ldr	r3, [r7, #20]
 801bc42:	1c59      	adds	r1, r3, #1
 801bc44:	6179      	str	r1, [r7, #20]
 801bc46:	781b      	ldrb	r3, [r3, #0]
 801bc48:	4413      	add	r3, r2
 801bc4a:	4a26      	ldr	r2, [pc, #152]	@ (801bce4 <parseDHCPMSG+0x430>)
 801bc4c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801bc4e:	e039      	b.n	801bcc4 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	3301      	adds	r3, #1
 801bc54:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bc56:	697b      	ldr	r3, [r7, #20]
 801bc58:	1c5a      	adds	r2, r3, #1
 801bc5a:	617a      	str	r2, [r7, #20]
 801bc5c:	781b      	ldrb	r3, [r3, #0]
 801bc5e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801bc60:	697b      	ldr	r3, [r7, #20]
 801bc62:	1c5a      	adds	r2, r3, #1
 801bc64:	617a      	str	r2, [r7, #20]
 801bc66:	781a      	ldrb	r2, [r3, #0]
 801bc68:	4b1f      	ldr	r3, [pc, #124]	@ (801bce8 <parseDHCPMSG+0x434>)
 801bc6a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	1c5a      	adds	r2, r3, #1
 801bc70:	617a      	str	r2, [r7, #20]
 801bc72:	781a      	ldrb	r2, [r3, #0]
 801bc74:	4b1c      	ldr	r3, [pc, #112]	@ (801bce8 <parseDHCPMSG+0x434>)
 801bc76:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801bc78:	697b      	ldr	r3, [r7, #20]
 801bc7a:	1c5a      	adds	r2, r3, #1
 801bc7c:	617a      	str	r2, [r7, #20]
 801bc7e:	781a      	ldrb	r2, [r3, #0]
 801bc80:	4b19      	ldr	r3, [pc, #100]	@ (801bce8 <parseDHCPMSG+0x434>)
 801bc82:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801bc84:	697b      	ldr	r3, [r7, #20]
 801bc86:	1c5a      	adds	r2, r3, #1
 801bc88:	617a      	str	r2, [r7, #20]
 801bc8a:	781a      	ldrb	r2, [r3, #0]
 801bc8c:	4b16      	ldr	r3, [pc, #88]	@ (801bce8 <parseDHCPMSG+0x434>)
 801bc8e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801bc90:	793a      	ldrb	r2, [r7, #4]
 801bc92:	4b16      	ldr	r3, [pc, #88]	@ (801bcec <parseDHCPMSG+0x438>)
 801bc94:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801bc96:	797a      	ldrb	r2, [r7, #5]
 801bc98:	4b14      	ldr	r3, [pc, #80]	@ (801bcec <parseDHCPMSG+0x438>)
 801bc9a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801bc9c:	79ba      	ldrb	r2, [r7, #6]
 801bc9e:	4b13      	ldr	r3, [pc, #76]	@ (801bcec <parseDHCPMSG+0x438>)
 801bca0:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801bca2:	79fa      	ldrb	r2, [r7, #7]
 801bca4:	4b11      	ldr	r3, [pc, #68]	@ (801bcec <parseDHCPMSG+0x438>)
 801bca6:	70da      	strb	r2, [r3, #3]
   				break;
 801bca8:	e00c      	b.n	801bcc4 <parseDHCPMSG+0x410>
   			default :
   				p++;
 801bcaa:	697b      	ldr	r3, [r7, #20]
 801bcac:	3301      	adds	r3, #1
 801bcae:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bcb0:	697b      	ldr	r3, [r7, #20]
 801bcb2:	1c5a      	adds	r2, r3, #1
 801bcb4:	617a      	str	r2, [r7, #20]
 801bcb6:	781b      	ldrb	r3, [r3, #0]
 801bcb8:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801bcba:	7afb      	ldrb	r3, [r7, #11]
 801bcbc:	697a      	ldr	r2, [r7, #20]
 801bcbe:	4413      	add	r3, r2
 801bcc0:	617b      	str	r3, [r7, #20]
   				break;
 801bcc2:	bf00      	nop
		while ( p < e ) {
 801bcc4:	697a      	ldr	r2, [r7, #20]
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	429a      	cmp	r2, r3
 801bcca:	f4ff ae8a 	bcc.w	801b9e2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801bcce:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	371c      	adds	r7, #28
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd90      	pop	{r4, r7, pc}
 801bcda:	bf00      	nop
 801bcdc:	200009b8 	.word	0x200009b8
 801bce0:	200009c0 	.word	0x200009c0
 801bce4:	200000f0 	.word	0x200000f0
 801bce8:	200009a8 	.word	0x200009a8
 801bcec:	200009ac 	.word	0x200009ac

0801bcf0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b082      	sub	sp, #8
 801bcf4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801bcf6:	4b7f      	ldr	r3, [pc, #508]	@ (801bef4 <DHCP_run+0x204>)
 801bcf8:	f993 3000 	ldrsb.w	r3, [r3]
 801bcfc:	2b06      	cmp	r3, #6
 801bcfe:	d101      	bne.n	801bd04 <DHCP_run+0x14>
 801bd00:	2305      	movs	r3, #5
 801bd02:	e0f3      	b.n	801beec <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801bd04:	4b7c      	ldr	r3, [pc, #496]	@ (801bef8 <DHCP_run+0x208>)
 801bd06:	781b      	ldrb	r3, [r3, #0]
 801bd08:	009b      	lsls	r3, r3, #2
 801bd0a:	3301      	adds	r3, #1
 801bd0c:	00db      	lsls	r3, r3, #3
 801bd0e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801bd12:	4618      	mov	r0, r3
 801bd14:	f7fc fe2a 	bl	801896c <WIZCHIP_READ>
 801bd18:	4603      	mov	r3, r0
 801bd1a:	2b22      	cmp	r3, #34	@ 0x22
 801bd1c:	d006      	beq.n	801bd2c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801bd1e:	4b76      	ldr	r3, [pc, #472]	@ (801bef8 <DHCP_run+0x208>)
 801bd20:	7818      	ldrb	r0, [r3, #0]
 801bd22:	2300      	movs	r3, #0
 801bd24:	2244      	movs	r2, #68	@ 0x44
 801bd26:	2102      	movs	r1, #2
 801bd28:	f7fd f906 	bl	8018f38 <socket>

	ret = DHCP_RUNNING;
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801bd30:	f7ff fdc0 	bl	801b8b4 <parseDHCPMSG>
 801bd34:	4603      	mov	r3, r0
 801bd36:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801bd38:	4b6e      	ldr	r3, [pc, #440]	@ (801bef4 <DHCP_run+0x204>)
 801bd3a:	f993 3000 	ldrsb.w	r3, [r3]
 801bd3e:	2b04      	cmp	r3, #4
 801bd40:	f200 80d0 	bhi.w	801bee4 <DHCP_run+0x1f4>
 801bd44:	a201      	add	r2, pc, #4	@ (adr r2, 801bd4c <DHCP_run+0x5c>)
 801bd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd4a:	bf00      	nop
 801bd4c:	0801bd61 	.word	0x0801bd61
 801bd50:	0801bd85 	.word	0x0801bd85
 801bd54:	0801bdc9 	.word	0x0801bdc9
 801bd58:	0801be19 	.word	0x0801be19
 801bd5c:	0801be73 	.word	0x0801be73
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801bd60:	4b66      	ldr	r3, [pc, #408]	@ (801befc <DHCP_run+0x20c>)
 801bd62:	2200      	movs	r2, #0
 801bd64:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801bd66:	4b65      	ldr	r3, [pc, #404]	@ (801befc <DHCP_run+0x20c>)
 801bd68:	2200      	movs	r2, #0
 801bd6a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801bd6c:	4b63      	ldr	r3, [pc, #396]	@ (801befc <DHCP_run+0x20c>)
 801bd6e:	2200      	movs	r2, #0
 801bd70:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801bd72:	4b62      	ldr	r3, [pc, #392]	@ (801befc <DHCP_run+0x20c>)
 801bd74:	2200      	movs	r2, #0
 801bd76:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801bd78:	f7fe fffa 	bl	801ad70 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801bd7c:	4b5d      	ldr	r3, [pc, #372]	@ (801bef4 <DHCP_run+0x204>)
 801bd7e:	2201      	movs	r2, #1
 801bd80:	701a      	strb	r2, [r3, #0]
   		break;
 801bd82:	e0b2      	b.n	801beea <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801bd84:	79bb      	ldrb	r3, [r7, #6]
 801bd86:	2b02      	cmp	r3, #2
 801bd88:	d119      	bne.n	801bdbe <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801bd8a:	4b5d      	ldr	r3, [pc, #372]	@ (801bf00 <DHCP_run+0x210>)
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	7c1a      	ldrb	r2, [r3, #16]
 801bd90:	4b5a      	ldr	r3, [pc, #360]	@ (801befc <DHCP_run+0x20c>)
 801bd92:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801bd94:	4b5a      	ldr	r3, [pc, #360]	@ (801bf00 <DHCP_run+0x210>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	7c5a      	ldrb	r2, [r3, #17]
 801bd9a:	4b58      	ldr	r3, [pc, #352]	@ (801befc <DHCP_run+0x20c>)
 801bd9c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801bd9e:	4b58      	ldr	r3, [pc, #352]	@ (801bf00 <DHCP_run+0x210>)
 801bda0:	681b      	ldr	r3, [r3, #0]
 801bda2:	7c9a      	ldrb	r2, [r3, #18]
 801bda4:	4b55      	ldr	r3, [pc, #340]	@ (801befc <DHCP_run+0x20c>)
 801bda6:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801bda8:	4b55      	ldr	r3, [pc, #340]	@ (801bf00 <DHCP_run+0x210>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	7cda      	ldrb	r2, [r3, #19]
 801bdae:	4b53      	ldr	r3, [pc, #332]	@ (801befc <DHCP_run+0x20c>)
 801bdb0:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801bdb2:	f7ff f9a3 	bl	801b0fc <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801bdb6:	4b4f      	ldr	r3, [pc, #316]	@ (801bef4 <DHCP_run+0x204>)
 801bdb8:	2202      	movs	r2, #2
 801bdba:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801bdbc:	e095      	b.n	801beea <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bdbe:	f000 f8b1 	bl	801bf24 <check_DHCP_timeout>
 801bdc2:	4603      	mov	r3, r0
 801bdc4:	71fb      	strb	r3, [r7, #7]
         break;
 801bdc6:	e090      	b.n	801beea <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801bdc8:	79bb      	ldrb	r3, [r7, #6]
 801bdca:	2b05      	cmp	r3, #5
 801bdcc:	d116      	bne.n	801bdfc <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801bdce:	f000 f8e9 	bl	801bfa4 <check_DHCP_leasedIP>
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d008      	beq.n	801bdea <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801bdd8:	4b4a      	ldr	r3, [pc, #296]	@ (801bf04 <DHCP_run+0x214>)
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	4798      	blx	r3
					reset_DHCP_timeout();
 801bdde:	f000 f9b9 	bl	801c154 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801bde2:	4b44      	ldr	r3, [pc, #272]	@ (801bef4 <DHCP_run+0x204>)
 801bde4:	2203      	movs	r2, #3
 801bde6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801bde8:	e07f      	b.n	801beea <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801bdea:	f000 f9b3 	bl	801c154 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801bdee:	4b46      	ldr	r3, [pc, #280]	@ (801bf08 <DHCP_run+0x218>)
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801bdf4:	4b3f      	ldr	r3, [pc, #252]	@ (801bef4 <DHCP_run+0x204>)
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	701a      	strb	r2, [r3, #0]
		break;
 801bdfa:	e076      	b.n	801beea <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bdfc:	79bb      	ldrb	r3, [r7, #6]
 801bdfe:	2b06      	cmp	r3, #6
 801be00:	d105      	bne.n	801be0e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801be02:	f000 f9a7 	bl	801c154 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801be06:	4b3b      	ldr	r3, [pc, #236]	@ (801bef4 <DHCP_run+0x204>)
 801be08:	2201      	movs	r2, #1
 801be0a:	701a      	strb	r2, [r3, #0]
		break;
 801be0c:	e06d      	b.n	801beea <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801be0e:	f000 f889 	bl	801bf24 <check_DHCP_timeout>
 801be12:	4603      	mov	r3, r0
 801be14:	71fb      	strb	r3, [r7, #7]
		break;
 801be16:	e068      	b.n	801beea <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801be18:	2304      	movs	r3, #4
 801be1a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801be1c:	4b3b      	ldr	r3, [pc, #236]	@ (801bf0c <DHCP_run+0x21c>)
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be24:	d060      	beq.n	801bee8 <DHCP_run+0x1f8>
 801be26:	4b39      	ldr	r3, [pc, #228]	@ (801bf0c <DHCP_run+0x21c>)
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	089a      	lsrs	r2, r3, #2
 801be2c:	4b38      	ldr	r3, [pc, #224]	@ (801bf10 <DHCP_run+0x220>)
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	429a      	cmp	r2, r3
 801be32:	d259      	bcs.n	801bee8 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801be34:	2300      	movs	r3, #0
 801be36:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801be38:	4b30      	ldr	r3, [pc, #192]	@ (801befc <DHCP_run+0x20c>)
 801be3a:	781a      	ldrb	r2, [r3, #0]
 801be3c:	4b35      	ldr	r3, [pc, #212]	@ (801bf14 <DHCP_run+0x224>)
 801be3e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801be40:	4b2e      	ldr	r3, [pc, #184]	@ (801befc <DHCP_run+0x20c>)
 801be42:	785a      	ldrb	r2, [r3, #1]
 801be44:	4b33      	ldr	r3, [pc, #204]	@ (801bf14 <DHCP_run+0x224>)
 801be46:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801be48:	4b2c      	ldr	r3, [pc, #176]	@ (801befc <DHCP_run+0x20c>)
 801be4a:	789a      	ldrb	r2, [r3, #2]
 801be4c:	4b31      	ldr	r3, [pc, #196]	@ (801bf14 <DHCP_run+0x224>)
 801be4e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801be50:	4b2a      	ldr	r3, [pc, #168]	@ (801befc <DHCP_run+0x20c>)
 801be52:	78da      	ldrb	r2, [r3, #3]
 801be54:	4b2f      	ldr	r3, [pc, #188]	@ (801bf14 <DHCP_run+0x224>)
 801be56:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801be58:	4b2f      	ldr	r3, [pc, #188]	@ (801bf18 <DHCP_run+0x228>)
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	3301      	adds	r3, #1
 801be5e:	4a2e      	ldr	r2, [pc, #184]	@ (801bf18 <DHCP_run+0x228>)
 801be60:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801be62:	f7ff f94b 	bl	801b0fc <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801be66:	f000 f975 	bl	801c154 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801be6a:	4b22      	ldr	r3, [pc, #136]	@ (801bef4 <DHCP_run+0x204>)
 801be6c:	2204      	movs	r2, #4
 801be6e:	701a      	strb	r2, [r3, #0]
			}
		break;
 801be70:	e03a      	b.n	801bee8 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801be72:	2304      	movs	r3, #4
 801be74:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801be76:	79bb      	ldrb	r3, [r7, #6]
 801be78:	2b05      	cmp	r3, #5
 801be7a:	d125      	bne.n	801bec8 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801be7c:	4b27      	ldr	r3, [pc, #156]	@ (801bf1c <DHCP_run+0x22c>)
 801be7e:	2200      	movs	r2, #0
 801be80:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801be82:	4b24      	ldr	r3, [pc, #144]	@ (801bf14 <DHCP_run+0x224>)
 801be84:	781a      	ldrb	r2, [r3, #0]
 801be86:	4b1d      	ldr	r3, [pc, #116]	@ (801befc <DHCP_run+0x20c>)
 801be88:	781b      	ldrb	r3, [r3, #0]
 801be8a:	429a      	cmp	r2, r3
 801be8c:	d111      	bne.n	801beb2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801be8e:	4b21      	ldr	r3, [pc, #132]	@ (801bf14 <DHCP_run+0x224>)
 801be90:	785a      	ldrb	r2, [r3, #1]
 801be92:	4b1a      	ldr	r3, [pc, #104]	@ (801befc <DHCP_run+0x20c>)
 801be94:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801be96:	429a      	cmp	r2, r3
 801be98:	d10b      	bne.n	801beb2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801be9a:	4b1e      	ldr	r3, [pc, #120]	@ (801bf14 <DHCP_run+0x224>)
 801be9c:	789a      	ldrb	r2, [r3, #2]
 801be9e:	4b17      	ldr	r3, [pc, #92]	@ (801befc <DHCP_run+0x20c>)
 801bea0:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bea2:	429a      	cmp	r2, r3
 801bea4:	d105      	bne.n	801beb2 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801bea6:	4b1b      	ldr	r3, [pc, #108]	@ (801bf14 <DHCP_run+0x224>)
 801bea8:	78da      	ldrb	r2, [r3, #3]
 801beaa:	4b14      	ldr	r3, [pc, #80]	@ (801befc <DHCP_run+0x20c>)
 801beac:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801beae:	429a      	cmp	r2, r3
 801beb0:	d004      	beq.n	801bebc <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801beb2:	2303      	movs	r3, #3
 801beb4:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801beb6:	4b1a      	ldr	r3, [pc, #104]	@ (801bf20 <DHCP_run+0x230>)
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801bebc:	f000 f94a 	bl	801c154 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801bec0:	4b0c      	ldr	r3, [pc, #48]	@ (801bef4 <DHCP_run+0x204>)
 801bec2:	2203      	movs	r2, #3
 801bec4:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801bec6:	e010      	b.n	801beea <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bec8:	79bb      	ldrb	r3, [r7, #6]
 801beca:	2b06      	cmp	r3, #6
 801becc:	d105      	bne.n	801beda <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801bece:	f000 f941 	bl	801c154 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bed2:	4b08      	ldr	r3, [pc, #32]	@ (801bef4 <DHCP_run+0x204>)
 801bed4:	2201      	movs	r2, #1
 801bed6:	701a      	strb	r2, [r3, #0]
	   	break;
 801bed8:	e007      	b.n	801beea <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801beda:	f000 f823 	bl	801bf24 <check_DHCP_timeout>
 801bede:	4603      	mov	r3, r0
 801bee0:	71fb      	strb	r3, [r7, #7]
	   	break;
 801bee2:	e002      	b.n	801beea <DHCP_run+0x1fa>
		default :
   		break;
 801bee4:	bf00      	nop
 801bee6:	e000      	b.n	801beea <DHCP_run+0x1fa>
		break;
 801bee8:	bf00      	nop
	}

	return ret;
 801beea:	79fb      	ldrb	r3, [r7, #7]
}
 801beec:	4618      	mov	r0, r3
 801beee:	3708      	adds	r7, #8
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}
 801bef4:	200009c4 	.word	0x200009c4
 801bef8:	200009a5 	.word	0x200009a5
 801befc:	200009b4 	.word	0x200009b4
 801bf00:	200009d0 	.word	0x200009d0
 801bf04:	20000104 	.word	0x20000104
 801bf08:	2000010c 	.word	0x2000010c
 801bf0c:	200000f0 	.word	0x200000f0
 801bf10:	200009c8 	.word	0x200009c8
 801bf14:	200009b0 	.word	0x200009b0
 801bf18:	200009cc 	.word	0x200009cc
 801bf1c:	200009c5 	.word	0x200009c5
 801bf20:	20000108 	.word	0x20000108

0801bf24 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b082      	sub	sp, #8
 801bf28:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801bf2a:	2301      	movs	r3, #1
 801bf2c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
		if (dhcp_tick_next < dhcp_tick_1s) {
 801bf2e:	4b19      	ldr	r3, [pc, #100]	@ (801bf94 <check_DHCP_timeout+0x70>)
 801bf30:	681a      	ldr	r2, [r3, #0]
 801bf32:	4b19      	ldr	r3, [pc, #100]	@ (801bf98 <check_DHCP_timeout+0x74>)
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	429a      	cmp	r2, r3
 801bf38:	d226      	bcs.n	801bf88 <check_DHCP_timeout+0x64>

			switch ( dhcp_state ) {
 801bf3a:	4b18      	ldr	r3, [pc, #96]	@ (801bf9c <check_DHCP_timeout+0x78>)
 801bf3c:	f993 3000 	ldrsb.w	r3, [r3]
 801bf40:	2b04      	cmp	r3, #4
 801bf42:	d00c      	beq.n	801bf5e <check_DHCP_timeout+0x3a>
 801bf44:	2b04      	cmp	r3, #4
 801bf46:	dc0d      	bgt.n	801bf64 <check_DHCP_timeout+0x40>
 801bf48:	2b01      	cmp	r3, #1
 801bf4a:	d002      	beq.n	801bf52 <check_DHCP_timeout+0x2e>
 801bf4c:	2b02      	cmp	r3, #2
 801bf4e:	d003      	beq.n	801bf58 <check_DHCP_timeout+0x34>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801bf50:	e008      	b.n	801bf64 <check_DHCP_timeout+0x40>
					send_DHCP_DISCOVER();
 801bf52:	f7fe ff0d 	bl	801ad70 <send_DHCP_DISCOVER>
				break;
 801bf56:	e006      	b.n	801bf66 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801bf58:	f7ff f8d0 	bl	801b0fc <send_DHCP_REQUEST>
				break;
 801bf5c:	e003      	b.n	801bf66 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801bf5e:	f7ff f8cd 	bl	801b0fc <send_DHCP_REQUEST>
				break;
 801bf62:	e000      	b.n	801bf66 <check_DHCP_timeout+0x42>
				break;
 801bf64:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801bf66:	4b0c      	ldr	r3, [pc, #48]	@ (801bf98 <check_DHCP_timeout+0x74>)
 801bf68:	2200      	movs	r2, #0
 801bf6a:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801bf6c:	4b0a      	ldr	r3, [pc, #40]	@ (801bf98 <check_DHCP_timeout+0x74>)
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	330a      	adds	r3, #10
 801bf72:	4a08      	ldr	r2, [pc, #32]	@ (801bf94 <check_DHCP_timeout+0x70>)
 801bf74:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801bf76:	4b0a      	ldr	r3, [pc, #40]	@ (801bfa0 <check_DHCP_timeout+0x7c>)
 801bf78:	f993 3000 	ldrsb.w	r3, [r3]
 801bf7c:	b2db      	uxtb	r3, r3
 801bf7e:	3301      	adds	r3, #1
 801bf80:	b2db      	uxtb	r3, r3
 801bf82:	b25a      	sxtb	r2, r3
 801bf84:	4b06      	ldr	r3, [pc, #24]	@ (801bfa0 <check_DHCP_timeout+0x7c>)
 801bf86:	701a      	strb	r2, [r3, #0]
			default :
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
 801bf88:	79fb      	ldrb	r3, [r7, #7]
}
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	3708      	adds	r7, #8
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	bd80      	pop	{r7, pc}
 801bf92:	bf00      	nop
 801bf94:	200000f4 	.word	0x200000f4
 801bf98:	200009c8 	.word	0x200009c8
 801bf9c:	200009c4 	.word	0x200009c4
 801bfa0:	200009c5 	.word	0x200009c5

0801bfa4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b084      	sub	sp, #16
 801bfa8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801bfaa:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 801bfae:	f7fc fcdd 	bl	801896c <WIZCHIP_READ>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801bfb6:	2103      	movs	r1, #3
 801bfb8:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 801bfbc:	f7fc fd22 	bl	8018a04 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801bfc0:	4b15      	ldr	r3, [pc, #84]	@ (801c018 <check_DHCP_leasedIP+0x74>)
 801bfc2:	7818      	ldrb	r0, [r3, #0]
 801bfc4:	f241 3388 	movw	r3, #5000	@ 0x1388
 801bfc8:	9300      	str	r3, [sp, #0]
 801bfca:	4b14      	ldr	r3, [pc, #80]	@ (801c01c <check_DHCP_leasedIP+0x78>)
 801bfcc:	2211      	movs	r2, #17
 801bfce:	4914      	ldr	r1, [pc, #80]	@ (801c020 <check_DHCP_leasedIP+0x7c>)
 801bfd0:	f7fd fc8c 	bl	80198ec <sendto>
 801bfd4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801bfd6:	79fb      	ldrb	r3, [r7, #7]
 801bfd8:	4619      	mov	r1, r3
 801bfda:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 801bfde:	f7fc fd11 	bl	8018a04 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801bfe2:	683b      	ldr	r3, [r7, #0]
 801bfe4:	f113 0f0d 	cmn.w	r3, #13
 801bfe8:	d101      	bne.n	801bfee <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801bfea:	2301      	movs	r3, #1
 801bfec:	e010      	b.n	801c010 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801bfee:	f7ff fb0f 	bl	801b610 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801bff2:	4b0c      	ldr	r3, [pc, #48]	@ (801c024 <check_DHCP_leasedIP+0x80>)
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bff8:	e003      	b.n	801c002 <check_DHCP_leasedIP+0x5e>

			delay(200);
 801bffa:	4b0b      	ldr	r3, [pc, #44]	@ (801c028 <check_DHCP_leasedIP+0x84>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	20c8      	movs	r0, #200	@ 0xc8
 801c000:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801c002:	4b08      	ldr	r3, [pc, #32]	@ (801c024 <check_DHCP_leasedIP+0x80>)
 801c004:	681a      	ldr	r2, [r3, #0]
 801c006:	683b      	ldr	r3, [r7, #0]
 801c008:	1ad3      	subs	r3, r2, r3
 801c00a:	2b01      	cmp	r3, #1
 801c00c:	d9f5      	bls.n	801bffa <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801c00e:	2300      	movs	r3, #0
	}
}	
 801c010:	4618      	mov	r0, r3
 801c012:	3708      	adds	r7, #8
 801c014:	46bd      	mov	sp, r7
 801c016:	bd80      	pop	{r7, pc}
 801c018:	200009a5 	.word	0x200009a5
 801c01c:	200009b4 	.word	0x200009b4
 801c020:	08032fac 	.word	0x08032fac
 801c024:	200009c8 	.word	0x200009c8
 801c028:	20000110 	.word	0x20000110

0801c02c <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801c02c:	b580      	push	{r7, lr}
 801c02e:	b084      	sub	sp, #16
 801c030:	af00      	add	r7, sp, #0
 801c032:	4603      	mov	r3, r0
 801c034:	6039      	str	r1, [r7, #0]
 801c036:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801c038:	2300      	movs	r3, #0
 801c03a:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801c03c:	2206      	movs	r2, #6
 801c03e:	493f      	ldr	r1, [pc, #252]	@ (801c13c <DHCP_init+0x110>)
 801c040:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801c044:	f7fc fd2c 	bl	8018aa0 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801c048:	4b3c      	ldr	r3, [pc, #240]	@ (801c13c <DHCP_init+0x110>)
 801c04a:	781a      	ldrb	r2, [r3, #0]
 801c04c:	4b3b      	ldr	r3, [pc, #236]	@ (801c13c <DHCP_init+0x110>)
 801c04e:	785b      	ldrb	r3, [r3, #1]
 801c050:	4313      	orrs	r3, r2
 801c052:	b2da      	uxtb	r2, r3
 801c054:	4b39      	ldr	r3, [pc, #228]	@ (801c13c <DHCP_init+0x110>)
 801c056:	789b      	ldrb	r3, [r3, #2]
 801c058:	4313      	orrs	r3, r2
 801c05a:	b2da      	uxtb	r2, r3
 801c05c:	4b37      	ldr	r3, [pc, #220]	@ (801c13c <DHCP_init+0x110>)
 801c05e:	78db      	ldrb	r3, [r3, #3]
 801c060:	4313      	orrs	r3, r2
 801c062:	b2da      	uxtb	r2, r3
 801c064:	4b35      	ldr	r3, [pc, #212]	@ (801c13c <DHCP_init+0x110>)
 801c066:	791b      	ldrb	r3, [r3, #4]
 801c068:	4313      	orrs	r3, r2
 801c06a:	b2da      	uxtb	r2, r3
 801c06c:	4b33      	ldr	r3, [pc, #204]	@ (801c13c <DHCP_init+0x110>)
 801c06e:	795b      	ldrb	r3, [r3, #5]
 801c070:	4313      	orrs	r3, r2
 801c072:	b2db      	uxtb	r3, r3
 801c074:	2b00      	cmp	r3, #0
 801c076:	d117      	bne.n	801c0a8 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801c078:	4b30      	ldr	r3, [pc, #192]	@ (801c13c <DHCP_init+0x110>)
 801c07a:	2200      	movs	r2, #0
 801c07c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801c07e:	4b2f      	ldr	r3, [pc, #188]	@ (801c13c <DHCP_init+0x110>)
 801c080:	2208      	movs	r2, #8
 801c082:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801c084:	4b2d      	ldr	r3, [pc, #180]	@ (801c13c <DHCP_init+0x110>)
 801c086:	22dc      	movs	r2, #220	@ 0xdc
 801c088:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801c08a:	4b2c      	ldr	r3, [pc, #176]	@ (801c13c <DHCP_init+0x110>)
 801c08c:	2200      	movs	r2, #0
 801c08e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801c090:	4b2a      	ldr	r3, [pc, #168]	@ (801c13c <DHCP_init+0x110>)
 801c092:	2200      	movs	r2, #0
 801c094:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801c096:	4b29      	ldr	r3, [pc, #164]	@ (801c13c <DHCP_init+0x110>)
 801c098:	2200      	movs	r2, #0
 801c09a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801c09c:	2206      	movs	r2, #6
 801c09e:	4927      	ldr	r1, [pc, #156]	@ (801c13c <DHCP_init+0x110>)
 801c0a0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 801c0a4:	f7fc fd5c 	bl	8018b60 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801c0a8:	4a25      	ldr	r2, [pc, #148]	@ (801c140 <DHCP_init+0x114>)
 801c0aa:	79fb      	ldrb	r3, [r7, #7]
 801c0ac:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801c0ae:	4a25      	ldr	r2, [pc, #148]	@ (801c144 <DHCP_init+0x118>)
 801c0b0:	683b      	ldr	r3, [r7, #0]
 801c0b2:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801c0b4:	4b24      	ldr	r3, [pc, #144]	@ (801c148 <DHCP_init+0x11c>)
 801c0b6:	4a25      	ldr	r2, [pc, #148]	@ (801c14c <DHCP_init+0x120>)
 801c0b8:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801c0ba:	4b20      	ldr	r3, [pc, #128]	@ (801c13c <DHCP_init+0x110>)
 801c0bc:	78db      	ldrb	r3, [r3, #3]
 801c0be:	461a      	mov	r2, r3
 801c0c0:	4b21      	ldr	r3, [pc, #132]	@ (801c148 <DHCP_init+0x11c>)
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	4413      	add	r3, r2
 801c0c6:	4a20      	ldr	r2, [pc, #128]	@ (801c148 <DHCP_init+0x11c>)
 801c0c8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801c0ca:	4b1c      	ldr	r3, [pc, #112]	@ (801c13c <DHCP_init+0x110>)
 801c0cc:	791b      	ldrb	r3, [r3, #4]
 801c0ce:	461a      	mov	r2, r3
 801c0d0:	4b1d      	ldr	r3, [pc, #116]	@ (801c148 <DHCP_init+0x11c>)
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	4413      	add	r3, r2
 801c0d6:	4a1c      	ldr	r2, [pc, #112]	@ (801c148 <DHCP_init+0x11c>)
 801c0d8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801c0da:	4b18      	ldr	r3, [pc, #96]	@ (801c13c <DHCP_init+0x110>)
 801c0dc:	795b      	ldrb	r3, [r3, #5]
 801c0de:	461a      	mov	r2, r3
 801c0e0:	4b19      	ldr	r3, [pc, #100]	@ (801c148 <DHCP_init+0x11c>)
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	4413      	add	r3, r2
 801c0e6:	4a18      	ldr	r2, [pc, #96]	@ (801c148 <DHCP_init+0x11c>)
 801c0e8:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801c0ea:	4b14      	ldr	r3, [pc, #80]	@ (801c13c <DHCP_init+0x110>)
 801c0ec:	78da      	ldrb	r2, [r3, #3]
 801c0ee:	4b13      	ldr	r3, [pc, #76]	@ (801c13c <DHCP_init+0x110>)
 801c0f0:	791b      	ldrb	r3, [r3, #4]
 801c0f2:	4053      	eors	r3, r2
 801c0f4:	b2da      	uxtb	r2, r3
 801c0f6:	4b11      	ldr	r3, [pc, #68]	@ (801c13c <DHCP_init+0x110>)
 801c0f8:	795b      	ldrb	r3, [r3, #5]
 801c0fa:	4053      	eors	r3, r2
 801c0fc:	b2db      	uxtb	r3, r3
 801c0fe:	461a      	mov	r2, r3
 801c100:	4b11      	ldr	r3, [pc, #68]	@ (801c148 <DHCP_init+0x11c>)
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	4413      	add	r3, r2
 801c106:	4a10      	ldr	r2, [pc, #64]	@ (801c148 <DHCP_init+0x11c>)
 801c108:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801c10a:	f107 030c 	add.w	r3, r7, #12
 801c10e:	2204      	movs	r2, #4
 801c110:	4619      	mov	r1, r3
 801c112:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 801c116:	f7fc fd23 	bl	8018b60 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801c11a:	f107 030c 	add.w	r3, r7, #12
 801c11e:	2204      	movs	r2, #4
 801c120:	4619      	mov	r1, r3
 801c122:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801c126:	f7fc fd1b 	bl	8018b60 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801c12a:	f000 f813 	bl	801c154 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801c12e:	4b08      	ldr	r3, [pc, #32]	@ (801c150 <DHCP_init+0x124>)
 801c130:	2200      	movs	r2, #0
 801c132:	701a      	strb	r2, [r3, #0]
}
 801c134:	bf00      	nop
 801c136:	3710      	adds	r7, #16
 801c138:	46bd      	mov	sp, r7
 801c13a:	bd80      	pop	{r7, pc}
 801c13c:	200009d4 	.word	0x200009d4
 801c140:	200009a5 	.word	0x200009a5
 801c144:	200009d0 	.word	0x200009d0
 801c148:	200009cc 	.word	0x200009cc
 801c14c:	12345678 	.word	0x12345678
 801c150:	200009c4 	.word	0x200009c4

0801c154 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801c154:	b480      	push	{r7}
 801c156:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801c158:	4b06      	ldr	r3, [pc, #24]	@ (801c174 <reset_DHCP_timeout+0x20>)
 801c15a:	2200      	movs	r2, #0
 801c15c:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801c15e:	4b06      	ldr	r3, [pc, #24]	@ (801c178 <reset_DHCP_timeout+0x24>)
 801c160:	220a      	movs	r2, #10
 801c162:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801c164:	4b05      	ldr	r3, [pc, #20]	@ (801c17c <reset_DHCP_timeout+0x28>)
 801c166:	2200      	movs	r2, #0
 801c168:	701a      	strb	r2, [r3, #0]
}
 801c16a:	bf00      	nop
 801c16c:	46bd      	mov	sp, r7
 801c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c172:	4770      	bx	lr
 801c174:	200009c8 	.word	0x200009c8
 801c178:	200000f4 	.word	0x200000f4
 801c17c:	200009c5 	.word	0x200009c5

0801c180 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801c180:	b480      	push	{r7}
 801c182:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801c184:	4b04      	ldr	r3, [pc, #16]	@ (801c198 <DHCP_time_handler+0x18>)
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	3301      	adds	r3, #1
 801c18a:	4a03      	ldr	r2, [pc, #12]	@ (801c198 <DHCP_time_handler+0x18>)
 801c18c:	6013      	str	r3, [r2, #0]
}
 801c18e:	bf00      	nop
 801c190:	46bd      	mov	sp, r7
 801c192:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c196:	4770      	bx	lr
 801c198:	200009c8 	.word	0x200009c8

0801c19c <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801c19c:	b480      	push	{r7}
 801c19e:	b083      	sub	sp, #12
 801c1a0:	af00      	add	r7, sp, #0
 801c1a2:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801c1a4:	4b0c      	ldr	r3, [pc, #48]	@ (801c1d8 <getIPfromDHCP+0x3c>)
 801c1a6:	781a      	ldrb	r2, [r3, #0]
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	3301      	adds	r3, #1
 801c1b0:	4a09      	ldr	r2, [pc, #36]	@ (801c1d8 <getIPfromDHCP+0x3c>)
 801c1b2:	7852      	ldrb	r2, [r2, #1]
 801c1b4:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	3302      	adds	r3, #2
 801c1ba:	4a07      	ldr	r2, [pc, #28]	@ (801c1d8 <getIPfromDHCP+0x3c>)
 801c1bc:	7892      	ldrb	r2, [r2, #2]
 801c1be:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	3303      	adds	r3, #3
 801c1c4:	4a04      	ldr	r2, [pc, #16]	@ (801c1d8 <getIPfromDHCP+0x3c>)
 801c1c6:	78d2      	ldrb	r2, [r2, #3]
 801c1c8:	701a      	strb	r2, [r3, #0]
}
 801c1ca:	bf00      	nop
 801c1cc:	370c      	adds	r7, #12
 801c1ce:	46bd      	mov	sp, r7
 801c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d4:	4770      	bx	lr
 801c1d6:	bf00      	nop
 801c1d8:	200009b4 	.word	0x200009b4

0801c1dc <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801c1dc:	b480      	push	{r7}
 801c1de:	b083      	sub	sp, #12
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801c1e4:	4b0c      	ldr	r3, [pc, #48]	@ (801c218 <getGWfromDHCP+0x3c>)
 801c1e6:	781a      	ldrb	r2, [r3, #0]
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	3301      	adds	r3, #1
 801c1f0:	4a09      	ldr	r2, [pc, #36]	@ (801c218 <getGWfromDHCP+0x3c>)
 801c1f2:	7852      	ldrb	r2, [r2, #1]
 801c1f4:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	3302      	adds	r3, #2
 801c1fa:	4a07      	ldr	r2, [pc, #28]	@ (801c218 <getGWfromDHCP+0x3c>)
 801c1fc:	7892      	ldrb	r2, [r2, #2]
 801c1fe:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	3303      	adds	r3, #3
 801c204:	4a04      	ldr	r2, [pc, #16]	@ (801c218 <getGWfromDHCP+0x3c>)
 801c206:	78d2      	ldrb	r2, [r2, #3]
 801c208:	701a      	strb	r2, [r3, #0]
}
 801c20a:	bf00      	nop
 801c20c:	370c      	adds	r7, #12
 801c20e:	46bd      	mov	sp, r7
 801c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c214:	4770      	bx	lr
 801c216:	bf00      	nop
 801c218:	200009b8 	.word	0x200009b8

0801c21c <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801c21c:	b480      	push	{r7}
 801c21e:	b083      	sub	sp, #12
 801c220:	af00      	add	r7, sp, #0
 801c222:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801c224:	4b0c      	ldr	r3, [pc, #48]	@ (801c258 <getSNfromDHCP+0x3c>)
 801c226:	781a      	ldrb	r2, [r3, #0]
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	3301      	adds	r3, #1
 801c230:	4a09      	ldr	r2, [pc, #36]	@ (801c258 <getSNfromDHCP+0x3c>)
 801c232:	7852      	ldrb	r2, [r2, #1]
 801c234:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	3302      	adds	r3, #2
 801c23a:	4a07      	ldr	r2, [pc, #28]	@ (801c258 <getSNfromDHCP+0x3c>)
 801c23c:	7892      	ldrb	r2, [r2, #2]
 801c23e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	3303      	adds	r3, #3
 801c244:	4a04      	ldr	r2, [pc, #16]	@ (801c258 <getSNfromDHCP+0x3c>)
 801c246:	78d2      	ldrb	r2, [r2, #3]
 801c248:	701a      	strb	r2, [r3, #0]
}
 801c24a:	bf00      	nop
 801c24c:	370c      	adds	r7, #12
 801c24e:	46bd      	mov	sp, r7
 801c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c254:	4770      	bx	lr
 801c256:	bf00      	nop
 801c258:	200009bc 	.word	0x200009bc

0801c25c <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801c25c:	b480      	push	{r7}
 801c25e:	b083      	sub	sp, #12
 801c260:	af00      	add	r7, sp, #0
 801c262:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801c264:	4b0c      	ldr	r3, [pc, #48]	@ (801c298 <getDNSfromDHCP+0x3c>)
 801c266:	781a      	ldrb	r2, [r3, #0]
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	3301      	adds	r3, #1
 801c270:	4a09      	ldr	r2, [pc, #36]	@ (801c298 <getDNSfromDHCP+0x3c>)
 801c272:	7852      	ldrb	r2, [r2, #1]
 801c274:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	3302      	adds	r3, #2
 801c27a:	4a07      	ldr	r2, [pc, #28]	@ (801c298 <getDNSfromDHCP+0x3c>)
 801c27c:	7892      	ldrb	r2, [r2, #2]
 801c27e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	3303      	adds	r3, #3
 801c284:	4a04      	ldr	r2, [pc, #16]	@ (801c298 <getDNSfromDHCP+0x3c>)
 801c286:	78d2      	ldrb	r2, [r2, #3]
 801c288:	701a      	strb	r2, [r3, #0]
}
 801c28a:	bf00      	nop
 801c28c:	370c      	adds	r7, #12
 801c28e:	46bd      	mov	sp, r7
 801c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c294:	4770      	bx	lr
 801c296:	bf00      	nop
 801c298:	200009c0 	.word	0x200009c0

0801c29c <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801c29c:	b480      	push	{r7}
 801c29e:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801c2a0:	4b03      	ldr	r3, [pc, #12]	@ (801c2b0 <getDHCPLeasetime+0x14>)
 801c2a2:	681b      	ldr	r3, [r3, #0]
}
 801c2a4:	4618      	mov	r0, r3
 801c2a6:	46bd      	mov	sp, r7
 801c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ac:	4770      	bx	lr
 801c2ae:	bf00      	nop
 801c2b0:	200000f0 	.word	0x200000f0

0801c2b4 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801c2b4:	b480      	push	{r7}
 801c2b6:	b083      	sub	sp, #12
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	4603      	mov	r3, r0
 801c2bc:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801c2be:	79fb      	ldrb	r3, [r7, #7]
 801c2c0:	f003 030f 	and.w	r3, r3, #15
 801c2c4:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801c2c6:	79fb      	ldrb	r3, [r7, #7]
 801c2c8:	2b09      	cmp	r3, #9
 801c2ca:	d803      	bhi.n	801c2d4 <NibbleToHex+0x20>
    return nibble + '0';
 801c2cc:	79fb      	ldrb	r3, [r7, #7]
 801c2ce:	3330      	adds	r3, #48	@ 0x30
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	e002      	b.n	801c2da <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801c2d4:	79fb      	ldrb	r3, [r7, #7]
 801c2d6:	3337      	adds	r3, #55	@ 0x37
 801c2d8:	b2db      	uxtb	r3, r3
}
 801c2da:	4618      	mov	r0, r3
 801c2dc:	370c      	adds	r7, #12
 801c2de:	46bd      	mov	sp, r7
 801c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e4:	4770      	bx	lr

0801c2e6 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801c2e6:	b480      	push	{r7}
 801c2e8:	b085      	sub	sp, #20
 801c2ea:	af00      	add	r7, sp, #0
 801c2ec:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	1c5a      	adds	r2, r3, #1
 801c2f2:	607a      	str	r2, [r7, #4]
 801c2f4:	781b      	ldrb	r3, [r3, #0]
 801c2f6:	021b      	lsls	r3, r3, #8
 801c2f8:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	461a      	mov	r2, r3
 801c300:	89fb      	ldrh	r3, [r7, #14]
 801c302:	4413      	add	r3, r2
 801c304:	81fb      	strh	r3, [r7, #14]
	return i;
 801c306:	89fb      	ldrh	r3, [r7, #14]
}
 801c308:	4618      	mov	r0, r3
 801c30a:	3714      	adds	r7, #20
 801c30c:	46bd      	mov	sp, r7
 801c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c312:	4770      	bx	lr

0801c314 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801c314:	b480      	push	{r7}
 801c316:	b083      	sub	sp, #12
 801c318:	af00      	add	r7, sp, #0
 801c31a:	6078      	str	r0, [r7, #4]
 801c31c:	460b      	mov	r3, r1
 801c31e:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801c320:	887b      	ldrh	r3, [r7, #2]
 801c322:	0a1b      	lsrs	r3, r3, #8
 801c324:	b299      	uxth	r1, r3
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	1c5a      	adds	r2, r3, #1
 801c32a:	607a      	str	r2, [r7, #4]
 801c32c:	b2ca      	uxtb	r2, r1
 801c32e:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	1c5a      	adds	r2, r3, #1
 801c334:	607a      	str	r2, [r7, #4]
 801c336:	887a      	ldrh	r2, [r7, #2]
 801c338:	b2d2      	uxtb	r2, r2
 801c33a:	701a      	strb	r2, [r3, #0]
	return s;
 801c33c:	687b      	ldr	r3, [r7, #4]
}
 801c33e:	4618      	mov	r0, r3
 801c340:	370c      	adds	r7, #12
 801c342:	46bd      	mov	sp, r7
 801c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c348:	4770      	bx	lr

0801c34a <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801c34a:	b480      	push	{r7}
 801c34c:	b08b      	sub	sp, #44	@ 0x2c
 801c34e:	af00      	add	r7, sp, #0
 801c350:	60f8      	str	r0, [r7, #12]
 801c352:	60b9      	str	r1, [r7, #8]
 801c354:	607a      	str	r2, [r7, #4]
 801c356:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801c358:	2300      	movs	r3, #0
 801c35a:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801c35c:	2300      	movs	r3, #0
 801c35e:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801c360:	2300      	movs	r3, #0
 801c362:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801c364:	68bb      	ldr	r3, [r7, #8]
 801c366:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801c368:	6a3b      	ldr	r3, [r7, #32]
 801c36a:	1c5a      	adds	r2, r3, #1
 801c36c:	623a      	str	r2, [r7, #32]
 801c36e:	781b      	ldrb	r3, [r3, #0]
 801c370:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 801c372:	69bb      	ldr	r3, [r7, #24]
 801c374:	2b00      	cmp	r3, #0
 801c376:	d102      	bne.n	801c37e <parse_name+0x34>
 801c378:	69fb      	ldr	r3, [r7, #28]
 801c37a:	3301      	adds	r3, #1
 801c37c:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801c37e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c380:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801c384:	2bc0      	cmp	r3, #192	@ 0xc0
 801c386:	d117      	bne.n	801c3b8 <parse_name+0x6e>
		{
			if (!indirect)
 801c388:	69bb      	ldr	r3, [r7, #24]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d102      	bne.n	801c394 <parse_name+0x4a>
				clen++;
 801c38e:	69fb      	ldr	r3, [r7, #28]
 801c390:	3301      	adds	r3, #1
 801c392:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801c394:	2301      	movs	r3, #1
 801c396:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801c398:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c39a:	021b      	lsls	r3, r3, #8
 801c39c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 801c3a0:	6a3a      	ldr	r2, [r7, #32]
 801c3a2:	7812      	ldrb	r2, [r2, #0]
 801c3a4:	4413      	add	r3, r2
 801c3a6:	461a      	mov	r2, r3
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	4413      	add	r3, r2
 801c3ac:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801c3ae:	6a3b      	ldr	r3, [r7, #32]
 801c3b0:	1c5a      	adds	r2, r3, #1
 801c3b2:	623a      	str	r2, [r7, #32]
 801c3b4:	781b      	ldrb	r3, [r3, #0]
 801c3b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801c3b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d02b      	beq.n	801c416 <parse_name+0xcc>
			break;

		len -= slen + 1;
 801c3be:	887a      	ldrh	r2, [r7, #2]
 801c3c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c3c2:	1ad3      	subs	r3, r2, r3
 801c3c4:	b29b      	uxth	r3, r3
 801c3c6:	3b01      	subs	r3, #1
 801c3c8:	b29b      	uxth	r3, r3
 801c3ca:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801c3cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	da02      	bge.n	801c3da <parse_name+0x90>
 801c3d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c3d8:	e038      	b.n	801c44c <parse_name+0x102>

		if (!indirect) clen += slen;
 801c3da:	69bb      	ldr	r3, [r7, #24]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d10c      	bne.n	801c3fa <parse_name+0xb0>
 801c3e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c3e2:	69fa      	ldr	r2, [r7, #28]
 801c3e4:	4413      	add	r3, r2
 801c3e6:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801c3e8:	e007      	b.n	801c3fa <parse_name+0xb0>
 801c3ea:	6a3a      	ldr	r2, [r7, #32]
 801c3ec:	1c53      	adds	r3, r2, #1
 801c3ee:	623b      	str	r3, [r7, #32]
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	1c59      	adds	r1, r3, #1
 801c3f4:	6079      	str	r1, [r7, #4]
 801c3f6:	7812      	ldrb	r2, [r2, #0]
 801c3f8:	701a      	strb	r2, [r3, #0]
 801c3fa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c3fc:	1e5a      	subs	r2, r3, #1
 801c3fe:	84fa      	strh	r2, [r7, #38]	@ 0x26
 801c400:	2b00      	cmp	r3, #0
 801c402:	d1f2      	bne.n	801c3ea <parse_name+0xa0>
		*buf++ = '.';
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	1c5a      	adds	r2, r3, #1
 801c408:	607a      	str	r2, [r7, #4]
 801c40a:	222e      	movs	r2, #46	@ 0x2e
 801c40c:	701a      	strb	r2, [r3, #0]
		nseg++;
 801c40e:	697b      	ldr	r3, [r7, #20]
 801c410:	3301      	adds	r3, #1
 801c412:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801c414:	e7a8      	b.n	801c368 <parse_name+0x1e>
			break;
 801c416:	bf00      	nop
	}

	if (nseg == 0)
 801c418:	697b      	ldr	r3, [r7, #20]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d10a      	bne.n	801c434 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	1c5a      	adds	r2, r3, #1
 801c422:	607a      	str	r2, [r7, #4]
 801c424:	222e      	movs	r2, #46	@ 0x2e
 801c426:	701a      	strb	r2, [r3, #0]
		len--;
 801c428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c42c:	b29b      	uxth	r3, r3
 801c42e:	3b01      	subs	r3, #1
 801c430:	b29b      	uxth	r3, r3
 801c432:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	1c5a      	adds	r2, r3, #1
 801c438:	607a      	str	r2, [r7, #4]
 801c43a:	2200      	movs	r2, #0
 801c43c:	701a      	strb	r2, [r3, #0]
	len--;
 801c43e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c442:	b29b      	uxth	r3, r3
 801c444:	3b01      	subs	r3, #1
 801c446:	b29b      	uxth	r3, r3
 801c448:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801c44a:	69fb      	ldr	r3, [r7, #28]
}
 801c44c:	4618      	mov	r0, r3
 801c44e:	372c      	adds	r7, #44	@ 0x2c
 801c450:	46bd      	mov	sp, r7
 801c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c456:	4770      	bx	lr

0801c458 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801c458:	b580      	push	{r7, lr}
 801c45a:	b0b4      	sub	sp, #208	@ 0xd0
 801c45c:	af00      	add	r7, sp, #0
 801c45e:	6078      	str	r0, [r7, #4]
 801c460:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c462:	f107 020c 	add.w	r2, r7, #12
 801c466:	23c0      	movs	r3, #192	@ 0xc0
 801c468:	6839      	ldr	r1, [r7, #0]
 801c46a:	6878      	ldr	r0, [r7, #4]
 801c46c:	f7ff ff6d 	bl	801c34a <parse_name>
 801c470:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 801c474:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801c478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c47c:	d101      	bne.n	801c482 <dns_question+0x2a>
 801c47e:	2300      	movs	r3, #0
 801c480:	e00b      	b.n	801c49a <dns_question+0x42>

	cp += len;
 801c482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801c486:	683a      	ldr	r2, [r7, #0]
 801c488:	4413      	add	r3, r2
 801c48a:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801c48c:	683b      	ldr	r3, [r7, #0]
 801c48e:	3302      	adds	r3, #2
 801c490:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801c492:	683b      	ldr	r3, [r7, #0]
 801c494:	3302      	adds	r3, #2
 801c496:	603b      	str	r3, [r7, #0]

	return cp;
 801c498:	683b      	ldr	r3, [r7, #0]
}
 801c49a:	4618      	mov	r0, r3
 801c49c:	37d0      	adds	r7, #208	@ 0xd0
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bd80      	pop	{r7, pc}

0801c4a2 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801c4a2:	b580      	push	{r7, lr}
 801c4a4:	b0b6      	sub	sp, #216	@ 0xd8
 801c4a6:	af00      	add	r7, sp, #0
 801c4a8:	60f8      	str	r0, [r7, #12]
 801c4aa:	60b9      	str	r1, [r7, #8]
 801c4ac:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c4ae:	f107 0210 	add.w	r2, r7, #16
 801c4b2:	23c0      	movs	r3, #192	@ 0xc0
 801c4b4:	68b9      	ldr	r1, [r7, #8]
 801c4b6:	68f8      	ldr	r0, [r7, #12]
 801c4b8:	f7ff ff47 	bl	801c34a <parse_name>
 801c4bc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 801c4c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4c8:	d101      	bne.n	801c4ce <dns_answer+0x2c>
 801c4ca:	2300      	movs	r3, #0
 801c4cc:	e0f9      	b.n	801c6c2 <dns_answer+0x220>

	cp += len;
 801c4ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c4d2:	68ba      	ldr	r2, [r7, #8]
 801c4d4:	4413      	add	r3, r2
 801c4d6:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801c4d8:	68b8      	ldr	r0, [r7, #8]
 801c4da:	f7ff ff04 	bl	801c2e6 <get16>
 801c4de:	4603      	mov	r3, r0
 801c4e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 801c4e4:	68bb      	ldr	r3, [r7, #8]
 801c4e6:	3302      	adds	r3, #2
 801c4e8:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801c4ea:	68bb      	ldr	r3, [r7, #8]
 801c4ec:	3302      	adds	r3, #2
 801c4ee:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801c4f0:	68bb      	ldr	r3, [r7, #8]
 801c4f2:	3304      	adds	r3, #4
 801c4f4:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801c4f6:	68bb      	ldr	r3, [r7, #8]
 801c4f8:	3302      	adds	r3, #2
 801c4fa:	60bb      	str	r3, [r7, #8]


	switch (type)
 801c4fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c500:	2b10      	cmp	r3, #16
 801c502:	f000 80da 	beq.w	801c6ba <dns_answer+0x218>
 801c506:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c50a:	2b10      	cmp	r3, #16
 801c50c:	f300 80d7 	bgt.w	801c6be <dns_answer+0x21c>
 801c510:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c514:	2b0f      	cmp	r3, #15
 801c516:	d07d      	beq.n	801c614 <dns_answer+0x172>
 801c518:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c51c:	2b0f      	cmp	r3, #15
 801c51e:	f300 80ce 	bgt.w	801c6be <dns_answer+0x21c>
 801c522:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c526:	2b0c      	cmp	r3, #12
 801c528:	dc26      	bgt.n	801c578 <dns_answer+0xd6>
 801c52a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c52e:	2b00      	cmp	r3, #0
 801c530:	f340 80c5 	ble.w	801c6be <dns_answer+0x21c>
 801c534:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c538:	2201      	movs	r2, #1
 801c53a:	fa02 f303 	lsl.w	r3, r2, r3
 801c53e:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 801c542:	401a      	ands	r2, r3
 801c544:	2a00      	cmp	r2, #0
 801c546:	bf14      	ite	ne
 801c548:	2201      	movne	r2, #1
 801c54a:	2200      	moveq	r2, #0
 801c54c:	b2d2      	uxtb	r2, r2
 801c54e:	2a00      	cmp	r2, #0
 801c550:	d133      	bne.n	801c5ba <dns_answer+0x118>
 801c552:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 801c556:	2a00      	cmp	r2, #0
 801c558:	bf14      	ite	ne
 801c55a:	2201      	movne	r2, #1
 801c55c:	2200      	moveq	r2, #0
 801c55e:	b2d2      	uxtb	r2, r2
 801c560:	2a00      	cmp	r2, #0
 801c562:	d170      	bne.n	801c646 <dns_answer+0x1a4>
 801c564:	f003 0302 	and.w	r3, r3, #2
 801c568:	2b00      	cmp	r3, #0
 801c56a:	bf14      	ite	ne
 801c56c:	2301      	movne	r3, #1
 801c56e:	2300      	moveq	r3, #0
 801c570:	b2db      	uxtb	r3, r3
 801c572:	2b00      	cmp	r3, #0
 801c574:	d105      	bne.n	801c582 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801c576:	e0a2      	b.n	801c6be <dns_answer+0x21c>
	switch (type)
 801c578:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c57c:	2b0d      	cmp	r3, #13
 801c57e:	d032      	beq.n	801c5e6 <dns_answer+0x144>
		break;
 801c580:	e09d      	b.n	801c6be <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801c582:	68bb      	ldr	r3, [r7, #8]
 801c584:	1c5a      	adds	r2, r3, #1
 801c586:	60ba      	str	r2, [r7, #8]
 801c588:	781a      	ldrb	r2, [r3, #0]
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801c58e:	68bb      	ldr	r3, [r7, #8]
 801c590:	1c5a      	adds	r2, r3, #1
 801c592:	60ba      	str	r2, [r7, #8]
 801c594:	687a      	ldr	r2, [r7, #4]
 801c596:	3201      	adds	r2, #1
 801c598:	781b      	ldrb	r3, [r3, #0]
 801c59a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801c59c:	68bb      	ldr	r3, [r7, #8]
 801c59e:	1c5a      	adds	r2, r3, #1
 801c5a0:	60ba      	str	r2, [r7, #8]
 801c5a2:	687a      	ldr	r2, [r7, #4]
 801c5a4:	3202      	adds	r2, #2
 801c5a6:	781b      	ldrb	r3, [r3, #0]
 801c5a8:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801c5aa:	68bb      	ldr	r3, [r7, #8]
 801c5ac:	1c5a      	adds	r2, r3, #1
 801c5ae:	60ba      	str	r2, [r7, #8]
 801c5b0:	687a      	ldr	r2, [r7, #4]
 801c5b2:	3203      	adds	r2, #3
 801c5b4:	781b      	ldrb	r3, [r3, #0]
 801c5b6:	7013      	strb	r3, [r2, #0]
		break;
 801c5b8:	e082      	b.n	801c6c0 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c5ba:	f107 0210 	add.w	r2, r7, #16
 801c5be:	23c0      	movs	r3, #192	@ 0xc0
 801c5c0:	68b9      	ldr	r1, [r7, #8]
 801c5c2:	68f8      	ldr	r0, [r7, #12]
 801c5c4:	f7ff fec1 	bl	801c34a <parse_name>
 801c5c8:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 801c5cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5d4:	d101      	bne.n	801c5da <dns_answer+0x138>
 801c5d6:	2300      	movs	r3, #0
 801c5d8:	e073      	b.n	801c6c2 <dns_answer+0x220>
		cp += len;
 801c5da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c5de:	68ba      	ldr	r2, [r7, #8]
 801c5e0:	4413      	add	r3, r2
 801c5e2:	60bb      	str	r3, [r7, #8]
		break;
 801c5e4:	e06c      	b.n	801c6c0 <dns_answer+0x21e>
		len = *cp++;
 801c5e6:	68bb      	ldr	r3, [r7, #8]
 801c5e8:	1c5a      	adds	r2, r3, #1
 801c5ea:	60ba      	str	r2, [r7, #8]
 801c5ec:	781b      	ldrb	r3, [r3, #0]
 801c5ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 801c5f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c5f6:	68ba      	ldr	r2, [r7, #8]
 801c5f8:	4413      	add	r3, r2
 801c5fa:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	1c5a      	adds	r2, r3, #1
 801c600:	60ba      	str	r2, [r7, #8]
 801c602:	781b      	ldrb	r3, [r3, #0]
 801c604:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 801c608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c60c:	68ba      	ldr	r2, [r7, #8]
 801c60e:	4413      	add	r3, r2
 801c610:	60bb      	str	r3, [r7, #8]
		break;
 801c612:	e055      	b.n	801c6c0 <dns_answer+0x21e>
		cp += 2;
 801c614:	68bb      	ldr	r3, [r7, #8]
 801c616:	3302      	adds	r3, #2
 801c618:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c61a:	f107 0210 	add.w	r2, r7, #16
 801c61e:	23c0      	movs	r3, #192	@ 0xc0
 801c620:	68b9      	ldr	r1, [r7, #8]
 801c622:	68f8      	ldr	r0, [r7, #12]
 801c624:	f7ff fe91 	bl	801c34a <parse_name>
 801c628:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 801c62c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c630:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c634:	d101      	bne.n	801c63a <dns_answer+0x198>
 801c636:	2300      	movs	r3, #0
 801c638:	e043      	b.n	801c6c2 <dns_answer+0x220>
		cp += len;
 801c63a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c63e:	68ba      	ldr	r2, [r7, #8]
 801c640:	4413      	add	r3, r2
 801c642:	60bb      	str	r3, [r7, #8]
		break;
 801c644:	e03c      	b.n	801c6c0 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c646:	f107 0210 	add.w	r2, r7, #16
 801c64a:	23c0      	movs	r3, #192	@ 0xc0
 801c64c:	68b9      	ldr	r1, [r7, #8]
 801c64e:	68f8      	ldr	r0, [r7, #12]
 801c650:	f7ff fe7b 	bl	801c34a <parse_name>
 801c654:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 801c658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c65c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c660:	d101      	bne.n	801c666 <dns_answer+0x1c4>
 801c662:	2300      	movs	r3, #0
 801c664:	e02d      	b.n	801c6c2 <dns_answer+0x220>
		cp += len;
 801c666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c66a:	68ba      	ldr	r2, [r7, #8]
 801c66c:	4413      	add	r3, r2
 801c66e:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c670:	f107 0210 	add.w	r2, r7, #16
 801c674:	23c0      	movs	r3, #192	@ 0xc0
 801c676:	68b9      	ldr	r1, [r7, #8]
 801c678:	68f8      	ldr	r0, [r7, #12]
 801c67a:	f7ff fe66 	bl	801c34a <parse_name>
 801c67e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 801c682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c68a:	d101      	bne.n	801c690 <dns_answer+0x1ee>
 801c68c:	2300      	movs	r3, #0
 801c68e:	e018      	b.n	801c6c2 <dns_answer+0x220>
		cp += len;
 801c690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801c694:	68ba      	ldr	r2, [r7, #8]
 801c696:	4413      	add	r3, r2
 801c698:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c69a:	68bb      	ldr	r3, [r7, #8]
 801c69c:	3304      	adds	r3, #4
 801c69e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c6a0:	68bb      	ldr	r3, [r7, #8]
 801c6a2:	3304      	adds	r3, #4
 801c6a4:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c6a6:	68bb      	ldr	r3, [r7, #8]
 801c6a8:	3304      	adds	r3, #4
 801c6aa:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c6ac:	68bb      	ldr	r3, [r7, #8]
 801c6ae:	3304      	adds	r3, #4
 801c6b0:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c6b2:	68bb      	ldr	r3, [r7, #8]
 801c6b4:	3304      	adds	r3, #4
 801c6b6:	60bb      	str	r3, [r7, #8]
		break;
 801c6b8:	e002      	b.n	801c6c0 <dns_answer+0x21e>
		break;
 801c6ba:	bf00      	nop
 801c6bc:	e000      	b.n	801c6c0 <dns_answer+0x21e>
		break;
 801c6be:	bf00      	nop
	}

	return cp;
 801c6c0:	68bb      	ldr	r3, [r7, #8]
}
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	37d8      	adds	r7, #216	@ 0xd8
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	bd80      	pop	{r7, pc}

0801c6ca <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c6ca:	b580      	push	{r7, lr}
 801c6cc:	b088      	sub	sp, #32
 801c6ce:	af00      	add	r7, sp, #0
 801c6d0:	60f8      	str	r0, [r7, #12]
 801c6d2:	60b9      	str	r1, [r7, #8]
 801c6d4:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c6d6:	68bb      	ldr	r3, [r7, #8]
 801c6d8:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c6da:	2212      	movs	r2, #18
 801c6dc:	2100      	movs	r1, #0
 801c6de:	68f8      	ldr	r0, [r7, #12]
 801c6e0:	f011 fa56 	bl	802db90 <memset>

	pdhdr->id = get16(&msg[0]);
 801c6e4:	6978      	ldr	r0, [r7, #20]
 801c6e6:	f7ff fdfe 	bl	801c2e6 <get16>
 801c6ea:	4603      	mov	r3, r0
 801c6ec:	461a      	mov	r2, r3
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c6f2:	697b      	ldr	r3, [r7, #20]
 801c6f4:	3302      	adds	r3, #2
 801c6f6:	4618      	mov	r0, r3
 801c6f8:	f7ff fdf5 	bl	801c2e6 <get16>
 801c6fc:	4603      	mov	r3, r0
 801c6fe:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c700:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c704:	2b00      	cmp	r3, #0
 801c706:	da02      	bge.n	801c70e <parseDNSMSG+0x44>
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	2201      	movs	r2, #1
 801c70c:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c70e:	8a7b      	ldrh	r3, [r7, #18]
 801c710:	0adb      	lsrs	r3, r3, #11
 801c712:	b29b      	uxth	r3, r3
 801c714:	b2db      	uxtb	r3, r3
 801c716:	f003 030f 	and.w	r3, r3, #15
 801c71a:	b2da      	uxtb	r2, r3
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c720:	8a7b      	ldrh	r3, [r7, #18]
 801c722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801c726:	2b00      	cmp	r3, #0
 801c728:	d002      	beq.n	801c730 <parseDNSMSG+0x66>
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	2201      	movs	r2, #1
 801c72e:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c730:	8a7b      	ldrh	r3, [r7, #18]
 801c732:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801c736:	2b00      	cmp	r3, #0
 801c738:	d002      	beq.n	801c740 <parseDNSMSG+0x76>
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	2201      	movs	r2, #1
 801c73e:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c740:	8a7b      	ldrh	r3, [r7, #18]
 801c742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c746:	2b00      	cmp	r3, #0
 801c748:	d002      	beq.n	801c750 <parseDNSMSG+0x86>
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	2201      	movs	r2, #1
 801c74e:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c750:	8a7b      	ldrh	r3, [r7, #18]
 801c752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801c756:	2b00      	cmp	r3, #0
 801c758:	d002      	beq.n	801c760 <parseDNSMSG+0x96>
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	2201      	movs	r2, #1
 801c75e:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c760:	8a7b      	ldrh	r3, [r7, #18]
 801c762:	b2db      	uxtb	r3, r3
 801c764:	f003 030f 	and.w	r3, r3, #15
 801c768:	b2da      	uxtb	r2, r3
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c76e:	697b      	ldr	r3, [r7, #20]
 801c770:	3304      	adds	r3, #4
 801c772:	4618      	mov	r0, r3
 801c774:	f7ff fdb7 	bl	801c2e6 <get16>
 801c778:	4603      	mov	r3, r0
 801c77a:	461a      	mov	r2, r3
 801c77c:	68fb      	ldr	r3, [r7, #12]
 801c77e:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c780:	697b      	ldr	r3, [r7, #20]
 801c782:	3306      	adds	r3, #6
 801c784:	4618      	mov	r0, r3
 801c786:	f7ff fdae 	bl	801c2e6 <get16>
 801c78a:	4603      	mov	r3, r0
 801c78c:	461a      	mov	r2, r3
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c792:	697b      	ldr	r3, [r7, #20]
 801c794:	3308      	adds	r3, #8
 801c796:	4618      	mov	r0, r3
 801c798:	f7ff fda5 	bl	801c2e6 <get16>
 801c79c:	4603      	mov	r3, r0
 801c79e:	461a      	mov	r2, r3
 801c7a0:	68fb      	ldr	r3, [r7, #12]
 801c7a2:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c7a4:	697b      	ldr	r3, [r7, #20]
 801c7a6:	330a      	adds	r3, #10
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	f7ff fd9c 	bl	801c2e6 <get16>
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	461a      	mov	r2, r3
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c7b6:	697b      	ldr	r3, [r7, #20]
 801c7b8:	330c      	adds	r3, #12
 801c7ba:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c7bc:	2300      	movs	r3, #0
 801c7be:	83fb      	strh	r3, [r7, #30]
 801c7c0:	e00d      	b.n	801c7de <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c7c2:	69b9      	ldr	r1, [r7, #24]
 801c7c4:	6978      	ldr	r0, [r7, #20]
 801c7c6:	f7ff fe47 	bl	801c458 <dns_question>
 801c7ca:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c7cc:	69bb      	ldr	r3, [r7, #24]
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	d102      	bne.n	801c7d8 <parseDNSMSG+0x10e>
 801c7d2:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d6:	e03b      	b.n	801c850 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c7d8:	8bfb      	ldrh	r3, [r7, #30]
 801c7da:	3301      	adds	r3, #1
 801c7dc:	83fb      	strh	r3, [r7, #30]
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	895b      	ldrh	r3, [r3, #10]
 801c7e2:	8bfa      	ldrh	r2, [r7, #30]
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	d3ec      	bcc.n	801c7c2 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	83fb      	strh	r3, [r7, #30]
 801c7ec:	e00e      	b.n	801c80c <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c7ee:	687a      	ldr	r2, [r7, #4]
 801c7f0:	69b9      	ldr	r1, [r7, #24]
 801c7f2:	6978      	ldr	r0, [r7, #20]
 801c7f4:	f7ff fe55 	bl	801c4a2 <dns_answer>
 801c7f8:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c7fa:	69bb      	ldr	r3, [r7, #24]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d102      	bne.n	801c806 <parseDNSMSG+0x13c>
 801c800:	f04f 33ff 	mov.w	r3, #4294967295
 801c804:	e024      	b.n	801c850 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c806:	8bfb      	ldrh	r3, [r7, #30]
 801c808:	3301      	adds	r3, #1
 801c80a:	83fb      	strh	r3, [r7, #30]
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	899b      	ldrh	r3, [r3, #12]
 801c810:	8bfa      	ldrh	r2, [r7, #30]
 801c812:	429a      	cmp	r2, r3
 801c814:	d3eb      	bcc.n	801c7ee <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c816:	2300      	movs	r3, #0
 801c818:	83fb      	strh	r3, [r7, #30]
 801c81a:	e002      	b.n	801c822 <parseDNSMSG+0x158>
 801c81c:	8bfb      	ldrh	r3, [r7, #30]
 801c81e:	3301      	adds	r3, #1
 801c820:	83fb      	strh	r3, [r7, #30]
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	89db      	ldrh	r3, [r3, #14]
 801c826:	8bfa      	ldrh	r2, [r7, #30]
 801c828:	429a      	cmp	r2, r3
 801c82a:	d3f7      	bcc.n	801c81c <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c82c:	2300      	movs	r3, #0
 801c82e:	83fb      	strh	r3, [r7, #30]
 801c830:	e002      	b.n	801c838 <parseDNSMSG+0x16e>
 801c832:	8bfb      	ldrh	r3, [r7, #30]
 801c834:	3301      	adds	r3, #1
 801c836:	83fb      	strh	r3, [r7, #30]
 801c838:	68fb      	ldr	r3, [r7, #12]
 801c83a:	8a1b      	ldrh	r3, [r3, #16]
 801c83c:	8bfa      	ldrh	r2, [r7, #30]
 801c83e:	429a      	cmp	r2, r3
 801c840:	d3f7      	bcc.n	801c832 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	7a1b      	ldrb	r3, [r3, #8]
 801c846:	2b00      	cmp	r3, #0
 801c848:	d101      	bne.n	801c84e <parseDNSMSG+0x184>
 801c84a:	2301      	movs	r3, #1
 801c84c:	e000      	b.n	801c850 <parseDNSMSG+0x186>
	else return 0;
 801c84e:	2300      	movs	r3, #0
}
 801c850:	4618      	mov	r0, r3
 801c852:	3720      	adds	r7, #32
 801c854:	46bd      	mov	sp, r7
 801c856:	bd80      	pop	{r7, pc}

0801c858 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c858:	b580      	push	{r7, lr}
 801c85a:	b0b8      	sub	sp, #224	@ 0xe0
 801c85c:	af00      	add	r7, sp, #0
 801c85e:	60b9      	str	r1, [r7, #8]
 801c860:	607a      	str	r2, [r7, #4]
 801c862:	461a      	mov	r2, r3
 801c864:	4603      	mov	r3, r0
 801c866:	81fb      	strh	r3, [r7, #14]
 801c868:	4613      	mov	r3, r2
 801c86a:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 801c872:	4b57      	ldr	r3, [pc, #348]	@ (801c9d0 <dns_makequery+0x178>)
 801c874:	881b      	ldrh	r3, [r3, #0]
 801c876:	3301      	adds	r3, #1
 801c878:	b29a      	uxth	r2, r3
 801c87a:	4b55      	ldr	r3, [pc, #340]	@ (801c9d0 <dns_makequery+0x178>)
 801c87c:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c87e:	4b54      	ldr	r3, [pc, #336]	@ (801c9d0 <dns_makequery+0x178>)
 801c880:	881b      	ldrh	r3, [r3, #0]
 801c882:	4619      	mov	r1, r3
 801c884:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c888:	f7ff fd44 	bl	801c314 <put16>
 801c88c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c890:	89fb      	ldrh	r3, [r7, #14]
 801c892:	02db      	lsls	r3, r3, #11
 801c894:	b21b      	sxth	r3, r3
 801c896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c89a:	b21b      	sxth	r3, r3
 801c89c:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 801c8a0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 801c8a4:	4619      	mov	r1, r3
 801c8a6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c8aa:	f7ff fd33 	bl	801c314 <put16>
 801c8ae:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 801c8b2:	2101      	movs	r1, #1
 801c8b4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c8b8:	f7ff fd2c 	bl	801c314 <put16>
 801c8bc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 801c8c0:	2100      	movs	r1, #0
 801c8c2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c8c6:	f7ff fd25 	bl	801c314 <put16>
 801c8ca:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 801c8ce:	2100      	movs	r1, #0
 801c8d0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c8d4:	f7ff fd1e 	bl	801c314 <put16>
 801c8d8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 801c8dc:	2100      	movs	r1, #0
 801c8de:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c8e2:	f7ff fd17 	bl	801c314 <put16>
 801c8e6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 801c8ea:	f107 0310 	add.w	r3, r7, #16
 801c8ee:	68b9      	ldr	r1, [r7, #8]
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	f011 fb1a 	bl	802df2a <strcpy>
	dname = sname;
 801c8f6:	f107 0310 	add.w	r3, r7, #16
 801c8fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 801c8fe:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 801c902:	f7f3 fccd 	bl	80102a0 <strlen>
 801c906:	4603      	mov	r3, r0
 801c908:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c90c:	212e      	movs	r1, #46	@ 0x2e
 801c90e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 801c912:	f011 f954 	bl	802dbbe <strchr>
 801c916:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c91a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d006      	beq.n	801c930 <dns_makequery+0xd8>
 801c922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801c926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801c92a:	1ad3      	subs	r3, r2, r3
 801c92c:	81bb      	strh	r3, [r7, #12]
 801c92e:	e002      	b.n	801c936 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c930:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 801c934:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801c93a:	1c5a      	adds	r2, r3, #1
 801c93c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801c940:	89ba      	ldrh	r2, [r7, #12]
 801c942:	b2d2      	uxtb	r2, r2
 801c944:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c946:	89bb      	ldrh	r3, [r7, #12]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d029      	beq.n	801c9a0 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c94c:	89bb      	ldrh	r3, [r7, #12]
 801c94e:	461a      	mov	r2, r3
 801c950:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 801c954:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c958:	f011 f974 	bl	802dc44 <strncpy>
		cp += len;
 801c95c:	89bb      	ldrh	r3, [r7, #12]
 801c95e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801c962:	4413      	add	r3, r2
 801c964:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 801c968:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d107      	bne.n	801c980 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801c974:	1c5a      	adds	r2, r3, #1
 801c976:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801c97a:	2200      	movs	r2, #0
 801c97c:	701a      	strb	r2, [r3, #0]
			break;
 801c97e:	e010      	b.n	801c9a2 <dns_makequery+0x14a>
		}
		dname += len+1;
 801c980:	89bb      	ldrh	r3, [r7, #12]
 801c982:	3301      	adds	r3, #1
 801c984:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801c988:	4413      	add	r3, r2
 801c98a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 801c98e:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 801c992:	89bb      	ldrh	r3, [r7, #12]
 801c994:	1ad3      	subs	r3, r2, r3
 801c996:	b29b      	uxth	r3, r3
 801c998:	3b01      	subs	r3, #1
 801c99a:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 801c99e:	e7b5      	b.n	801c90c <dns_makequery+0xb4>
		if (len == 0) break;
 801c9a0:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c9a2:	2101      	movs	r1, #1
 801c9a4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c9a8:	f7ff fcb4 	bl	801c314 <put16>
 801c9ac:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c9b0:	2101      	movs	r1, #1
 801c9b2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 801c9b6:	f7ff fcad 	bl	801c314 <put16>
 801c9ba:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c9be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	1ad3      	subs	r3, r2, r3
 801c9c6:	b21b      	sxth	r3, r3
}
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	37e0      	adds	r7, #224	@ 0xe0
 801c9cc:	46bd      	mov	sp, r7
 801c9ce:	bd80      	pop	{r7, pc}
 801c9d0:	200009e2 	.word	0x200009e2

0801c9d4 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c9d4:	b480      	push	{r7}
 801c9d6:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c9d8:	4b0f      	ldr	r3, [pc, #60]	@ (801ca18 <check_DNS_timeout+0x44>)
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	2b02      	cmp	r3, #2
 801c9de:	d914      	bls.n	801ca0a <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c9e0:	4b0d      	ldr	r3, [pc, #52]	@ (801ca18 <check_DNS_timeout+0x44>)
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c9e6:	4b0d      	ldr	r3, [pc, #52]	@ (801ca1c <check_DNS_timeout+0x48>)
 801c9e8:	781b      	ldrb	r3, [r3, #0]
 801c9ea:	2b01      	cmp	r3, #1
 801c9ec:	d905      	bls.n	801c9fa <check_DNS_timeout+0x26>
			retry_count = 0;
 801c9ee:	4b0b      	ldr	r3, [pc, #44]	@ (801ca1c <check_DNS_timeout+0x48>)
 801c9f0:	2200      	movs	r2, #0
 801c9f2:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c9f4:	f04f 33ff 	mov.w	r3, #4294967295
 801c9f8:	e008      	b.n	801ca0c <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c9fa:	4b08      	ldr	r3, [pc, #32]	@ (801ca1c <check_DNS_timeout+0x48>)
 801c9fc:	781b      	ldrb	r3, [r3, #0]
 801c9fe:	3301      	adds	r3, #1
 801ca00:	b2da      	uxtb	r2, r3
 801ca02:	4b06      	ldr	r3, [pc, #24]	@ (801ca1c <check_DNS_timeout+0x48>)
 801ca04:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801ca06:	2300      	movs	r3, #0
 801ca08:	e000      	b.n	801ca0c <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801ca0a:	2301      	movs	r3, #1
}
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca14:	4770      	bx	lr
 801ca16:	bf00      	nop
 801ca18:	200009e4 	.word	0x200009e4
 801ca1c:	200009e8 	.word	0x200009e8

0801ca20 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801ca20:	b480      	push	{r7}
 801ca22:	b083      	sub	sp, #12
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	4603      	mov	r3, r0
 801ca28:	6039      	str	r1, [r7, #0]
 801ca2a:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801ca2c:	4a07      	ldr	r2, [pc, #28]	@ (801ca4c <DNS_init+0x2c>)
 801ca2e:	79fb      	ldrb	r3, [r7, #7]
 801ca30:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801ca32:	4a07      	ldr	r2, [pc, #28]	@ (801ca50 <DNS_init+0x30>)
 801ca34:	683b      	ldr	r3, [r7, #0]
 801ca36:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801ca38:	4b06      	ldr	r3, [pc, #24]	@ (801ca54 <DNS_init+0x34>)
 801ca3a:	f241 1222 	movw	r2, #4386	@ 0x1122
 801ca3e:	801a      	strh	r2, [r3, #0]
}
 801ca40:	bf00      	nop
 801ca42:	370c      	adds	r7, #12
 801ca44:	46bd      	mov	sp, r7
 801ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca4a:	4770      	bx	lr
 801ca4c:	200009e0 	.word	0x200009e0
 801ca50:	200009dc 	.word	0x200009dc
 801ca54:	200009e2 	.word	0x200009e2

0801ca58 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801ca58:	b590      	push	{r4, r7, lr}
 801ca5a:	b08f      	sub	sp, #60	@ 0x3c
 801ca5c:	af02      	add	r7, sp, #8
 801ca5e:	60f8      	str	r0, [r7, #12]
 801ca60:	60b9      	str	r1, [r7, #8]
 801ca62:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801ca64:	4b3b      	ldr	r3, [pc, #236]	@ (801cb54 <DNS_run+0xfc>)
 801ca66:	2200      	movs	r2, #0
 801ca68:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801ca6a:	4b3b      	ldr	r3, [pc, #236]	@ (801cb58 <DNS_run+0x100>)
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801ca70:	4b3a      	ldr	r3, [pc, #232]	@ (801cb5c <DNS_run+0x104>)
 801ca72:	7818      	ldrb	r0, [r3, #0]
 801ca74:	2300      	movs	r3, #0
 801ca76:	2200      	movs	r2, #0
 801ca78:	2102      	movs	r1, #2
 801ca7a:	f7fc fa5d 	bl	8018f38 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801ca7e:	4b38      	ldr	r3, [pc, #224]	@ (801cb60 <DNS_run+0x108>)
 801ca80:	681a      	ldr	r2, [r3, #0]
 801ca82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ca86:	68b9      	ldr	r1, [r7, #8]
 801ca88:	2000      	movs	r0, #0
 801ca8a:	f7ff fee5 	bl	801c858 <dns_makequery>
 801ca8e:	4603      	mov	r3, r0
 801ca90:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801ca92:	4b32      	ldr	r3, [pc, #200]	@ (801cb5c <DNS_run+0x104>)
 801ca94:	7818      	ldrb	r0, [r3, #0]
 801ca96:	4b32      	ldr	r3, [pc, #200]	@ (801cb60 <DNS_run+0x108>)
 801ca98:	6819      	ldr	r1, [r3, #0]
 801ca9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801ca9c:	2335      	movs	r3, #53	@ 0x35
 801ca9e:	9300      	str	r3, [sp, #0]
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	f7fc ff23 	bl	80198ec <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801caa6:	4b2d      	ldr	r3, [pc, #180]	@ (801cb5c <DNS_run+0x104>)
 801caa8:	781b      	ldrb	r3, [r3, #0]
 801caaa:	4618      	mov	r0, r3
 801caac:	f7fc f901 	bl	8018cb2 <getSn_RX_RSR>
 801cab0:	4603      	mov	r3, r0
 801cab2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801cab4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cab6:	2b00      	cmp	r3, #0
 801cab8:	d029      	beq.n	801cb0e <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801caba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801cabc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cac0:	d902      	bls.n	801cac8 <DNS_run+0x70>
 801cac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cac6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801cac8:	4b24      	ldr	r3, [pc, #144]	@ (801cb5c <DNS_run+0x104>)
 801caca:	7818      	ldrb	r0, [r3, #0]
 801cacc:	4b24      	ldr	r3, [pc, #144]	@ (801cb60 <DNS_run+0x108>)
 801cace:	6819      	ldr	r1, [r3, #0]
 801cad0:	f107 0414 	add.w	r4, r7, #20
 801cad4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cad6:	f107 0312 	add.w	r3, r7, #18
 801cada:	9300      	str	r3, [sp, #0]
 801cadc:	4623      	mov	r3, r4
 801cade:	f7fd f839 	bl	8019b54 <recvfrom>
 801cae2:	4603      	mov	r3, r0
 801cae4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801cae6:	4b1e      	ldr	r3, [pc, #120]	@ (801cb60 <DNS_run+0x108>)
 801cae8:	6819      	ldr	r1, [r3, #0]
 801caea:	f107 0318 	add.w	r3, r7, #24
 801caee:	687a      	ldr	r2, [r7, #4]
 801caf0:	4618      	mov	r0, r3
 801caf2:	f7ff fdea 	bl	801c6ca <parseDNSMSG>
 801caf6:	4603      	mov	r3, r0
 801caf8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 801cafc:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801cafe:	4b17      	ldr	r3, [pc, #92]	@ (801cb5c <DNS_run+0x104>)
 801cb00:	781b      	ldrb	r3, [r3, #0]
 801cb02:	4618      	mov	r0, r3
 801cb04:	f7fc fb2c 	bl	8019160 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801cb08:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 801cb0c:	e01e      	b.n	801cb4c <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801cb0e:	f7ff ff61 	bl	801c9d4 <check_DNS_timeout>
 801cb12:	4603      	mov	r3, r0
 801cb14:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 801cb18:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	da06      	bge.n	801cb2e <DNS_run+0xd6>
			close(DNS_SOCKET);
 801cb20:	4b0e      	ldr	r3, [pc, #56]	@ (801cb5c <DNS_run+0x104>)
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	4618      	mov	r0, r3
 801cb26:	f7fc fb1b 	bl	8019160 <close>
			return 0; // timeout occurred
 801cb2a:	2300      	movs	r3, #0
 801cb2c:	e00e      	b.n	801cb4c <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801cb2e:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d1b7      	bne.n	801caa6 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801cb36:	4b09      	ldr	r3, [pc, #36]	@ (801cb5c <DNS_run+0x104>)
 801cb38:	7818      	ldrb	r0, [r3, #0]
 801cb3a:	4b09      	ldr	r3, [pc, #36]	@ (801cb60 <DNS_run+0x108>)
 801cb3c:	6819      	ldr	r1, [r3, #0]
 801cb3e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801cb40:	2335      	movs	r3, #53	@ 0x35
 801cb42:	9300      	str	r3, [sp, #0]
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	f7fc fed1 	bl	80198ec <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801cb4a:	e7ac      	b.n	801caa6 <DNS_run+0x4e>
}
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	3734      	adds	r7, #52	@ 0x34
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bd90      	pop	{r4, r7, pc}
 801cb54:	200009e8 	.word	0x200009e8
 801cb58:	200009e4 	.word	0x200009e4
 801cb5c:	200009e0 	.word	0x200009e0
 801cb60:	200009dc 	.word	0x200009dc

0801cb64 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801cb64:	b480      	push	{r7}
 801cb66:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801cb68:	4b04      	ldr	r3, [pc, #16]	@ (801cb7c <DNS_time_handler+0x18>)
 801cb6a:	681b      	ldr	r3, [r3, #0]
 801cb6c:	3301      	adds	r3, #1
 801cb6e:	4a03      	ldr	r2, [pc, #12]	@ (801cb7c <DNS_time_handler+0x18>)
 801cb70:	6013      	str	r3, [r2, #0]
}
 801cb72:	bf00      	nop
 801cb74:	46bd      	mov	sp, r7
 801cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb7a:	4770      	bx	lr
 801cb7c:	200009e4 	.word	0x200009e4

0801cb80 <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801cb80:	b480      	push	{r7}
 801cb82:	af00      	add	r7, sp, #0
 801cb84:	bf00      	nop
 801cb86:	46bd      	mov	sp, r7
 801cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8c:	4770      	bx	lr
	...

0801cb90 <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801cb90:	b480      	push	{r7}
 801cb92:	b083      	sub	sp, #12
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
 801cb98:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d002      	beq.n	801cba6 <dns_service_reg_cb_mutex+0x16>
 801cba0:	4a07      	ldr	r2, [pc, #28]	@ (801cbc0 <dns_service_reg_cb_mutex+0x30>)
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d002      	beq.n	801cbb2 <dns_service_reg_cb_mutex+0x22>
 801cbac:	4a05      	ldr	r2, [pc, #20]	@ (801cbc4 <dns_service_reg_cb_mutex+0x34>)
 801cbae:	683b      	ldr	r3, [r7, #0]
 801cbb0:	6013      	str	r3, [r2, #0]

}
 801cbb2:	bf00      	nop
 801cbb4:	370c      	adds	r7, #12
 801cbb6:	46bd      	mov	sp, r7
 801cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbbc:	4770      	bx	lr
 801cbbe:	bf00      	nop
 801cbc0:	20000114 	.word	0x20000114
 801cbc4:	20000118 	.word	0x20000118

0801cbc8 <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801cbc8:	b480      	push	{r7}
 801cbca:	b083      	sub	sp, #12
 801cbcc:	af00      	add	r7, sp, #0
 801cbce:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	d002      	beq.n	801cbdc <dns_service_reg_cb_net_ready+0x14>
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	4a03      	ldr	r2, [pc, #12]	@ (801cbe8 <dns_service_reg_cb_net_ready+0x20>)
 801cbda:	6013      	str	r3, [r2, #0]

}
 801cbdc:	bf00      	nop
 801cbde:	370c      	adds	r7, #12
 801cbe0:	46bd      	mov	sp, r7
 801cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe6:	4770      	bx	lr
 801cbe8:	2000011c 	.word	0x2000011c

0801cbec <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801cbec:	b580      	push	{r7, lr}
 801cbee:	b082      	sub	sp, #8
 801cbf0:	af00      	add	r7, sp, #0
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	6039      	str	r1, [r7, #0]
 801cbf6:	71fb      	strb	r3, [r7, #7]
 801cbf8:	4613      	mov	r3, r2
 801cbfa:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801cbfc:	88bb      	ldrh	r3, [r7, #4]
 801cbfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cc02:	d202      	bcs.n	801cc0a <dns_service_init+0x1e>
 801cc04:	f04f 33ff 	mov.w	r3, #4294967295
 801cc08:	e005      	b.n	801cc16 <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801cc0a:	79fb      	ldrb	r3, [r7, #7]
 801cc0c:	6839      	ldr	r1, [r7, #0]
 801cc0e:	4618      	mov	r0, r3
 801cc10:	f7ff ff06 	bl	801ca20 <DNS_init>
	return 0;
 801cc14:	2300      	movs	r3, #0
}
 801cc16:	4618      	mov	r0, r3
 801cc18:	3708      	adds	r7, #8
 801cc1a:	46bd      	mov	sp, r7
 801cc1c:	bd80      	pop	{r7, pc}
	...

0801cc20 <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801cc20:	b480      	push	{r7}
 801cc22:	b083      	sub	sp, #12
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	6078      	str	r0, [r7, #4]
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	681b      	ldr	r3, [r3, #0]
 801cc2c:	461a      	mov	r2, r3
 801cc2e:	4b04      	ldr	r3, [pc, #16]	@ (801cc40 <dns_service_set_dns_ip+0x20>)
 801cc30:	601a      	str	r2, [r3, #0]
}
 801cc32:	bf00      	nop
 801cc34:	370c      	adds	r7, #12
 801cc36:	46bd      	mov	sp, r7
 801cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc3c:	4770      	bx	lr
 801cc3e:	bf00      	nop
 801cc40:	200009ec 	.word	0x200009ec

0801cc44 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b084      	sub	sp, #16
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
 801cc4c:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801cc4e:	4b0e      	ldr	r3, [pc, #56]	@ (801cc88 <dns_service_resolve_name+0x44>)
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady()){
 801cc54:	4b0d      	ldr	r3, [pc, #52]	@ (801cc8c <dns_service_resolve_name+0x48>)
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	4798      	blx	r3
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d007      	beq.n	801cc70 <dns_service_resolve_name+0x2c>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801cc60:	683a      	ldr	r2, [r7, #0]
 801cc62:	6879      	ldr	r1, [r7, #4]
 801cc64:	480a      	ldr	r0, [pc, #40]	@ (801cc90 <dns_service_resolve_name+0x4c>)
 801cc66:	f7ff fef7 	bl	801ca58 <DNS_run>
 801cc6a:	4603      	mov	r3, r0
 801cc6c:	73fb      	strb	r3, [r7, #15]
 801cc6e:	e001      	b.n	801cc74 <dns_service_resolve_name+0x30>
	}else{
		err = -1;
 801cc70:	23ff      	movs	r3, #255	@ 0xff
 801cc72:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801cc74:	4b07      	ldr	r3, [pc, #28]	@ (801cc94 <dns_service_resolve_name+0x50>)
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	4798      	blx	r3
#endif
	return err;
 801cc7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cc7e:	4618      	mov	r0, r3
 801cc80:	3710      	adds	r7, #16
 801cc82:	46bd      	mov	sp, r7
 801cc84:	bd80      	pop	{r7, pc}
 801cc86:	bf00      	nop
 801cc88:	20000114 	.word	0x20000114
 801cc8c:	2000011c 	.word	0x2000011c
 801cc90:	200009ec 	.word	0x200009ec
 801cc94:	20000118 	.word	0x20000118

0801cc98 <dns_service_increment_second>:

void dns_service_increment_second(void){
 801cc98:	b580      	push	{r7, lr}
 801cc9a:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801cc9c:	f7ff ff62 	bl	801cb64 <DNS_time_handler>
}
 801cca0:	bf00      	nop
 801cca2:	bd80      	pop	{r7, pc}

0801cca4 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b086      	sub	sp, #24
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d101      	bne.n	801ccb6 <isValidIPv4+0x12>
        return false;
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	e068      	b.n	801cd88 <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801ccb6:	2300      	movs	r3, #0
 801ccb8:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801ccba:	2300      	movs	r3, #0
 801ccbc:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801ccbe:	2300      	movs	r3, #0
 801ccc0:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801ccc2:	2300      	movs	r3, #0
 801ccc4:	60bb      	str	r3, [r7, #8]
 801ccc6:	e043      	b.n	801cd50 <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801ccc8:	687a      	ldr	r2, [r7, #4]
 801ccca:	68bb      	ldr	r3, [r7, #8]
 801cccc:	4413      	add	r3, r2
 801ccce:	781b      	ldrb	r3, [r3, #0]
 801ccd0:	3b30      	subs	r3, #48	@ 0x30
 801ccd2:	2b09      	cmp	r3, #9
 801ccd4:	d818      	bhi.n	801cd08 <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801ccd6:	697a      	ldr	r2, [r7, #20]
 801ccd8:	4613      	mov	r3, r2
 801ccda:	009b      	lsls	r3, r3, #2
 801ccdc:	4413      	add	r3, r2
 801ccde:	005b      	lsls	r3, r3, #1
 801cce0:	4619      	mov	r1, r3
 801cce2:	687a      	ldr	r2, [r7, #4]
 801cce4:	68bb      	ldr	r3, [r7, #8]
 801cce6:	4413      	add	r3, r2
 801cce8:	781b      	ldrb	r3, [r3, #0]
 801ccea:	3b30      	subs	r3, #48	@ 0x30
 801ccec:	440b      	add	r3, r1
 801ccee:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801ccf0:	697b      	ldr	r3, [r7, #20]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	db02      	blt.n	801ccfc <isValidIPv4+0x58>
 801ccf6:	697b      	ldr	r3, [r7, #20]
 801ccf8:	2bff      	cmp	r3, #255	@ 0xff
 801ccfa:	dd01      	ble.n	801cd00 <isValidIPv4+0x5c>
                return false;
 801ccfc:	2300      	movs	r3, #0
 801ccfe:	e043      	b.n	801cd88 <isValidIPv4+0xe4>
            }

            segmentLength++;
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	3301      	adds	r3, #1
 801cd04:	60fb      	str	r3, [r7, #12]
 801cd06:	e020      	b.n	801cd4a <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801cd08:	687a      	ldr	r2, [r7, #4]
 801cd0a:	68bb      	ldr	r3, [r7, #8]
 801cd0c:	4413      	add	r3, r2
 801cd0e:	781b      	ldrb	r3, [r3, #0]
 801cd10:	2b2e      	cmp	r3, #46	@ 0x2e
 801cd12:	d118      	bne.n	801cd46 <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801cd14:	68fb      	ldr	r3, [r7, #12]
 801cd16:	2b01      	cmp	r3, #1
 801cd18:	dd09      	ble.n	801cd2e <isValidIPv4+0x8a>
 801cd1a:	68fb      	ldr	r3, [r7, #12]
 801cd1c:	68ba      	ldr	r2, [r7, #8]
 801cd1e:	1ad3      	subs	r3, r2, r3
 801cd20:	687a      	ldr	r2, [r7, #4]
 801cd22:	4413      	add	r3, r2
 801cd24:	781b      	ldrb	r3, [r3, #0]
 801cd26:	2b30      	cmp	r3, #48	@ 0x30
 801cd28:	d101      	bne.n	801cd2e <isValidIPv4+0x8a>
                return false;
 801cd2a:	2300      	movs	r3, #0
 801cd2c:	e02c      	b.n	801cd88 <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801cd2e:	2300      	movs	r3, #0
 801cd30:	617b      	str	r3, [r7, #20]
            count++;
 801cd32:	693b      	ldr	r3, [r7, #16]
 801cd34:	3301      	adds	r3, #1
 801cd36:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801cd38:	2300      	movs	r3, #0
 801cd3a:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801cd3c:	693b      	ldr	r3, [r7, #16]
 801cd3e:	2b03      	cmp	r3, #3
 801cd40:	dd03      	ble.n	801cd4a <isValidIPv4+0xa6>
                return false;
 801cd42:	2300      	movs	r3, #0
 801cd44:	e020      	b.n	801cd88 <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801cd46:	2300      	movs	r3, #0
 801cd48:	e01e      	b.n	801cd88 <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801cd4a:	68bb      	ldr	r3, [r7, #8]
 801cd4c:	3301      	adds	r3, #1
 801cd4e:	60bb      	str	r3, [r7, #8]
 801cd50:	687a      	ldr	r2, [r7, #4]
 801cd52:	68bb      	ldr	r3, [r7, #8]
 801cd54:	4413      	add	r3, r2
 801cd56:	781b      	ldrb	r3, [r3, #0]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d1b5      	bne.n	801ccc8 <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	2b01      	cmp	r3, #1
 801cd60:	dd0c      	ble.n	801cd7c <isValidIPv4+0xd8>
 801cd62:	6878      	ldr	r0, [r7, #4]
 801cd64:	f7f3 fa9c 	bl	80102a0 <strlen>
 801cd68:	4602      	mov	r2, r0
 801cd6a:	68fb      	ldr	r3, [r7, #12]
 801cd6c:	1ad3      	subs	r3, r2, r3
 801cd6e:	687a      	ldr	r2, [r7, #4]
 801cd70:	4413      	add	r3, r2
 801cd72:	781b      	ldrb	r3, [r3, #0]
 801cd74:	2b30      	cmp	r3, #48	@ 0x30
 801cd76:	d101      	bne.n	801cd7c <isValidIPv4+0xd8>
        return false;
 801cd78:	2300      	movs	r3, #0
 801cd7a:	e005      	b.n	801cd88 <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801cd7c:	693b      	ldr	r3, [r7, #16]
 801cd7e:	2b03      	cmp	r3, #3
 801cd80:	bf0c      	ite	eq
 801cd82:	2301      	moveq	r3, #1
 801cd84:	2300      	movne	r3, #0
 801cd86:	b2db      	uxtb	r3, r3
}
 801cd88:	4618      	mov	r0, r3
 801cd8a:	3718      	adds	r7, #24
 801cd8c:	46bd      	mov	sp, r7
 801cd8e:	bd80      	pop	{r7, pc}

0801cd90 <NewMessageData>:
#include "MQTTClient.h"

#include "main.h"
#include "cmsis_os.h" // this 2 include is needed only for taskYELD() function

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801cd90:	b480      	push	{r7}
 801cd92:	b085      	sub	sp, #20
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	60f8      	str	r0, [r7, #12]
 801cd98:	60b9      	str	r1, [r7, #8]
 801cd9a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	68ba      	ldr	r2, [r7, #8]
 801cda0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	687a      	ldr	r2, [r7, #4]
 801cda6:	601a      	str	r2, [r3, #0]
}
 801cda8:	bf00      	nop
 801cdaa:	3714      	adds	r7, #20
 801cdac:	46bd      	mov	sp, r7
 801cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdb2:	4770      	bx	lr

0801cdb4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801cdb4:	b480      	push	{r7}
 801cdb6:	b083      	sub	sp, #12
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cdc4:	4293      	cmp	r3, r2
 801cdc6:	d003      	beq.n	801cdd0 <getNextPacketId+0x1c>
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	3301      	adds	r3, #1
 801cdce:	e000      	b.n	801cdd2 <getNextPacketId+0x1e>
 801cdd0:	2301      	movs	r3, #1
 801cdd2:	687a      	ldr	r2, [r7, #4]
 801cdd4:	6013      	str	r3, [r2, #0]
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	681b      	ldr	r3, [r3, #0]
}
 801cdda:	4618      	mov	r0, r3
 801cddc:	370c      	adds	r7, #12
 801cdde:	46bd      	mov	sp, r7
 801cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cde4:	4770      	bx	lr

0801cde6 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801cde6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cde8:	b087      	sub	sp, #28
 801cdea:	af00      	add	r7, sp, #0
 801cdec:	60f8      	str	r0, [r7, #12]
 801cdee:	60b9      	str	r1, [r7, #8]
 801cdf0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801cdf2:	f04f 33ff 	mov.w	r3, #4294967295
 801cdf6:	617b      	str	r3, [r7, #20]
        sent = 0;
 801cdf8:	2300      	movs	r3, #0
 801cdfa:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801cdfc:	e018      	b.n	801ce30 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801cdfe:	68fb      	ldr	r3, [r7, #12]
 801ce00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ce02:	689c      	ldr	r4, [r3, #8]
 801ce04:	68fb      	ldr	r3, [r7, #12]
 801ce06:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	691a      	ldr	r2, [r3, #16]
 801ce0c:	693b      	ldr	r3, [r7, #16]
 801ce0e:	18d6      	adds	r6, r2, r3
 801ce10:	6878      	ldr	r0, [r7, #4]
 801ce12:	f000 fd17 	bl	801d844 <TimerLeftMS>
 801ce16:	4603      	mov	r3, r0
 801ce18:	68ba      	ldr	r2, [r7, #8]
 801ce1a:	4631      	mov	r1, r6
 801ce1c:	4628      	mov	r0, r5
 801ce1e:	47a0      	blx	r4
 801ce20:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801ce22:	697b      	ldr	r3, [r7, #20]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	db0e      	blt.n	801ce46 <sendPacket+0x60>
            break;
        sent += rc;
 801ce28:	693a      	ldr	r2, [r7, #16]
 801ce2a:	697b      	ldr	r3, [r7, #20]
 801ce2c:	4413      	add	r3, r2
 801ce2e:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801ce30:	693a      	ldr	r2, [r7, #16]
 801ce32:	68bb      	ldr	r3, [r7, #8]
 801ce34:	429a      	cmp	r2, r3
 801ce36:	da07      	bge.n	801ce48 <sendPacket+0x62>
 801ce38:	6878      	ldr	r0, [r7, #4]
 801ce3a:	f000 fcc1 	bl	801d7c0 <TimerIsExpired>
 801ce3e:	4603      	mov	r3, r0
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d0dc      	beq.n	801cdfe <sendPacket+0x18>
 801ce44:	e000      	b.n	801ce48 <sendPacket+0x62>
            break;
 801ce46:	bf00      	nop
    }
    if (sent == length)
 801ce48:	693a      	ldr	r2, [r7, #16]
 801ce4a:	68bb      	ldr	r3, [r7, #8]
 801ce4c:	429a      	cmp	r2, r3
 801ce4e:	d10b      	bne.n	801ce68 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	699b      	ldr	r3, [r3, #24]
 801ce5a:	4619      	mov	r1, r3
 801ce5c:	4610      	mov	r0, r2
 801ce5e:	f000 fcd9 	bl	801d814 <TimerCountdown>
        rc = SUCCESSS;
 801ce62:	2300      	movs	r3, #0
 801ce64:	617b      	str	r3, [r7, #20]
 801ce66:	e002      	b.n	801ce6e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801ce68:	f04f 33ff 	mov.w	r3, #4294967295
 801ce6c:	617b      	str	r3, [r7, #20]
    return rc;
 801ce6e:	697b      	ldr	r3, [r7, #20]
}
 801ce70:	4618      	mov	r0, r3
 801ce72:	371c      	adds	r7, #28
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce78 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b086      	sub	sp, #24
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	60f8      	str	r0, [r7, #12]
 801ce80:	60b9      	str	r1, [r7, #8]
 801ce82:	607a      	str	r2, [r7, #4]
 801ce84:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	68ba      	ldr	r2, [r7, #8]
 801ce8a:	651a      	str	r2, [r3, #80]	@ 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	617b      	str	r3, [r7, #20]
 801ce90:	e009      	b.n	801cea6 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801ce92:	68fa      	ldr	r2, [r7, #12]
 801ce94:	697b      	ldr	r3, [r7, #20]
 801ce96:	3304      	adds	r3, #4
 801ce98:	00db      	lsls	r3, r3, #3
 801ce9a:	4413      	add	r3, r2
 801ce9c:	2200      	movs	r2, #0
 801ce9e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cea0:	697b      	ldr	r3, [r7, #20]
 801cea2:	3301      	adds	r3, #1
 801cea4:	617b      	str	r3, [r7, #20]
 801cea6:	697b      	ldr	r3, [r7, #20]
 801cea8:	2b04      	cmp	r3, #4
 801ceaa:	ddf2      	ble.n	801ce92 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801ceac:	68fb      	ldr	r3, [r7, #12]
 801ceae:	687a      	ldr	r2, [r7, #4]
 801ceb0:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801ceb2:	68fb      	ldr	r3, [r7, #12]
 801ceb4:	683a      	ldr	r2, [r7, #0]
 801ceb6:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	6a3a      	ldr	r2, [r7, #32]
 801cebc:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cec2:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cec8:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	2200      	movs	r2, #0
 801cece:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801ced0:	68fb      	ldr	r3, [r7, #12]
 801ced2:	2200      	movs	r2, #0
 801ced4:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	2200      	movs	r2, #0
 801ceda:	64da      	str	r2, [r3, #76]	@ 0x4c
	c->next_packetid = 1;
 801cedc:	68fb      	ldr	r3, [r7, #12]
 801cede:	2201      	movs	r2, #1
 801cee0:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801cee2:	68fb      	ldr	r3, [r7, #12]
 801cee4:	3354      	adds	r3, #84	@ 0x54
 801cee6:	4618      	mov	r0, r3
 801cee8:	f000 fc5c 	bl	801d7a4 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801ceec:	bf00      	nop
 801ceee:	3718      	adds	r7, #24
 801cef0:	46bd      	mov	sp, r7
 801cef2:	bd80      	pop	{r7, pc}

0801cef4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801cef4:	b590      	push	{r4, r7, lr}
 801cef6:	b08b      	sub	sp, #44	@ 0x2c
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	60f8      	str	r0, [r7, #12]
 801cefc:	60b9      	str	r1, [r7, #8]
 801cefe:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801cf00:	2301      	movs	r3, #1
 801cf02:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 801cf04:	2300      	movs	r3, #0
 801cf06:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801cf08:	2304      	movs	r3, #4
 801cf0a:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801cf0c:	68bb      	ldr	r3, [r7, #8]
 801cf0e:	2200      	movs	r2, #0
 801cf10:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801cf12:	f04f 33ff 	mov.w	r3, #4294967295
 801cf16:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801cf18:	6a3b      	ldr	r3, [r7, #32]
 801cf1a:	3301      	adds	r3, #1
 801cf1c:	623b      	str	r3, [r7, #32]
 801cf1e:	6a3a      	ldr	r2, [r7, #32]
 801cf20:	69fb      	ldr	r3, [r7, #28]
 801cf22:	429a      	cmp	r2, r3
 801cf24:	dd03      	ble.n	801cf2e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801cf26:	f04f 33ff 	mov.w	r3, #4294967295
 801cf2a:	61bb      	str	r3, [r7, #24]
            goto exit;
 801cf2c:	e021      	b.n	801cf72 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cf32:	685c      	ldr	r4, [r3, #4]
 801cf34:	68fb      	ldr	r3, [r7, #12]
 801cf36:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801cf38:	f107 0117 	add.w	r1, r7, #23
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	2201      	movs	r2, #1
 801cf40:	47a0      	blx	r4
 801cf42:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801cf44:	69bb      	ldr	r3, [r7, #24]
 801cf46:	2b01      	cmp	r3, #1
 801cf48:	d112      	bne.n	801cf70 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801cf4a:	68bb      	ldr	r3, [r7, #8]
 801cf4c:	681a      	ldr	r2, [r3, #0]
 801cf4e:	7dfb      	ldrb	r3, [r7, #23]
 801cf50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cf54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cf56:	fb01 f303 	mul.w	r3, r1, r3
 801cf5a:	441a      	add	r2, r3
 801cf5c:	68bb      	ldr	r3, [r7, #8]
 801cf5e:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801cf60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf62:	01db      	lsls	r3, r3, #7
 801cf64:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 801cf66:	7dfb      	ldrb	r3, [r7, #23]
 801cf68:	b25b      	sxtb	r3, r3
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	dbd1      	blt.n	801cf12 <decodePacket+0x1e>
exit:
 801cf6e:	e000      	b.n	801cf72 <decodePacket+0x7e>
            goto exit;
 801cf70:	bf00      	nop
    return len;
 801cf72:	6a3b      	ldr	r3, [r7, #32]
}
 801cf74:	4618      	mov	r0, r3
 801cf76:	372c      	adds	r7, #44	@ 0x2c
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bd90      	pop	{r4, r7, pc}

0801cf7c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801cf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf7e:	b089      	sub	sp, #36	@ 0x24
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	60f8      	str	r0, [r7, #12]
 801cf84:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801cf86:	f04f 33ff 	mov.w	r3, #4294967295
 801cf8a:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	617b      	str	r3, [r7, #20]
    int len = 0;
 801cf90:	2300      	movs	r3, #0
 801cf92:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801cf94:	2300      	movs	r3, #0
 801cf96:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cf9c:	685c      	ldr	r4, [r3, #4]
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	695e      	ldr	r6, [r3, #20]
 801cfa6:	68b8      	ldr	r0, [r7, #8]
 801cfa8:	f000 fc4c 	bl	801d844 <TimerLeftMS>
 801cfac:	4603      	mov	r3, r0
 801cfae:	2201      	movs	r2, #1
 801cfb0:	4631      	mov	r1, r6
 801cfb2:	4628      	mov	r0, r5
 801cfb4:	47a0      	blx	r4
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	2b01      	cmp	r3, #1
 801cfba:	d13b      	bne.n	801d034 <readPacket+0xb8>
        goto exit;

    len = 1;
 801cfbc:	2301      	movs	r3, #1
 801cfbe:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801cfc0:	68b8      	ldr	r0, [r7, #8]
 801cfc2:	f000 fc3f 	bl	801d844 <TimerLeftMS>
 801cfc6:	4602      	mov	r2, r0
 801cfc8:	f107 0310 	add.w	r3, r7, #16
 801cfcc:	4619      	mov	r1, r3
 801cfce:	68f8      	ldr	r0, [r7, #12]
 801cfd0:	f7ff ff90 	bl	801cef4 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	695b      	ldr	r3, [r3, #20]
 801cfd8:	3301      	adds	r3, #1
 801cfda:	693a      	ldr	r2, [r7, #16]
 801cfdc:	4611      	mov	r1, r2
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f000 ffa4 	bl	801df2c <MQTTPacket_encode>
 801cfe4:	4602      	mov	r2, r0
 801cfe6:	69bb      	ldr	r3, [r7, #24]
 801cfe8:	4413      	add	r3, r2
 801cfea:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801cfec:	693b      	ldr	r3, [r7, #16]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	dd16      	ble.n	801d020 <readPacket+0xa4>
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cff6:	685c      	ldr	r4, [r3, #4]
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 801cffc:	68fb      	ldr	r3, [r7, #12]
 801cffe:	695a      	ldr	r2, [r3, #20]
 801d000:	69bb      	ldr	r3, [r7, #24]
 801d002:	18d6      	adds	r6, r2, r3
 801d004:	693b      	ldr	r3, [r7, #16]
 801d006:	607b      	str	r3, [r7, #4]
 801d008:	68b8      	ldr	r0, [r7, #8]
 801d00a:	f000 fc1b 	bl	801d844 <TimerLeftMS>
 801d00e:	4603      	mov	r3, r0
 801d010:	687a      	ldr	r2, [r7, #4]
 801d012:	4631      	mov	r1, r6
 801d014:	4628      	mov	r0, r5
 801d016:	47a0      	blx	r4
 801d018:	4602      	mov	r2, r0
 801d01a:	693b      	ldr	r3, [r7, #16]
 801d01c:	429a      	cmp	r2, r3
 801d01e:	d10b      	bne.n	801d038 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	695b      	ldr	r3, [r3, #20]
 801d024:	781b      	ldrb	r3, [r3, #0]
 801d026:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801d028:	7d3b      	ldrb	r3, [r7, #20]
 801d02a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801d02e:	b2db      	uxtb	r3, r3
 801d030:	61fb      	str	r3, [r7, #28]
 801d032:	e002      	b.n	801d03a <readPacket+0xbe>
        goto exit;
 801d034:	bf00      	nop
 801d036:	e000      	b.n	801d03a <readPacket+0xbe>
        goto exit;
 801d038:	bf00      	nop
exit:
    return rc;
 801d03a:	69fb      	ldr	r3, [r7, #28]
}
 801d03c:	4618      	mov	r0, r3
 801d03e:	3724      	adds	r7, #36	@ 0x24
 801d040:	46bd      	mov	sp, r7
 801d042:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d044 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801d044:	b480      	push	{r7}
 801d046:	b087      	sub	sp, #28
 801d048:	af00      	add	r7, sp, #0
 801d04a:	6078      	str	r0, [r7, #4]
 801d04c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801d052:	683b      	ldr	r3, [r7, #0]
 801d054:	689b      	ldr	r3, [r3, #8]
 801d056:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801d058:	683b      	ldr	r3, [r7, #0]
 801d05a:	685b      	ldr	r3, [r3, #4]
 801d05c:	461a      	mov	r2, r3
 801d05e:	693b      	ldr	r3, [r7, #16]
 801d060:	4413      	add	r3, r2
 801d062:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801d064:	e039      	b.n	801d0da <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801d066:	693b      	ldr	r3, [r7, #16]
 801d068:	781b      	ldrb	r3, [r3, #0]
 801d06a:	2b2f      	cmp	r3, #47	@ 0x2f
 801d06c:	d103      	bne.n	801d076 <isTopicMatched+0x32>
 801d06e:	697b      	ldr	r3, [r7, #20]
 801d070:	781b      	ldrb	r3, [r3, #0]
 801d072:	2b2f      	cmp	r3, #47	@ 0x2f
 801d074:	d13a      	bne.n	801d0ec <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801d076:	697b      	ldr	r3, [r7, #20]
 801d078:	781b      	ldrb	r3, [r3, #0]
 801d07a:	2b2b      	cmp	r3, #43	@ 0x2b
 801d07c:	d009      	beq.n	801d092 <isTopicMatched+0x4e>
 801d07e:	697b      	ldr	r3, [r7, #20]
 801d080:	781b      	ldrb	r3, [r3, #0]
 801d082:	2b23      	cmp	r3, #35	@ 0x23
 801d084:	d005      	beq.n	801d092 <isTopicMatched+0x4e>
 801d086:	697b      	ldr	r3, [r7, #20]
 801d088:	781a      	ldrb	r2, [r3, #0]
 801d08a:	693b      	ldr	r3, [r7, #16]
 801d08c:	781b      	ldrb	r3, [r3, #0]
 801d08e:	429a      	cmp	r2, r3
 801d090:	d12e      	bne.n	801d0f0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801d092:	697b      	ldr	r3, [r7, #20]
 801d094:	781b      	ldrb	r3, [r3, #0]
 801d096:	2b2b      	cmp	r3, #43	@ 0x2b
 801d098:	d112      	bne.n	801d0c0 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801d09a:	693b      	ldr	r3, [r7, #16]
 801d09c:	3301      	adds	r3, #1
 801d09e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801d0a0:	e005      	b.n	801d0ae <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801d0a2:	693b      	ldr	r3, [r7, #16]
 801d0a4:	3301      	adds	r3, #1
 801d0a6:	613b      	str	r3, [r7, #16]
 801d0a8:	693b      	ldr	r3, [r7, #16]
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801d0ae:	68fa      	ldr	r2, [r7, #12]
 801d0b0:	68bb      	ldr	r3, [r7, #8]
 801d0b2:	429a      	cmp	r2, r3
 801d0b4:	d20b      	bcs.n	801d0ce <isTopicMatched+0x8a>
 801d0b6:	68fb      	ldr	r3, [r7, #12]
 801d0b8:	781b      	ldrb	r3, [r3, #0]
 801d0ba:	2b2f      	cmp	r3, #47	@ 0x2f
 801d0bc:	d1f1      	bne.n	801d0a2 <isTopicMatched+0x5e>
 801d0be:	e006      	b.n	801d0ce <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801d0c0:	697b      	ldr	r3, [r7, #20]
 801d0c2:	781b      	ldrb	r3, [r3, #0]
 801d0c4:	2b23      	cmp	r3, #35	@ 0x23
 801d0c6:	d102      	bne.n	801d0ce <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801d0c8:	68bb      	ldr	r3, [r7, #8]
 801d0ca:	3b01      	subs	r3, #1
 801d0cc:	613b      	str	r3, [r7, #16]
        curf++;
 801d0ce:	697b      	ldr	r3, [r7, #20]
 801d0d0:	3301      	adds	r3, #1
 801d0d2:	617b      	str	r3, [r7, #20]
        curn++;
 801d0d4:	693b      	ldr	r3, [r7, #16]
 801d0d6:	3301      	adds	r3, #1
 801d0d8:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801d0da:	697b      	ldr	r3, [r7, #20]
 801d0dc:	781b      	ldrb	r3, [r3, #0]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d007      	beq.n	801d0f2 <isTopicMatched+0xae>
 801d0e2:	693a      	ldr	r2, [r7, #16]
 801d0e4:	68bb      	ldr	r3, [r7, #8]
 801d0e6:	429a      	cmp	r2, r3
 801d0e8:	d3bd      	bcc.n	801d066 <isTopicMatched+0x22>
 801d0ea:	e002      	b.n	801d0f2 <isTopicMatched+0xae>
            break;
 801d0ec:	bf00      	nop
 801d0ee:	e000      	b.n	801d0f2 <isTopicMatched+0xae>
            break;
 801d0f0:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801d0f2:	693a      	ldr	r2, [r7, #16]
 801d0f4:	68bb      	ldr	r3, [r7, #8]
 801d0f6:	429a      	cmp	r2, r3
 801d0f8:	d105      	bne.n	801d106 <isTopicMatched+0xc2>
 801d0fa:	697b      	ldr	r3, [r7, #20]
 801d0fc:	781b      	ldrb	r3, [r3, #0]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d101      	bne.n	801d106 <isTopicMatched+0xc2>
 801d102:	2301      	movs	r3, #1
 801d104:	e000      	b.n	801d108 <isTopicMatched+0xc4>
 801d106:	2300      	movs	r3, #0
 801d108:	b2db      	uxtb	r3, r3
}
 801d10a:	4618      	mov	r0, r3
 801d10c:	371c      	adds	r7, #28
 801d10e:	46bd      	mov	sp, r7
 801d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d114:	4770      	bx	lr

0801d116 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801d116:	b580      	push	{r7, lr}
 801d118:	b08a      	sub	sp, #40	@ 0x28
 801d11a:	af00      	add	r7, sp, #0
 801d11c:	60f8      	str	r0, [r7, #12]
 801d11e:	60b9      	str	r1, [r7, #8]
 801d120:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801d122:	f04f 33ff 	mov.w	r3, #4294967295
 801d126:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d128:	2300      	movs	r3, #0
 801d12a:	627b      	str	r3, [r7, #36]	@ 0x24
 801d12c:	e03f      	b.n	801d1ae <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d12e:	68fa      	ldr	r2, [r7, #12]
 801d130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d132:	3304      	adds	r3, #4
 801d134:	00db      	lsls	r3, r3, #3
 801d136:	4413      	add	r3, r2
 801d138:	685b      	ldr	r3, [r3, #4]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d034      	beq.n	801d1a8 <deliverMessage+0x92>
 801d13e:	68fa      	ldr	r2, [r7, #12]
 801d140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d142:	3304      	adds	r3, #4
 801d144:	00db      	lsls	r3, r3, #3
 801d146:	4413      	add	r3, r2
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	4619      	mov	r1, r3
 801d14c:	68b8      	ldr	r0, [r7, #8]
 801d14e:	f001 f8bd 	bl	801e2cc <MQTTPacket_equals>
 801d152:	4603      	mov	r3, r0
 801d154:	2b00      	cmp	r3, #0
 801d156:	d10c      	bne.n	801d172 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801d158:	68fa      	ldr	r2, [r7, #12]
 801d15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d15c:	3304      	adds	r3, #4
 801d15e:	00db      	lsls	r3, r3, #3
 801d160:	4413      	add	r3, r2
 801d162:	685b      	ldr	r3, [r3, #4]
 801d164:	68b9      	ldr	r1, [r7, #8]
 801d166:	4618      	mov	r0, r3
 801d168:	f7ff ff6c 	bl	801d044 <isTopicMatched>
 801d16c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d01a      	beq.n	801d1a8 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801d172:	68fa      	ldr	r2, [r7, #12]
 801d174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d176:	3304      	adds	r3, #4
 801d178:	00db      	lsls	r3, r3, #3
 801d17a:	4413      	add	r3, r2
 801d17c:	689b      	ldr	r3, [r3, #8]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d012      	beq.n	801d1a8 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801d182:	f107 0318 	add.w	r3, r7, #24
 801d186:	687a      	ldr	r2, [r7, #4]
 801d188:	68b9      	ldr	r1, [r7, #8]
 801d18a:	4618      	mov	r0, r3
 801d18c:	f7ff fe00 	bl	801cd90 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801d190:	68fa      	ldr	r2, [r7, #12]
 801d192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d194:	3304      	adds	r3, #4
 801d196:	00db      	lsls	r3, r3, #3
 801d198:	4413      	add	r3, r2
 801d19a:	689b      	ldr	r3, [r3, #8]
 801d19c:	f107 0218 	add.w	r2, r7, #24
 801d1a0:	4610      	mov	r0, r2
 801d1a2:	4798      	blx	r3
                rc = SUCCESSS;
 801d1a4:	2300      	movs	r3, #0
 801d1a6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1aa:	3301      	adds	r3, #1
 801d1ac:	627b      	str	r3, [r7, #36]	@ 0x24
 801d1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d1b0:	2b04      	cmp	r3, #4
 801d1b2:	ddbc      	ble.n	801d12e <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801d1b4:	6a3b      	ldr	r3, [r7, #32]
 801d1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d1ba:	d112      	bne.n	801d1e2 <deliverMessage+0xcc>
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d00e      	beq.n	801d1e2 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801d1c4:	f107 0310 	add.w	r3, r7, #16
 801d1c8:	687a      	ldr	r2, [r7, #4]
 801d1ca:	68b9      	ldr	r1, [r7, #8]
 801d1cc:	4618      	mov	r0, r3
 801d1ce:	f7ff fddf 	bl	801cd90 <NewMessageData>
        c->defaultMessageHandler(&md);
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d1d6:	f107 0210 	add.w	r2, r7, #16
 801d1da:	4610      	mov	r0, r2
 801d1dc:	4798      	blx	r3
        rc = SUCCESSS;
 801d1de:	2300      	movs	r3, #0
 801d1e0:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801d1e2:	6a3b      	ldr	r3, [r7, #32]
}
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	3728      	adds	r7, #40	@ 0x28
 801d1e8:	46bd      	mov	sp, r7
 801d1ea:	bd80      	pop	{r7, pc}

0801d1ec <keepalive>:


int keepalive(MQTTClient* c)
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b086      	sub	sp, #24
 801d1f0:	af00      	add	r7, sp, #0
 801d1f2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801d1f4:	f04f 33ff 	mov.w	r3, #4294967295
 801d1f8:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	699b      	ldr	r3, [r3, #24]
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d102      	bne.n	801d208 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801d202:	2300      	movs	r3, #0
 801d204:	617b      	str	r3, [r7, #20]
        goto exit;
 801d206:	e033      	b.n	801d270 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	3354      	adds	r3, #84	@ 0x54
 801d20c:	4618      	mov	r0, r3
 801d20e:	f000 fad7 	bl	801d7c0 <TimerIsExpired>
 801d212:	4603      	mov	r3, r0
 801d214:	2b00      	cmp	r3, #0
 801d216:	d02a      	beq.n	801d26e <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	7f1b      	ldrb	r3, [r3, #28]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d126      	bne.n	801d26e <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801d220:	f107 0308 	add.w	r3, r7, #8
 801d224:	4618      	mov	r0, r3
 801d226:	f000 fabd 	bl	801d7a4 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801d22a:	f107 0308 	add.w	r3, r7, #8
 801d22e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d232:	4618      	mov	r0, r3
 801d234:	f000 fada 	bl	801d7ec <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	691a      	ldr	r2, [r3, #16]
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	689b      	ldr	r3, [r3, #8]
 801d240:	4619      	mov	r1, r3
 801d242:	4610      	mov	r0, r2
 801d244:	f000 fda6 	bl	801dd94 <MQTTSerialize_pingreq>
 801d248:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801d24a:	693b      	ldr	r3, [r7, #16]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	dd0f      	ble.n	801d270 <keepalive+0x84>
 801d250:	f107 0308 	add.w	r3, r7, #8
 801d254:	461a      	mov	r2, r3
 801d256:	6939      	ldr	r1, [r7, #16]
 801d258:	6878      	ldr	r0, [r7, #4]
 801d25a:	f7ff fdc4 	bl	801cde6 <sendPacket>
 801d25e:	6178      	str	r0, [r7, #20]
 801d260:	697b      	ldr	r3, [r7, #20]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d104      	bne.n	801d270 <keepalive+0x84>
                c->ping_outstanding = 1;
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	2201      	movs	r2, #1
 801d26a:	771a      	strb	r2, [r3, #28]
 801d26c:	e000      	b.n	801d270 <keepalive+0x84>
        }
    }

exit:
 801d26e:	bf00      	nop
    return rc;
 801d270:	697b      	ldr	r3, [r7, #20]
}
 801d272:	4618      	mov	r0, r3
 801d274:	3718      	adds	r7, #24
 801d276:	46bd      	mov	sp, r7
 801d278:	bd80      	pop	{r7, pc}
	...

0801d27c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801d27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d27e:	b095      	sub	sp, #84	@ 0x54
 801d280:	af06      	add	r7, sp, #24
 801d282:	6078      	str	r0, [r7, #4]
 801d284:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801d286:	6839      	ldr	r1, [r7, #0]
 801d288:	6878      	ldr	r0, [r7, #4]
 801d28a:	f7ff fe77 	bl	801cf7c <readPacket>
 801d28e:	4603      	mov	r3, r0
 801d290:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    int len = 0,
 801d292:	2300      	movs	r3, #0
 801d294:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = SUCCESSS;
 801d296:	2300      	movs	r3, #0
 801d298:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (packet_type)
 801d29a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d29c:	3b02      	subs	r3, #2
 801d29e:	2b0b      	cmp	r3, #11
 801d2a0:	f200 80c0 	bhi.w	801d424 <cycle+0x1a8>
 801d2a4:	a201      	add	r2, pc, #4	@ (adr r2, 801d2ac <cycle+0x30>)
 801d2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d2aa:	bf00      	nop
 801d2ac:	0801d425 	.word	0x0801d425
 801d2b0:	0801d2dd 	.word	0x0801d2dd
 801d2b4:	0801d425 	.word	0x0801d425
 801d2b8:	0801d3a5 	.word	0x0801d3a5
 801d2bc:	0801d425 	.word	0x0801d425
 801d2c0:	0801d425 	.word	0x0801d425
 801d2c4:	0801d425 	.word	0x0801d425
 801d2c8:	0801d425 	.word	0x0801d425
 801d2cc:	0801d425 	.word	0x0801d425
 801d2d0:	0801d425 	.word	0x0801d425
 801d2d4:	0801d425 	.word	0x0801d425
 801d2d8:	0801d417 	.word	0x0801d417
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801d2e0:	687a      	ldr	r2, [r7, #4]
 801d2e2:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d2e4:	4616      	mov	r6, r2
 801d2e6:	f107 0210 	add.w	r2, r7, #16
 801d2ea:	1d15      	adds	r5, r2, #4
 801d2ec:	f107 0210 	add.w	r2, r7, #16
 801d2f0:	1c54      	adds	r4, r2, #1
 801d2f2:	f107 010c 	add.w	r1, r7, #12
 801d2f6:	f107 0210 	add.w	r2, r7, #16
 801d2fa:	1c90      	adds	r0, r2, #2
 801d2fc:	9604      	str	r6, [sp, #16]
 801d2fe:	9303      	str	r3, [sp, #12]
 801d300:	f107 0310 	add.w	r3, r7, #16
 801d304:	330c      	adds	r3, #12
 801d306:	9302      	str	r3, [sp, #8]
 801d308:	f107 0310 	add.w	r3, r7, #16
 801d30c:	3308      	adds	r3, #8
 801d30e:	9301      	str	r3, [sp, #4]
 801d310:	f107 0320 	add.w	r3, r7, #32
 801d314:	9300      	str	r3, [sp, #0]
 801d316:	462b      	mov	r3, r5
 801d318:	4622      	mov	r2, r4
 801d31a:	f000 fd4a 	bl	801ddb2 <MQTTDeserialize_publish>
 801d31e:	4603      	mov	r3, r0
 801d320:	2b01      	cmp	r3, #1
 801d322:	f040 8083 	bne.w	801d42c <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	b2db      	uxtb	r3, r3
 801d32a:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801d32c:	f107 0210 	add.w	r2, r7, #16
 801d330:	f107 0320 	add.w	r3, r7, #32
 801d334:	4619      	mov	r1, r3
 801d336:	6878      	ldr	r0, [r7, #4]
 801d338:	f7ff feed 	bl	801d116 <deliverMessage>
            if (msg.qos != QOS0)
 801d33c:	7c3b      	ldrb	r3, [r7, #16]
 801d33e:	2b00      	cmp	r3, #0
 801d340:	d06d      	beq.n	801d41e <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801d342:	7c3b      	ldrb	r3, [r7, #16]
 801d344:	2b01      	cmp	r3, #1
 801d346:	d10c      	bne.n	801d362 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	6918      	ldr	r0, [r3, #16]
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	689b      	ldr	r3, [r3, #8]
 801d350:	4619      	mov	r1, r3
 801d352:	8abb      	ldrh	r3, [r7, #20]
 801d354:	9300      	str	r3, [sp, #0]
 801d356:	2300      	movs	r3, #0
 801d358:	2204      	movs	r2, #4
 801d35a:	f001 f884 	bl	801e466 <MQTTSerialize_ack>
 801d35e:	6378      	str	r0, [r7, #52]	@ 0x34
 801d360:	e00e      	b.n	801d380 <cycle+0x104>
                else if (msg.qos == QOS2)
 801d362:	7c3b      	ldrb	r3, [r7, #16]
 801d364:	2b02      	cmp	r3, #2
 801d366:	d10b      	bne.n	801d380 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	6918      	ldr	r0, [r3, #16]
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	689b      	ldr	r3, [r3, #8]
 801d370:	4619      	mov	r1, r3
 801d372:	8abb      	ldrh	r3, [r7, #20]
 801d374:	9300      	str	r3, [sp, #0]
 801d376:	2300      	movs	r3, #0
 801d378:	2205      	movs	r2, #5
 801d37a:	f001 f874 	bl	801e466 <MQTTSerialize_ack>
 801d37e:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 801d380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d382:	2b00      	cmp	r3, #0
 801d384:	dc03      	bgt.n	801d38e <cycle+0x112>
                    rc = FAILURE;
 801d386:	f04f 33ff 	mov.w	r3, #4294967295
 801d38a:	633b      	str	r3, [r7, #48]	@ 0x30
 801d38c:	e005      	b.n	801d39a <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801d38e:	683a      	ldr	r2, [r7, #0]
 801d390:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d392:	6878      	ldr	r0, [r7, #4]
 801d394:	f7ff fd27 	bl	801cde6 <sendPacket>
 801d398:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 801d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3a0:	d13d      	bne.n	801d41e <cycle+0x1a2>
                    goto exit; // there was a problem
 801d3a2:	e044      	b.n	801d42e <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	695c      	ldr	r4, [r3, #20]
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	68db      	ldr	r3, [r3, #12]
 801d3ac:	f107 020a 	add.w	r2, r7, #10
 801d3b0:	f107 0109 	add.w	r1, r7, #9
 801d3b4:	f107 0008 	add.w	r0, r7, #8
 801d3b8:	9300      	str	r3, [sp, #0]
 801d3ba:	4623      	mov	r3, r4
 801d3bc:	f000 fd6b 	bl	801de96 <MQTTDeserialize_ack>
 801d3c0:	4603      	mov	r3, r0
 801d3c2:	2b01      	cmp	r3, #1
 801d3c4:	d003      	beq.n	801d3ce <cycle+0x152>
                rc = FAILURE;
 801d3c6:	f04f 33ff 	mov.w	r3, #4294967295
 801d3ca:	633b      	str	r3, [r7, #48]	@ 0x30
 801d3cc:	e01e      	b.n	801d40c <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	6918      	ldr	r0, [r3, #16]
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	689b      	ldr	r3, [r3, #8]
 801d3d6:	4619      	mov	r1, r3
 801d3d8:	897b      	ldrh	r3, [r7, #10]
 801d3da:	9300      	str	r3, [sp, #0]
 801d3dc:	2300      	movs	r3, #0
 801d3de:	2206      	movs	r2, #6
 801d3e0:	f001 f841 	bl	801e466 <MQTTSerialize_ack>
 801d3e4:	6378      	str	r0, [r7, #52]	@ 0x34
 801d3e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	dc03      	bgt.n	801d3f4 <cycle+0x178>
                rc = FAILURE;
 801d3ec:	f04f 33ff 	mov.w	r3, #4294967295
 801d3f0:	633b      	str	r3, [r7, #48]	@ 0x30
 801d3f2:	e00b      	b.n	801d40c <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801d3f4:	683a      	ldr	r2, [r7, #0]
 801d3f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d3f8:	6878      	ldr	r0, [r7, #4]
 801d3fa:	f7ff fcf4 	bl	801cde6 <sendPacket>
 801d3fe:	6338      	str	r0, [r7, #48]	@ 0x30
 801d400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d402:	2b00      	cmp	r3, #0
 801d404:	d002      	beq.n	801d40c <cycle+0x190>
                rc = FAILURE; // there was a problem
 801d406:	f04f 33ff 	mov.w	r3, #4294967295
 801d40a:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 801d40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d40e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d412:	d106      	bne.n	801d422 <cycle+0x1a6>
                goto exit; // there was a problem
 801d414:	e00b      	b.n	801d42e <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	2200      	movs	r2, #0
 801d41a:	771a      	strb	r2, [r3, #28]
            break;
 801d41c:	e002      	b.n	801d424 <cycle+0x1a8>
            break;
 801d41e:	bf00      	nop
 801d420:	e000      	b.n	801d424 <cycle+0x1a8>
            break;
 801d422:	bf00      	nop
    }
    keepalive(c);
 801d424:	6878      	ldr	r0, [r7, #4]
 801d426:	f7ff fee1 	bl	801d1ec <keepalive>
 801d42a:	e000      	b.n	801d42e <cycle+0x1b2>
                goto exit;
 801d42c:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801d42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d430:	2b00      	cmp	r3, #0
 801d432:	d101      	bne.n	801d438 <cycle+0x1bc>
        rc = packet_type;
 801d434:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801d436:	633b      	str	r3, [r7, #48]	@ 0x30
    return rc;
 801d438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801d43a:	4618      	mov	r0, r3
 801d43c:	373c      	adds	r7, #60	@ 0x3c
 801d43e:	46bd      	mov	sp, r7
 801d440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d442:	bf00      	nop

0801d444 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801d444:	b580      	push	{r7, lr}
 801d446:	b086      	sub	sp, #24
 801d448:	af00      	add	r7, sp, #0
 801d44a:	60f8      	str	r0, [r7, #12]
 801d44c:	60b9      	str	r1, [r7, #8]
 801d44e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d450:	f04f 33ff 	mov.w	r3, #4294967295
 801d454:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801d456:	6878      	ldr	r0, [r7, #4]
 801d458:	f000 f9b2 	bl	801d7c0 <TimerIsExpired>
 801d45c:	4603      	mov	r3, r0
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d111      	bne.n	801d486 <waitfor+0x42>
            break; // we timed out
        taskYIELD(); //This function is needed to return management to OS during waiting time.
 801d462:	4b0c      	ldr	r3, [pc, #48]	@ (801d494 <waitfor+0x50>)
 801d464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d468:	601a      	str	r2, [r3, #0]
 801d46a:	f3bf 8f4f 	dsb	sy
 801d46e:	f3bf 8f6f 	isb	sy
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801d472:	6879      	ldr	r1, [r7, #4]
 801d474:	68f8      	ldr	r0, [r7, #12]
 801d476:	f7ff ff01 	bl	801d27c <cycle>
 801d47a:	6178      	str	r0, [r7, #20]
 801d47c:	697a      	ldr	r2, [r7, #20]
 801d47e:	68bb      	ldr	r3, [r7, #8]
 801d480:	429a      	cmp	r2, r3
 801d482:	d1e8      	bne.n	801d456 <waitfor+0x12>
 801d484:	e000      	b.n	801d488 <waitfor+0x44>
            break; // we timed out
 801d486:	bf00      	nop

    return rc;
 801d488:	697b      	ldr	r3, [r7, #20]
}
 801d48a:	4618      	mov	r0, r3
 801d48c:	3718      	adds	r7, #24
 801d48e:	46bd      	mov	sp, r7
 801d490:	bd80      	pop	{r7, pc}
 801d492:	bf00      	nop
 801d494:	e000ed04 	.word	0xe000ed04

0801d498 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d498:	b580      	push	{r7, lr}
 801d49a:	b09e      	sub	sp, #120	@ 0x78
 801d49c:	af00      	add	r7, sp, #0
 801d49e:	6078      	str	r0, [r7, #4]
 801d4a0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801d4a2:	f04f 33ff 	mov.w	r3, #4294967295
 801d4a6:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d4a8:	4a3d      	ldr	r2, [pc, #244]	@ (801d5a0 <MQTTConnect+0x108>)
 801d4aa:	f107 0310 	add.w	r3, r7, #16
 801d4ae:	4611      	mov	r1, r2
 801d4b0:	2258      	movs	r2, #88	@ 0x58
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f010 fd41 	bl	802df3a <memcpy>
    int len = 0;
 801d4b8:	2300      	movs	r3, #0
 801d4ba:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	6a1b      	ldr	r3, [r3, #32]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d15d      	bne.n	801d580 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801d4c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801d4c8:	4618      	mov	r0, r3
 801d4ca:	f000 f96b 	bl	801d7a4 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	685a      	ldr	r2, [r3, #4]
 801d4d2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801d4d6:	4611      	mov	r1, r2
 801d4d8:	4618      	mov	r0, r3
 801d4da:	f000 f987 	bl	801d7ec <TimerCountdownMS>

    if (options == 0)
 801d4de:	683b      	ldr	r3, [r7, #0]
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d102      	bne.n	801d4ea <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801d4e4:	f107 0310 	add.w	r3, r7, #16
 801d4e8:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801d4ea:	683b      	ldr	r3, [r7, #0]
 801d4ec:	8b1b      	ldrh	r3, [r3, #24]
 801d4ee:	461a      	mov	r2, r3
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801d4fa:	687b      	ldr	r3, [r7, #4]
 801d4fc:	699b      	ldr	r3, [r3, #24]
 801d4fe:	4619      	mov	r1, r3
 801d500:	4610      	mov	r0, r2
 801d502:	f000 f987 	bl	801d814 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	6918      	ldr	r0, [r3, #16]
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	689b      	ldr	r3, [r3, #8]
 801d50e:	683a      	ldr	r2, [r7, #0]
 801d510:	4619      	mov	r1, r3
 801d512:	f000 fab7 	bl	801da84 <MQTTSerialize_connect>
 801d516:	6738      	str	r0, [r7, #112]	@ 0x70
 801d518:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	dd32      	ble.n	801d584 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801d51e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801d522:	461a      	mov	r2, r3
 801d524:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801d526:	6878      	ldr	r0, [r7, #4]
 801d528:	f7ff fc5d 	bl	801cde6 <sendPacket>
 801d52c:	6778      	str	r0, [r7, #116]	@ 0x74
 801d52e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d530:	2b00      	cmp	r3, #0
 801d532:	d129      	bne.n	801d588 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801d534:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801d538:	461a      	mov	r2, r3
 801d53a:	2102      	movs	r1, #2
 801d53c:	6878      	ldr	r0, [r7, #4]
 801d53e:	f7ff ff81 	bl	801d444 <waitfor>
 801d542:	4603      	mov	r3, r0
 801d544:	2b02      	cmp	r3, #2
 801d546:	d117      	bne.n	801d578 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801d548:	23ff      	movs	r3, #255	@ 0xff
 801d54a:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801d54c:	2300      	movs	r3, #0
 801d54e:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	695a      	ldr	r2, [r3, #20]
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	68db      	ldr	r3, [r3, #12]
 801d558:	f107 010f 	add.w	r1, r7, #15
 801d55c:	f107 000e 	add.w	r0, r7, #14
 801d560:	f000 fb7c 	bl	801dc5c <MQTTDeserialize_connack>
 801d564:	4603      	mov	r3, r0
 801d566:	2b01      	cmp	r3, #1
 801d568:	d102      	bne.n	801d570 <MQTTConnect+0xd8>
            rc = connack_rc;
 801d56a:	7bfb      	ldrb	r3, [r7, #15]
 801d56c:	677b      	str	r3, [r7, #116]	@ 0x74
 801d56e:	e00c      	b.n	801d58a <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801d570:	f04f 33ff 	mov.w	r3, #4294967295
 801d574:	677b      	str	r3, [r7, #116]	@ 0x74
 801d576:	e008      	b.n	801d58a <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801d578:	f04f 33ff 	mov.w	r3, #4294967295
 801d57c:	677b      	str	r3, [r7, #116]	@ 0x74
 801d57e:	e004      	b.n	801d58a <MQTTConnect+0xf2>
		goto exit;
 801d580:	bf00      	nop
 801d582:	e002      	b.n	801d58a <MQTTConnect+0xf2>
        goto exit;
 801d584:	bf00      	nop
 801d586:	e000      	b.n	801d58a <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801d588:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801d58a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d58c:	2b00      	cmp	r3, #0
 801d58e:	d102      	bne.n	801d596 <MQTTConnect+0xfe>
        c->isconnected = 1;
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	2201      	movs	r2, #1
 801d594:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801d596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 801d598:	4618      	mov	r0, r3
 801d59a:	3778      	adds	r7, #120	@ 0x78
 801d59c:	46bd      	mov	sp, r7
 801d59e:	bd80      	pop	{r7, pc}
 801d5a0:	08032fc0 	.word	0x08032fc0

0801d5a4 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801d5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d5a6:	b097      	sub	sp, #92	@ 0x5c
 801d5a8:	af08      	add	r7, sp, #32
 801d5aa:	60f8      	str	r0, [r7, #12]
 801d5ac:	60b9      	str	r1, [r7, #8]
 801d5ae:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d5b0:	f04f 33ff 	mov.w	r3, #4294967295
 801d5b4:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	61fb      	str	r3, [r7, #28]
 801d5ba:	2300      	movs	r3, #0
 801d5bc:	623b      	str	r3, [r7, #32]
 801d5be:	2300      	movs	r3, #0
 801d5c0:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicName;
 801d5c2:	68bb      	ldr	r3, [r7, #8]
 801d5c4:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	6a1b      	ldr	r3, [r3, #32]
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	f000 809b 	beq.w	801d70a <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801d5d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f000 f8e3 	bl	801d7a4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	685a      	ldr	r2, [r3, #4]
 801d5e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801d5e6:	4611      	mov	r1, r2
 801d5e8:	4618      	mov	r0, r3
 801d5ea:	f000 f8ff 	bl	801d7ec <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	781b      	ldrb	r3, [r3, #0]
 801d5f2:	2b01      	cmp	r3, #1
 801d5f4:	d003      	beq.n	801d5fe <MQTTPublish+0x5a>
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	781b      	ldrb	r3, [r3, #0]
 801d5fa:	2b02      	cmp	r3, #2
 801d5fc:	d106      	bne.n	801d60c <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801d5fe:	68f8      	ldr	r0, [r7, #12]
 801d600:	f7ff fbd8 	bl	801cdb4 <getNextPacketId>
 801d604:	4603      	mov	r3, r0
 801d606:	b29a      	uxth	r2, r3
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	691b      	ldr	r3, [r3, #16]
 801d610:	603b      	str	r3, [r7, #0]
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	689b      	ldr	r3, [r3, #8]
 801d616:	469c      	mov	ip, r3
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	781b      	ldrb	r3, [r3, #0]
 801d61c:	469e      	mov	lr, r3
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	785d      	ldrb	r5, [r3, #1]
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	689b      	ldr	r3, [r3, #8]
 801d62a:	687a      	ldr	r2, [r7, #4]
 801d62c:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d62e:	9206      	str	r2, [sp, #24]
 801d630:	9305      	str	r3, [sp, #20]
 801d632:	ac02      	add	r4, sp, #8
 801d634:	f107 031c 	add.w	r3, r7, #28
 801d638:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d63c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d640:	9601      	str	r6, [sp, #4]
 801d642:	9500      	str	r5, [sp, #0]
 801d644:	4673      	mov	r3, lr
 801d646:	2200      	movs	r2, #0
 801d648:	4661      	mov	r1, ip
 801d64a:	6838      	ldr	r0, [r7, #0]
 801d64c:	f000 fe95 	bl	801e37a <MQTTSerialize_publish>
 801d650:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 801d652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d654:	2b00      	cmp	r3, #0
 801d656:	dd5a      	ble.n	801d70e <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801d658:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801d65c:	461a      	mov	r2, r3
 801d65e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d660:	68f8      	ldr	r0, [r7, #12]
 801d662:	f7ff fbc0 	bl	801cde6 <sendPacket>
 801d666:	6378      	str	r0, [r7, #52]	@ 0x34
 801d668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d151      	bne.n	801d712 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	781b      	ldrb	r3, [r3, #0]
 801d672:	2b01      	cmp	r3, #1
 801d674:	d122      	bne.n	801d6bc <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801d676:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801d67a:	461a      	mov	r2, r3
 801d67c:	2104      	movs	r1, #4
 801d67e:	68f8      	ldr	r0, [r7, #12]
 801d680:	f7ff fee0 	bl	801d444 <waitfor>
 801d684:	4603      	mov	r3, r0
 801d686:	2b04      	cmp	r3, #4
 801d688:	d114      	bne.n	801d6b4 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	695c      	ldr	r4, [r3, #20]
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	68db      	ldr	r3, [r3, #12]
 801d692:	f107 021a 	add.w	r2, r7, #26
 801d696:	f107 0119 	add.w	r1, r7, #25
 801d69a:	f107 0018 	add.w	r0, r7, #24
 801d69e:	9300      	str	r3, [sp, #0]
 801d6a0:	4623      	mov	r3, r4
 801d6a2:	f000 fbf8 	bl	801de96 <MQTTDeserialize_ack>
 801d6a6:	4603      	mov	r3, r0
 801d6a8:	2b01      	cmp	r3, #1
 801d6aa:	d035      	beq.n	801d718 <MQTTPublish+0x174>
                rc = FAILURE;
 801d6ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b0:	637b      	str	r3, [r7, #52]	@ 0x34
 801d6b2:	e031      	b.n	801d718 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d6b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 801d6ba:	e02d      	b.n	801d718 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	781b      	ldrb	r3, [r3, #0]
 801d6c0:	2b02      	cmp	r3, #2
 801d6c2:	d128      	bne.n	801d716 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801d6c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801d6c8:	461a      	mov	r2, r3
 801d6ca:	2107      	movs	r1, #7
 801d6cc:	68f8      	ldr	r0, [r7, #12]
 801d6ce:	f7ff feb9 	bl	801d444 <waitfor>
 801d6d2:	4603      	mov	r3, r0
 801d6d4:	2b07      	cmp	r3, #7
 801d6d6:	d114      	bne.n	801d702 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	695c      	ldr	r4, [r3, #20]
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	68db      	ldr	r3, [r3, #12]
 801d6e0:	f107 0216 	add.w	r2, r7, #22
 801d6e4:	f107 0115 	add.w	r1, r7, #21
 801d6e8:	f107 0014 	add.w	r0, r7, #20
 801d6ec:	9300      	str	r3, [sp, #0]
 801d6ee:	4623      	mov	r3, r4
 801d6f0:	f000 fbd1 	bl	801de96 <MQTTDeserialize_ack>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	2b01      	cmp	r3, #1
 801d6f8:	d00e      	beq.n	801d718 <MQTTPublish+0x174>
                rc = FAILURE;
 801d6fa:	f04f 33ff 	mov.w	r3, #4294967295
 801d6fe:	637b      	str	r3, [r7, #52]	@ 0x34
 801d700:	e00a      	b.n	801d718 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d702:	f04f 33ff 	mov.w	r3, #4294967295
 801d706:	637b      	str	r3, [r7, #52]	@ 0x34
 801d708:	e006      	b.n	801d718 <MQTTPublish+0x174>
		goto exit;
 801d70a:	bf00      	nop
 801d70c:	e004      	b.n	801d718 <MQTTPublish+0x174>
        goto exit;
 801d70e:	bf00      	nop
 801d710:	e002      	b.n	801d718 <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d712:	bf00      	nop
 801d714:	e000      	b.n	801d718 <MQTTPublish+0x174>
    }

exit:
 801d716:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801d71a:	4618      	mov	r0, r3
 801d71c:	373c      	adds	r7, #60	@ 0x3c
 801d71e:	46bd      	mov	sp, r7
 801d720:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d722 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 801d722:	b580      	push	{r7, lr}
 801d724:	b086      	sub	sp, #24
 801d726:	af00      	add	r7, sp, #0
 801d728:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801d72a:	f04f 33ff 	mov.w	r3, #4294967295
 801d72e:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 801d730:	2300      	movs	r3, #0
 801d732:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 801d734:	f107 0308 	add.w	r3, r7, #8
 801d738:	4618      	mov	r0, r3
 801d73a:	f000 f833 	bl	801d7a4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	685a      	ldr	r2, [r3, #4]
 801d742:	f107 0308 	add.w	r3, r7, #8
 801d746:	4611      	mov	r1, r2
 801d748:	4618      	mov	r0, r3
 801d74a:	f000 f84f 	bl	801d7ec <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	691a      	ldr	r2, [r3, #16]
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	689b      	ldr	r3, [r3, #8]
 801d756:	4619      	mov	r1, r3
 801d758:	4610      	mov	r0, r2
 801d75a:	f000 fb0c 	bl	801dd76 <MQTTSerialize_disconnect>
 801d75e:	6138      	str	r0, [r7, #16]
    if (len > 0)
 801d760:	693b      	ldr	r3, [r7, #16]
 801d762:	2b00      	cmp	r3, #0
 801d764:	dd07      	ble.n	801d776 <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 801d766:	f107 0308 	add.w	r3, r7, #8
 801d76a:	461a      	mov	r2, r3
 801d76c:	6939      	ldr	r1, [r7, #16]
 801d76e:	6878      	ldr	r0, [r7, #4]
 801d770:	f7ff fb39 	bl	801cde6 <sendPacket>
 801d774:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	2200      	movs	r2, #0
 801d77a:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d77c:	697b      	ldr	r3, [r7, #20]
}
 801d77e:	4618      	mov	r0, r3
 801d780:	3718      	adds	r7, #24
 801d782:	46bd      	mov	sp, r7
 801d784:	bd80      	pop	{r7, pc}
	...

0801d788 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 801d788:	b480      	push	{r7}
 801d78a:	af00      	add	r7, sp, #0
	MilliTimer++;
 801d78c:	4b04      	ldr	r3, [pc, #16]	@ (801d7a0 <MilliTimer_Handler+0x18>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	3301      	adds	r3, #1
 801d792:	4a03      	ldr	r2, [pc, #12]	@ (801d7a0 <MilliTimer_Handler+0x18>)
 801d794:	6013      	str	r3, [r2, #0]
}
 801d796:	bf00      	nop
 801d798:	46bd      	mov	sp, r7
 801d79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d79e:	4770      	bx	lr
 801d7a0:	200009f0 	.word	0x200009f0

0801d7a4 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d7a4:	b480      	push	{r7}
 801d7a6:	b083      	sub	sp, #12
 801d7a8:	af00      	add	r7, sp, #0
 801d7aa:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	605a      	str	r2, [r3, #4]
}
 801d7b2:	bf00      	nop
 801d7b4:	370c      	adds	r7, #12
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7bc:	4770      	bx	lr
	...

0801d7c0 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d7c0:	b480      	push	{r7}
 801d7c2:	b085      	sub	sp, #20
 801d7c4:	af00      	add	r7, sp, #0
 801d7c6:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	685a      	ldr	r2, [r3, #4]
 801d7cc:	4b06      	ldr	r3, [pc, #24]	@ (801d7e8 <TimerIsExpired+0x28>)
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	1ad3      	subs	r3, r2, r3
 801d7d2:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	0fdb      	lsrs	r3, r3, #31
 801d7d8:	b2db      	uxtb	r3, r3
}
 801d7da:	4618      	mov	r0, r3
 801d7dc:	3714      	adds	r7, #20
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e4:	4770      	bx	lr
 801d7e6:	bf00      	nop
 801d7e8:	200009f0 	.word	0x200009f0

0801d7ec <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d7ec:	b480      	push	{r7}
 801d7ee:	b083      	sub	sp, #12
 801d7f0:	af00      	add	r7, sp, #0
 801d7f2:	6078      	str	r0, [r7, #4]
 801d7f4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d7f6:	4b06      	ldr	r3, [pc, #24]	@ (801d810 <TimerCountdownMS+0x24>)
 801d7f8:	681a      	ldr	r2, [r3, #0]
 801d7fa:	683b      	ldr	r3, [r7, #0]
 801d7fc:	441a      	add	r2, r3
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	605a      	str	r2, [r3, #4]
}
 801d802:	bf00      	nop
 801d804:	370c      	adds	r7, #12
 801d806:	46bd      	mov	sp, r7
 801d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d80c:	4770      	bx	lr
 801d80e:	bf00      	nop
 801d810:	200009f0 	.word	0x200009f0

0801d814 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d814:	b480      	push	{r7}
 801d816:	b083      	sub	sp, #12
 801d818:	af00      	add	r7, sp, #0
 801d81a:	6078      	str	r0, [r7, #4]
 801d81c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d81e:	683b      	ldr	r3, [r7, #0]
 801d820:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d824:	fb03 f202 	mul.w	r2, r3, r2
 801d828:	4b05      	ldr	r3, [pc, #20]	@ (801d840 <TimerCountdown+0x2c>)
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	441a      	add	r2, r3
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	605a      	str	r2, [r3, #4]
}
 801d832:	bf00      	nop
 801d834:	370c      	adds	r7, #12
 801d836:	46bd      	mov	sp, r7
 801d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d83c:	4770      	bx	lr
 801d83e:	bf00      	nop
 801d840:	200009f0 	.word	0x200009f0

0801d844 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d844:	b480      	push	{r7}
 801d846:	b085      	sub	sp, #20
 801d848:	af00      	add	r7, sp, #0
 801d84a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	685a      	ldr	r2, [r3, #4]
 801d850:	4b06      	ldr	r3, [pc, #24]	@ (801d86c <TimerLeftMS+0x28>)
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	1ad3      	subs	r3, r2, r3
 801d856:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d85e:	4618      	mov	r0, r3
 801d860:	3714      	adds	r7, #20
 801d862:	46bd      	mov	sp, r7
 801d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d868:	4770      	bx	lr
 801d86a:	bf00      	nop
 801d86c:	200009f0 	.word	0x200009f0

0801d870 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d870:	b480      	push	{r7}
 801d872:	b083      	sub	sp, #12
 801d874:	af00      	add	r7, sp, #0
 801d876:	6078      	str	r0, [r7, #4]
 801d878:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	683a      	ldr	r2, [r7, #0]
 801d87e:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	4a07      	ldr	r2, [pc, #28]	@ (801d8a0 <NewNetwork+0x30>)
 801d884:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	4a06      	ldr	r2, [pc, #24]	@ (801d8a4 <NewNetwork+0x34>)
 801d88a:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	4a06      	ldr	r2, [pc, #24]	@ (801d8a8 <NewNetwork+0x38>)
 801d890:	60da      	str	r2, [r3, #12]
}
 801d892:	bf00      	nop
 801d894:	370c      	adds	r7, #12
 801d896:	46bd      	mov	sp, r7
 801d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d89c:	4770      	bx	lr
 801d89e:	bf00      	nop
 801d8a0:	0801d8ad 	.word	0x0801d8ad
 801d8a4:	0801d907 	.word	0x0801d907
 801d8a8:	0801d94f 	.word	0x0801d94f

0801d8ac <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b084      	sub	sp, #16
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	60f8      	str	r0, [r7, #12]
 801d8b4:	60b9      	str	r1, [r7, #8]
 801d8b6:	607a      	str	r2, [r7, #4]
 801d8b8:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	009b      	lsls	r3, r3, #2
 801d8c0:	3301      	adds	r3, #1
 801d8c2:	00db      	lsls	r3, r3, #3
 801d8c4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801d8c8:	4618      	mov	r0, r3
 801d8ca:	f7fb f84f 	bl	801896c <WIZCHIP_READ>
 801d8ce:	4603      	mov	r3, r0
 801d8d0:	2b17      	cmp	r3, #23
 801d8d2:	d113      	bne.n	801d8fc <w5x00_read+0x50>
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	b2db      	uxtb	r3, r3
 801d8da:	4618      	mov	r0, r3
 801d8dc:	f7fb f9e9 	bl	8018cb2 <getSn_RX_RSR>
 801d8e0:	4603      	mov	r3, r0
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d00a      	beq.n	801d8fc <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	b2db      	uxtb	r3, r3
 801d8ec:	687a      	ldr	r2, [r7, #4]
 801d8ee:	b292      	uxth	r2, r2
 801d8f0:	68b9      	ldr	r1, [r7, #8]
 801d8f2:	4618      	mov	r0, r3
 801d8f4:	f7fb ff46 	bl	8019784 <recv>
 801d8f8:	4603      	mov	r3, r0
 801d8fa:	e000      	b.n	801d8fe <w5x00_read+0x52>

	return SOCK_ERROR;
 801d8fc:	2300      	movs	r3, #0
}
 801d8fe:	4618      	mov	r0, r3
 801d900:	3710      	adds	r7, #16
 801d902:	46bd      	mov	sp, r7
 801d904:	bd80      	pop	{r7, pc}

0801d906 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d906:	b580      	push	{r7, lr}
 801d908:	b084      	sub	sp, #16
 801d90a:	af00      	add	r7, sp, #0
 801d90c:	60f8      	str	r0, [r7, #12]
 801d90e:	60b9      	str	r1, [r7, #8]
 801d910:	607a      	str	r2, [r7, #4]
 801d912:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	009b      	lsls	r3, r3, #2
 801d91a:	3301      	adds	r3, #1
 801d91c:	00db      	lsls	r3, r3, #3
 801d91e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801d922:	4618      	mov	r0, r3
 801d924:	f7fb f822 	bl	801896c <WIZCHIP_READ>
 801d928:	4603      	mov	r3, r0
 801d92a:	2b17      	cmp	r3, #23
 801d92c:	d10a      	bne.n	801d944 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	b2db      	uxtb	r3, r3
 801d934:	687a      	ldr	r2, [r7, #4]
 801d936:	b292      	uxth	r2, r2
 801d938:	68b9      	ldr	r1, [r7, #8]
 801d93a:	4618      	mov	r0, r3
 801d93c:	f7fb fe2a 	bl	8019594 <send>
 801d940:	4603      	mov	r3, r0
 801d942:	e000      	b.n	801d946 <w5x00_write+0x40>

	return SOCK_ERROR;
 801d944:	2300      	movs	r3, #0
}
 801d946:	4618      	mov	r0, r3
 801d948:	3710      	adds	r7, #16
 801d94a:	46bd      	mov	sp, r7
 801d94c:	bd80      	pop	{r7, pc}

0801d94e <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d94e:	b580      	push	{r7, lr}
 801d950:	b082      	sub	sp, #8
 801d952:	af00      	add	r7, sp, #0
 801d954:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	b2db      	uxtb	r3, r3
 801d95c:	4618      	mov	r0, r3
 801d95e:	f7fb fda3 	bl	80194a8 <disconnect>
}
 801d962:	bf00      	nop
 801d964:	3708      	adds	r7, #8
 801d966:	46bd      	mov	sp, r7
 801d968:	bd80      	pop	{r7, pc}

0801d96a <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d96a:	b580      	push	{r7, lr}
 801d96c:	b086      	sub	sp, #24
 801d96e:	af00      	add	r7, sp, #0
 801d970:	60f8      	str	r0, [r7, #12]
 801d972:	60b9      	str	r1, [r7, #8]
 801d974:	4613      	mov	r3, r2
 801d976:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d978:	f243 0339 	movw	r3, #12345	@ 0x3039
 801d97c:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	681b      	ldr	r3, [r3, #0]
 801d982:	b2d8      	uxtb	r0, r3
 801d984:	8afa      	ldrh	r2, [r7, #22]
 801d986:	2300      	movs	r3, #0
 801d988:	2101      	movs	r1, #1
 801d98a:	f7fb fad5 	bl	8018f38 <socket>
 801d98e:	4603      	mov	r3, r0
 801d990:	461a      	mov	r2, r3
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	429a      	cmp	r2, r3
 801d998:	d001      	beq.n	801d99e <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d99a:	2300      	movs	r3, #0
 801d99c:	e00d      	b.n	801d9ba <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	681b      	ldr	r3, [r3, #0]
 801d9a2:	b2db      	uxtb	r3, r3
 801d9a4:	88fa      	ldrh	r2, [r7, #6]
 801d9a6:	68b9      	ldr	r1, [r7, #8]
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	f7fb fca1 	bl	80192f0 <connect>
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	2b01      	cmp	r3, #1
 801d9b2:	d001      	beq.n	801d9b8 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	e000      	b.n	801d9ba <ConnectNetwork+0x50>

	return SOCK_OK;
 801d9b8:	2301      	movs	r3, #1
}
 801d9ba:	4618      	mov	r0, r3
 801d9bc:	3718      	adds	r7, #24
 801d9be:	46bd      	mov	sp, r7
 801d9c0:	bd80      	pop	{r7, pc}

0801d9c2 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d9c2:	b590      	push	{r4, r7, lr}
 801d9c4:	b085      	sub	sp, #20
 801d9c6:	af00      	add	r7, sp, #0
 801d9c8:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	7a1b      	ldrb	r3, [r3, #8]
 801d9d2:	2b03      	cmp	r3, #3
 801d9d4:	d102      	bne.n	801d9dc <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d9d6:	230c      	movs	r3, #12
 801d9d8:	60fb      	str	r3, [r7, #12]
 801d9da:	e005      	b.n	801d9e8 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	7a1b      	ldrb	r3, [r3, #8]
 801d9e0:	2b04      	cmp	r3, #4
 801d9e2:	d101      	bne.n	801d9e8 <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d9e4:	230a      	movs	r3, #10
 801d9e6:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	330c      	adds	r3, #12
 801d9ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d9f0:	f000 fc53 	bl	801e29a <MQTTstrlen>
 801d9f4:	4603      	mov	r3, r0
 801d9f6:	3302      	adds	r3, #2
 801d9f8:	68fa      	ldr	r2, [r7, #12]
 801d9fa:	4413      	add	r3, r2
 801d9fc:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	7edb      	ldrb	r3, [r3, #27]
 801da02:	2b00      	cmp	r3, #0
 801da04:	d013      	beq.n	801da2e <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	3324      	adds	r3, #36	@ 0x24
 801da0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801da0e:	f000 fc44 	bl	801e29a <MQTTstrlen>
 801da12:	4603      	mov	r3, r0
 801da14:	1c9c      	adds	r4, r3, #2
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	3330      	adds	r3, #48	@ 0x30
 801da1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801da1e:	f000 fc3c 	bl	801e29a <MQTTstrlen>
 801da22:	4603      	mov	r3, r0
 801da24:	4423      	add	r3, r4
 801da26:	3302      	adds	r3, #2
 801da28:	68fa      	ldr	r2, [r7, #12]
 801da2a:	4413      	add	r3, r2
 801da2c:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801da32:	2b00      	cmp	r3, #0
 801da34:	d103      	bne.n	801da3e <MQTTSerialize_connectLength+0x7c>
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801da3a:	2b00      	cmp	r3, #0
 801da3c:	d00a      	beq.n	801da54 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	3340      	adds	r3, #64	@ 0x40
 801da42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801da46:	f000 fc28 	bl	801e29a <MQTTstrlen>
 801da4a:	4603      	mov	r3, r0
 801da4c:	3302      	adds	r3, #2
 801da4e:	68fa      	ldr	r2, [r7, #12]
 801da50:	4413      	add	r3, r2
 801da52:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801da54:	687b      	ldr	r3, [r7, #4]
 801da56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d103      	bne.n	801da64 <MQTTSerialize_connectLength+0xa2>
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801da60:	2b00      	cmp	r3, #0
 801da62:	d00a      	beq.n	801da7a <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	334c      	adds	r3, #76	@ 0x4c
 801da68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801da6c:	f000 fc15 	bl	801e29a <MQTTstrlen>
 801da70:	4603      	mov	r3, r0
 801da72:	3302      	adds	r3, #2
 801da74:	68fa      	ldr	r2, [r7, #12]
 801da76:	4413      	add	r3, r2
 801da78:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801da7a:	68fb      	ldr	r3, [r7, #12]
}
 801da7c:	4618      	mov	r0, r3
 801da7e:	3714      	adds	r7, #20
 801da80:	46bd      	mov	sp, r7
 801da82:	bd90      	pop	{r4, r7, pc}

0801da84 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801da84:	b580      	push	{r7, lr}
 801da86:	b08a      	sub	sp, #40	@ 0x28
 801da88:	af00      	add	r7, sp, #0
 801da8a:	60f8      	str	r0, [r7, #12]
 801da8c:	60b9      	str	r1, [r7, #8]
 801da8e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801da94:	2300      	movs	r3, #0
 801da96:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801da98:	2300      	movs	r3, #0
 801da9a:	617b      	str	r3, [r7, #20]
	int len = 0;
 801da9c:	2300      	movs	r3, #0
 801da9e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801daa0:	f04f 33ff 	mov.w	r3, #4294967295
 801daa4:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801daa6:	6878      	ldr	r0, [r7, #4]
 801daa8:	f7ff ff8b 	bl	801d9c2 <MQTTSerialize_connectLength>
 801daac:	6238      	str	r0, [r7, #32]
 801daae:	6a38      	ldr	r0, [r7, #32]
 801dab0:	f000 faa8 	bl	801e004 <MQTTPacket_len>
 801dab4:	4602      	mov	r2, r0
 801dab6:	68bb      	ldr	r3, [r7, #8]
 801dab8:	4293      	cmp	r3, r2
 801daba:	da03      	bge.n	801dac4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801dabc:	f06f 0301 	mvn.w	r3, #1
 801dac0:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 801dac2:	e0c2      	b.n	801dc4a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801dac4:	2300      	movs	r3, #0
 801dac6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801dac8:	7e3b      	ldrb	r3, [r7, #24]
 801daca:	2201      	movs	r2, #1
 801dacc:	f362 1307 	bfi	r3, r2, #4, #4
 801dad0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801dad2:	7e3a      	ldrb	r2, [r7, #24]
 801dad4:	f107 031c 	add.w	r3, r7, #28
 801dad8:	4611      	mov	r1, r2
 801dada:	4618      	mov	r0, r3
 801dadc:	f000 fb21 	bl	801e122 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801dae0:	69fb      	ldr	r3, [r7, #28]
 801dae2:	6a39      	ldr	r1, [r7, #32]
 801dae4:	4618      	mov	r0, r3
 801dae6:	f000 fa21 	bl	801df2c <MQTTPacket_encode>
 801daea:	4602      	mov	r2, r0
 801daec:	69fb      	ldr	r3, [r7, #28]
 801daee:	4413      	add	r3, r2
 801daf0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	7a1b      	ldrb	r3, [r3, #8]
 801daf6:	2b04      	cmp	r3, #4
 801daf8:	d10c      	bne.n	801db14 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801dafa:	f107 031c 	add.w	r3, r7, #28
 801dafe:	4955      	ldr	r1, [pc, #340]	@ (801dc54 <MQTTSerialize_connect+0x1d0>)
 801db00:	4618      	mov	r0, r3
 801db02:	f000 fb4c 	bl	801e19e <writeCString>
		writeChar(&ptr, (char) 4);
 801db06:	f107 031c 	add.w	r3, r7, #28
 801db0a:	2104      	movs	r1, #4
 801db0c:	4618      	mov	r0, r3
 801db0e:	f000 fb08 	bl	801e122 <writeChar>
 801db12:	e00b      	b.n	801db2c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801db14:	f107 031c 	add.w	r3, r7, #28
 801db18:	494f      	ldr	r1, [pc, #316]	@ (801dc58 <MQTTSerialize_connect+0x1d4>)
 801db1a:	4618      	mov	r0, r3
 801db1c:	f000 fb3f 	bl	801e19e <writeCString>
		writeChar(&ptr, (char) 3);
 801db20:	f107 031c 	add.w	r3, r7, #28
 801db24:	2103      	movs	r1, #3
 801db26:	4618      	mov	r0, r3
 801db28:	f000 fafb 	bl	801e122 <writeChar>
	}

	flags.all = 0;
 801db2c:	2300      	movs	r3, #0
 801db2e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	7e9b      	ldrb	r3, [r3, #26]
 801db34:	f003 0301 	and.w	r3, r3, #1
 801db38:	b2da      	uxtb	r2, r3
 801db3a:	7d3b      	ldrb	r3, [r7, #20]
 801db3c:	f362 0341 	bfi	r3, r2, #1, #1
 801db40:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	7edb      	ldrb	r3, [r3, #27]
 801db46:	2b00      	cmp	r3, #0
 801db48:	bf14      	ite	ne
 801db4a:	2301      	movne	r3, #1
 801db4c:	2300      	moveq	r3, #0
 801db4e:	b2da      	uxtb	r2, r3
 801db50:	7d3b      	ldrb	r3, [r7, #20]
 801db52:	f362 0382 	bfi	r3, r2, #2, #1
 801db56:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801db58:	7d3b      	ldrb	r3, [r7, #20]
 801db5a:	f003 0304 	and.w	r3, r3, #4
 801db5e:	b2db      	uxtb	r3, r3
 801db60:	2b00      	cmp	r3, #0
 801db62:	d013      	beq.n	801db8c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801db6a:	f003 0303 	and.w	r3, r3, #3
 801db6e:	b2da      	uxtb	r2, r3
 801db70:	7d3b      	ldrb	r3, [r7, #20]
 801db72:	f362 03c4 	bfi	r3, r2, #3, #2
 801db76:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801db7e:	f003 0301 	and.w	r3, r3, #1
 801db82:	b2da      	uxtb	r2, r3
 801db84:	7d3b      	ldrb	r3, [r7, #20]
 801db86:	f362 1345 	bfi	r3, r2, #5, #1
 801db8a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801db90:	2b00      	cmp	r3, #0
 801db92:	d103      	bne.n	801db9c <MQTTSerialize_connect+0x118>
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d003      	beq.n	801dba4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801db9c:	7d3b      	ldrb	r3, [r7, #20]
 801db9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dba2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	d103      	bne.n	801dbb4 <MQTTSerialize_connect+0x130>
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d003      	beq.n	801dbbc <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801dbb4:	7d3b      	ldrb	r3, [r7, #20]
 801dbb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dbba:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801dbbc:	7d3a      	ldrb	r2, [r7, #20]
 801dbbe:	f107 031c 	add.w	r3, r7, #28
 801dbc2:	4611      	mov	r1, r2
 801dbc4:	4618      	mov	r0, r3
 801dbc6:	f000 faac 	bl	801e122 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	8b1b      	ldrh	r3, [r3, #24]
 801dbce:	461a      	mov	r2, r3
 801dbd0:	f107 031c 	add.w	r3, r7, #28
 801dbd4:	4611      	mov	r1, r2
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	f000 fab8 	bl	801e14c <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	f107 001c 	add.w	r0, r7, #28
 801dbe2:	330c      	adds	r3, #12
 801dbe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dbe6:	f000 faf9 	bl	801e1dc <writeMQTTString>
	if (options->willFlag)
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	7edb      	ldrb	r3, [r3, #27]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d00d      	beq.n	801dc0e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	f107 001c 	add.w	r0, r7, #28
 801dbf8:	3324      	adds	r3, #36	@ 0x24
 801dbfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dbfc:	f000 faee 	bl	801e1dc <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	f107 001c 	add.w	r0, r7, #28
 801dc06:	3330      	adds	r3, #48	@ 0x30
 801dc08:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dc0a:	f000 fae7 	bl	801e1dc <writeMQTTString>
	}
	if (flags.bits.username)
 801dc0e:	7d3b      	ldrb	r3, [r7, #20]
 801dc10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801dc14:	b2db      	uxtb	r3, r3
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d006      	beq.n	801dc28 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	f107 001c 	add.w	r0, r7, #28
 801dc20:	3340      	adds	r3, #64	@ 0x40
 801dc22:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dc24:	f000 fada 	bl	801e1dc <writeMQTTString>
	if (flags.bits.password)
 801dc28:	7d3b      	ldrb	r3, [r7, #20]
 801dc2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dc2e:	b2db      	uxtb	r3, r3
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d006      	beq.n	801dc42 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	f107 001c 	add.w	r0, r7, #28
 801dc3a:	334c      	adds	r3, #76	@ 0x4c
 801dc3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dc3e:	f000 facd 	bl	801e1dc <writeMQTTString>

	rc = ptr - buf;
 801dc42:	69fa      	ldr	r2, [r7, #28]
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	1ad3      	subs	r3, r2, r3
 801dc48:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	3728      	adds	r7, #40	@ 0x28
 801dc50:	46bd      	mov	sp, r7
 801dc52:	bd80      	pop	{r7, pc}
 801dc54:	08033018 	.word	0x08033018
 801dc58:	08033020 	.word	0x08033020

0801dc5c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	b08a      	sub	sp, #40	@ 0x28
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	60f8      	str	r0, [r7, #12]
 801dc64:	60b9      	str	r1, [r7, #8]
 801dc66:	607a      	str	r2, [r7, #4]
 801dc68:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dc6a:	2300      	movs	r3, #0
 801dc6c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801dc72:	2300      	movs	r3, #0
 801dc74:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801dc76:	2300      	movs	r3, #0
 801dc78:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801dc7e:	f107 0318 	add.w	r3, r7, #24
 801dc82:	4618      	mov	r0, r3
 801dc84:	f000 fa39 	bl	801e0fa <readChar>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801dc8c:	7f3b      	ldrb	r3, [r7, #28]
 801dc8e:	f023 030f 	bic.w	r3, r3, #15
 801dc92:	b2db      	uxtb	r3, r3
 801dc94:	2b20      	cmp	r3, #32
 801dc96:	d12e      	bne.n	801dcf6 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dc98:	69bb      	ldr	r3, [r7, #24]
 801dc9a:	f107 0214 	add.w	r2, r7, #20
 801dc9e:	4611      	mov	r1, r2
 801dca0:	4618      	mov	r0, r3
 801dca2:	f000 f9f9 	bl	801e098 <MQTTPacket_decodeBuf>
 801dca6:	6278      	str	r0, [r7, #36]	@ 0x24
 801dca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801dcaa:	69bb      	ldr	r3, [r7, #24]
 801dcac:	4413      	add	r3, r2
 801dcae:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dcb0:	69bb      	ldr	r3, [r7, #24]
 801dcb2:	697a      	ldr	r2, [r7, #20]
 801dcb4:	4413      	add	r3, r2
 801dcb6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801dcb8:	69bb      	ldr	r3, [r7, #24]
 801dcba:	6a3a      	ldr	r2, [r7, #32]
 801dcbc:	1ad3      	subs	r3, r2, r3
 801dcbe:	2b01      	cmp	r3, #1
 801dcc0:	dd1b      	ble.n	801dcfa <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801dcc2:	f107 0318 	add.w	r3, r7, #24
 801dcc6:	4618      	mov	r0, r3
 801dcc8:	f000 fa17 	bl	801e0fa <readChar>
 801dccc:	4603      	mov	r3, r0
 801dcce:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801dcd0:	7c3b      	ldrb	r3, [r7, #16]
 801dcd2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801dcd6:	b2db      	uxtb	r3, r3
 801dcd8:	461a      	mov	r2, r3
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801dcde:	f107 0318 	add.w	r3, r7, #24
 801dce2:	4618      	mov	r0, r3
 801dce4:	f000 fa09 	bl	801e0fa <readChar>
 801dce8:	4603      	mov	r3, r0
 801dcea:	461a      	mov	r2, r3
 801dcec:	68bb      	ldr	r3, [r7, #8]
 801dcee:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801dcf0:	2301      	movs	r3, #1
 801dcf2:	627b      	str	r3, [r7, #36]	@ 0x24
 801dcf4:	e002      	b.n	801dcfc <MQTTDeserialize_connack+0xa0>
		goto exit;
 801dcf6:	bf00      	nop
 801dcf8:	e000      	b.n	801dcfc <MQTTDeserialize_connack+0xa0>
		goto exit;
 801dcfa:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dcfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801dcfe:	4618      	mov	r0, r3
 801dd00:	3728      	adds	r7, #40	@ 0x28
 801dd02:	46bd      	mov	sp, r7
 801dd04:	bd80      	pop	{r7, pc}

0801dd06 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801dd06:	b580      	push	{r7, lr}
 801dd08:	b088      	sub	sp, #32
 801dd0a:	af00      	add	r7, sp, #0
 801dd0c:	60f8      	str	r0, [r7, #12]
 801dd0e:	60b9      	str	r1, [r7, #8]
 801dd10:	4613      	mov	r3, r2
 801dd12:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801dd14:	2300      	movs	r3, #0
 801dd16:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801dd18:	f04f 33ff 	mov.w	r3, #4294967295
 801dd1c:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801dd22:	68bb      	ldr	r3, [r7, #8]
 801dd24:	2b01      	cmp	r3, #1
 801dd26:	dc03      	bgt.n	801dd30 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801dd28:	f06f 0301 	mvn.w	r3, #1
 801dd2c:	61fb      	str	r3, [r7, #28]
		goto exit;
 801dd2e:	e01d      	b.n	801dd6c <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801dd30:	2300      	movs	r3, #0
 801dd32:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801dd34:	79fb      	ldrb	r3, [r7, #7]
 801dd36:	f003 030f 	and.w	r3, r3, #15
 801dd3a:	b2da      	uxtb	r2, r3
 801dd3c:	7e3b      	ldrb	r3, [r7, #24]
 801dd3e:	f362 1307 	bfi	r3, r2, #4, #4
 801dd42:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801dd44:	7e3a      	ldrb	r2, [r7, #24]
 801dd46:	f107 0314 	add.w	r3, r7, #20
 801dd4a:	4611      	mov	r1, r2
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	f000 f9e8 	bl	801e122 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801dd52:	697b      	ldr	r3, [r7, #20]
 801dd54:	2100      	movs	r1, #0
 801dd56:	4618      	mov	r0, r3
 801dd58:	f000 f8e8 	bl	801df2c <MQTTPacket_encode>
 801dd5c:	4602      	mov	r2, r0
 801dd5e:	697b      	ldr	r3, [r7, #20]
 801dd60:	4413      	add	r3, r2
 801dd62:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801dd64:	697a      	ldr	r2, [r7, #20]
 801dd66:	68fb      	ldr	r3, [r7, #12]
 801dd68:	1ad3      	subs	r3, r2, r3
 801dd6a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dd6c:	69fb      	ldr	r3, [r7, #28]
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	3720      	adds	r7, #32
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}

0801dd76 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801dd76:	b580      	push	{r7, lr}
 801dd78:	b082      	sub	sp, #8
 801dd7a:	af00      	add	r7, sp, #0
 801dd7c:	6078      	str	r0, [r7, #4]
 801dd7e:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 801dd80:	220e      	movs	r2, #14
 801dd82:	6839      	ldr	r1, [r7, #0]
 801dd84:	6878      	ldr	r0, [r7, #4]
 801dd86:	f7ff ffbe 	bl	801dd06 <MQTTSerialize_zero>
 801dd8a:	4603      	mov	r3, r0
}
 801dd8c:	4618      	mov	r0, r3
 801dd8e:	3708      	adds	r7, #8
 801dd90:	46bd      	mov	sp, r7
 801dd92:	bd80      	pop	{r7, pc}

0801dd94 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801dd94:	b580      	push	{r7, lr}
 801dd96:	b082      	sub	sp, #8
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	6078      	str	r0, [r7, #4]
 801dd9c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801dd9e:	220c      	movs	r2, #12
 801dda0:	6839      	ldr	r1, [r7, #0]
 801dda2:	6878      	ldr	r0, [r7, #4]
 801dda4:	f7ff ffaf 	bl	801dd06 <MQTTSerialize_zero>
 801dda8:	4603      	mov	r3, r0
}
 801ddaa:	4618      	mov	r0, r3
 801ddac:	3708      	adds	r7, #8
 801ddae:	46bd      	mov	sp, r7
 801ddb0:	bd80      	pop	{r7, pc}

0801ddb2 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801ddb2:	b580      	push	{r7, lr}
 801ddb4:	b08a      	sub	sp, #40	@ 0x28
 801ddb6:	af00      	add	r7, sp, #0
 801ddb8:	60f8      	str	r0, [r7, #12]
 801ddba:	60b9      	str	r1, [r7, #8]
 801ddbc:	607a      	str	r2, [r7, #4]
 801ddbe:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801ddc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ddc6:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801ddc8:	2300      	movs	r3, #0
 801ddca:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801ddcc:	2300      	movs	r3, #0
 801ddce:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 801ddd0:	2300      	movs	r3, #0
 801ddd2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801ddd4:	f107 0318 	add.w	r3, r7, #24
 801ddd8:	4618      	mov	r0, r3
 801ddda:	f000 f98e 	bl	801e0fa <readChar>
 801ddde:	4603      	mov	r3, r0
 801dde0:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801dde2:	7f3b      	ldrb	r3, [r7, #28]
 801dde4:	f023 030f 	bic.w	r3, r3, #15
 801dde8:	b2db      	uxtb	r3, r3
 801ddea:	2b30      	cmp	r3, #48	@ 0x30
 801ddec:	d14b      	bne.n	801de86 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801ddee:	7f3b      	ldrb	r3, [r7, #28]
 801ddf0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801ddf4:	b2db      	uxtb	r3, r3
 801ddf6:	461a      	mov	r2, r3
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801ddfc:	7f3b      	ldrb	r3, [r7, #28]
 801ddfe:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801de02:	b2db      	uxtb	r3, r3
 801de04:	461a      	mov	r2, r3
 801de06:	68bb      	ldr	r3, [r7, #8]
 801de08:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801de0a:	7f3b      	ldrb	r3, [r7, #28]
 801de0c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801de10:	b2db      	uxtb	r3, r3
 801de12:	461a      	mov	r2, r3
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801de18:	69bb      	ldr	r3, [r7, #24]
 801de1a:	f107 0214 	add.w	r2, r7, #20
 801de1e:	4611      	mov	r1, r2
 801de20:	4618      	mov	r0, r3
 801de22:	f000 f939 	bl	801e098 <MQTTPacket_decodeBuf>
 801de26:	6278      	str	r0, [r7, #36]	@ 0x24
 801de28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801de2a:	69bb      	ldr	r3, [r7, #24]
 801de2c:	4413      	add	r3, r2
 801de2e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801de30:	69bb      	ldr	r3, [r7, #24]
 801de32:	697a      	ldr	r2, [r7, #20]
 801de34:	4413      	add	r3, r2
 801de36:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801de38:	f107 0318 	add.w	r3, r7, #24
 801de3c:	6a3a      	ldr	r2, [r7, #32]
 801de3e:	4619      	mov	r1, r3
 801de40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801de42:	f000 f9f9 	bl	801e238 <readMQTTLenString>
 801de46:	4603      	mov	r3, r0
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d01e      	beq.n	801de8a <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801de4c:	69bb      	ldr	r3, [r7, #24]
 801de4e:	6a3a      	ldr	r2, [r7, #32]
 801de50:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801de52:	2b00      	cmp	r3, #0
 801de54:	db19      	blt.n	801de8a <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801de56:	68bb      	ldr	r3, [r7, #8]
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	dd08      	ble.n	801de70 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801de5e:	f107 0318 	add.w	r3, r7, #24
 801de62:	4618      	mov	r0, r3
 801de64:	f000 f92e 	bl	801e0c4 <readInt>
 801de68:	4603      	mov	r3, r0
 801de6a:	b29a      	uxth	r2, r3
 801de6c:	683b      	ldr	r3, [r7, #0]
 801de6e:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801de70:	69bb      	ldr	r3, [r7, #24]
 801de72:	6a3a      	ldr	r2, [r7, #32]
 801de74:	1ad2      	subs	r2, r2, r3
 801de76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801de78:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801de7a:	69ba      	ldr	r2, [r7, #24]
 801de7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801de7e:	601a      	str	r2, [r3, #0]
	rc = 1;
 801de80:	2301      	movs	r3, #1
 801de82:	627b      	str	r3, [r7, #36]	@ 0x24
 801de84:	e002      	b.n	801de8c <MQTTDeserialize_publish+0xda>
		goto exit;
 801de86:	bf00      	nop
 801de88:	e000      	b.n	801de8c <MQTTDeserialize_publish+0xda>
		goto exit;
 801de8a:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801de8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801de8e:	4618      	mov	r0, r3
 801de90:	3728      	adds	r7, #40	@ 0x28
 801de92:	46bd      	mov	sp, r7
 801de94:	bd80      	pop	{r7, pc}

0801de96 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801de96:	b580      	push	{r7, lr}
 801de98:	b08a      	sub	sp, #40	@ 0x28
 801de9a:	af00      	add	r7, sp, #0
 801de9c:	60f8      	str	r0, [r7, #12]
 801de9e:	60b9      	str	r1, [r7, #8]
 801dea0:	607a      	str	r2, [r7, #4]
 801dea2:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dea4:	2300      	movs	r3, #0
 801dea6:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dea8:	683b      	ldr	r3, [r7, #0]
 801deaa:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801deac:	2300      	movs	r3, #0
 801deae:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801deb0:	2300      	movs	r3, #0
 801deb2:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801deb4:	f107 0318 	add.w	r3, r7, #24
 801deb8:	4618      	mov	r0, r3
 801deba:	f000 f91e 	bl	801e0fa <readChar>
 801debe:	4603      	mov	r3, r0
 801dec0:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801dec2:	7f3b      	ldrb	r3, [r7, #28]
 801dec4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dec8:	b2db      	uxtb	r3, r3
 801deca:	461a      	mov	r2, r3
 801decc:	68bb      	ldr	r3, [r7, #8]
 801dece:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801ded0:	7f3b      	ldrb	r3, [r7, #28]
 801ded2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801ded6:	b2db      	uxtb	r3, r3
 801ded8:	461a      	mov	r2, r3
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dede:	69bb      	ldr	r3, [r7, #24]
 801dee0:	f107 0214 	add.w	r2, r7, #20
 801dee4:	4611      	mov	r1, r2
 801dee6:	4618      	mov	r0, r3
 801dee8:	f000 f8d6 	bl	801e098 <MQTTPacket_decodeBuf>
 801deec:	6278      	str	r0, [r7, #36]	@ 0x24
 801deee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801def0:	69bb      	ldr	r3, [r7, #24]
 801def2:	4413      	add	r3, r2
 801def4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801def6:	69bb      	ldr	r3, [r7, #24]
 801def8:	697a      	ldr	r2, [r7, #20]
 801defa:	4413      	add	r3, r2
 801defc:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801defe:	69bb      	ldr	r3, [r7, #24]
 801df00:	6a3a      	ldr	r2, [r7, #32]
 801df02:	1ad3      	subs	r3, r2, r3
 801df04:	2b01      	cmp	r3, #1
 801df06:	dd0b      	ble.n	801df20 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801df08:	f107 0318 	add.w	r3, r7, #24
 801df0c:	4618      	mov	r0, r3
 801df0e:	f000 f8d9 	bl	801e0c4 <readInt>
 801df12:	4603      	mov	r3, r0
 801df14:	b29a      	uxth	r2, r3
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801df1a:	2301      	movs	r3, #1
 801df1c:	627b      	str	r3, [r7, #36]	@ 0x24
 801df1e:	e000      	b.n	801df22 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801df20:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801df22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801df24:	4618      	mov	r0, r3
 801df26:	3728      	adds	r7, #40	@ 0x28
 801df28:	46bd      	mov	sp, r7
 801df2a:	bd80      	pop	{r7, pc}

0801df2c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801df2c:	b480      	push	{r7}
 801df2e:	b085      	sub	sp, #20
 801df30:	af00      	add	r7, sp, #0
 801df32:	6078      	str	r0, [r7, #4]
 801df34:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801df36:	2300      	movs	r3, #0
 801df38:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801df3a:	683b      	ldr	r3, [r7, #0]
 801df3c:	425a      	negs	r2, r3
 801df3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801df42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801df46:	bf58      	it	pl
 801df48:	4253      	negpl	r3, r2
 801df4a:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801df4c:	683b      	ldr	r3, [r7, #0]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	da00      	bge.n	801df54 <MQTTPacket_encode+0x28>
 801df52:	337f      	adds	r3, #127	@ 0x7f
 801df54:	11db      	asrs	r3, r3, #7
 801df56:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801df58:	683b      	ldr	r3, [r7, #0]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	dd03      	ble.n	801df66 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801df5e:	7afb      	ldrb	r3, [r7, #11]
 801df60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801df64:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	1c5a      	adds	r2, r3, #1
 801df6a:	60fa      	str	r2, [r7, #12]
 801df6c:	461a      	mov	r2, r3
 801df6e:	687b      	ldr	r3, [r7, #4]
 801df70:	4413      	add	r3, r2
 801df72:	7afa      	ldrb	r2, [r7, #11]
 801df74:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801df76:	683b      	ldr	r3, [r7, #0]
 801df78:	2b00      	cmp	r3, #0
 801df7a:	dcde      	bgt.n	801df3a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801df7c:	68fb      	ldr	r3, [r7, #12]
}
 801df7e:	4618      	mov	r0, r3
 801df80:	3714      	adds	r7, #20
 801df82:	46bd      	mov	sp, r7
 801df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df88:	4770      	bx	lr

0801df8a <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801df8a:	b580      	push	{r7, lr}
 801df8c:	b086      	sub	sp, #24
 801df8e:	af00      	add	r7, sp, #0
 801df90:	6078      	str	r0, [r7, #4]
 801df92:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801df94:	2301      	movs	r3, #1
 801df96:	617b      	str	r3, [r7, #20]
	int len = 0;
 801df98:	2300      	movs	r3, #0
 801df9a:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801df9c:	683b      	ldr	r3, [r7, #0]
 801df9e:	2200      	movs	r2, #0
 801dfa0:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801dfa2:	f04f 33ff 	mov.w	r3, #4294967295
 801dfa6:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801dfa8:	693b      	ldr	r3, [r7, #16]
 801dfaa:	3301      	adds	r3, #1
 801dfac:	613b      	str	r3, [r7, #16]
 801dfae:	693b      	ldr	r3, [r7, #16]
 801dfb0:	2b04      	cmp	r3, #4
 801dfb2:	dd03      	ble.n	801dfbc <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801dfb4:	f04f 33ff 	mov.w	r3, #4294967295
 801dfb8:	60fb      	str	r3, [r7, #12]
			goto exit;
 801dfba:	e01d      	b.n	801dff8 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801dfbc:	f107 020b 	add.w	r2, r7, #11
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	2101      	movs	r1, #1
 801dfc4:	4610      	mov	r0, r2
 801dfc6:	4798      	blx	r3
 801dfc8:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801dfca:	68fb      	ldr	r3, [r7, #12]
 801dfcc:	2b01      	cmp	r3, #1
 801dfce:	d112      	bne.n	801dff6 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801dfd0:	683b      	ldr	r3, [r7, #0]
 801dfd2:	681a      	ldr	r2, [r3, #0]
 801dfd4:	7afb      	ldrb	r3, [r7, #11]
 801dfd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dfda:	6979      	ldr	r1, [r7, #20]
 801dfdc:	fb01 f303 	mul.w	r3, r1, r3
 801dfe0:	441a      	add	r2, r3
 801dfe2:	683b      	ldr	r3, [r7, #0]
 801dfe4:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801dfe6:	697b      	ldr	r3, [r7, #20]
 801dfe8:	01db      	lsls	r3, r3, #7
 801dfea:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801dfec:	7afb      	ldrb	r3, [r7, #11]
 801dfee:	b25b      	sxtb	r3, r3
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	dbd6      	blt.n	801dfa2 <MQTTPacket_decode+0x18>
exit:
 801dff4:	e000      	b.n	801dff8 <MQTTPacket_decode+0x6e>
			goto exit;
 801dff6:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801dff8:	693b      	ldr	r3, [r7, #16]
}
 801dffa:	4618      	mov	r0, r3
 801dffc:	3718      	adds	r7, #24
 801dffe:	46bd      	mov	sp, r7
 801e000:	bd80      	pop	{r7, pc}
	...

0801e004 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801e004:	b480      	push	{r7}
 801e006:	b083      	sub	sp, #12
 801e008:	af00      	add	r7, sp, #0
 801e00a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	3301      	adds	r3, #1
 801e010:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	2b7f      	cmp	r3, #127	@ 0x7f
 801e016:	dc03      	bgt.n	801e020 <MQTTPacket_len+0x1c>
		rem_len += 1;
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	3301      	adds	r3, #1
 801e01c:	607b      	str	r3, [r7, #4]
 801e01e:	e012      	b.n	801e046 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e026:	da03      	bge.n	801e030 <MQTTPacket_len+0x2c>
		rem_len += 2;
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	3302      	adds	r3, #2
 801e02c:	607b      	str	r3, [r7, #4]
 801e02e:	e00a      	b.n	801e046 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	4a08      	ldr	r2, [pc, #32]	@ (801e054 <MQTTPacket_len+0x50>)
 801e034:	4293      	cmp	r3, r2
 801e036:	dc03      	bgt.n	801e040 <MQTTPacket_len+0x3c>
		rem_len += 3;
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	3303      	adds	r3, #3
 801e03c:	607b      	str	r3, [r7, #4]
 801e03e:	e002      	b.n	801e046 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	3304      	adds	r3, #4
 801e044:	607b      	str	r3, [r7, #4]
	return rem_len;
 801e046:	687b      	ldr	r3, [r7, #4]
}
 801e048:	4618      	mov	r0, r3
 801e04a:	370c      	adds	r7, #12
 801e04c:	46bd      	mov	sp, r7
 801e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e052:	4770      	bx	lr
 801e054:	001ffffe 	.word	0x001ffffe

0801e058 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801e058:	b480      	push	{r7}
 801e05a:	b085      	sub	sp, #20
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
 801e060:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801e062:	2300      	movs	r3, #0
 801e064:	60fb      	str	r3, [r7, #12]
 801e066:	e00a      	b.n	801e07e <bufchar+0x26>
		*c = *bufptr++;
 801e068:	4b0a      	ldr	r3, [pc, #40]	@ (801e094 <bufchar+0x3c>)
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	1c5a      	adds	r2, r3, #1
 801e06e:	4909      	ldr	r1, [pc, #36]	@ (801e094 <bufchar+0x3c>)
 801e070:	600a      	str	r2, [r1, #0]
 801e072:	781a      	ldrb	r2, [r3, #0]
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	3301      	adds	r3, #1
 801e07c:	60fb      	str	r3, [r7, #12]
 801e07e:	68fa      	ldr	r2, [r7, #12]
 801e080:	683b      	ldr	r3, [r7, #0]
 801e082:	429a      	cmp	r2, r3
 801e084:	dbf0      	blt.n	801e068 <bufchar+0x10>
	return count;
 801e086:	683b      	ldr	r3, [r7, #0]
}
 801e088:	4618      	mov	r0, r3
 801e08a:	3714      	adds	r7, #20
 801e08c:	46bd      	mov	sp, r7
 801e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e092:	4770      	bx	lr
 801e094:	200009f4 	.word	0x200009f4

0801e098 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	b082      	sub	sp, #8
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	6078      	str	r0, [r7, #4]
 801e0a0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801e0a2:	4a06      	ldr	r2, [pc, #24]	@ (801e0bc <MQTTPacket_decodeBuf+0x24>)
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801e0a8:	6839      	ldr	r1, [r7, #0]
 801e0aa:	4805      	ldr	r0, [pc, #20]	@ (801e0c0 <MQTTPacket_decodeBuf+0x28>)
 801e0ac:	f7ff ff6d 	bl	801df8a <MQTTPacket_decode>
 801e0b0:	4603      	mov	r3, r0
}
 801e0b2:	4618      	mov	r0, r3
 801e0b4:	3708      	adds	r7, #8
 801e0b6:	46bd      	mov	sp, r7
 801e0b8:	bd80      	pop	{r7, pc}
 801e0ba:	bf00      	nop
 801e0bc:	200009f4 	.word	0x200009f4
 801e0c0:	0801e059 	.word	0x0801e059

0801e0c4 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801e0c4:	b480      	push	{r7}
 801e0c6:	b085      	sub	sp, #20
 801e0c8:	af00      	add	r7, sp, #0
 801e0ca:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801e0d2:	68fb      	ldr	r3, [r7, #12]
 801e0d4:	781b      	ldrb	r3, [r3, #0]
 801e0d6:	021b      	lsls	r3, r3, #8
 801e0d8:	68fa      	ldr	r2, [r7, #12]
 801e0da:	3201      	adds	r2, #1
 801e0dc:	7812      	ldrb	r2, [r2, #0]
 801e0de:	4413      	add	r3, r2
 801e0e0:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	1c9a      	adds	r2, r3, #2
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	601a      	str	r2, [r3, #0]
	return len;
 801e0ec:	68bb      	ldr	r3, [r7, #8]
}
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	3714      	adds	r7, #20
 801e0f2:	46bd      	mov	sp, r7
 801e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0f8:	4770      	bx	lr

0801e0fa <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801e0fa:	b480      	push	{r7}
 801e0fc:	b085      	sub	sp, #20
 801e0fe:	af00      	add	r7, sp, #0
 801e100:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	681b      	ldr	r3, [r3, #0]
 801e106:	781b      	ldrb	r3, [r3, #0]
 801e108:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	1c5a      	adds	r2, r3, #1
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	601a      	str	r2, [r3, #0]
	return c;
 801e114:	7bfb      	ldrb	r3, [r7, #15]
}
 801e116:	4618      	mov	r0, r3
 801e118:	3714      	adds	r7, #20
 801e11a:	46bd      	mov	sp, r7
 801e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e120:	4770      	bx	lr

0801e122 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801e122:	b480      	push	{r7}
 801e124:	b083      	sub	sp, #12
 801e126:	af00      	add	r7, sp, #0
 801e128:	6078      	str	r0, [r7, #4]
 801e12a:	460b      	mov	r3, r1
 801e12c:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	681b      	ldr	r3, [r3, #0]
 801e132:	78fa      	ldrb	r2, [r7, #3]
 801e134:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	1c5a      	adds	r2, r3, #1
 801e13c:	687b      	ldr	r3, [r7, #4]
 801e13e:	601a      	str	r2, [r3, #0]
}
 801e140:	bf00      	nop
 801e142:	370c      	adds	r7, #12
 801e144:	46bd      	mov	sp, r7
 801e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e14a:	4770      	bx	lr

0801e14c <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801e14c:	b480      	push	{r7}
 801e14e:	b083      	sub	sp, #12
 801e150:	af00      	add	r7, sp, #0
 801e152:	6078      	str	r0, [r7, #4]
 801e154:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801e156:	683b      	ldr	r3, [r7, #0]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	da00      	bge.n	801e15e <writeInt+0x12>
 801e15c:	33ff      	adds	r3, #255	@ 0xff
 801e15e:	121b      	asrs	r3, r3, #8
 801e160:	461a      	mov	r2, r3
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	681b      	ldr	r3, [r3, #0]
 801e166:	b2d2      	uxtb	r2, r2
 801e168:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	1c5a      	adds	r2, r3, #1
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e174:	683b      	ldr	r3, [r7, #0]
 801e176:	425a      	negs	r2, r3
 801e178:	b2db      	uxtb	r3, r3
 801e17a:	b2d2      	uxtb	r2, r2
 801e17c:	bf58      	it	pl
 801e17e:	4253      	negpl	r3, r2
 801e180:	687a      	ldr	r2, [r7, #4]
 801e182:	6812      	ldr	r2, [r2, #0]
 801e184:	b2db      	uxtb	r3, r3
 801e186:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	1c5a      	adds	r2, r3, #1
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	601a      	str	r2, [r3, #0]
}
 801e192:	bf00      	nop
 801e194:	370c      	adds	r7, #12
 801e196:	46bd      	mov	sp, r7
 801e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e19c:	4770      	bx	lr

0801e19e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801e19e:	b580      	push	{r7, lr}
 801e1a0:	b084      	sub	sp, #16
 801e1a2:	af00      	add	r7, sp, #0
 801e1a4:	6078      	str	r0, [r7, #4]
 801e1a6:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801e1a8:	6838      	ldr	r0, [r7, #0]
 801e1aa:	f7f2 f879 	bl	80102a0 <strlen>
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801e1b2:	68f9      	ldr	r1, [r7, #12]
 801e1b4:	6878      	ldr	r0, [r7, #4]
 801e1b6:	f7ff ffc9 	bl	801e14c <writeInt>
	memcpy(*pptr, string, len);
 801e1ba:	687b      	ldr	r3, [r7, #4]
 801e1bc:	681b      	ldr	r3, [r3, #0]
 801e1be:	68fa      	ldr	r2, [r7, #12]
 801e1c0:	6839      	ldr	r1, [r7, #0]
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	f00f feb9 	bl	802df3a <memcpy>
	*pptr += len;
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	681a      	ldr	r2, [r3, #0]
 801e1cc:	68fb      	ldr	r3, [r7, #12]
 801e1ce:	441a      	add	r2, r3
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	601a      	str	r2, [r3, #0]
}
 801e1d4:	bf00      	nop
 801e1d6:	3710      	adds	r7, #16
 801e1d8:	46bd      	mov	sp, r7
 801e1da:	bd80      	pop	{r7, pc}

0801e1dc <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801e1dc:	b580      	push	{r7, lr}
 801e1de:	b084      	sub	sp, #16
 801e1e0:	af00      	add	r7, sp, #0
 801e1e2:	60f8      	str	r0, [r7, #12]
 801e1e4:	4638      	mov	r0, r7
 801e1e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	dd12      	ble.n	801e216 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	4619      	mov	r1, r3
 801e1f4:	68f8      	ldr	r0, [r7, #12]
 801e1f6:	f7ff ffa9 	bl	801e14c <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801e1fa:	68fb      	ldr	r3, [r7, #12]
 801e1fc:	681b      	ldr	r3, [r3, #0]
 801e1fe:	68b9      	ldr	r1, [r7, #8]
 801e200:	687a      	ldr	r2, [r7, #4]
 801e202:	4618      	mov	r0, r3
 801e204:	f00f fe99 	bl	802df3a <memcpy>
		*pptr += mqttstring.lenstring.len;
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	687a      	ldr	r2, [r7, #4]
 801e20e:	441a      	add	r2, r3
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801e214:	e00c      	b.n	801e230 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801e216:	683b      	ldr	r3, [r7, #0]
 801e218:	2b00      	cmp	r3, #0
 801e21a:	d005      	beq.n	801e228 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801e21c:	683b      	ldr	r3, [r7, #0]
 801e21e:	4619      	mov	r1, r3
 801e220:	68f8      	ldr	r0, [r7, #12]
 801e222:	f7ff ffbc 	bl	801e19e <writeCString>
}
 801e226:	e003      	b.n	801e230 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801e228:	2100      	movs	r1, #0
 801e22a:	68f8      	ldr	r0, [r7, #12]
 801e22c:	f7ff ff8e 	bl	801e14c <writeInt>
}
 801e230:	bf00      	nop
 801e232:	3710      	adds	r7, #16
 801e234:	46bd      	mov	sp, r7
 801e236:	bd80      	pop	{r7, pc}

0801e238 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801e238:	b580      	push	{r7, lr}
 801e23a:	b086      	sub	sp, #24
 801e23c:	af00      	add	r7, sp, #0
 801e23e:	60f8      	str	r0, [r7, #12]
 801e240:	60b9      	str	r1, [r7, #8]
 801e242:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801e244:	2300      	movs	r3, #0
 801e246:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801e248:	68bb      	ldr	r3, [r7, #8]
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	687a      	ldr	r2, [r7, #4]
 801e24e:	1ad3      	subs	r3, r2, r3
 801e250:	2b01      	cmp	r3, #1
 801e252:	dd1a      	ble.n	801e28a <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801e254:	68b8      	ldr	r0, [r7, #8]
 801e256:	f7ff ff35 	bl	801e0c4 <readInt>
 801e25a:	4602      	mov	r2, r0
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801e260:	68bb      	ldr	r3, [r7, #8]
 801e262:	681b      	ldr	r3, [r3, #0]
 801e264:	68fa      	ldr	r2, [r7, #12]
 801e266:	6852      	ldr	r2, [r2, #4]
 801e268:	4413      	add	r3, r2
 801e26a:	687a      	ldr	r2, [r7, #4]
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d30c      	bcc.n	801e28a <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801e270:	68bb      	ldr	r3, [r7, #8]
 801e272:	681a      	ldr	r2, [r3, #0]
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801e278:	68bb      	ldr	r3, [r7, #8]
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	68fa      	ldr	r2, [r7, #12]
 801e27e:	6852      	ldr	r2, [r2, #4]
 801e280:	441a      	add	r2, r3
 801e282:	68bb      	ldr	r3, [r7, #8]
 801e284:	601a      	str	r2, [r3, #0]
			rc = 1;
 801e286:	2301      	movs	r3, #1
 801e288:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	2200      	movs	r2, #0
 801e28e:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801e290:	697b      	ldr	r3, [r7, #20]
}
 801e292:	4618      	mov	r0, r3
 801e294:	3718      	adds	r7, #24
 801e296:	46bd      	mov	sp, r7
 801e298:	bd80      	pop	{r7, pc}

0801e29a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801e29a:	b580      	push	{r7, lr}
 801e29c:	b086      	sub	sp, #24
 801e29e:	af00      	add	r7, sp, #0
 801e2a0:	1d3b      	adds	r3, r7, #4
 801e2a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d006      	beq.n	801e2be <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	4618      	mov	r0, r3
 801e2b4:	f7f1 fff4 	bl	80102a0 <strlen>
 801e2b8:	4603      	mov	r3, r0
 801e2ba:	617b      	str	r3, [r7, #20]
 801e2bc:	e001      	b.n	801e2c2 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801e2be:	68bb      	ldr	r3, [r7, #8]
 801e2c0:	617b      	str	r3, [r7, #20]
	return rc;
 801e2c2:	697b      	ldr	r3, [r7, #20]
}
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	3718      	adds	r7, #24
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	bd80      	pop	{r7, pc}

0801e2cc <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801e2cc:	b580      	push	{r7, lr}
 801e2ce:	b086      	sub	sp, #24
 801e2d0:	af00      	add	r7, sp, #0
 801e2d2:	6078      	str	r0, [r7, #4]
 801e2d4:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801e2d6:	2300      	movs	r3, #0
 801e2d8:	617b      	str	r3, [r7, #20]
		blen = 0;
 801e2da:	2300      	movs	r3, #0
 801e2dc:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d00a      	beq.n	801e2fc <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	4618      	mov	r0, r3
 801e2f2:	f7f1 ffd5 	bl	80102a0 <strlen>
 801e2f6:	4603      	mov	r3, r0
 801e2f8:	617b      	str	r3, [r7, #20]
 801e2fa:	e005      	b.n	801e308 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	689b      	ldr	r3, [r3, #8]
 801e300:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	685b      	ldr	r3, [r3, #4]
 801e306:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801e308:	6838      	ldr	r0, [r7, #0]
 801e30a:	f7f1 ffc9 	bl	80102a0 <strlen>
 801e30e:	4603      	mov	r3, r0
 801e310:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801e312:	697a      	ldr	r2, [r7, #20]
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	429a      	cmp	r2, r3
 801e318:	d10a      	bne.n	801e330 <MQTTPacket_equals+0x64>
 801e31a:	697b      	ldr	r3, [r7, #20]
 801e31c:	461a      	mov	r2, r3
 801e31e:	6839      	ldr	r1, [r7, #0]
 801e320:	6938      	ldr	r0, [r7, #16]
 801e322:	f00f fc7d 	bl	802dc20 <strncmp>
 801e326:	4603      	mov	r3, r0
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d101      	bne.n	801e330 <MQTTPacket_equals+0x64>
 801e32c:	2301      	movs	r3, #1
 801e32e:	e000      	b.n	801e332 <MQTTPacket_equals+0x66>
 801e330:	2300      	movs	r3, #0
}
 801e332:	4618      	mov	r0, r3
 801e334:	3718      	adds	r7, #24
 801e336:	46bd      	mov	sp, r7
 801e338:	bd80      	pop	{r7, pc}

0801e33a <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801e33a:	b580      	push	{r7, lr}
 801e33c:	b086      	sub	sp, #24
 801e33e:	af00      	add	r7, sp, #0
 801e340:	60f8      	str	r0, [r7, #12]
 801e342:	4638      	mov	r0, r7
 801e344:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801e348:	2300      	movs	r3, #0
 801e34a:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801e34c:	463b      	mov	r3, r7
 801e34e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e352:	f7ff ffa2 	bl	801e29a <MQTTstrlen>
 801e356:	4603      	mov	r3, r0
 801e358:	1c9a      	adds	r2, r3, #2
 801e35a:	6a3b      	ldr	r3, [r7, #32]
 801e35c:	4413      	add	r3, r2
 801e35e:	697a      	ldr	r2, [r7, #20]
 801e360:	4413      	add	r3, r2
 801e362:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801e364:	68fb      	ldr	r3, [r7, #12]
 801e366:	2b00      	cmp	r3, #0
 801e368:	dd02      	ble.n	801e370 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801e36a:	697b      	ldr	r3, [r7, #20]
 801e36c:	3302      	adds	r3, #2
 801e36e:	617b      	str	r3, [r7, #20]
	return len;
 801e370:	697b      	ldr	r3, [r7, #20]
}
 801e372:	4618      	mov	r0, r3
 801e374:	3718      	adds	r7, #24
 801e376:	46bd      	mov	sp, r7
 801e378:	bd80      	pop	{r7, pc}

0801e37a <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801e37a:	b580      	push	{r7, lr}
 801e37c:	b08a      	sub	sp, #40	@ 0x28
 801e37e:	af02      	add	r7, sp, #8
 801e380:	60f8      	str	r0, [r7, #12]
 801e382:	60b9      	str	r1, [r7, #8]
 801e384:	603b      	str	r3, [r7, #0]
 801e386:	4613      	mov	r3, r2
 801e388:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801e38a:	68fb      	ldr	r3, [r7, #12]
 801e38c:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801e38e:	2300      	movs	r3, #0
 801e390:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801e392:	2300      	movs	r3, #0
 801e394:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e396:	2300      	movs	r3, #0
 801e398:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801e39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e39c:	9300      	str	r3, [sp, #0]
 801e39e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e3a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e3a4:	6838      	ldr	r0, [r7, #0]
 801e3a6:	f7ff ffc8 	bl	801e33a <MQTTSerialize_publishLength>
 801e3aa:	61b8      	str	r0, [r7, #24]
 801e3ac:	69b8      	ldr	r0, [r7, #24]
 801e3ae:	f7ff fe29 	bl	801e004 <MQTTPacket_len>
 801e3b2:	4602      	mov	r2, r0
 801e3b4:	68bb      	ldr	r3, [r7, #8]
 801e3b6:	4293      	cmp	r3, r2
 801e3b8:	da03      	bge.n	801e3c2 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e3ba:	f06f 0301 	mvn.w	r3, #1
 801e3be:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e3c0:	e04c      	b.n	801e45c <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801e3c2:	7c3b      	ldrb	r3, [r7, #16]
 801e3c4:	2203      	movs	r2, #3
 801e3c6:	f362 1307 	bfi	r3, r2, #4, #4
 801e3ca:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801e3cc:	79fb      	ldrb	r3, [r7, #7]
 801e3ce:	f003 0301 	and.w	r3, r3, #1
 801e3d2:	b2da      	uxtb	r2, r3
 801e3d4:	7c3b      	ldrb	r3, [r7, #16]
 801e3d6:	f362 03c3 	bfi	r3, r2, #3, #1
 801e3da:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801e3dc:	683b      	ldr	r3, [r7, #0]
 801e3de:	f003 0303 	and.w	r3, r3, #3
 801e3e2:	b2da      	uxtb	r2, r3
 801e3e4:	7c3b      	ldrb	r3, [r7, #16]
 801e3e6:	f362 0342 	bfi	r3, r2, #1, #2
 801e3ea:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801e3ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801e3f0:	f003 0301 	and.w	r3, r3, #1
 801e3f4:	b2da      	uxtb	r2, r3
 801e3f6:	7c3b      	ldrb	r3, [r7, #16]
 801e3f8:	f362 0300 	bfi	r3, r2, #0, #1
 801e3fc:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801e3fe:	7c3a      	ldrb	r2, [r7, #16]
 801e400:	f107 0314 	add.w	r3, r7, #20
 801e404:	4611      	mov	r1, r2
 801e406:	4618      	mov	r0, r3
 801e408:	f7ff fe8b 	bl	801e122 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e40c:	697b      	ldr	r3, [r7, #20]
 801e40e:	69b9      	ldr	r1, [r7, #24]
 801e410:	4618      	mov	r0, r3
 801e412:	f7ff fd8b 	bl	801df2c <MQTTPacket_encode>
 801e416:	4602      	mov	r2, r0
 801e418:	697b      	ldr	r3, [r7, #20]
 801e41a:	4413      	add	r3, r2
 801e41c:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801e41e:	f107 0014 	add.w	r0, r7, #20
 801e422:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e426:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e428:	f7ff fed8 	bl	801e1dc <writeMQTTString>

	if (qos > 0)
 801e42c:	683b      	ldr	r3, [r7, #0]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	dd06      	ble.n	801e440 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801e432:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 801e434:	f107 0314 	add.w	r3, r7, #20
 801e438:	4611      	mov	r1, r2
 801e43a:	4618      	mov	r0, r3
 801e43c:	f7ff fe86 	bl	801e14c <writeInt>

	memcpy(ptr, payload, payloadlen);
 801e440:	697b      	ldr	r3, [r7, #20]
 801e442:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e444:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e446:	4618      	mov	r0, r3
 801e448:	f00f fd77 	bl	802df3a <memcpy>
	ptr += payloadlen;
 801e44c:	697a      	ldr	r2, [r7, #20]
 801e44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e450:	4413      	add	r3, r2
 801e452:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801e454:	697a      	ldr	r2, [r7, #20]
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	1ad3      	subs	r3, r2, r3
 801e45a:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e45c:	69fb      	ldr	r3, [r7, #28]
}
 801e45e:	4618      	mov	r0, r3
 801e460:	3720      	adds	r7, #32
 801e462:	46bd      	mov	sp, r7
 801e464:	bd80      	pop	{r7, pc}

0801e466 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801e466:	b580      	push	{r7, lr}
 801e468:	b088      	sub	sp, #32
 801e46a:	af00      	add	r7, sp, #0
 801e46c:	60f8      	str	r0, [r7, #12]
 801e46e:	60b9      	str	r1, [r7, #8]
 801e470:	4611      	mov	r1, r2
 801e472:	461a      	mov	r2, r3
 801e474:	460b      	mov	r3, r1
 801e476:	71fb      	strb	r3, [r7, #7]
 801e478:	4613      	mov	r3, r2
 801e47a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801e47c:	2300      	movs	r3, #0
 801e47e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e480:	2300      	movs	r3, #0
 801e482:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801e488:	68bb      	ldr	r3, [r7, #8]
 801e48a:	2b03      	cmp	r3, #3
 801e48c:	dc03      	bgt.n	801e496 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e48e:	f06f 0301 	mvn.w	r3, #1
 801e492:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e494:	e037      	b.n	801e506 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801e496:	79fb      	ldrb	r3, [r7, #7]
 801e498:	f003 030f 	and.w	r3, r3, #15
 801e49c:	b2da      	uxtb	r2, r3
 801e49e:	7e3b      	ldrb	r3, [r7, #24]
 801e4a0:	f362 1307 	bfi	r3, r2, #4, #4
 801e4a4:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801e4a6:	79bb      	ldrb	r3, [r7, #6]
 801e4a8:	f003 0301 	and.w	r3, r3, #1
 801e4ac:	b2da      	uxtb	r2, r3
 801e4ae:	7e3b      	ldrb	r3, [r7, #24]
 801e4b0:	f362 03c3 	bfi	r3, r2, #3, #1
 801e4b4:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e4b6:	79fb      	ldrb	r3, [r7, #7]
 801e4b8:	2b06      	cmp	r3, #6
 801e4ba:	bf0c      	ite	eq
 801e4bc:	2301      	moveq	r3, #1
 801e4be:	2300      	movne	r3, #0
 801e4c0:	b2db      	uxtb	r3, r3
 801e4c2:	f003 0303 	and.w	r3, r3, #3
 801e4c6:	b2da      	uxtb	r2, r3
 801e4c8:	7e3b      	ldrb	r3, [r7, #24]
 801e4ca:	f362 0342 	bfi	r3, r2, #1, #2
 801e4ce:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801e4d0:	7e3a      	ldrb	r2, [r7, #24]
 801e4d2:	f107 0314 	add.w	r3, r7, #20
 801e4d6:	4611      	mov	r1, r2
 801e4d8:	4618      	mov	r0, r3
 801e4da:	f7ff fe22 	bl	801e122 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e4de:	697b      	ldr	r3, [r7, #20]
 801e4e0:	2102      	movs	r1, #2
 801e4e2:	4618      	mov	r0, r3
 801e4e4:	f7ff fd22 	bl	801df2c <MQTTPacket_encode>
 801e4e8:	4602      	mov	r2, r0
 801e4ea:	697b      	ldr	r3, [r7, #20]
 801e4ec:	4413      	add	r3, r2
 801e4ee:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801e4f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801e4f2:	f107 0314 	add.w	r3, r7, #20
 801e4f6:	4611      	mov	r1, r2
 801e4f8:	4618      	mov	r0, r3
 801e4fa:	f7ff fe27 	bl	801e14c <writeInt>
	rc = ptr - buf;
 801e4fe:	697a      	ldr	r2, [r7, #20]
 801e500:	68fb      	ldr	r3, [r7, #12]
 801e502:	1ad3      	subs	r3, r2, r3
 801e504:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e506:	69fb      	ldr	r3, [r7, #28]
}
 801e508:	4618      	mov	r0, r3
 801e50a:	3720      	adds	r7, #32
 801e50c:	46bd      	mov	sp, r7
 801e50e:	bd80      	pop	{r7, pc}

0801e510 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801e510:	b590      	push	{r4, r7, lr}
 801e512:	b085      	sub	sp, #20
 801e514:	af00      	add	r7, sp, #0
 801e516:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e518:	2300      	movs	r3, #0
 801e51a:	60fb      	str	r3, [r7, #12]
 801e51c:	2300      	movs	r3, #0
 801e51e:	60bb      	str	r3, [r7, #8]
 801e520:	e02e      	b.n	801e580 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801e522:	68bb      	ldr	r3, [r7, #8]
 801e524:	687a      	ldr	r2, [r7, #4]
 801e526:	441a      	add	r2, r3
 801e528:	68fb      	ldr	r3, [r7, #12]
 801e52a:	6879      	ldr	r1, [r7, #4]
 801e52c:	440b      	add	r3, r1
 801e52e:	7812      	ldrb	r2, [r2, #0]
 801e530:	701a      	strb	r2, [r3, #0]
 801e532:	781b      	ldrb	r3, [r3, #0]
 801e534:	2b25      	cmp	r3, #37	@ 0x25
 801e536:	d11d      	bne.n	801e574 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801e538:	68bb      	ldr	r3, [r7, #8]
 801e53a:	3301      	adds	r3, #1
 801e53c:	687a      	ldr	r2, [r7, #4]
 801e53e:	4413      	add	r3, r2
 801e540:	781b      	ldrb	r3, [r3, #0]
 801e542:	4618      	mov	r0, r3
 801e544:	f000 fbf1 	bl	801ed2a <C2D>
 801e548:	4603      	mov	r3, r0
 801e54a:	011b      	lsls	r3, r3, #4
 801e54c:	b2dc      	uxtb	r4, r3
 801e54e:	68bb      	ldr	r3, [r7, #8]
 801e550:	3302      	adds	r3, #2
 801e552:	687a      	ldr	r2, [r7, #4]
 801e554:	4413      	add	r3, r2
 801e556:	781b      	ldrb	r3, [r3, #0]
 801e558:	4618      	mov	r0, r3
 801e55a:	f000 fbe6 	bl	801ed2a <C2D>
 801e55e:	4603      	mov	r3, r0
 801e560:	4619      	mov	r1, r3
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	687a      	ldr	r2, [r7, #4]
 801e566:	4413      	add	r3, r2
 801e568:	1862      	adds	r2, r4, r1
 801e56a:	b2d2      	uxtb	r2, r2
 801e56c:	701a      	strb	r2, [r3, #0]
			y+=2;
 801e56e:	68bb      	ldr	r3, [r7, #8]
 801e570:	3302      	adds	r3, #2
 801e572:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	3301      	adds	r3, #1
 801e578:	60fb      	str	r3, [r7, #12]
 801e57a:	68bb      	ldr	r3, [r7, #8]
 801e57c:	3301      	adds	r3, #1
 801e57e:	60bb      	str	r3, [r7, #8]
 801e580:	68bb      	ldr	r3, [r7, #8]
 801e582:	687a      	ldr	r2, [r7, #4]
 801e584:	4413      	add	r3, r2
 801e586:	781b      	ldrb	r3, [r3, #0]
 801e588:	2b00      	cmp	r3, #0
 801e58a:	d1ca      	bne.n	801e522 <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	687a      	ldr	r2, [r7, #4]
 801e590:	4413      	add	r3, r2
 801e592:	2200      	movs	r2, #0
 801e594:	701a      	strb	r2, [r3, #0]
}
 801e596:	bf00      	nop
 801e598:	3714      	adds	r7, #20
 801e59a:	46bd      	mov	sp, r7
 801e59c:	bd90      	pop	{r4, r7, pc}
	...

0801e5a0 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b088      	sub	sp, #32
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	60f8      	str	r0, [r7, #12]
 801e5a8:	460b      	mov	r3, r1
 801e5aa:	607a      	str	r2, [r7, #4]
 801e5ac:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801e5ae:	7afb      	ldrb	r3, [r7, #11]
 801e5b0:	2b01      	cmp	r3, #1
 801e5b2:	d102      	bne.n	801e5ba <make_http_response_head+0x1a>
 801e5b4:	4b42      	ldr	r3, [pc, #264]	@ (801e6c0 <make_http_response_head+0x120>)
 801e5b6:	61fb      	str	r3, [r7, #28]
 801e5b8:	e061      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801e5ba:	7afb      	ldrb	r3, [r7, #11]
 801e5bc:	2b02      	cmp	r3, #2
 801e5be:	d102      	bne.n	801e5c6 <make_http_response_head+0x26>
 801e5c0:	4b40      	ldr	r3, [pc, #256]	@ (801e6c4 <make_http_response_head+0x124>)
 801e5c2:	61fb      	str	r3, [r7, #28]
 801e5c4:	e05b      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801e5c6:	7afb      	ldrb	r3, [r7, #11]
 801e5c8:	2b03      	cmp	r3, #3
 801e5ca:	d102      	bne.n	801e5d2 <make_http_response_head+0x32>
 801e5cc:	4b3e      	ldr	r3, [pc, #248]	@ (801e6c8 <make_http_response_head+0x128>)
 801e5ce:	61fb      	str	r3, [r7, #28]
 801e5d0:	e055      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801e5d2:	7afb      	ldrb	r3, [r7, #11]
 801e5d4:	2b04      	cmp	r3, #4
 801e5d6:	d102      	bne.n	801e5de <make_http_response_head+0x3e>
 801e5d8:	4b3c      	ldr	r3, [pc, #240]	@ (801e6cc <make_http_response_head+0x12c>)
 801e5da:	61fb      	str	r3, [r7, #28]
 801e5dc:	e04f      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801e5de:	7afb      	ldrb	r3, [r7, #11]
 801e5e0:	2b05      	cmp	r3, #5
 801e5e2:	d102      	bne.n	801e5ea <make_http_response_head+0x4a>
 801e5e4:	4b3a      	ldr	r3, [pc, #232]	@ (801e6d0 <make_http_response_head+0x130>)
 801e5e6:	61fb      	str	r3, [r7, #28]
 801e5e8:	e049      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801e5ea:	7afb      	ldrb	r3, [r7, #11]
 801e5ec:	2b09      	cmp	r3, #9
 801e5ee:	d102      	bne.n	801e5f6 <make_http_response_head+0x56>
 801e5f0:	4b38      	ldr	r3, [pc, #224]	@ (801e6d4 <make_http_response_head+0x134>)
 801e5f2:	61fb      	str	r3, [r7, #28]
 801e5f4:	e043      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801e5f6:	7afb      	ldrb	r3, [r7, #11]
 801e5f8:	2b0a      	cmp	r3, #10
 801e5fa:	d102      	bne.n	801e602 <make_http_response_head+0x62>
 801e5fc:	4b36      	ldr	r3, [pc, #216]	@ (801e6d8 <make_http_response_head+0x138>)
 801e5fe:	61fb      	str	r3, [r7, #28]
 801e600:	e03d      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801e602:	7afb      	ldrb	r3, [r7, #11]
 801e604:	2b0c      	cmp	r3, #12
 801e606:	d102      	bne.n	801e60e <make_http_response_head+0x6e>
 801e608:	4b34      	ldr	r3, [pc, #208]	@ (801e6dc <make_http_response_head+0x13c>)
 801e60a:	61fb      	str	r3, [r7, #28]
 801e60c:	e037      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801e60e:	7afb      	ldrb	r3, [r7, #11]
 801e610:	2b0b      	cmp	r3, #11
 801e612:	d102      	bne.n	801e61a <make_http_response_head+0x7a>
 801e614:	4b32      	ldr	r3, [pc, #200]	@ (801e6e0 <make_http_response_head+0x140>)
 801e616:	61fb      	str	r3, [r7, #28]
 801e618:	e031      	b.n	801e67e <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801e61a:	7afb      	ldrb	r3, [r7, #11]
 801e61c:	2b08      	cmp	r3, #8
 801e61e:	d102      	bne.n	801e626 <make_http_response_head+0x86>
 801e620:	4b30      	ldr	r3, [pc, #192]	@ (801e6e4 <make_http_response_head+0x144>)
 801e622:	61fb      	str	r3, [r7, #28]
 801e624:	e02b      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801e626:	7afb      	ldrb	r3, [r7, #11]
 801e628:	2b0d      	cmp	r3, #13
 801e62a:	d102      	bne.n	801e632 <make_http_response_head+0x92>
 801e62c:	4b2e      	ldr	r3, [pc, #184]	@ (801e6e8 <make_http_response_head+0x148>)
 801e62e:	61fb      	str	r3, [r7, #28]
 801e630:	e025      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801e632:	7afb      	ldrb	r3, [r7, #11]
 801e634:	2b0e      	cmp	r3, #14
 801e636:	d102      	bne.n	801e63e <make_http_response_head+0x9e>
 801e638:	4b2c      	ldr	r3, [pc, #176]	@ (801e6ec <make_http_response_head+0x14c>)
 801e63a:	61fb      	str	r3, [r7, #28]
 801e63c:	e01f      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801e63e:	7afb      	ldrb	r3, [r7, #11]
 801e640:	2b14      	cmp	r3, #20
 801e642:	d102      	bne.n	801e64a <make_http_response_head+0xaa>
 801e644:	4b2a      	ldr	r3, [pc, #168]	@ (801e6f0 <make_http_response_head+0x150>)
 801e646:	61fb      	str	r3, [r7, #28]
 801e648:	e019      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801e64a:	7afb      	ldrb	r3, [r7, #11]
 801e64c:	2b15      	cmp	r3, #21
 801e64e:	d102      	bne.n	801e656 <make_http_response_head+0xb6>
 801e650:	4b28      	ldr	r3, [pc, #160]	@ (801e6f4 <make_http_response_head+0x154>)
 801e652:	61fb      	str	r3, [r7, #28]
 801e654:	e013      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801e656:	7afb      	ldrb	r3, [r7, #11]
 801e658:	2b16      	cmp	r3, #22
 801e65a:	d102      	bne.n	801e662 <make_http_response_head+0xc2>
 801e65c:	4b26      	ldr	r3, [pc, #152]	@ (801e6f8 <make_http_response_head+0x158>)
 801e65e:	61fb      	str	r3, [r7, #28]
 801e660:	e00d      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801e662:	7afb      	ldrb	r3, [r7, #11]
 801e664:	2b17      	cmp	r3, #23
 801e666:	d102      	bne.n	801e66e <make_http_response_head+0xce>
 801e668:	4b24      	ldr	r3, [pc, #144]	@ (801e6fc <make_http_response_head+0x15c>)
 801e66a:	61fb      	str	r3, [r7, #28]
 801e66c:	e007      	b.n	801e67e <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801e66e:	7afb      	ldrb	r3, [r7, #11]
 801e670:	2b18      	cmp	r3, #24
 801e672:	d102      	bne.n	801e67a <make_http_response_head+0xda>
 801e674:	4b22      	ldr	r3, [pc, #136]	@ (801e700 <make_http_response_head+0x160>)
 801e676:	61fb      	str	r3, [r7, #28]
 801e678:	e001      	b.n	801e67e <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801e67a:	2300      	movs	r3, #0
 801e67c:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801e67e:	f107 0310 	add.w	r3, r7, #16
 801e682:	687a      	ldr	r2, [r7, #4]
 801e684:	491f      	ldr	r1, [pc, #124]	@ (801e704 <make_http_response_head+0x164>)
 801e686:	4618      	mov	r0, r3
 801e688:	f00f f934 	bl	802d8f4 <siprintf>
	strcpy(buf, head);
 801e68c:	69f9      	ldr	r1, [r7, #28]
 801e68e:	68f8      	ldr	r0, [r7, #12]
 801e690:	f00f fc4b 	bl	802df2a <strcpy>
	strcat(buf, tmp);
 801e694:	f107 0310 	add.w	r3, r7, #16
 801e698:	4619      	mov	r1, r3
 801e69a:	68f8      	ldr	r0, [r7, #12]
 801e69c:	f00f fa80 	bl	802dba0 <strcat>
	strcat(buf, "\r\n\r\n");
 801e6a0:	68f8      	ldr	r0, [r7, #12]
 801e6a2:	f7f1 fdfd 	bl	80102a0 <strlen>
 801e6a6:	4603      	mov	r3, r0
 801e6a8:	461a      	mov	r2, r3
 801e6aa:	68fb      	ldr	r3, [r7, #12]
 801e6ac:	4413      	add	r3, r2
 801e6ae:	4a16      	ldr	r2, [pc, #88]	@ (801e708 <make_http_response_head+0x168>)
 801e6b0:	6810      	ldr	r0, [r2, #0]
 801e6b2:	6018      	str	r0, [r3, #0]
 801e6b4:	7912      	ldrb	r2, [r2, #4]
 801e6b6:	711a      	strb	r2, [r3, #4]
}
 801e6b8:	bf00      	nop
 801e6ba:	3720      	adds	r7, #32
 801e6bc:	46bd      	mov	sp, r7
 801e6be:	bd80      	pop	{r7, pc}
 801e6c0:	08033028 	.word	0x08033028
 801e6c4:	0803307c 	.word	0x0803307c
 801e6c8:	080330b8 	.word	0x080330b8
 801e6cc:	080330f4 	.word	0x080330f4
 801e6d0:	08033130 	.word	0x08033130
 801e6d4:	08033180 	.word	0x08033180
 801e6d8:	080331d4 	.word	0x080331d4
 801e6dc:	08033210 	.word	0x08033210
 801e6e0:	08033254 	.word	0x08033254
 801e6e4:	0803329c 	.word	0x0803329c
 801e6e8:	080332f8 	.word	0x080332f8
 801e6ec:	08033334 	.word	0x08033334
 801e6f0:	08033374 	.word	0x08033374
 801e6f4:	080333c4 	.word	0x080333c4
 801e6f8:	08033414 	.word	0x08033414
 801e6fc:	0803345c 	.word	0x0803345c
 801e700:	080334ac 	.word	0x080334ac
 801e704:	080334ec 	.word	0x080334ec
 801e708:	080334f0 	.word	0x080334f0

0801e70c <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801e70c:	b580      	push	{r7, lr}
 801e70e:	b084      	sub	sp, #16
 801e710:	af00      	add	r7, sp, #0
 801e712:	6078      	str	r0, [r7, #4]
 801e714:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801e716:	683b      	ldr	r3, [r7, #0]
 801e718:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801e71a:	499f      	ldr	r1, [pc, #636]	@ (801e998 <find_http_uri_type+0x28c>)
 801e71c:	68f8      	ldr	r0, [r7, #12]
 801e71e:	f00f fb11 	bl	802dd44 <strstr>
 801e722:	4603      	mov	r3, r0
 801e724:	2b00      	cmp	r3, #0
 801e726:	d106      	bne.n	801e736 <find_http_uri_type+0x2a>
 801e728:	499c      	ldr	r1, [pc, #624]	@ (801e99c <find_http_uri_type+0x290>)
 801e72a:	68f8      	ldr	r0, [r7, #12]
 801e72c:	f00f fb0a 	bl	802dd44 <strstr>
 801e730:	4603      	mov	r3, r0
 801e732:	2b00      	cmp	r3, #0
 801e734:	d003      	beq.n	801e73e <find_http_uri_type+0x32>
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	2201      	movs	r2, #1
 801e73a:	701a      	strb	r2, [r3, #0]
 801e73c:	e127      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801e73e:	4998      	ldr	r1, [pc, #608]	@ (801e9a0 <find_http_uri_type+0x294>)
 801e740:	68f8      	ldr	r0, [r7, #12]
 801e742:	f00f faff 	bl	802dd44 <strstr>
 801e746:	4603      	mov	r3, r0
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d003      	beq.n	801e754 <find_http_uri_type+0x48>
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	2202      	movs	r2, #2
 801e750:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801e752:	e11c      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801e754:	4993      	ldr	r1, [pc, #588]	@ (801e9a4 <find_http_uri_type+0x298>)
 801e756:	68f8      	ldr	r0, [r7, #12]
 801e758:	f00f faf4 	bl	802dd44 <strstr>
 801e75c:	4603      	mov	r3, r0
 801e75e:	2b00      	cmp	r3, #0
 801e760:	d106      	bne.n	801e770 <find_http_uri_type+0x64>
 801e762:	4991      	ldr	r1, [pc, #580]	@ (801e9a8 <find_http_uri_type+0x29c>)
 801e764:	68f8      	ldr	r0, [r7, #12]
 801e766:	f00f faed 	bl	802dd44 <strstr>
 801e76a:	4603      	mov	r3, r0
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d003      	beq.n	801e778 <find_http_uri_type+0x6c>
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	2203      	movs	r2, #3
 801e774:	701a      	strb	r2, [r3, #0]
 801e776:	e10a      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801e778:	498c      	ldr	r1, [pc, #560]	@ (801e9ac <find_http_uri_type+0x2a0>)
 801e77a:	68f8      	ldr	r0, [r7, #12]
 801e77c:	f00f fae2 	bl	802dd44 <strstr>
 801e780:	4603      	mov	r3, r0
 801e782:	2b00      	cmp	r3, #0
 801e784:	d106      	bne.n	801e794 <find_http_uri_type+0x88>
 801e786:	498a      	ldr	r1, [pc, #552]	@ (801e9b0 <find_http_uri_type+0x2a4>)
 801e788:	68f8      	ldr	r0, [r7, #12]
 801e78a:	f00f fadb 	bl	802dd44 <strstr>
 801e78e:	4603      	mov	r3, r0
 801e790:	2b00      	cmp	r3, #0
 801e792:	d003      	beq.n	801e79c <find_http_uri_type+0x90>
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	2204      	movs	r2, #4
 801e798:	701a      	strb	r2, [r3, #0]
 801e79a:	e0f8      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e79c:	4985      	ldr	r1, [pc, #532]	@ (801e9b4 <find_http_uri_type+0x2a8>)
 801e79e:	68f8      	ldr	r0, [r7, #12]
 801e7a0:	f00f fad0 	bl	802dd44 <strstr>
 801e7a4:	4603      	mov	r3, r0
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d003      	beq.n	801e7b2 <find_http_uri_type+0xa6>
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	2205      	movs	r2, #5
 801e7ae:	701a      	strb	r2, [r3, #0]
}
 801e7b0:	e0ed      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e7b2:	4981      	ldr	r1, [pc, #516]	@ (801e9b8 <find_http_uri_type+0x2ac>)
 801e7b4:	68f8      	ldr	r0, [r7, #12]
 801e7b6:	f00f fac5 	bl	802dd44 <strstr>
 801e7ba:	4603      	mov	r3, r0
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d106      	bne.n	801e7ce <find_http_uri_type+0xc2>
 801e7c0:	497e      	ldr	r1, [pc, #504]	@ (801e9bc <find_http_uri_type+0x2b0>)
 801e7c2:	68f8      	ldr	r0, [r7, #12]
 801e7c4:	f00f fabe 	bl	802dd44 <strstr>
 801e7c8:	4603      	mov	r3, r0
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d003      	beq.n	801e7d6 <find_http_uri_type+0xca>
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	2208      	movs	r2, #8
 801e7d2:	701a      	strb	r2, [r3, #0]
 801e7d4:	e0db      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e7d6:	497a      	ldr	r1, [pc, #488]	@ (801e9c0 <find_http_uri_type+0x2b4>)
 801e7d8:	68f8      	ldr	r0, [r7, #12]
 801e7da:	f00f fab3 	bl	802dd44 <strstr>
 801e7de:	4603      	mov	r3, r0
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d106      	bne.n	801e7f2 <find_http_uri_type+0xe6>
 801e7e4:	4977      	ldr	r1, [pc, #476]	@ (801e9c4 <find_http_uri_type+0x2b8>)
 801e7e6:	68f8      	ldr	r0, [r7, #12]
 801e7e8:	f00f faac 	bl	802dd44 <strstr>
 801e7ec:	4603      	mov	r3, r0
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d003      	beq.n	801e7fa <find_http_uri_type+0xee>
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	220c      	movs	r2, #12
 801e7f6:	701a      	strb	r2, [r3, #0]
 801e7f8:	e0c9      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e7fa:	4973      	ldr	r1, [pc, #460]	@ (801e9c8 <find_http_uri_type+0x2bc>)
 801e7fc:	68f8      	ldr	r0, [r7, #12]
 801e7fe:	f00f faa1 	bl	802dd44 <strstr>
 801e802:	4603      	mov	r3, r0
 801e804:	2b00      	cmp	r3, #0
 801e806:	d106      	bne.n	801e816 <find_http_uri_type+0x10a>
 801e808:	4970      	ldr	r1, [pc, #448]	@ (801e9cc <find_http_uri_type+0x2c0>)
 801e80a:	68f8      	ldr	r0, [r7, #12]
 801e80c:	f00f fa9a 	bl	802dd44 <strstr>
 801e810:	4603      	mov	r3, r0
 801e812:	2b00      	cmp	r3, #0
 801e814:	d003      	beq.n	801e81e <find_http_uri_type+0x112>
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	220b      	movs	r2, #11
 801e81a:	701a      	strb	r2, [r3, #0]
 801e81c:	e0b7      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e81e:	4967      	ldr	r1, [pc, #412]	@ (801e9bc <find_http_uri_type+0x2b0>)
 801e820:	68f8      	ldr	r0, [r7, #12]
 801e822:	f00f fa8f 	bl	802dd44 <strstr>
 801e826:	4603      	mov	r3, r0
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d106      	bne.n	801e83a <find_http_uri_type+0x12e>
 801e82c:	4962      	ldr	r1, [pc, #392]	@ (801e9b8 <find_http_uri_type+0x2ac>)
 801e82e:	68f8      	ldr	r0, [r7, #12]
 801e830:	f00f fa88 	bl	802dd44 <strstr>
 801e834:	4603      	mov	r3, r0
 801e836:	2b00      	cmp	r3, #0
 801e838:	d003      	beq.n	801e842 <find_http_uri_type+0x136>
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	2208      	movs	r2, #8
 801e83e:	701a      	strb	r2, [r3, #0]
 801e840:	e0a5      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e842:	4963      	ldr	r1, [pc, #396]	@ (801e9d0 <find_http_uri_type+0x2c4>)
 801e844:	68f8      	ldr	r0, [r7, #12]
 801e846:	f00f fa7d 	bl	802dd44 <strstr>
 801e84a:	4603      	mov	r3, r0
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d106      	bne.n	801e85e <find_http_uri_type+0x152>
 801e850:	4960      	ldr	r1, [pc, #384]	@ (801e9d4 <find_http_uri_type+0x2c8>)
 801e852:	68f8      	ldr	r0, [r7, #12]
 801e854:	f00f fa76 	bl	802dd44 <strstr>
 801e858:	4603      	mov	r3, r0
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	d003      	beq.n	801e866 <find_http_uri_type+0x15a>
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	2209      	movs	r2, #9
 801e862:	701a      	strb	r2, [r3, #0]
 801e864:	e093      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e866:	495c      	ldr	r1, [pc, #368]	@ (801e9d8 <find_http_uri_type+0x2cc>)
 801e868:	68f8      	ldr	r0, [r7, #12]
 801e86a:	f00f fa6b 	bl	802dd44 <strstr>
 801e86e:	4603      	mov	r3, r0
 801e870:	2b00      	cmp	r3, #0
 801e872:	d106      	bne.n	801e882 <find_http_uri_type+0x176>
 801e874:	4959      	ldr	r1, [pc, #356]	@ (801e9dc <find_http_uri_type+0x2d0>)
 801e876:	68f8      	ldr	r0, [r7, #12]
 801e878:	f00f fa64 	bl	802dd44 <strstr>
 801e87c:	4603      	mov	r3, r0
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d003      	beq.n	801e88a <find_http_uri_type+0x17e>
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	220a      	movs	r2, #10
 801e886:	701a      	strb	r2, [r3, #0]
 801e888:	e081      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e88a:	4955      	ldr	r1, [pc, #340]	@ (801e9e0 <find_http_uri_type+0x2d4>)
 801e88c:	68f8      	ldr	r0, [r7, #12]
 801e88e:	f00f fa59 	bl	802dd44 <strstr>
 801e892:	4603      	mov	r3, r0
 801e894:	2b00      	cmp	r3, #0
 801e896:	d106      	bne.n	801e8a6 <find_http_uri_type+0x19a>
 801e898:	4952      	ldr	r1, [pc, #328]	@ (801e9e4 <find_http_uri_type+0x2d8>)
 801e89a:	68f8      	ldr	r0, [r7, #12]
 801e89c:	f00f fa52 	bl	802dd44 <strstr>
 801e8a0:	4603      	mov	r3, r0
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d003      	beq.n	801e8ae <find_http_uri_type+0x1a2>
 801e8a6:	687b      	ldr	r3, [r7, #4]
 801e8a8:	220d      	movs	r2, #13
 801e8aa:	701a      	strb	r2, [r3, #0]
 801e8ac:	e06f      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e8ae:	494e      	ldr	r1, [pc, #312]	@ (801e9e8 <find_http_uri_type+0x2dc>)
 801e8b0:	68f8      	ldr	r0, [r7, #12]
 801e8b2:	f00f fa47 	bl	802dd44 <strstr>
 801e8b6:	4603      	mov	r3, r0
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	d106      	bne.n	801e8ca <find_http_uri_type+0x1be>
 801e8bc:	494b      	ldr	r1, [pc, #300]	@ (801e9ec <find_http_uri_type+0x2e0>)
 801e8be:	68f8      	ldr	r0, [r7, #12]
 801e8c0:	f00f fa40 	bl	802dd44 <strstr>
 801e8c4:	4603      	mov	r3, r0
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d003      	beq.n	801e8d2 <find_http_uri_type+0x1c6>
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	220e      	movs	r2, #14
 801e8ce:	701a      	strb	r2, [r3, #0]
 801e8d0:	e05d      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e8d2:	4947      	ldr	r1, [pc, #284]	@ (801e9f0 <find_http_uri_type+0x2e4>)
 801e8d4:	68f8      	ldr	r0, [r7, #12]
 801e8d6:	f00f fa35 	bl	802dd44 <strstr>
 801e8da:	4603      	mov	r3, r0
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d106      	bne.n	801e8ee <find_http_uri_type+0x1e2>
 801e8e0:	4944      	ldr	r1, [pc, #272]	@ (801e9f4 <find_http_uri_type+0x2e8>)
 801e8e2:	68f8      	ldr	r0, [r7, #12]
 801e8e4:	f00f fa2e 	bl	802dd44 <strstr>
 801e8e8:	4603      	mov	r3, r0
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d003      	beq.n	801e8f6 <find_http_uri_type+0x1ea>
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	2214      	movs	r2, #20
 801e8f2:	701a      	strb	r2, [r3, #0]
 801e8f4:	e04b      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e8f6:	4940      	ldr	r1, [pc, #256]	@ (801e9f8 <find_http_uri_type+0x2ec>)
 801e8f8:	68f8      	ldr	r0, [r7, #12]
 801e8fa:	f00f fa23 	bl	802dd44 <strstr>
 801e8fe:	4603      	mov	r3, r0
 801e900:	2b00      	cmp	r3, #0
 801e902:	d106      	bne.n	801e912 <find_http_uri_type+0x206>
 801e904:	493d      	ldr	r1, [pc, #244]	@ (801e9fc <find_http_uri_type+0x2f0>)
 801e906:	68f8      	ldr	r0, [r7, #12]
 801e908:	f00f fa1c 	bl	802dd44 <strstr>
 801e90c:	4603      	mov	r3, r0
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d003      	beq.n	801e91a <find_http_uri_type+0x20e>
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	2215      	movs	r2, #21
 801e916:	701a      	strb	r2, [r3, #0]
 801e918:	e039      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e91a:	4939      	ldr	r1, [pc, #228]	@ (801ea00 <find_http_uri_type+0x2f4>)
 801e91c:	68f8      	ldr	r0, [r7, #12]
 801e91e:	f00f fa11 	bl	802dd44 <strstr>
 801e922:	4603      	mov	r3, r0
 801e924:	2b00      	cmp	r3, #0
 801e926:	d106      	bne.n	801e936 <find_http_uri_type+0x22a>
 801e928:	4936      	ldr	r1, [pc, #216]	@ (801ea04 <find_http_uri_type+0x2f8>)
 801e92a:	68f8      	ldr	r0, [r7, #12]
 801e92c:	f00f fa0a 	bl	802dd44 <strstr>
 801e930:	4603      	mov	r3, r0
 801e932:	2b00      	cmp	r3, #0
 801e934:	d003      	beq.n	801e93e <find_http_uri_type+0x232>
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	2216      	movs	r2, #22
 801e93a:	701a      	strb	r2, [r3, #0]
 801e93c:	e027      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e93e:	4932      	ldr	r1, [pc, #200]	@ (801ea08 <find_http_uri_type+0x2fc>)
 801e940:	68f8      	ldr	r0, [r7, #12]
 801e942:	f00f f9ff 	bl	802dd44 <strstr>
 801e946:	4603      	mov	r3, r0
 801e948:	2b00      	cmp	r3, #0
 801e94a:	d106      	bne.n	801e95a <find_http_uri_type+0x24e>
 801e94c:	492f      	ldr	r1, [pc, #188]	@ (801ea0c <find_http_uri_type+0x300>)
 801e94e:	68f8      	ldr	r0, [r7, #12]
 801e950:	f00f f9f8 	bl	802dd44 <strstr>
 801e954:	4603      	mov	r3, r0
 801e956:	2b00      	cmp	r3, #0
 801e958:	d003      	beq.n	801e962 <find_http_uri_type+0x256>
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	2217      	movs	r2, #23
 801e95e:	701a      	strb	r2, [r3, #0]
 801e960:	e015      	b.n	801e98e <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e962:	492b      	ldr	r1, [pc, #172]	@ (801ea10 <find_http_uri_type+0x304>)
 801e964:	68f8      	ldr	r0, [r7, #12]
 801e966:	f00f f9ed 	bl	802dd44 <strstr>
 801e96a:	4603      	mov	r3, r0
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d106      	bne.n	801e97e <find_http_uri_type+0x272>
 801e970:	4928      	ldr	r1, [pc, #160]	@ (801ea14 <find_http_uri_type+0x308>)
 801e972:	68f8      	ldr	r0, [r7, #12]
 801e974:	f00f f9e6 	bl	802dd44 <strstr>
 801e978:	4603      	mov	r3, r0
 801e97a:	2b00      	cmp	r3, #0
 801e97c:	d003      	beq.n	801e986 <find_http_uri_type+0x27a>
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	2218      	movs	r2, #24
 801e982:	701a      	strb	r2, [r3, #0]
 801e984:	e003      	b.n	801e98e <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	2200      	movs	r2, #0
 801e98a:	701a      	strb	r2, [r3, #0]
}
 801e98c:	e7ff      	b.n	801e98e <find_http_uri_type+0x282>
 801e98e:	bf00      	nop
 801e990:	3710      	adds	r7, #16
 801e992:	46bd      	mov	sp, r7
 801e994:	bd80      	pop	{r7, pc}
 801e996:	bf00      	nop
 801e998:	080334f8 	.word	0x080334f8
 801e99c:	08033500 	.word	0x08033500
 801e9a0:	08033508 	.word	0x08033508
 801e9a4:	08033510 	.word	0x08033510
 801e9a8:	08033518 	.word	0x08033518
 801e9ac:	08033520 	.word	0x08033520
 801e9b0:	08033528 	.word	0x08033528
 801e9b4:	08033530 	.word	0x08033530
 801e9b8:	08033538 	.word	0x08033538
 801e9bc:	08033540 	.word	0x08033540
 801e9c0:	08033548 	.word	0x08033548
 801e9c4:	08033550 	.word	0x08033550
 801e9c8:	08033558 	.word	0x08033558
 801e9cc:	0803355c 	.word	0x0803355c
 801e9d0:	08033560 	.word	0x08033560
 801e9d4:	08033568 	.word	0x08033568
 801e9d8:	08033570 	.word	0x08033570
 801e9dc:	08033578 	.word	0x08033578
 801e9e0:	08033580 	.word	0x08033580
 801e9e4:	08033588 	.word	0x08033588
 801e9e8:	08033590 	.word	0x08033590
 801e9ec:	08033598 	.word	0x08033598
 801e9f0:	080335a0 	.word	0x080335a0
 801e9f4:	080335a8 	.word	0x080335a8
 801e9f8:	080335b0 	.word	0x080335b0
 801e9fc:	080335b8 	.word	0x080335b8
 801ea00:	080335c0 	.word	0x080335c0
 801ea04:	080335c8 	.word	0x080335c8
 801ea08:	080335d0 	.word	0x080335d0
 801ea0c:	080335d8 	.word	0x080335d8
 801ea10:	080335e0 	.word	0x080335e0
 801ea14:	080335e8 	.word	0x080335e8

0801ea18 <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b084      	sub	sp, #16
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
 801ea20:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801ea22:	4935      	ldr	r1, [pc, #212]	@ (801eaf8 <parse_http_request+0xe0>)
 801ea24:	6838      	ldr	r0, [r7, #0]
 801ea26:	f00f f931 	bl	802dc8c <strtok>
 801ea2a:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801ea2c:	68fb      	ldr	r3, [r7, #12]
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d103      	bne.n	801ea3a <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	2200      	movs	r2, #0
 801ea36:	701a      	strb	r2, [r3, #0]
    return;
 801ea38:	e05a      	b.n	801eaf0 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801ea3a:	4930      	ldr	r1, [pc, #192]	@ (801eafc <parse_http_request+0xe4>)
 801ea3c:	68f8      	ldr	r0, [r7, #12]
 801ea3e:	f7f1 fbcf 	bl	80101e0 <strcmp>
 801ea42:	4603      	mov	r3, r0
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d006      	beq.n	801ea56 <parse_http_request+0x3e>
 801ea48:	492d      	ldr	r1, [pc, #180]	@ (801eb00 <parse_http_request+0xe8>)
 801ea4a:	68f8      	ldr	r0, [r7, #12]
 801ea4c:	f7f1 fbc8 	bl	80101e0 <strcmp>
 801ea50:	4603      	mov	r3, r0
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	d10a      	bne.n	801ea6c <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	2201      	movs	r2, #1
 801ea5a:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801ea5c:	68fb      	ldr	r3, [r7, #12]
 801ea5e:	3304      	adds	r3, #4
 801ea60:	4925      	ldr	r1, [pc, #148]	@ (801eaf8 <parse_http_request+0xe0>)
 801ea62:	4618      	mov	r0, r3
 801ea64:	f00f f912 	bl	802dc8c <strtok>
 801ea68:	60f8      	str	r0, [r7, #12]
 801ea6a:	e034      	b.n	801ead6 <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801ea6c:	4925      	ldr	r1, [pc, #148]	@ (801eb04 <parse_http_request+0xec>)
 801ea6e:	68f8      	ldr	r0, [r7, #12]
 801ea70:	f7f1 fbb6 	bl	80101e0 <strcmp>
 801ea74:	4603      	mov	r3, r0
 801ea76:	2b00      	cmp	r3, #0
 801ea78:	d006      	beq.n	801ea88 <parse_http_request+0x70>
 801ea7a:	4923      	ldr	r1, [pc, #140]	@ (801eb08 <parse_http_request+0xf0>)
 801ea7c:	68f8      	ldr	r0, [r7, #12]
 801ea7e:	f7f1 fbaf 	bl	80101e0 <strcmp>
 801ea82:	4603      	mov	r3, r0
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d10a      	bne.n	801ea9e <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	2202      	movs	r2, #2
 801ea8c:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	3305      	adds	r3, #5
 801ea92:	4919      	ldr	r1, [pc, #100]	@ (801eaf8 <parse_http_request+0xe0>)
 801ea94:	4618      	mov	r0, r3
 801ea96:	f00f f8f9 	bl	802dc8c <strtok>
 801ea9a:	60f8      	str	r0, [r7, #12]
 801ea9c:	e01b      	b.n	801ead6 <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801ea9e:	491b      	ldr	r1, [pc, #108]	@ (801eb0c <parse_http_request+0xf4>)
 801eaa0:	68f8      	ldr	r0, [r7, #12]
 801eaa2:	f7f1 fb9d 	bl	80101e0 <strcmp>
 801eaa6:	4603      	mov	r3, r0
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d006      	beq.n	801eaba <parse_http_request+0xa2>
 801eaac:	4918      	ldr	r1, [pc, #96]	@ (801eb10 <parse_http_request+0xf8>)
 801eaae:	68f8      	ldr	r0, [r7, #12]
 801eab0:	f7f1 fb96 	bl	80101e0 <strcmp>
 801eab4:	4603      	mov	r3, r0
 801eab6:	2b00      	cmp	r3, #0
 801eab8:	d10a      	bne.n	801ead0 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801eaba:	68fb      	ldr	r3, [r7, #12]
 801eabc:	3305      	adds	r3, #5
 801eabe:	4915      	ldr	r1, [pc, #84]	@ (801eb14 <parse_http_request+0xfc>)
 801eac0:	4618      	mov	r0, r3
 801eac2:	f00f f8e3 	bl	802dc8c <strtok>
 801eac6:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2203      	movs	r2, #3
 801eacc:	701a      	strb	r2, [r3, #0]
 801eace:	e002      	b.n	801ead6 <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	2200      	movs	r2, #0
 801ead4:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801ead6:	68fb      	ldr	r3, [r7, #12]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d103      	bne.n	801eae4 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	2200      	movs	r2, #0
 801eae0:	701a      	strb	r2, [r3, #0]
    return;
 801eae2:	e005      	b.n	801eaf0 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	3302      	adds	r3, #2
 801eae8:	68f9      	ldr	r1, [r7, #12]
 801eaea:	4618      	mov	r0, r3
 801eaec:	f00f fa1d 	bl	802df2a <strcpy>
}
 801eaf0:	3710      	adds	r7, #16
 801eaf2:	46bd      	mov	sp, r7
 801eaf4:	bd80      	pop	{r7, pc}
 801eaf6:	bf00      	nop
 801eaf8:	080335f0 	.word	0x080335f0
 801eafc:	080335f4 	.word	0x080335f4
 801eb00:	080335f8 	.word	0x080335f8
 801eb04:	080335fc 	.word	0x080335fc
 801eb08:	08033604 	.word	0x08033604
 801eb0c:	0803360c 	.word	0x0803360c
 801eb10:	08033614 	.word	0x08033614
 801eb14:	0803361c 	.word	0x0803361c

0801eb18 <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801eb18:	b580      	push	{r7, lr}
 801eb1a:	b08a      	sub	sp, #40	@ 0x28
 801eb1c:	af00      	add	r7, sp, #0
 801eb1e:	6078      	str	r0, [r7, #4]
 801eb20:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801eb22:	2300      	movs	r3, #0
 801eb24:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801eb26:	4b3c      	ldr	r3, [pc, #240]	@ (801ec18 <get_http_param_value+0x100>)
 801eb28:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801eb2a:	2300      	movs	r3, #0
 801eb2c:	837b      	strh	r3, [r7, #26]
 801eb2e:	2300      	movs	r3, #0
 801eb30:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801eb32:	2300      	movs	r3, #0
 801eb34:	60bb      	str	r3, [r7, #8]
 801eb36:	f107 030c 	add.w	r3, r7, #12
 801eb3a:	2200      	movs	r2, #0
 801eb3c:	601a      	str	r2, [r3, #0]
 801eb3e:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d002      	beq.n	801eb4c <get_http_param_value+0x34>
 801eb46:	683b      	ldr	r3, [r7, #0]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d101      	bne.n	801eb50 <get_http_param_value+0x38>
 801eb4c:	2300      	movs	r3, #0
 801eb4e:	e05f      	b.n	801ec10 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801eb50:	f107 0308 	add.w	r3, r7, #8
 801eb54:	4a31      	ldr	r2, [pc, #196]	@ (801ec1c <get_http_param_value+0x104>)
 801eb56:	4932      	ldr	r1, [pc, #200]	@ (801ec20 <get_http_param_value+0x108>)
 801eb58:	6878      	ldr	r0, [r7, #4]
 801eb5a:	f000 f8b4 	bl	801ecc6 <mid>
 801eb5e:	4603      	mov	r3, r0
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d001      	beq.n	801eb68 <get_http_param_value+0x50>
		return 0;
 801eb64:	2300      	movs	r3, #0
 801eb66:	e053      	b.n	801ec10 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801eb68:	f107 0308 	add.w	r3, r7, #8
 801eb6c:	210a      	movs	r1, #10
 801eb6e:	4618      	mov	r0, r3
 801eb70:	f000 f884 	bl	801ec7c <ATOI>
 801eb74:	4603      	mov	r3, r0
 801eb76:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801eb78:	492a      	ldr	r1, [pc, #168]	@ (801ec24 <get_http_param_value+0x10c>)
 801eb7a:	6878      	ldr	r0, [r7, #4]
 801eb7c:	f00f f8e2 	bl	802dd44 <strstr>
 801eb80:	6078      	str	r0, [r7, #4]
	uri += 4;
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	3304      	adds	r3, #4
 801eb86:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801eb88:	8b3b      	ldrh	r3, [r7, #24]
 801eb8a:	687a      	ldr	r2, [r7, #4]
 801eb8c:	4413      	add	r3, r2
 801eb8e:	2200      	movs	r2, #0
 801eb90:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801eb92:	6839      	ldr	r1, [r7, #0]
 801eb94:	6878      	ldr	r0, [r7, #4]
 801eb96:	f00f f8d5 	bl	802dd44 <strstr>
 801eb9a:	6238      	str	r0, [r7, #32]
 801eb9c:	6a3b      	ldr	r3, [r7, #32]
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d033      	beq.n	801ec0a <get_http_param_value+0xf2>
	{
		test = name + 1;
 801eba2:	6a3b      	ldr	r3, [r7, #32]
 801eba4:	3301      	adds	r3, #1
 801eba6:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801eba8:	6838      	ldr	r0, [r7, #0]
 801ebaa:	f7f1 fb79 	bl	80102a0 <strlen>
 801ebae:	4603      	mov	r3, r0
 801ebb0:	3301      	adds	r3, #1
 801ebb2:	6a3a      	ldr	r2, [r7, #32]
 801ebb4:	4413      	add	r3, r2
 801ebb6:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801ebb8:	2126      	movs	r1, #38	@ 0x26
 801ebba:	6a38      	ldr	r0, [r7, #32]
 801ebbc:	f00e ffff 	bl	802dbbe <strchr>
 801ebc0:	6278      	str	r0, [r7, #36]	@ 0x24
		if(!pos2)
 801ebc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d106      	bne.n	801ebd6 <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801ebc8:	6a38      	ldr	r0, [r7, #32]
 801ebca:	f7f1 fb69 	bl	80102a0 <strlen>
 801ebce:	4602      	mov	r2, r0
 801ebd0:	6a3b      	ldr	r3, [r7, #32]
 801ebd2:	4413      	add	r3, r2
 801ebd4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		len = pos2 - name;
 801ebd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ebd8:	6a3b      	ldr	r3, [r7, #32]
 801ebda:	1ad3      	subs	r3, r2, r3
 801ebdc:	837b      	strh	r3, [r7, #26]

		if(len)
 801ebde:	8b7b      	ldrh	r3, [r7, #26]
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d00e      	beq.n	801ec02 <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801ebe4:	8b7b      	ldrh	r3, [r7, #26]
 801ebe6:	69fa      	ldr	r2, [r7, #28]
 801ebe8:	4413      	add	r3, r2
 801ebea:	2200      	movs	r2, #0
 801ebec:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801ebee:	8b7b      	ldrh	r3, [r7, #26]
 801ebf0:	461a      	mov	r2, r3
 801ebf2:	6a39      	ldr	r1, [r7, #32]
 801ebf4:	69f8      	ldr	r0, [r7, #28]
 801ebf6:	f00f f825 	bl	802dc44 <strncpy>
			unescape_http_url((char *)ret);
 801ebfa:	69f8      	ldr	r0, [r7, #28]
 801ebfc:	f7ff fc88 	bl	801e510 <unescape_http_url>
 801ec00:	e005      	b.n	801ec0e <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801ec02:	69fb      	ldr	r3, [r7, #28]
 801ec04:	2200      	movs	r2, #0
 801ec06:	701a      	strb	r2, [r3, #0]
 801ec08:	e001      	b.n	801ec0e <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801ec0a:	2300      	movs	r3, #0
 801ec0c:	e000      	b.n	801ec10 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801ec0e:	69fb      	ldr	r3, [r7, #28]
}
 801ec10:	4618      	mov	r0, r3
 801ec12:	3728      	adds	r7, #40	@ 0x28
 801ec14:	46bd      	mov	sp, r7
 801ec16:	bd80      	pop	{r7, pc}
 801ec18:	200009f8 	.word	0x200009f8
 801ec1c:	08033620 	.word	0x08033620
 801ec20:	08033624 	.word	0x08033624
 801ec24:	080334f0 	.word	0x080334f0

0801ec28 <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801ec28:	b580      	push	{r7, lr}
 801ec2a:	b084      	sub	sp, #16
 801ec2c:	af00      	add	r7, sp, #0
 801ec2e:	6078      	str	r0, [r7, #4]
 801ec30:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d101      	bne.n	801ec3c <get_http_uri_name+0x14>
 801ec38:	2300      	movs	r3, #0
 801ec3a:	e017      	b.n	801ec6c <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801ec3c:	6879      	ldr	r1, [r7, #4]
 801ec3e:	6838      	ldr	r0, [r7, #0]
 801ec40:	f00f f973 	bl	802df2a <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801ec44:	490b      	ldr	r1, [pc, #44]	@ (801ec74 <get_http_uri_name+0x4c>)
 801ec46:	6838      	ldr	r0, [r7, #0]
 801ec48:	f00f f820 	bl	802dc8c <strtok>
 801ec4c:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801ec4e:	490a      	ldr	r1, [pc, #40]	@ (801ec78 <get_http_uri_name+0x50>)
 801ec50:	68f8      	ldr	r0, [r7, #12]
 801ec52:	f7f1 fac5 	bl	80101e0 <strcmp>
 801ec56:	4603      	mov	r3, r0
 801ec58:	2b00      	cmp	r3, #0
 801ec5a:	d002      	beq.n	801ec62 <get_http_uri_name+0x3a>
 801ec5c:	68fb      	ldr	r3, [r7, #12]
 801ec5e:	3301      	adds	r3, #1
 801ec60:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801ec62:	68f9      	ldr	r1, [r7, #12]
 801ec64:	6838      	ldr	r0, [r7, #0]
 801ec66:	f00f f960 	bl	802df2a <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801ec6a:	2301      	movs	r3, #1
}
 801ec6c:	4618      	mov	r0, r3
 801ec6e:	3710      	adds	r7, #16
 801ec70:	46bd      	mov	sp, r7
 801ec72:	bd80      	pop	{r7, pc}
 801ec74:	08033638 	.word	0x08033638
 801ec78:	0803363c 	.word	0x0803363c

0801ec7c <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801ec7c:	b590      	push	{r4, r7, lr}
 801ec7e:	b085      	sub	sp, #20
 801ec80:	af00      	add	r7, sp, #0
 801ec82:	6078      	str	r0, [r7, #4]
 801ec84:	460b      	mov	r3, r1
 801ec86:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801ec88:	2300      	movs	r3, #0
 801ec8a:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801ec8c:	e00d      	b.n	801ecaa <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801ec8e:	78fb      	ldrb	r3, [r7, #3]
 801ec90:	68fa      	ldr	r2, [r7, #12]
 801ec92:	fb02 f403 	mul.w	r4, r2, r3
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	1c5a      	adds	r2, r3, #1
 801ec9a:	607a      	str	r2, [r7, #4]
 801ec9c:	781b      	ldrb	r3, [r3, #0]
 801ec9e:	4618      	mov	r0, r3
 801eca0:	f000 f843 	bl	801ed2a <C2D>
 801eca4:	4603      	mov	r3, r0
 801eca6:	4423      	add	r3, r4
 801eca8:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	781b      	ldrb	r3, [r3, #0]
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	d003      	beq.n	801ecba <ATOI+0x3e>
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	781b      	ldrb	r3, [r3, #0]
 801ecb6:	2b20      	cmp	r3, #32
 801ecb8:	d1e9      	bne.n	801ec8e <ATOI+0x12>
	return num;
 801ecba:	68fb      	ldr	r3, [r7, #12]
 801ecbc:	b29b      	uxth	r3, r3
}
 801ecbe:	4618      	mov	r0, r3
 801ecc0:	3714      	adds	r7, #20
 801ecc2:	46bd      	mov	sp, r7
 801ecc4:	bd90      	pop	{r4, r7, pc}

0801ecc6 <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801ecc6:	b580      	push	{r7, lr}
 801ecc8:	b088      	sub	sp, #32
 801ecca:	af00      	add	r7, sp, #0
 801eccc:	60f8      	str	r0, [r7, #12]
 801ecce:	60b9      	str	r1, [r7, #8]
 801ecd0:	607a      	str	r2, [r7, #4]
 801ecd2:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801ecd4:	68b9      	ldr	r1, [r7, #8]
 801ecd6:	68f8      	ldr	r0, [r7, #12]
 801ecd8:	f00f f834 	bl	802dd44 <strstr>
 801ecdc:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801ecde:	69fb      	ldr	r3, [r7, #28]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d102      	bne.n	801ecea <mid+0x24>
 801ece4:	f04f 33ff 	mov.w	r3, #4294967295
 801ece8:	e01b      	b.n	801ed22 <mid+0x5c>
	sub1+=strlen((char*)s1);
 801ecea:	68b8      	ldr	r0, [r7, #8]
 801ecec:	f7f1 fad8 	bl	80102a0 <strlen>
 801ecf0:	4602      	mov	r2, r0
 801ecf2:	69fb      	ldr	r3, [r7, #28]
 801ecf4:	4413      	add	r3, r2
 801ecf6:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801ecf8:	6879      	ldr	r1, [r7, #4]
 801ecfa:	69f8      	ldr	r0, [r7, #28]
 801ecfc:	f00f f822 	bl	802dd44 <strstr>
 801ed00:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801ed02:	69ba      	ldr	r2, [r7, #24]
 801ed04:	69fb      	ldr	r3, [r7, #28]
 801ed06:	1ad3      	subs	r3, r2, r3
 801ed08:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801ed0a:	8afb      	ldrh	r3, [r7, #22]
 801ed0c:	461a      	mov	r2, r3
 801ed0e:	69f9      	ldr	r1, [r7, #28]
 801ed10:	6838      	ldr	r0, [r7, #0]
 801ed12:	f00e ff97 	bl	802dc44 <strncpy>
	sub[n]='\0';
 801ed16:	8afb      	ldrh	r3, [r7, #22]
 801ed18:	683a      	ldr	r2, [r7, #0]
 801ed1a:	4413      	add	r3, r2
 801ed1c:	2200      	movs	r2, #0
 801ed1e:	701a      	strb	r2, [r3, #0]
	return 0;
 801ed20:	2300      	movs	r3, #0
}
 801ed22:	4618      	mov	r0, r3
 801ed24:	3720      	adds	r7, #32
 801ed26:	46bd      	mov	sp, r7
 801ed28:	bd80      	pop	{r7, pc}

0801ed2a <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801ed2a:	b480      	push	{r7}
 801ed2c:	b083      	sub	sp, #12
 801ed2e:	af00      	add	r7, sp, #0
 801ed30:	4603      	mov	r3, r0
 801ed32:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801ed34:	79fb      	ldrb	r3, [r7, #7]
 801ed36:	2b2f      	cmp	r3, #47	@ 0x2f
 801ed38:	d906      	bls.n	801ed48 <C2D+0x1e>
 801ed3a:	79fb      	ldrb	r3, [r7, #7]
 801ed3c:	2b39      	cmp	r3, #57	@ 0x39
 801ed3e:	d803      	bhi.n	801ed48 <C2D+0x1e>
		return c - '0';
 801ed40:	79fb      	ldrb	r3, [r7, #7]
 801ed42:	3b30      	subs	r3, #48	@ 0x30
 801ed44:	b2db      	uxtb	r3, r3
 801ed46:	e014      	b.n	801ed72 <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801ed48:	79fb      	ldrb	r3, [r7, #7]
 801ed4a:	2b60      	cmp	r3, #96	@ 0x60
 801ed4c:	d906      	bls.n	801ed5c <C2D+0x32>
 801ed4e:	79fb      	ldrb	r3, [r7, #7]
 801ed50:	2b66      	cmp	r3, #102	@ 0x66
 801ed52:	d803      	bhi.n	801ed5c <C2D+0x32>
		return 10 + c -'a';
 801ed54:	79fb      	ldrb	r3, [r7, #7]
 801ed56:	3b57      	subs	r3, #87	@ 0x57
 801ed58:	b2db      	uxtb	r3, r3
 801ed5a:	e00a      	b.n	801ed72 <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801ed5c:	79fb      	ldrb	r3, [r7, #7]
 801ed5e:	2b40      	cmp	r3, #64	@ 0x40
 801ed60:	d906      	bls.n	801ed70 <C2D+0x46>
 801ed62:	79fb      	ldrb	r3, [r7, #7]
 801ed64:	2b46      	cmp	r3, #70	@ 0x46
 801ed66:	d803      	bhi.n	801ed70 <C2D+0x46>
		return 10 + c -'A';
 801ed68:	79fb      	ldrb	r3, [r7, #7]
 801ed6a:	3b37      	subs	r3, #55	@ 0x37
 801ed6c:	b2db      	uxtb	r3, r3
 801ed6e:	e000      	b.n	801ed72 <C2D+0x48>

	return (char)c;
 801ed70:	79fb      	ldrb	r3, [r7, #7]
}
 801ed72:	4618      	mov	r0, r3
 801ed74:	370c      	adds	r7, #12
 801ed76:	46bd      	mov	sp, r7
 801ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed7c:	4770      	bx	lr

0801ed7e <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801ed7e:	b480      	push	{r7}
 801ed80:	af00      	add	r7, sp, #0
 801ed82:	bf00      	nop
 801ed84:	46bd      	mov	sp, r7
 801ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed8a:	4770      	bx	lr

0801ed8c <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801ed8c:	b480      	push	{r7}
 801ed8e:	af00      	add	r7, sp, #0
 801ed90:	bf00      	nop
 801ed92:	46bd      	mov	sp, r7
 801ed94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed98:	4770      	bx	lr
	...

0801ed9c <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801ed9c:	b480      	push	{r7}
 801ed9e:	b085      	sub	sp, #20
 801eda0:	af00      	add	r7, sp, #0
 801eda2:	4603      	mov	r3, r0
 801eda4:	6039      	str	r1, [r7, #0]
 801eda6:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801eda8:	2300      	movs	r3, #0
 801edaa:	73fb      	strb	r3, [r7, #15]
 801edac:	e009      	b.n	801edc2 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801edae:	7bfb      	ldrb	r3, [r7, #15]
 801edb0:	683a      	ldr	r2, [r7, #0]
 801edb2:	441a      	add	r2, r3
 801edb4:	7bfb      	ldrb	r3, [r7, #15]
 801edb6:	7811      	ldrb	r1, [r2, #0]
 801edb8:	4a07      	ldr	r2, [pc, #28]	@ (801edd8 <httpServer_Sockinit+0x3c>)
 801edba:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801edbc:	7bfb      	ldrb	r3, [r7, #15]
 801edbe:	3301      	adds	r3, #1
 801edc0:	73fb      	strb	r3, [r7, #15]
 801edc2:	7bfa      	ldrb	r2, [r7, #15]
 801edc4:	79fb      	ldrb	r3, [r7, #7]
 801edc6:	429a      	cmp	r2, r3
 801edc8:	d3f1      	bcc.n	801edae <httpServer_Sockinit+0x12>
	}
}
 801edca:	bf00      	nop
 801edcc:	bf00      	nop
 801edce:	3714      	adds	r7, #20
 801edd0:	46bd      	mov	sp, r7
 801edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd6:	4770      	bx	lr
 801edd8:	200011f8 	.word	0x200011f8

0801eddc <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801eddc:	b480      	push	{r7}
 801edde:	b083      	sub	sp, #12
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	4603      	mov	r3, r0
 801ede4:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801ede6:	79fb      	ldrb	r3, [r7, #7]
 801ede8:	4a03      	ldr	r2, [pc, #12]	@ (801edf8 <getHTTPSocketNum+0x1c>)
 801edea:	5cd3      	ldrb	r3, [r2, r3]
}
 801edec:	4618      	mov	r0, r3
 801edee:	370c      	adds	r7, #12
 801edf0:	46bd      	mov	sp, r7
 801edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edf6:	4770      	bx	lr
 801edf8:	200011f8 	.word	0x200011f8

0801edfc <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801edfc:	b480      	push	{r7}
 801edfe:	b085      	sub	sp, #20
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	4603      	mov	r3, r0
 801ee04:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ee06:	2300      	movs	r3, #0
 801ee08:	73fb      	strb	r3, [r7, #15]
 801ee0a:	e00b      	b.n	801ee24 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801ee0c:	7bfb      	ldrb	r3, [r7, #15]
 801ee0e:	4a0b      	ldr	r2, [pc, #44]	@ (801ee3c <getHTTPSequenceNum+0x40>)
 801ee10:	5cd3      	ldrb	r3, [r2, r3]
 801ee12:	79fa      	ldrb	r2, [r7, #7]
 801ee14:	429a      	cmp	r2, r3
 801ee16:	d102      	bne.n	801ee1e <getHTTPSequenceNum+0x22>
 801ee18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ee1c:	e007      	b.n	801ee2e <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ee1e:	7bfb      	ldrb	r3, [r7, #15]
 801ee20:	3301      	adds	r3, #1
 801ee22:	73fb      	strb	r3, [r7, #15]
 801ee24:	7bfb      	ldrb	r3, [r7, #15]
 801ee26:	2b07      	cmp	r3, #7
 801ee28:	d9f0      	bls.n	801ee0c <getHTTPSequenceNum+0x10>

	return -1;
 801ee2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ee2e:	4618      	mov	r0, r3
 801ee30:	3714      	adds	r7, #20
 801ee32:	46bd      	mov	sp, r7
 801ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee38:	4770      	bx	lr
 801ee3a:	bf00      	nop
 801ee3c:	200011f8 	.word	0x200011f8

0801ee40 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801ee40:	b580      	push	{r7, lr}
 801ee42:	b084      	sub	sp, #16
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	60f8      	str	r0, [r7, #12]
 801ee48:	60b9      	str	r1, [r7, #8]
 801ee4a:	603b      	str	r3, [r7, #0]
 801ee4c:	4613      	mov	r3, r2
 801ee4e:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801ee50:	4a07      	ldr	r2, [pc, #28]	@ (801ee70 <httpServer_init+0x30>)
 801ee52:	68fb      	ldr	r3, [r7, #12]
 801ee54:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801ee56:	4a07      	ldr	r2, [pc, #28]	@ (801ee74 <httpServer_init+0x34>)
 801ee58:	68bb      	ldr	r3, [r7, #8]
 801ee5a:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801ee5c:	79fb      	ldrb	r3, [r7, #7]
 801ee5e:	6839      	ldr	r1, [r7, #0]
 801ee60:	4618      	mov	r0, r3
 801ee62:	f7ff ff9b 	bl	801ed9c <httpServer_Sockinit>
}
 801ee66:	bf00      	nop
 801ee68:	3710      	adds	r7, #16
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	bd80      	pop	{r7, pc}
 801ee6e:	bf00      	nop
 801ee70:	200012d8 	.word	0x200012d8
 801ee74:	200012dc 	.word	0x200012dc

0801ee78 <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801ee78:	b590      	push	{r4, r7, lr}
 801ee7a:	b089      	sub	sp, #36	@ 0x24
 801ee7c:	af02      	add	r7, sp, #8
 801ee7e:	4603      	mov	r3, r0
 801ee80:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801ee82:	2300      	movs	r3, #0
 801ee84:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801ee86:	4bb4      	ldr	r3, [pc, #720]	@ (801f158 <httpServer_run+0x2e0>)
 801ee88:	681b      	ldr	r3, [r3, #0]
 801ee8a:	4ab4      	ldr	r2, [pc, #720]	@ (801f15c <httpServer_run+0x2e4>)
 801ee8c:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801ee8e:	4bb4      	ldr	r3, [pc, #720]	@ (801f160 <httpServer_run+0x2e8>)
 801ee90:	681b      	ldr	r3, [r3, #0]
 801ee92:	4ab4      	ldr	r2, [pc, #720]	@ (801f164 <httpServer_run+0x2ec>)
 801ee94:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801ee96:	79fb      	ldrb	r3, [r7, #7]
 801ee98:	4618      	mov	r0, r3
 801ee9a:	f7ff ff9f 	bl	801eddc <getHTTPSocketNum>
 801ee9e:	4603      	mov	r3, r0
 801eea0:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801eea2:	7bfb      	ldrb	r3, [r7, #15]
 801eea4:	009b      	lsls	r3, r3, #2
 801eea6:	3301      	adds	r3, #1
 801eea8:	00db      	lsls	r3, r3, #3
 801eeaa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801eeae:	4618      	mov	r0, r3
 801eeb0:	f7f9 fd5c 	bl	801896c <WIZCHIP_READ>
 801eeb4:	4603      	mov	r3, r0
 801eeb6:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801eeb8:	7bfb      	ldrb	r3, [r7, #15]
 801eeba:	009b      	lsls	r3, r3, #2
 801eebc:	3301      	adds	r3, #1
 801eebe:	00db      	lsls	r3, r3, #3
 801eec0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 801eec4:	4618      	mov	r0, r3
 801eec6:	f7f9 fd51 	bl	801896c <WIZCHIP_READ>
 801eeca:	4603      	mov	r3, r0
 801eecc:	2b1c      	cmp	r3, #28
 801eece:	f200 813e 	bhi.w	801f14e <httpServer_run+0x2d6>
 801eed2:	a201      	add	r2, pc, #4	@ (adr r2, 801eed8 <httpServer_run+0x60>)
 801eed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eed8:	0801f137 	.word	0x0801f137
 801eedc:	0801f14f 	.word	0x0801f14f
 801eee0:	0801f14f 	.word	0x0801f14f
 801eee4:	0801f14f 	.word	0x0801f14f
 801eee8:	0801f14f 	.word	0x0801f14f
 801eeec:	0801f14f 	.word	0x0801f14f
 801eef0:	0801f14f 	.word	0x0801f14f
 801eef4:	0801f14f 	.word	0x0801f14f
 801eef8:	0801f14f 	.word	0x0801f14f
 801eefc:	0801f14f 	.word	0x0801f14f
 801ef00:	0801f14f 	.word	0x0801f14f
 801ef04:	0801f14f 	.word	0x0801f14f
 801ef08:	0801f14f 	.word	0x0801f14f
 801ef0c:	0801f14f 	.word	0x0801f14f
 801ef10:	0801f14f 	.word	0x0801f14f
 801ef14:	0801f14f 	.word	0x0801f14f
 801ef18:	0801f14f 	.word	0x0801f14f
 801ef1c:	0801f14f 	.word	0x0801f14f
 801ef20:	0801f14f 	.word	0x0801f14f
 801ef24:	0801f145 	.word	0x0801f145
 801ef28:	0801f14f 	.word	0x0801f14f
 801ef2c:	0801f14f 	.word	0x0801f14f
 801ef30:	0801f14f 	.word	0x0801f14f
 801ef34:	0801ef4d 	.word	0x0801ef4d
 801ef38:	0801f14f 	.word	0x0801f14f
 801ef3c:	0801f14f 	.word	0x0801f14f
 801ef40:	0801f14f 	.word	0x0801f14f
 801ef44:	0801f14f 	.word	0x0801f14f
 801ef48:	0801f12d 	.word	0x0801f12d
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801ef4c:	7bfb      	ldrb	r3, [r7, #15]
 801ef4e:	009b      	lsls	r3, r3, #2
 801ef50:	3301      	adds	r3, #1
 801ef52:	00db      	lsls	r3, r3, #3
 801ef54:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801ef58:	4618      	mov	r0, r3
 801ef5a:	f7f9 fd07 	bl	801896c <WIZCHIP_READ>
 801ef5e:	4603      	mov	r3, r0
 801ef60:	f003 0301 	and.w	r3, r3, #1
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d009      	beq.n	801ef7c <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801ef68:	7bfb      	ldrb	r3, [r7, #15]
 801ef6a:	009b      	lsls	r3, r3, #2
 801ef6c:	3301      	adds	r3, #1
 801ef6e:	00db      	lsls	r3, r3, #3
 801ef70:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 801ef74:	2101      	movs	r1, #1
 801ef76:	4618      	mov	r0, r3
 801ef78:	f7f9 fd44 	bl	8018a04 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801ef7c:	79fa      	ldrb	r2, [r7, #7]
 801ef7e:	497a      	ldr	r1, [pc, #488]	@ (801f168 <httpServer_run+0x2f0>)
 801ef80:	4613      	mov	r3, r2
 801ef82:	011b      	lsls	r3, r3, #4
 801ef84:	4413      	add	r3, r2
 801ef86:	009b      	lsls	r3, r3, #2
 801ef88:	440b      	add	r3, r1
 801ef8a:	781b      	ldrb	r3, [r3, #0]
 801ef8c:	2b04      	cmp	r3, #4
 801ef8e:	f000 809b 	beq.w	801f0c8 <httpServer_run+0x250>
 801ef92:	2b04      	cmp	r3, #4
 801ef94:	f300 80c4 	bgt.w	801f120 <httpServer_run+0x2a8>
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d002      	beq.n	801efa2 <httpServer_run+0x12a>
 801ef9c:	2b03      	cmp	r3, #3
 801ef9e:	d06e      	beq.n	801f07e <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801efa0:	e0be      	b.n	801f120 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801efa2:	7bfb      	ldrb	r3, [r7, #15]
 801efa4:	4618      	mov	r0, r3
 801efa6:	f7f9 fe84 	bl	8018cb2 <getSn_RX_RSR>
 801efaa:	4603      	mov	r3, r0
 801efac:	82fb      	strh	r3, [r7, #22]
 801efae:	8afb      	ldrh	r3, [r7, #22]
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	f000 80b7 	beq.w	801f124 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801efb6:	8afb      	ldrh	r3, [r7, #22]
 801efb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801efbc:	d902      	bls.n	801efc4 <httpServer_run+0x14c>
 801efbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801efc2:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801efc4:	4b65      	ldr	r3, [pc, #404]	@ (801f15c <httpServer_run+0x2e4>)
 801efc6:	6819      	ldr	r1, [r3, #0]
 801efc8:	8afa      	ldrh	r2, [r7, #22]
 801efca:	7bfb      	ldrb	r3, [r7, #15]
 801efcc:	4618      	mov	r0, r3
 801efce:	f7fa fbd9 	bl	8019784 <recv>
 801efd2:	4603      	mov	r3, r0
 801efd4:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801efd6:	4b61      	ldr	r3, [pc, #388]	@ (801f15c <httpServer_run+0x2e4>)
 801efd8:	681a      	ldr	r2, [r3, #0]
 801efda:	8afb      	ldrh	r3, [r7, #22]
 801efdc:	4413      	add	r3, r2
 801efde:	2200      	movs	r2, #0
 801efe0:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801efe2:	4b60      	ldr	r3, [pc, #384]	@ (801f164 <httpServer_run+0x2ec>)
 801efe4:	681b      	ldr	r3, [r3, #0]
 801efe6:	4a5d      	ldr	r2, [pc, #372]	@ (801f15c <httpServer_run+0x2e4>)
 801efe8:	6812      	ldr	r2, [r2, #0]
 801efea:	4611      	mov	r1, r2
 801efec:	4618      	mov	r0, r3
 801efee:	f7ff fd13 	bl	801ea18 <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801eff2:	4b5c      	ldr	r3, [pc, #368]	@ (801f164 <httpServer_run+0x2ec>)
 801eff4:	681a      	ldr	r2, [r3, #0]
 801eff6:	7bfb      	ldrb	r3, [r7, #15]
 801eff8:	4611      	mov	r1, r2
 801effa:	4618      	mov	r0, r3
 801effc:	f000 fac4 	bl	801f588 <http_process_handler>
						gettime = get_httpServer_timecount();
 801f000:	f000 fd04 	bl	801fa0c <get_httpServer_timecount>
 801f004:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801f006:	e006      	b.n	801f016 <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801f008:	f000 fd00 	bl	801fa0c <get_httpServer_timecount>
 801f00c:	4602      	mov	r2, r0
 801f00e:	693b      	ldr	r3, [r7, #16]
 801f010:	1ad3      	subs	r3, r2, r3
 801f012:	2b03      	cmp	r3, #3
 801f014:	d813      	bhi.n	801f03e <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801f016:	7bfb      	ldrb	r3, [r7, #15]
 801f018:	4618      	mov	r0, r3
 801f01a:	f7f9 fe01 	bl	8018c20 <getSn_TX_FSR>
 801f01e:	4603      	mov	r3, r0
 801f020:	461c      	mov	r4, r3
 801f022:	7bfb      	ldrb	r3, [r7, #15]
 801f024:	009b      	lsls	r3, r3, #2
 801f026:	3301      	adds	r3, #1
 801f028:	00db      	lsls	r3, r3, #3
 801f02a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 801f02e:	4618      	mov	r0, r3
 801f030:	f7f9 fc9c 	bl	801896c <WIZCHIP_READ>
 801f034:	4603      	mov	r3, r0
 801f036:	029b      	lsls	r3, r3, #10
 801f038:	429c      	cmp	r4, r3
 801f03a:	d1e5      	bne.n	801f008 <httpServer_run+0x190>
 801f03c:	e000      	b.n	801f040 <httpServer_run+0x1c8>
								break;
 801f03e:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801f040:	79fa      	ldrb	r2, [r7, #7]
 801f042:	4949      	ldr	r1, [pc, #292]	@ (801f168 <httpServer_run+0x2f0>)
 801f044:	4613      	mov	r3, r2
 801f046:	011b      	lsls	r3, r3, #4
 801f048:	4413      	add	r3, r2
 801f04a:	009b      	lsls	r3, r3, #2
 801f04c:	440b      	add	r3, r1
 801f04e:	3338      	adds	r3, #56	@ 0x38
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	2b00      	cmp	r3, #0
 801f054:	d009      	beq.n	801f06a <httpServer_run+0x1f2>
 801f056:	79fa      	ldrb	r2, [r7, #7]
 801f058:	4943      	ldr	r1, [pc, #268]	@ (801f168 <httpServer_run+0x2f0>)
 801f05a:	4613      	mov	r3, r2
 801f05c:	011b      	lsls	r3, r3, #4
 801f05e:	4413      	add	r3, r2
 801f060:	009b      	lsls	r3, r3, #2
 801f062:	440b      	add	r3, r1
 801f064:	2203      	movs	r2, #3
 801f066:	701a      	strb	r2, [r3, #0]
					break;
 801f068:	e05c      	b.n	801f124 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801f06a:	79fa      	ldrb	r2, [r7, #7]
 801f06c:	493e      	ldr	r1, [pc, #248]	@ (801f168 <httpServer_run+0x2f0>)
 801f06e:	4613      	mov	r3, r2
 801f070:	011b      	lsls	r3, r3, #4
 801f072:	4413      	add	r3, r2
 801f074:	009b      	lsls	r3, r3, #2
 801f076:	440b      	add	r3, r1
 801f078:	2204      	movs	r2, #4
 801f07a:	701a      	strb	r2, [r3, #0]
					break;
 801f07c:	e052      	b.n	801f124 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801f07e:	79fa      	ldrb	r2, [r7, #7]
 801f080:	4613      	mov	r3, r2
 801f082:	011b      	lsls	r3, r3, #4
 801f084:	4413      	add	r3, r2
 801f086:	009b      	lsls	r3, r3, #2
 801f088:	4a37      	ldr	r2, [pc, #220]	@ (801f168 <httpServer_run+0x2f0>)
 801f08a:	4413      	add	r3, r2
 801f08c:	1c59      	adds	r1, r3, #1
 801f08e:	4b37      	ldr	r3, [pc, #220]	@ (801f16c <httpServer_run+0x2f4>)
 801f090:	681a      	ldr	r2, [r3, #0]
 801f092:	7bf8      	ldrb	r0, [r7, #15]
 801f094:	2300      	movs	r3, #0
 801f096:	9300      	str	r3, [sp, #0]
 801f098:	2300      	movs	r3, #0
 801f09a:	f000 f8d5 	bl	801f248 <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801f09e:	79fa      	ldrb	r2, [r7, #7]
 801f0a0:	4931      	ldr	r1, [pc, #196]	@ (801f168 <httpServer_run+0x2f0>)
 801f0a2:	4613      	mov	r3, r2
 801f0a4:	011b      	lsls	r3, r3, #4
 801f0a6:	4413      	add	r3, r2
 801f0a8:	009b      	lsls	r3, r3, #2
 801f0aa:	440b      	add	r3, r1
 801f0ac:	3338      	adds	r3, #56	@ 0x38
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	d139      	bne.n	801f128 <httpServer_run+0x2b0>
 801f0b4:	79fa      	ldrb	r2, [r7, #7]
 801f0b6:	492c      	ldr	r1, [pc, #176]	@ (801f168 <httpServer_run+0x2f0>)
 801f0b8:	4613      	mov	r3, r2
 801f0ba:	011b      	lsls	r3, r3, #4
 801f0bc:	4413      	add	r3, r2
 801f0be:	009b      	lsls	r3, r3, #2
 801f0c0:	440b      	add	r3, r1
 801f0c2:	2204      	movs	r2, #4
 801f0c4:	701a      	strb	r2, [r3, #0]
					break;
 801f0c6:	e02f      	b.n	801f128 <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801f0c8:	79fa      	ldrb	r2, [r7, #7]
 801f0ca:	4927      	ldr	r1, [pc, #156]	@ (801f168 <httpServer_run+0x2f0>)
 801f0cc:	4613      	mov	r3, r2
 801f0ce:	011b      	lsls	r3, r3, #4
 801f0d0:	4413      	add	r3, r2
 801f0d2:	009b      	lsls	r3, r3, #2
 801f0d4:	440b      	add	r3, r1
 801f0d6:	3338      	adds	r3, #56	@ 0x38
 801f0d8:	2200      	movs	r2, #0
 801f0da:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801f0dc:	79fa      	ldrb	r2, [r7, #7]
 801f0de:	4922      	ldr	r1, [pc, #136]	@ (801f168 <httpServer_run+0x2f0>)
 801f0e0:	4613      	mov	r3, r2
 801f0e2:	011b      	lsls	r3, r3, #4
 801f0e4:	4413      	add	r3, r2
 801f0e6:	009b      	lsls	r3, r3, #2
 801f0e8:	440b      	add	r3, r1
 801f0ea:	333c      	adds	r3, #60	@ 0x3c
 801f0ec:	2200      	movs	r2, #0
 801f0ee:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801f0f0:	79fa      	ldrb	r2, [r7, #7]
 801f0f2:	491d      	ldr	r1, [pc, #116]	@ (801f168 <httpServer_run+0x2f0>)
 801f0f4:	4613      	mov	r3, r2
 801f0f6:	011b      	lsls	r3, r3, #4
 801f0f8:	4413      	add	r3, r2
 801f0fa:	009b      	lsls	r3, r3, #2
 801f0fc:	440b      	add	r3, r1
 801f0fe:	3334      	adds	r3, #52	@ 0x34
 801f100:	2200      	movs	r2, #0
 801f102:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801f104:	79fa      	ldrb	r2, [r7, #7]
 801f106:	4918      	ldr	r1, [pc, #96]	@ (801f168 <httpServer_run+0x2f0>)
 801f108:	4613      	mov	r3, r2
 801f10a:	011b      	lsls	r3, r3, #4
 801f10c:	4413      	add	r3, r2
 801f10e:	009b      	lsls	r3, r3, #2
 801f110:	440b      	add	r3, r1
 801f112:	2200      	movs	r2, #0
 801f114:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801f116:	7bfb      	ldrb	r3, [r7, #15]
 801f118:	4618      	mov	r0, r3
 801f11a:	f000 fa13 	bl	801f544 <http_disconnect>
					break;
 801f11e:	e004      	b.n	801f12a <httpServer_run+0x2b2>
					break;
 801f120:	bf00      	nop
 801f122:	e015      	b.n	801f150 <httpServer_run+0x2d8>
					break;
 801f124:	bf00      	nop
 801f126:	e013      	b.n	801f150 <httpServer_run+0x2d8>
					break;
 801f128:	bf00      	nop
			}
			break;
 801f12a:	e011      	b.n	801f150 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801f12c:	7bfb      	ldrb	r3, [r7, #15]
 801f12e:	4618      	mov	r0, r3
 801f130:	f7fa f9ba 	bl	80194a8 <disconnect>
			break;
 801f134:	e00c      	b.n	801f150 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801f136:	7bf8      	ldrb	r0, [r7, #15]
 801f138:	2300      	movs	r3, #0
 801f13a:	2250      	movs	r2, #80	@ 0x50
 801f13c:	2101      	movs	r1, #1
 801f13e:	f7f9 fefb 	bl	8018f38 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801f142:	e005      	b.n	801f150 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801f144:	7bfb      	ldrb	r3, [r7, #15]
 801f146:	4618      	mov	r0, r3
 801f148:	f7fa f878 	bl	801923c <listen>
			break;
 801f14c:	e000      	b.n	801f150 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801f14e:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801f150:	bf00      	nop
 801f152:	371c      	adds	r7, #28
 801f154:	46bd      	mov	sp, r7
 801f156:	bd90      	pop	{r4, r7, pc}
 801f158:	200012dc 	.word	0x200012dc
 801f15c:	20001200 	.word	0x20001200
 801f160:	200012d8 	.word	0x200012d8
 801f164:	20001204 	.word	0x20001204
 801f168:	200012e4 	.word	0x200012e4
 801f16c:	20001208 	.word	0x20001208

0801f170 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801f170:	b590      	push	{r4, r7, lr}
 801f172:	b083      	sub	sp, #12
 801f174:	af00      	add	r7, sp, #0
 801f176:	603a      	str	r2, [r7, #0]
 801f178:	461a      	mov	r2, r3
 801f17a:	4603      	mov	r3, r0
 801f17c:	71fb      	strb	r3, [r7, #7]
 801f17e:	460b      	mov	r3, r1
 801f180:	71bb      	strb	r3, [r7, #6]
 801f182:	4613      	mov	r3, r2
 801f184:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801f186:	88bb      	ldrh	r3, [r7, #4]
 801f188:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 801f18c:	d029      	beq.n	801f1e2 <send_http_response_header+0x72>
 801f18e:	f5b3 7fca 	cmp.w	r3, #404	@ 0x194
 801f192:	dc3a      	bgt.n	801f20a <send_http_response_header+0x9a>
 801f194:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 801f198:	d019      	beq.n	801f1ce <send_http_response_header+0x5e>
 801f19a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 801f19e:	dc34      	bgt.n	801f20a <send_http_response_header+0x9a>
 801f1a0:	2bc8      	cmp	r3, #200	@ 0xc8
 801f1a2:	d003      	beq.n	801f1ac <send_http_response_header+0x3c>
 801f1a4:	f5b3 7f97 	cmp.w	r3, #302	@ 0x12e
 801f1a8:	d025      	beq.n	801f1f6 <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801f1aa:	e02e      	b.n	801f20a <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801f1ac:	79bb      	ldrb	r3, [r7, #6]
 801f1ae:	2b08      	cmp	r3, #8
 801f1b0:	d00a      	beq.n	801f1c8 <send_http_response_header+0x58>
 801f1b2:	79bb      	ldrb	r3, [r7, #6]
 801f1b4:	2b09      	cmp	r3, #9
 801f1b6:	d007      	beq.n	801f1c8 <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801f1b8:	4b1f      	ldr	r3, [pc, #124]	@ (801f238 <send_http_response_header+0xc8>)
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	79b9      	ldrb	r1, [r7, #6]
 801f1be:	683a      	ldr	r2, [r7, #0]
 801f1c0:	4618      	mov	r0, r3
 801f1c2:	f7ff f9ed 	bl	801e5a0 <make_http_response_head>
			break;
 801f1c6:	e021      	b.n	801f20c <send_http_response_header+0x9c>
				http_status = 0;
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	80bb      	strh	r3, [r7, #4]
			break;
 801f1cc:	e01e      	b.n	801f20c <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801f1ce:	4b1a      	ldr	r3, [pc, #104]	@ (801f238 <send_http_response_header+0xc8>)
 801f1d0:	681b      	ldr	r3, [r3, #0]
 801f1d2:	4a1a      	ldr	r2, [pc, #104]	@ (801f23c <send_http_response_header+0xcc>)
 801f1d4:	4618      	mov	r0, r3
 801f1d6:	4611      	mov	r1, r2
 801f1d8:	2376      	movs	r3, #118	@ 0x76
 801f1da:	461a      	mov	r2, r3
 801f1dc:	f00e fead 	bl	802df3a <memcpy>
			break;
 801f1e0:	e014      	b.n	801f20c <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801f1e2:	4b15      	ldr	r3, [pc, #84]	@ (801f238 <send_http_response_header+0xc8>)
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	4a16      	ldr	r2, [pc, #88]	@ (801f240 <send_http_response_header+0xd0>)
 801f1e8:	4618      	mov	r0, r3
 801f1ea:	4611      	mov	r1, r2
 801f1ec:	2399      	movs	r3, #153	@ 0x99
 801f1ee:	461a      	mov	r2, r3
 801f1f0:	f00e fea3 	bl	802df3a <memcpy>
			break;
 801f1f4:	e00a      	b.n	801f20c <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801f1f6:	4b10      	ldr	r3, [pc, #64]	@ (801f238 <send_http_response_header+0xc8>)
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	4a12      	ldr	r2, [pc, #72]	@ (801f244 <send_http_response_header+0xd4>)
 801f1fc:	4618      	mov	r0, r3
 801f1fe:	4611      	mov	r1, r2
 801f200:	239e      	movs	r3, #158	@ 0x9e
 801f202:	461a      	mov	r2, r3
 801f204:	f00e fe99 	bl	802df3a <memcpy>
			break;
 801f208:	e000      	b.n	801f20c <send_http_response_header+0x9c>
			break;
 801f20a:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801f20c:	88bb      	ldrh	r3, [r7, #4]
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d00d      	beq.n	801f22e <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801f212:	4b09      	ldr	r3, [pc, #36]	@ (801f238 <send_http_response_header+0xc8>)
 801f214:	681c      	ldr	r4, [r3, #0]
 801f216:	4b08      	ldr	r3, [pc, #32]	@ (801f238 <send_http_response_header+0xc8>)
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	4618      	mov	r0, r3
 801f21c:	f7f1 f840 	bl	80102a0 <strlen>
 801f220:	4603      	mov	r3, r0
 801f222:	b29a      	uxth	r2, r3
 801f224:	79fb      	ldrb	r3, [r7, #7]
 801f226:	4621      	mov	r1, r4
 801f228:	4618      	mov	r0, r3
 801f22a:	f7fa f9b3 	bl	8019594 <send>
	}
}
 801f22e:	bf00      	nop
 801f230:	370c      	adds	r7, #12
 801f232:	46bd      	mov	sp, r7
 801f234:	bd90      	pop	{r4, r7, pc}
 801f236:	bf00      	nop
 801f238:	20001208 	.word	0x20001208
 801f23c:	080349b4 	.word	0x080349b4
 801f240:	08034918 	.word	0x08034918
 801f244:	08034a2c 	.word	0x08034a2c

0801f248 <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801f248:	b580      	push	{r7, lr}
 801f24a:	b0a6      	sub	sp, #152	@ 0x98
 801f24c:	af00      	add	r7, sp, #0
 801f24e:	60b9      	str	r1, [r7, #8]
 801f250:	607a      	str	r2, [r7, #4]
 801f252:	603b      	str	r3, [r7, #0]
 801f254:	4603      	mov	r3, r0
 801f256:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801f258:	2300      	movs	r3, #0
 801f25a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801f25e:	2300      	movs	r3, #0
 801f260:	613b      	str	r3, [r7, #16]
 801f262:	f107 0314 	add.w	r3, r7, #20
 801f266:	227c      	movs	r2, #124	@ 0x7c
 801f268:	2100      	movs	r1, #0
 801f26a:	4618      	mov	r0, r3
 801f26c:	f00e fc90 	bl	802db90 <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f270:	7bfb      	ldrb	r3, [r7, #15]
 801f272:	4618      	mov	r0, r3
 801f274:	f7ff fdc2 	bl	801edfc <getHTTPSequenceNum>
 801f278:	4603      	mov	r3, r0
 801f27a:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 801f27e:	f997 3092 	ldrsb.w	r3, [r7, #146]	@ 0x92
 801f282:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f286:	f000 812e 	beq.w	801f4e6 <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801f28a:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f28e:	4998      	ldr	r1, [pc, #608]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f290:	4613      	mov	r3, r2
 801f292:	011b      	lsls	r3, r3, #4
 801f294:	4413      	add	r3, r2
 801f296:	009b      	lsls	r3, r3, #2
 801f298:	440b      	add	r3, r1
 801f29a:	3338      	adds	r3, #56	@ 0x38
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d140      	bne.n	801f324 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801f2a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801f2a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801f2aa:	d336      	bcc.n	801f31a <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801f2ac:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f2b0:	498f      	ldr	r1, [pc, #572]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f2b2:	4613      	mov	r3, r2
 801f2b4:	011b      	lsls	r3, r3, #4
 801f2b6:	4413      	add	r3, r2
 801f2b8:	009b      	lsls	r3, r3, #2
 801f2ba:	440b      	add	r3, r1
 801f2bc:	3334      	adds	r3, #52	@ 0x34
 801f2be:	683a      	ldr	r2, [r7, #0]
 801f2c0:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801f2c2:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f2c6:	498a      	ldr	r1, [pc, #552]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f2c8:	4613      	mov	r3, r2
 801f2ca:	011b      	lsls	r3, r3, #4
 801f2cc:	4413      	add	r3, r2
 801f2ce:	009b      	lsls	r3, r3, #2
 801f2d0:	440b      	add	r3, r1
 801f2d2:	3338      	adds	r3, #56	@ 0x38
 801f2d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801f2d8:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801f2da:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801f2de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801f2e2:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f2e6:	4613      	mov	r3, r2
 801f2e8:	011b      	lsls	r3, r3, #4
 801f2ea:	4413      	add	r3, r2
 801f2ec:	009b      	lsls	r3, r3, #2
 801f2ee:	4a80      	ldr	r2, [pc, #512]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f2f0:	4413      	add	r3, r2
 801f2f2:	3301      	adds	r3, #1
 801f2f4:	2232      	movs	r2, #50	@ 0x32
 801f2f6:	2100      	movs	r1, #0
 801f2f8:	4618      	mov	r0, r3
 801f2fa:	f00e fc49 	bl	802db90 <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801f2fe:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f302:	4613      	mov	r3, r2
 801f304:	011b      	lsls	r3, r3, #4
 801f306:	4413      	add	r3, r2
 801f308:	009b      	lsls	r3, r3, #2
 801f30a:	4a79      	ldr	r2, [pc, #484]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f30c:	4413      	add	r3, r2
 801f30e:	3301      	adds	r3, #1
 801f310:	68b9      	ldr	r1, [r7, #8]
 801f312:	4618      	mov	r0, r3
 801f314:	f00e fe09 	bl	802df2a <strcpy>
 801f318:	e028      	b.n	801f36c <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801f31a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801f31e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801f322:	e023      	b.n	801f36c <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801f324:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f328:	4971      	ldr	r1, [pc, #452]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f32a:	4613      	mov	r3, r2
 801f32c:	011b      	lsls	r3, r3, #4
 801f32e:	4413      	add	r3, r2
 801f330:	009b      	lsls	r3, r3, #2
 801f332:	440b      	add	r3, r1
 801f334:	3338      	adds	r3, #56	@ 0x38
 801f336:	6819      	ldr	r1, [r3, #0]
 801f338:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f33c:	486c      	ldr	r0, [pc, #432]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f33e:	4613      	mov	r3, r2
 801f340:	011b      	lsls	r3, r3, #4
 801f342:	4413      	add	r3, r2
 801f344:	009b      	lsls	r3, r3, #2
 801f346:	4403      	add	r3, r0
 801f348:	333c      	adds	r3, #60	@ 0x3c
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	1acb      	subs	r3, r1, r3
 801f34e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801f352:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801f356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801f35a:	d304      	bcc.n	801f366 <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801f35c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 801f360:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801f364:	e002      	b.n	801f36c <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801f366:	2301      	movs	r3, #1
 801f368:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801f36c:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f370:	495f      	ldr	r1, [pc, #380]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f372:	4613      	mov	r3, r2
 801f374:	011b      	lsls	r3, r3, #4
 801f376:	4413      	add	r3, r2
 801f378:	009b      	lsls	r3, r3, #2
 801f37a:	440b      	add	r3, r1
 801f37c:	3340      	adds	r3, #64	@ 0x40
 801f37e:	781b      	ldrb	r3, [r3, #0]
 801f380:	2b01      	cmp	r3, #1
 801f382:	d129      	bne.n	801f3d8 <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801f384:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f388:	4959      	ldr	r1, [pc, #356]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f38a:	4613      	mov	r3, r2
 801f38c:	011b      	lsls	r3, r3, #4
 801f38e:	4413      	add	r3, r2
 801f390:	009b      	lsls	r3, r3, #2
 801f392:	440b      	add	r3, r1
 801f394:	3338      	adds	r3, #56	@ 0x38
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d00a      	beq.n	801f3b2 <send_http_response_body+0x16a>
 801f39c:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f3a0:	4953      	ldr	r1, [pc, #332]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f3a2:	4613      	mov	r3, r2
 801f3a4:	011b      	lsls	r3, r3, #4
 801f3a6:	4413      	add	r3, r2
 801f3a8:	009b      	lsls	r3, r3, #2
 801f3aa:	440b      	add	r3, r1
 801f3ac:	3334      	adds	r3, #52	@ 0x34
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f3b2:	683b      	ldr	r3, [r7, #0]
 801f3b4:	b298      	uxth	r0, r3
 801f3b6:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f3ba:	494d      	ldr	r1, [pc, #308]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f3bc:	4613      	mov	r3, r2
 801f3be:	011b      	lsls	r3, r3, #4
 801f3c0:	4413      	add	r3, r2
 801f3c2:	009b      	lsls	r3, r3, #2
 801f3c4:	440b      	add	r3, r1
 801f3c6:	333c      	adds	r3, #60	@ 0x3c
 801f3c8:	681a      	ldr	r2, [r3, #0]
 801f3ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801f3ce:	b29b      	uxth	r3, r3
 801f3d0:	6879      	ldr	r1, [r7, #4]
 801f3d2:	f000 fbc9 	bl	801fb68 <read_userReg_webContent>
 801f3d6:	e035      	b.n	801f444 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801f3d8:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f3dc:	4944      	ldr	r1, [pc, #272]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f3de:	4613      	mov	r3, r2
 801f3e0:	011b      	lsls	r3, r3, #4
 801f3e2:	4413      	add	r3, r2
 801f3e4:	009b      	lsls	r3, r3, #2
 801f3e6:	440b      	add	r3, r1
 801f3e8:	3340      	adds	r3, #64	@ 0x40
 801f3ea:	781b      	ldrb	r3, [r3, #0]
 801f3ec:	2b04      	cmp	r3, #4
 801f3ee:	d126      	bne.n	801f43e <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801f3f0:	f107 0310 	add.w	r3, r7, #16
 801f3f4:	2280      	movs	r2, #128	@ 0x80
 801f3f6:	2100      	movs	r1, #0
 801f3f8:	4618      	mov	r0, r3
 801f3fa:	f00e fbc9 	bl	802db90 <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801f3fe:	f107 0310 	add.w	r3, r7, #16
 801f402:	4a3c      	ldr	r2, [pc, #240]	@ (801f4f4 <send_http_response_body+0x2ac>)
 801f404:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f408:	6018      	str	r0, [r3, #0]
 801f40a:	3304      	adds	r3, #4
 801f40c:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801f40e:	f107 0310 	add.w	r3, r7, #16
 801f412:	68b9      	ldr	r1, [r7, #8]
 801f414:	4618      	mov	r0, r3
 801f416:	f00e fbc3 	bl	802dba0 <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f41a:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f41e:	4934      	ldr	r1, [pc, #208]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f420:	4613      	mov	r3, r2
 801f422:	011b      	lsls	r3, r3, #4
 801f424:	4413      	add	r3, r2
 801f426:	009b      	lsls	r3, r3, #2
 801f428:	440b      	add	r3, r1
 801f42a:	333c      	adds	r3, #60	@ 0x3c
 801f42c:	681a      	ldr	r2, [r3, #0]
 801f42e:	f107 0010 	add.w	r0, r7, #16
 801f432:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801f436:	6879      	ldr	r1, [r7, #4]
 801f438:	f00b fe2c 	bl	802b094 <spi_fs_read_file_offset>
 801f43c:	e002      	b.n	801f444 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801f43e:	2300      	movs	r3, #0
 801f440:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801f444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d008      	beq.n	801f45e <send_http_response_body+0x216>
 801f44c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801f450:	b29a      	uxth	r2, r3
 801f452:	7bfb      	ldrb	r3, [r7, #15]
 801f454:	6879      	ldr	r1, [r7, #4]
 801f456:	4618      	mov	r0, r3
 801f458:	f7fa f89c 	bl	8019594 <send>
 801f45c:	e002      	b.n	801f464 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801f45e:	2301      	movs	r3, #1
 801f460:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

	if(flag_datasend_end)
 801f464:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 801f468:	2b00      	cmp	r3, #0
 801f46a:	d024      	beq.n	801f4b6 <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f46c:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f470:	491f      	ldr	r1, [pc, #124]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f472:	4613      	mov	r3, r2
 801f474:	011b      	lsls	r3, r3, #4
 801f476:	4413      	add	r3, r2
 801f478:	009b      	lsls	r3, r3, #2
 801f47a:	440b      	add	r3, r1
 801f47c:	3334      	adds	r3, #52	@ 0x34
 801f47e:	2200      	movs	r2, #0
 801f480:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f482:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f486:	491a      	ldr	r1, [pc, #104]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f488:	4613      	mov	r3, r2
 801f48a:	011b      	lsls	r3, r3, #4
 801f48c:	4413      	add	r3, r2
 801f48e:	009b      	lsls	r3, r3, #2
 801f490:	440b      	add	r3, r1
 801f492:	3338      	adds	r3, #56	@ 0x38
 801f494:	2200      	movs	r2, #0
 801f496:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f498:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f49c:	4914      	ldr	r1, [pc, #80]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f49e:	4613      	mov	r3, r2
 801f4a0:	011b      	lsls	r3, r3, #4
 801f4a2:	4413      	add	r3, r2
 801f4a4:	009b      	lsls	r3, r3, #2
 801f4a6:	440b      	add	r3, r1
 801f4a8:	333c      	adds	r3, #60	@ 0x3c
 801f4aa:	2200      	movs	r2, #0
 801f4ac:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f4ae:	2300      	movs	r3, #0
 801f4b0:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 801f4b4:	e018      	b.n	801f4e8 <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f4b6:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f4ba:	490d      	ldr	r1, [pc, #52]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f4bc:	4613      	mov	r3, r2
 801f4be:	011b      	lsls	r3, r3, #4
 801f4c0:	4413      	add	r3, r2
 801f4c2:	009b      	lsls	r3, r3, #2
 801f4c4:	440b      	add	r3, r1
 801f4c6:	333c      	adds	r3, #60	@ 0x3c
 801f4c8:	6819      	ldr	r1, [r3, #0]
 801f4ca:	f997 2092 	ldrsb.w	r2, [r7, #146]	@ 0x92
 801f4ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801f4d2:	4419      	add	r1, r3
 801f4d4:	4806      	ldr	r0, [pc, #24]	@ (801f4f0 <send_http_response_body+0x2a8>)
 801f4d6:	4613      	mov	r3, r2
 801f4d8:	011b      	lsls	r3, r3, #4
 801f4da:	4413      	add	r3, r2
 801f4dc:	009b      	lsls	r3, r3, #2
 801f4de:	4403      	add	r3, r0
 801f4e0:	333c      	adds	r3, #60	@ 0x3c
 801f4e2:	6019      	str	r1, [r3, #0]
 801f4e4:	e000      	b.n	801f4e8 <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f4e6:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801f4e8:	3798      	adds	r7, #152	@ 0x98
 801f4ea:	46bd      	mov	sp, r7
 801f4ec:	bd80      	pop	{r7, pc}
 801f4ee:	bf00      	nop
 801f4f0:	200012e4 	.word	0x200012e4
 801f4f4:	08033644 	.word	0x08033644

0801f4f8 <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801f4f8:	b580      	push	{r7, lr}
 801f4fa:	b088      	sub	sp, #32
 801f4fc:	af02      	add	r7, sp, #8
 801f4fe:	60b9      	str	r1, [r7, #8]
 801f500:	607a      	str	r2, [r7, #4]
 801f502:	461a      	mov	r2, r3
 801f504:	4603      	mov	r3, r0
 801f506:	73fb      	strb	r3, [r7, #15]
 801f508:	4613      	mov	r3, r2
 801f50a:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801f50c:	2300      	movs	r3, #0
 801f50e:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801f510:	89ba      	ldrh	r2, [r7, #12]
 801f512:	687b      	ldr	r3, [r7, #4]
 801f514:	9300      	str	r3, [sp, #0]
 801f516:	4613      	mov	r3, r2
 801f518:	4a08      	ldr	r2, [pc, #32]	@ (801f53c <send_http_response_cgi+0x44>)
 801f51a:	4909      	ldr	r1, [pc, #36]	@ (801f540 <send_http_response_cgi+0x48>)
 801f51c:	68b8      	ldr	r0, [r7, #8]
 801f51e:	f00e f9e9 	bl	802d8f4 <siprintf>
 801f522:	4603      	mov	r3, r0
 801f524:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f526:	8afa      	ldrh	r2, [r7, #22]
 801f528:	7bfb      	ldrb	r3, [r7, #15]
 801f52a:	68b9      	ldr	r1, [r7, #8]
 801f52c:	4618      	mov	r0, r3
 801f52e:	f7fa f831 	bl	8019594 <send>
}
 801f532:	bf00      	nop
 801f534:	3718      	adds	r7, #24
 801f536:	46bd      	mov	sp, r7
 801f538:	bd80      	pop	{r7, pc}
 801f53a:	bf00      	nop
 801f53c:	0803364c 	.word	0x0803364c
 801f540:	080336a8 	.word	0x080336a8

0801f544 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801f544:	b580      	push	{r7, lr}
 801f546:	b082      	sub	sp, #8
 801f548:	af00      	add	r7, sp, #0
 801f54a:	4603      	mov	r3, r0
 801f54c:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801f54e:	79fb      	ldrb	r3, [r7, #7]
 801f550:	009b      	lsls	r3, r3, #2
 801f552:	3301      	adds	r3, #1
 801f554:	00db      	lsls	r3, r3, #3
 801f556:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801f55a:	2108      	movs	r1, #8
 801f55c:	4618      	mov	r0, r3
 801f55e:	f7f9 fa51 	bl	8018a04 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801f562:	bf00      	nop
 801f564:	79fb      	ldrb	r3, [r7, #7]
 801f566:	009b      	lsls	r3, r3, #2
 801f568:	3301      	adds	r3, #1
 801f56a:	00db      	lsls	r3, r3, #3
 801f56c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801f570:	4618      	mov	r0, r3
 801f572:	f7f9 f9fb 	bl	801896c <WIZCHIP_READ>
 801f576:	4603      	mov	r3, r0
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d1f3      	bne.n	801f564 <http_disconnect+0x20>

	return SOCK_OK;
 801f57c:	2301      	movs	r3, #1
}
 801f57e:	4618      	mov	r0, r3
 801f580:	3708      	adds	r7, #8
 801f582:	46bd      	mov	sp, r7
 801f584:	bd80      	pop	{r7, pc}
	...

0801f588 <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801f588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f58c:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 801f590:	af02      	add	r7, sp, #8
 801f592:	4602      	mov	r2, r0
 801f594:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f598:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f59c:	6019      	str	r1, [r3, #0]
 801f59e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f5a2:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f5a6:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801f5a8:	2300      	movs	r3, #0
 801f5aa:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
	uint16_t content_num = 0;
 801f5ae:	2300      	movs	r3, #0
 801f5b0:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
	uint32_t file_len = 0;
 801f5b4:	2300      	movs	r3, #0
 801f5b6:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801f5ba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f5be:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f5c2:	2200      	movs	r2, #0
 801f5c4:	601a      	str	r2, [r3, #0]
 801f5c6:	3304      	adds	r3, #4
 801f5c8:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 801f5cc:	2100      	movs	r1, #0
 801f5ce:	4618      	mov	r0, r3
 801f5d0:	f00e fade 	bl	802db90 <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801f5d4:	f04f 0200 	mov.w	r2, #0
 801f5d8:	f04f 0300 	mov.w	r3, #0
 801f5dc:	e9c7 2386 	strd	r2, r3, [r7, #536]	@ 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f5e0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f5e4:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f5e8:	781b      	ldrb	r3, [r3, #0]
 801f5ea:	4618      	mov	r0, r3
 801f5ec:	f7ff fc06 	bl	801edfc <getHTTPSequenceNum>
 801f5f0:	4603      	mov	r3, r0
 801f5f2:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 801f5f6:	f997 3217 	ldrsb.w	r3, [r7, #535]	@ 0x217
 801f5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5fe:	f000 81e5 	beq.w	801f9cc <http_process_handler+0x444>

	http_status = 0;
 801f602:	2300      	movs	r3, #0
 801f604:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
	http_response = pHTTP_RX;
 801f608:	4ba6      	ldr	r3, [pc, #664]	@ (801f8a4 <http_process_handler+0x31c>)
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	4aa6      	ldr	r2, [pc, #664]	@ (801f8a8 <http_process_handler+0x320>)
 801f60e:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801f610:	2300      	movs	r3, #0
 801f612:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801f616:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f61a:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	781b      	ldrb	r3, [r3, #0]
 801f622:	2b03      	cmp	r3, #3
 801f624:	f000 8154 	beq.w	801f8d0 <http_process_handler+0x348>
 801f628:	2b03      	cmp	r3, #3
 801f62a:	f300 81be 	bgt.w	801f9aa <http_process_handler+0x422>
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d007      	beq.n	801f642 <http_process_handler+0xba>
 801f632:	2b00      	cmp	r3, #0
 801f634:	f2c0 81b9 	blt.w	801f9aa <http_process_handler+0x422>
 801f638:	3b01      	subs	r3, #1
 801f63a:	2b01      	cmp	r3, #1
 801f63c:	f200 81b5 	bhi.w	801f9aa <http_process_handler+0x422>
 801f640:	e010      	b.n	801f664 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801f642:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801f646:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f64a:	f8b7 2222 	ldrh.w	r2, [r7, #546]	@ 0x222
 801f64e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f652:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f656:	7818      	ldrb	r0, [r3, #0]
 801f658:	4613      	mov	r3, r2
 801f65a:	2200      	movs	r2, #0
 801f65c:	2100      	movs	r1, #0
 801f65e:	f7ff fd87 	bl	801f170 <send_http_response_header>
			break;
 801f662:	e1b6      	b.n	801f9d2 <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801f664:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f668:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	3302      	adds	r3, #2
 801f670:	f107 0208 	add.w	r2, r7, #8
 801f674:	4611      	mov	r1, r2
 801f676:	4618      	mov	r0, r3
 801f678:	f7ff fad6 	bl	801ec28 <get_http_uri_name>
			uri_name = uri_buf;
 801f67c:	f107 0308 	add.w	r3, r7, #8
 801f680:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801f684:	4989      	ldr	r1, [pc, #548]	@ (801f8ac <http_process_handler+0x324>)
 801f686:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801f68a:	f7f0 fda9 	bl	80101e0 <strcmp>
 801f68e:	4603      	mov	r3, r0
 801f690:	2b00      	cmp	r3, #0
 801f692:	d10b      	bne.n	801f6ac <http_process_handler+0x124>
 801f694:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801f698:	4985      	ldr	r1, [pc, #532]	@ (801f8b0 <http_process_handler+0x328>)
 801f69a:	461a      	mov	r2, r3
 801f69c:	460b      	mov	r3, r1
 801f69e:	cb03      	ldmia	r3!, {r0, r1}
 801f6a0:	6010      	str	r0, [r2, #0]
 801f6a2:	6051      	str	r1, [r2, #4]
 801f6a4:	8819      	ldrh	r1, [r3, #0]
 801f6a6:	789b      	ldrb	r3, [r3, #2]
 801f6a8:	8111      	strh	r1, [r2, #8]
 801f6aa:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801f6ac:	4981      	ldr	r1, [pc, #516]	@ (801f8b4 <http_process_handler+0x32c>)
 801f6ae:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801f6b2:	f7f0 fd95 	bl	80101e0 <strcmp>
 801f6b6:	4603      	mov	r3, r0
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	d10a      	bne.n	801f6d2 <http_process_handler+0x14a>
 801f6bc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801f6c0:	4a7d      	ldr	r2, [pc, #500]	@ (801f8b8 <http_process_handler+0x330>)
 801f6c2:	461c      	mov	r4, r3
 801f6c4:	4613      	mov	r3, r2
 801f6c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801f6c8:	6020      	str	r0, [r4, #0]
 801f6ca:	6061      	str	r1, [r4, #4]
 801f6cc:	60a2      	str	r2, [r4, #8]
 801f6ce:	781b      	ldrb	r3, [r3, #0]
 801f6d0:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801f6d2:	497a      	ldr	r1, [pc, #488]	@ (801f8bc <http_process_handler+0x334>)
 801f6d4:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801f6d8:	f7f0 fd82 	bl	80101e0 <strcmp>
 801f6dc:	4603      	mov	r3, r0
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d10b      	bne.n	801f6fa <http_process_handler+0x172>
 801f6e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 801f6e6:	4a76      	ldr	r2, [pc, #472]	@ (801f8c0 <http_process_handler+0x338>)
 801f6e8:	461d      	mov	r5, r3
 801f6ea:	4614      	mov	r4, r2
 801f6ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f6ee:	6028      	str	r0, [r5, #0]
 801f6f0:	6069      	str	r1, [r5, #4]
 801f6f2:	60aa      	str	r2, [r5, #8]
 801f6f4:	60eb      	str	r3, [r5, #12]
 801f6f6:	8823      	ldrh	r3, [r4, #0]
 801f6f8:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801f6fa:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f6fe:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	3301      	adds	r3, #1
 801f706:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 801f70a:	4618      	mov	r0, r3
 801f70c:	f7fe fffe 	bl	801e70c <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801f710:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f714:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	785b      	ldrb	r3, [r3, #1]
 801f71c:	2b08      	cmp	r3, #8
 801f71e:	d131      	bne.n	801f784 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801f720:	4b68      	ldr	r3, [pc, #416]	@ (801f8c4 <http_process_handler+0x33c>)
 801f722:	681b      	ldr	r3, [r3, #0]
 801f724:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801f728:	4619      	mov	r1, r3
 801f72a:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801f72e:	f000 fa59 	bl	801fbe4 <http_get_cgi_handler>
 801f732:	4603      	mov	r3, r0
 801f734:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801f738:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d015      	beq.n	801f76c <http_process_handler+0x1e4>
 801f740:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f744:	f240 729e 	movw	r2, #1950	@ 0x79e
 801f748:	4293      	cmp	r3, r2
 801f74a:	d80f      	bhi.n	801f76c <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801f74c:	4b56      	ldr	r3, [pc, #344]	@ (801f8a8 <http_process_handler+0x320>)
 801f74e:	6819      	ldr	r1, [r3, #0]
 801f750:	4b5c      	ldr	r3, [pc, #368]	@ (801f8c4 <http_process_handler+0x33c>)
 801f752:	681a      	ldr	r2, [r3, #0]
 801f754:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f758:	b29c      	uxth	r4, r3
 801f75a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f75e:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f762:	7818      	ldrb	r0, [r3, #0]
 801f764:	4623      	mov	r3, r4
 801f766:	f7ff fec7 	bl	801f4f8 <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801f76a:	e131      	b.n	801f9d0 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f76c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f770:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f774:	7818      	ldrb	r0, [r3, #0]
 801f776:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 801f77a:	2200      	movs	r2, #0
 801f77c:	2108      	movs	r1, #8
 801f77e:	f7ff fcf7 	bl	801f170 <send_http_response_header>
			break;
 801f782:	e125      	b.n	801f9d0 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f784:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 801f788:	484f      	ldr	r0, [pc, #316]	@ (801f8c8 <http_process_handler+0x340>)
 801f78a:	f00b fd5d 	bl	802b248 <spi_fs_serch_file_in_dir>
 801f78e:	4603      	mov	r3, r0
 801f790:	17da      	asrs	r2, r3, #31
 801f792:	4698      	mov	r8, r3
 801f794:	4691      	mov	r9, r2
 801f796:	e9c7 8986 	strd	r8, r9, [r7, #536]	@ 0x218
 801f79a:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 801f79e:	2a01      	cmp	r2, #1
 801f7a0:	f173 0300 	sbcs.w	r3, r3, #0
 801f7a4:	db12      	blt.n	801f7cc <http_process_handler+0x244>
					file_len = err;
 801f7a6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801f7aa:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
					content_found = 1;
 801f7ae:	2301      	movs	r3, #1
 801f7b0:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f7b4:	f997 2217 	ldrsb.w	r2, [r7, #535]	@ 0x217
 801f7b8:	4944      	ldr	r1, [pc, #272]	@ (801f8cc <http_process_handler+0x344>)
 801f7ba:	4613      	mov	r3, r2
 801f7bc:	011b      	lsls	r3, r3, #4
 801f7be:	4413      	add	r3, r2
 801f7c0:	009b      	lsls	r3, r3, #2
 801f7c2:	440b      	add	r3, r1
 801f7c4:	3340      	adds	r3, #64	@ 0x40
 801f7c6:	2204      	movs	r2, #4
 801f7c8:	701a      	strb	r2, [r3, #0]
 801f7ca:	e024      	b.n	801f816 <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f7cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801f7d0:	f207 210e 	addw	r1, r7, #526	@ 0x20e
 801f7d4:	f107 0308 	add.w	r3, r7, #8
 801f7d8:	4618      	mov	r0, r3
 801f7da:	f000 f989 	bl	801faf0 <find_userReg_webContent>
 801f7de:	4603      	mov	r3, r0
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d012      	beq.n	801f80a <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f7e4:	2301      	movs	r3, #1
 801f7e6:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
					content_addr = (uint32_t)content_num;
 801f7ea:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 801f7ee:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f7f2:	f997 2217 	ldrsb.w	r2, [r7, #535]	@ 0x217
 801f7f6:	4935      	ldr	r1, [pc, #212]	@ (801f8cc <http_process_handler+0x344>)
 801f7f8:	4613      	mov	r3, r2
 801f7fa:	011b      	lsls	r3, r3, #4
 801f7fc:	4413      	add	r3, r2
 801f7fe:	009b      	lsls	r3, r3, #2
 801f800:	440b      	add	r3, r1
 801f802:	3340      	adds	r3, #64	@ 0x40
 801f804:	2201      	movs	r2, #1
 801f806:	701a      	strb	r2, [r3, #0]
 801f808:	e005      	b.n	801f816 <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f80a:	2300      	movs	r3, #0
 801f80c:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
					file_len = 0;
 801f810:	2300      	movs	r3, #0
 801f812:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
				if(!content_found)
 801f816:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 801f81a:	2b00      	cmp	r3, #0
 801f81c:	d111      	bne.n	801f842 <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f81e:	4924      	ldr	r1, [pc, #144]	@ (801f8b0 <http_process_handler+0x328>)
 801f820:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801f824:	f7f0 fcdc 	bl	80101e0 <strcmp>
 801f828:	4603      	mov	r3, r0
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d104      	bne.n	801f838 <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f82e:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 801f832:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
 801f836:	e007      	b.n	801f848 <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f838:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 801f83c:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
 801f840:	e002      	b.n	801f848 <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f842:	23c8      	movs	r3, #200	@ 0xc8
 801f844:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
				if(http_status)
 801f848:	f8b7 3222 	ldrh.w	r3, [r7, #546]	@ 0x222
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d011      	beq.n	801f874 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f850:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f854:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	7859      	ldrb	r1, [r3, #1]
 801f85c:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801f860:	f8b7 4222 	ldrh.w	r4, [r7, #546]	@ 0x222
 801f864:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f868:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f86c:	7818      	ldrb	r0, [r3, #0]
 801f86e:	4623      	mov	r3, r4
 801f870:	f7ff fc7e 	bl	801f170 <send_http_response_header>
				if(http_status == STATUS_OK)
 801f874:	f8b7 3222 	ldrh.w	r3, [r7, #546]	@ 0x222
 801f878:	2bc8      	cmp	r3, #200	@ 0xc8
 801f87a:	f040 80a9 	bne.w	801f9d0 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f87e:	4b0a      	ldr	r3, [pc, #40]	@ (801f8a8 <http_process_handler+0x320>)
 801f880:	6819      	ldr	r1, [r3, #0]
 801f882:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f886:	f507 720a 	add.w	r2, r7, #552	@ 0x228
 801f88a:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 801f88e:	7810      	ldrb	r0, [r2, #0]
 801f890:	9300      	str	r3, [sp, #0]
 801f892:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801f896:	460a      	mov	r2, r1
 801f898:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 801f89c:	f7ff fcd4 	bl	801f248 <send_http_response_body>
			break;
 801f8a0:	e096      	b.n	801f9d0 <http_process_handler+0x448>
 801f8a2:	bf00      	nop
 801f8a4:	200012dc 	.word	0x200012dc
 801f8a8:	20001208 	.word	0x20001208
 801f8ac:	080336b4 	.word	0x080336b4
 801f8b0:	080336b8 	.word	0x080336b8
 801f8b4:	080336c4 	.word	0x080336c4
 801f8b8:	080336c8 	.word	0x080336c8
 801f8bc:	080336d8 	.word	0x080336d8
 801f8c0:	080336e0 	.word	0x080336e0
 801f8c4:	200012d8 	.word	0x200012d8
 801f8c8:	08033644 	.word	0x08033644
 801f8cc:	200012e4 	.word	0x200012e4

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f8d0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f8d4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	1c98      	adds	r0, r3, #2
 801f8dc:	f107 0308 	add.w	r3, r7, #8
 801f8e0:	4a3e      	ldr	r2, [pc, #248]	@ (801f9dc <http_process_handler+0x454>)
 801f8e2:	493f      	ldr	r1, [pc, #252]	@ (801f9e0 <http_process_handler+0x458>)
 801f8e4:	f7ff f9ef 	bl	801ecc6 <mid>
			uri_name = uri_buf;
 801f8e8:	f107 0308 	add.w	r3, r7, #8
 801f8ec:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f8f0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f8f4:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	3301      	adds	r3, #1
 801f8fc:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 801f900:	4618      	mov	r0, r3
 801f902:	f7fe ff03 	bl	801e70c <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f906:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f90a:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 801f90e:	681b      	ldr	r3, [r3, #0]
 801f910:	785b      	ldrb	r3, [r3, #1]
 801f912:	2b08      	cmp	r3, #8
 801f914:	d13c      	bne.n	801f990 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f916:	4b33      	ldr	r3, [pc, #204]	@ (801f9e4 <http_process_handler+0x45c>)
 801f918:	681a      	ldr	r2, [r3, #0]
 801f91a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801f91e:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 801f922:	f5a1 710a 	sub.w	r1, r1, #552	@ 0x228
 801f926:	6809      	ldr	r1, [r1, #0]
 801f928:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 801f92c:	f000 f988 	bl	801fc40 <http_post_cgi_handler>
 801f930:	4603      	mov	r3, r0
 801f932:	f887 3221 	strb.w	r3, [r7, #545]	@ 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f936:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	d01c      	beq.n	801f978 <http_process_handler+0x3f0>
 801f93e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f942:	f240 72be 	movw	r2, #1982	@ 0x7be
 801f946:	4293      	cmp	r3, r2
 801f948:	d816      	bhi.n	801f978 <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f94a:	4b27      	ldr	r3, [pc, #156]	@ (801f9e8 <http_process_handler+0x460>)
 801f94c:	6819      	ldr	r1, [r3, #0]
 801f94e:	4b25      	ldr	r3, [pc, #148]	@ (801f9e4 <http_process_handler+0x45c>)
 801f950:	681a      	ldr	r2, [r3, #0]
 801f952:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f956:	b29c      	uxth	r4, r3
 801f958:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f95c:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f960:	7818      	ldrb	r0, [r3, #0]
 801f962:	4623      	mov	r3, r4
 801f964:	f7ff fdc8 	bl	801f4f8 <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f968:	f897 3221 	ldrb.w	r3, [r7, #545]	@ 0x221
 801f96c:	2b02      	cmp	r3, #2
 801f96e:	d11b      	bne.n	801f9a8 <http_process_handler+0x420>
 801f970:	4b1e      	ldr	r3, [pc, #120]	@ (801f9ec <http_process_handler+0x464>)
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	4798      	blx	r3
 801f976:	e017      	b.n	801f9a8 <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f978:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f97c:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f980:	7818      	ldrb	r0, [r3, #0]
 801f982:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 801f986:	2200      	movs	r2, #0
 801f988:	2108      	movs	r1, #8
 801f98a:	f7ff fbf1 	bl	801f170 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f98e:	e020      	b.n	801f9d2 <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f990:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f994:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f998:	7818      	ldrb	r0, [r3, #0]
 801f99a:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 801f99e:	2200      	movs	r2, #0
 801f9a0:	2100      	movs	r1, #0
 801f9a2:	f7ff fbe5 	bl	801f170 <send_http_response_header>
			break;
 801f9a6:	e014      	b.n	801f9d2 <http_process_handler+0x44a>
 801f9a8:	e013      	b.n	801f9d2 <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f9aa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801f9ae:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f9b2:	f8b7 2222 	ldrh.w	r2, [r7, #546]	@ 0x222
 801f9b6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f9ba:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 801f9be:	7818      	ldrb	r0, [r3, #0]
 801f9c0:	4613      	mov	r3, r2
 801f9c2:	2200      	movs	r2, #0
 801f9c4:	2100      	movs	r1, #0
 801f9c6:	f7ff fbd3 	bl	801f170 <send_http_response_header>
			break;
 801f9ca:	e002      	b.n	801f9d2 <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f9cc:	bf00      	nop
 801f9ce:	e000      	b.n	801f9d2 <http_process_handler+0x44a>
			break;
 801f9d0:	bf00      	nop
	}
}
 801f9d2:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 801f9d6:	46bd      	mov	sp, r7
 801f9d8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f9dc:	080336f4 	.word	0x080336f4
 801f9e0:	080336b4 	.word	0x080336b4
 801f9e4:	20001208 	.word	0x20001208
 801f9e8:	200012d8 	.word	0x200012d8
 801f9ec:	20000120 	.word	0x20000120

0801f9f0 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f9f0:	b480      	push	{r7}
 801f9f2:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f9f4:	4b04      	ldr	r3, [pc, #16]	@ (801fa08 <httpServer_time_handler+0x18>)
 801f9f6:	681b      	ldr	r3, [r3, #0]
 801f9f8:	3301      	adds	r3, #1
 801f9fa:	4a03      	ldr	r2, [pc, #12]	@ (801fa08 <httpServer_time_handler+0x18>)
 801f9fc:	6013      	str	r3, [r2, #0]
}
 801f9fe:	bf00      	nop
 801fa00:	46bd      	mov	sp, r7
 801fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa06:	4770      	bx	lr
 801fa08:	200012e0 	.word	0x200012e0

0801fa0c <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801fa0c:	b580      	push	{r7, lr}
 801fa0e:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801fa10:	4b03      	ldr	r3, [pc, #12]	@ (801fa20 <get_httpServer_timecount+0x14>)
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	2001      	movs	r0, #1
 801fa16:	4798      	blx	r3
	return httpServer_tick_1s;
 801fa18:	4b02      	ldr	r3, [pc, #8]	@ (801fa24 <get_httpServer_timecount+0x18>)
 801fa1a:	681b      	ldr	r3, [r3, #0]
}
 801fa1c:	4618      	mov	r0, r3
 801fa1e:	bd80      	pop	{r7, pc}
 801fa20:	20000124 	.word	0x20000124
 801fa24:	200012e0 	.word	0x200012e0

0801fa28 <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801fa28:	b580      	push	{r7, lr}
 801fa2a:	b084      	sub	sp, #16
 801fa2c:	af00      	add	r7, sp, #0
 801fa2e:	6078      	str	r0, [r7, #4]
 801fa30:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d04e      	beq.n	801fad6 <reg_httpServer_webContent+0xae>
 801fa38:	683b      	ldr	r3, [r7, #0]
 801fa3a:	2b00      	cmp	r3, #0
 801fa3c:	d04b      	beq.n	801fad6 <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801fa3e:	4b29      	ldr	r3, [pc, #164]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801fa40:	881b      	ldrh	r3, [r3, #0]
 801fa42:	2b03      	cmp	r3, #3
 801fa44:	d849      	bhi.n	801fada <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801fa46:	6878      	ldr	r0, [r7, #4]
 801fa48:	f7f0 fc2a 	bl	80102a0 <strlen>
 801fa4c:	4603      	mov	r3, r0
 801fa4e:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801fa50:	6838      	ldr	r0, [r7, #0]
 801fa52:	f7f0 fc25 	bl	80102a0 <strlen>
 801fa56:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801fa58:	4b22      	ldr	r3, [pc, #136]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801fa5a:	881b      	ldrh	r3, [r3, #0]
 801fa5c:	461a      	mov	r2, r3
 801fa5e:	4b21      	ldr	r3, [pc, #132]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801fa60:	881b      	ldrh	r3, [r3, #0]
 801fa62:	4618      	mov	r0, r3
 801fa64:	2332      	movs	r3, #50	@ 0x32
 801fa66:	fb02 f303 	mul.w	r3, r2, r3
 801fa6a:	4a1f      	ldr	r2, [pc, #124]	@ (801fae8 <reg_httpServer_webContent+0xc0>)
 801fa6c:	441a      	add	r2, r3
 801fa6e:	491f      	ldr	r1, [pc, #124]	@ (801faec <reg_httpServer_webContent+0xc4>)
 801fa70:	4603      	mov	r3, r0
 801fa72:	005b      	lsls	r3, r3, #1
 801fa74:	4403      	add	r3, r0
 801fa76:	009b      	lsls	r3, r3, #2
 801fa78:	440b      	add	r3, r1
 801fa7a:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801fa7c:	4b19      	ldr	r3, [pc, #100]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801fa7e:	881b      	ldrh	r3, [r3, #0]
 801fa80:	4619      	mov	r1, r3
 801fa82:	4a1a      	ldr	r2, [pc, #104]	@ (801faec <reg_httpServer_webContent+0xc4>)
 801fa84:	460b      	mov	r3, r1
 801fa86:	005b      	lsls	r3, r3, #1
 801fa88:	440b      	add	r3, r1
 801fa8a:	009b      	lsls	r3, r3, #2
 801fa8c:	4413      	add	r3, r2
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	6879      	ldr	r1, [r7, #4]
 801fa92:	4618      	mov	r0, r3
 801fa94:	f00e fa49 	bl	802df2a <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801fa98:	4b12      	ldr	r3, [pc, #72]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801fa9a:	881b      	ldrh	r3, [r3, #0]
 801fa9c:	4619      	mov	r1, r3
 801fa9e:	4a13      	ldr	r2, [pc, #76]	@ (801faec <reg_httpServer_webContent+0xc4>)
 801faa0:	460b      	mov	r3, r1
 801faa2:	005b      	lsls	r3, r3, #1
 801faa4:	440b      	add	r3, r1
 801faa6:	009b      	lsls	r3, r3, #2
 801faa8:	4413      	add	r3, r2
 801faaa:	3304      	adds	r3, #4
 801faac:	68ba      	ldr	r2, [r7, #8]
 801faae:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801fab0:	4b0c      	ldr	r3, [pc, #48]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801fab2:	881b      	ldrh	r3, [r3, #0]
 801fab4:	4619      	mov	r1, r3
 801fab6:	4a0d      	ldr	r2, [pc, #52]	@ (801faec <reg_httpServer_webContent+0xc4>)
 801fab8:	460b      	mov	r3, r1
 801faba:	005b      	lsls	r3, r3, #1
 801fabc:	440b      	add	r3, r1
 801fabe:	009b      	lsls	r3, r3, #2
 801fac0:	4413      	add	r3, r2
 801fac2:	3308      	adds	r3, #8
 801fac4:	683a      	ldr	r2, [r7, #0]
 801fac6:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801fac8:	4b06      	ldr	r3, [pc, #24]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801faca:	881b      	ldrh	r3, [r3, #0]
 801facc:	3301      	adds	r3, #1
 801face:	b29a      	uxth	r2, r3
 801fad0:	4b04      	ldr	r3, [pc, #16]	@ (801fae4 <reg_httpServer_webContent+0xbc>)
 801fad2:	801a      	strh	r2, [r3, #0]
 801fad4:	e002      	b.n	801fadc <reg_httpServer_webContent+0xb4>
		return;
 801fad6:	bf00      	nop
 801fad8:	e000      	b.n	801fadc <reg_httpServer_webContent+0xb4>
		return;
 801fada:	bf00      	nop
}
 801fadc:	3710      	adds	r7, #16
 801fade:	46bd      	mov	sp, r7
 801fae0:	bd80      	pop	{r7, pc}
 801fae2:	bf00      	nop
 801fae4:	200012d4 	.word	0x200012d4
 801fae8:	2000120c 	.word	0x2000120c
 801faec:	20001504 	.word	0x20001504

0801faf0 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801faf0:	b580      	push	{r7, lr}
 801faf2:	b086      	sub	sp, #24
 801faf4:	af00      	add	r7, sp, #0
 801faf6:	60f8      	str	r0, [r7, #12]
 801faf8:	60b9      	str	r1, [r7, #8]
 801fafa:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801fafc:	2300      	movs	r3, #0
 801fafe:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801fb00:	2300      	movs	r3, #0
 801fb02:	82fb      	strh	r3, [r7, #22]
 801fb04:	e022      	b.n	801fb4c <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801fb06:	8afa      	ldrh	r2, [r7, #22]
 801fb08:	4915      	ldr	r1, [pc, #84]	@ (801fb60 <find_userReg_webContent+0x70>)
 801fb0a:	4613      	mov	r3, r2
 801fb0c:	005b      	lsls	r3, r3, #1
 801fb0e:	4413      	add	r3, r2
 801fb10:	009b      	lsls	r3, r3, #2
 801fb12:	440b      	add	r3, r1
 801fb14:	681b      	ldr	r3, [r3, #0]
 801fb16:	4619      	mov	r1, r3
 801fb18:	68f8      	ldr	r0, [r7, #12]
 801fb1a:	f7f0 fb61 	bl	80101e0 <strcmp>
 801fb1e:	4603      	mov	r3, r0
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	d110      	bne.n	801fb46 <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801fb24:	8afa      	ldrh	r2, [r7, #22]
 801fb26:	490e      	ldr	r1, [pc, #56]	@ (801fb60 <find_userReg_webContent+0x70>)
 801fb28:	4613      	mov	r3, r2
 801fb2a:	005b      	lsls	r3, r3, #1
 801fb2c:	4413      	add	r3, r2
 801fb2e:	009b      	lsls	r3, r3, #2
 801fb30:	440b      	add	r3, r1
 801fb32:	3304      	adds	r3, #4
 801fb34:	681a      	ldr	r2, [r3, #0]
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801fb3a:	68bb      	ldr	r3, [r7, #8]
 801fb3c:	8afa      	ldrh	r2, [r7, #22]
 801fb3e:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801fb40:	2301      	movs	r3, #1
 801fb42:	757b      	strb	r3, [r7, #21]
			break;
 801fb44:	e007      	b.n	801fb56 <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801fb46:	8afb      	ldrh	r3, [r7, #22]
 801fb48:	3301      	adds	r3, #1
 801fb4a:	82fb      	strh	r3, [r7, #22]
 801fb4c:	4b05      	ldr	r3, [pc, #20]	@ (801fb64 <find_userReg_webContent+0x74>)
 801fb4e:	881b      	ldrh	r3, [r3, #0]
 801fb50:	8afa      	ldrh	r2, [r7, #22]
 801fb52:	429a      	cmp	r2, r3
 801fb54:	d3d7      	bcc.n	801fb06 <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801fb56:	7d7b      	ldrb	r3, [r7, #21]
}
 801fb58:	4618      	mov	r0, r3
 801fb5a:	3718      	adds	r7, #24
 801fb5c:	46bd      	mov	sp, r7
 801fb5e:	bd80      	pop	{r7, pc}
 801fb60:	20001504 	.word	0x20001504
 801fb64:	200012d4 	.word	0x200012d4

0801fb68 <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801fb68:	b580      	push	{r7, lr}
 801fb6a:	b086      	sub	sp, #24
 801fb6c:	af00      	add	r7, sp, #0
 801fb6e:	60b9      	str	r1, [r7, #8]
 801fb70:	607a      	str	r2, [r7, #4]
 801fb72:	461a      	mov	r2, r3
 801fb74:	4603      	mov	r3, r0
 801fb76:	81fb      	strh	r3, [r7, #14]
 801fb78:	4613      	mov	r3, r2
 801fb7a:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801fb7c:	2300      	movs	r3, #0
 801fb7e:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801fb80:	4b16      	ldr	r3, [pc, #88]	@ (801fbdc <read_userReg_webContent+0x74>)
 801fb82:	881b      	ldrh	r3, [r3, #0]
 801fb84:	89fa      	ldrh	r2, [r7, #14]
 801fb86:	429a      	cmp	r2, r3
 801fb88:	d901      	bls.n	801fb8e <read_userReg_webContent+0x26>
 801fb8a:	2300      	movs	r3, #0
 801fb8c:	e021      	b.n	801fbd2 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801fb8e:	89fa      	ldrh	r2, [r7, #14]
 801fb90:	4913      	ldr	r1, [pc, #76]	@ (801fbe0 <read_userReg_webContent+0x78>)
 801fb92:	4613      	mov	r3, r2
 801fb94:	005b      	lsls	r3, r3, #1
 801fb96:	4413      	add	r3, r2
 801fb98:	009b      	lsls	r3, r3, #2
 801fb9a:	440b      	add	r3, r1
 801fb9c:	3308      	adds	r3, #8
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d003      	beq.n	801fbb0 <read_userReg_webContent+0x48>
 801fba8:	697a      	ldr	r2, [r7, #20]
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	4413      	add	r3, r2
 801fbae:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801fbb0:	89bb      	ldrh	r3, [r7, #12]
 801fbb2:	461a      	mov	r2, r3
 801fbb4:	6979      	ldr	r1, [r7, #20]
 801fbb6:	68b8      	ldr	r0, [r7, #8]
 801fbb8:	f00e f844 	bl	802dc44 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801fbbc:	89bb      	ldrh	r3, [r7, #12]
 801fbbe:	68ba      	ldr	r2, [r7, #8]
 801fbc0:	4413      	add	r3, r2
 801fbc2:	2200      	movs	r2, #0
 801fbc4:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801fbc6:	68b8      	ldr	r0, [r7, #8]
 801fbc8:	f7f0 fb6a 	bl	80102a0 <strlen>
 801fbcc:	4603      	mov	r3, r0
 801fbce:	827b      	strh	r3, [r7, #18]
	return ret;
 801fbd0:	8a7b      	ldrh	r3, [r7, #18]
}
 801fbd2:	4618      	mov	r0, r3
 801fbd4:	3718      	adds	r7, #24
 801fbd6:	46bd      	mov	sp, r7
 801fbd8:	bd80      	pop	{r7, pc}
 801fbda:	bf00      	nop
 801fbdc:	200012d4 	.word	0x200012d4
 801fbe0:	20001504 	.word	0x20001504

0801fbe4 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801fbe4:	b580      	push	{r7, lr}
 801fbe6:	b086      	sub	sp, #24
 801fbe8:	af00      	add	r7, sp, #0
 801fbea:	60f8      	str	r0, [r7, #12]
 801fbec:	60b9      	str	r1, [r7, #8]
 801fbee:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801fbf0:	2301      	movs	r3, #1
 801fbf2:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801fbf4:	2300      	movs	r3, #0
 801fbf6:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801fbf8:	4b0f      	ldr	r3, [pc, #60]	@ (801fc38 <http_get_cgi_handler+0x54>)
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	f107 0214 	add.w	r2, r7, #20
 801fc00:	68b9      	ldr	r1, [r7, #8]
 801fc02:	68f8      	ldr	r0, [r7, #12]
 801fc04:	4798      	blx	r3
 801fc06:	4603      	mov	r3, r0
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	d108      	bne.n	801fc1e <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fc0c:	490b      	ldr	r1, [pc, #44]	@ (801fc3c <http_get_cgi_handler+0x58>)
 801fc0e:	68f8      	ldr	r0, [r7, #12]
 801fc10:	f7f0 fae6 	bl	80101e0 <strcmp>
 801fc14:	4603      	mov	r3, r0
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d001      	beq.n	801fc1e <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fc1e:	7dfb      	ldrb	r3, [r7, #23]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d003      	beq.n	801fc2c <http_get_cgi_handler+0x48>
 801fc24:	8abb      	ldrh	r3, [r7, #20]
 801fc26:	461a      	mov	r2, r3
 801fc28:	687b      	ldr	r3, [r7, #4]
 801fc2a:	601a      	str	r2, [r3, #0]
	return ret;
 801fc2c:	7dfb      	ldrb	r3, [r7, #23]
}
 801fc2e:	4618      	mov	r0, r3
 801fc30:	3718      	adds	r7, #24
 801fc32:	46bd      	mov	sp, r7
 801fc34:	bd80      	pop	{r7, pc}
 801fc36:	bf00      	nop
 801fc38:	20001538 	.word	0x20001538
 801fc3c:	080337ac 	.word	0x080337ac

0801fc40 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801fc40:	b590      	push	{r4, r7, lr}
 801fc42:	b087      	sub	sp, #28
 801fc44:	af00      	add	r7, sp, #0
 801fc46:	60f8      	str	r0, [r7, #12]
 801fc48:	60b9      	str	r1, [r7, #8]
 801fc4a:	607a      	str	r2, [r7, #4]
 801fc4c:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801fc4e:	2301      	movs	r3, #1
 801fc50:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801fc52:	2300      	movs	r3, #0
 801fc54:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801fc56:	2300      	movs	r3, #0
 801fc58:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801fc5a:	4b20      	ldr	r3, [pc, #128]	@ (801fcdc <http_post_cgi_handler+0x9c>)
 801fc5c:	681c      	ldr	r4, [r3, #0]
 801fc5e:	68bb      	ldr	r3, [r7, #8]
 801fc60:	1c99      	adds	r1, r3, #2
 801fc62:	f107 0314 	add.w	r3, r7, #20
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	68f8      	ldr	r0, [r7, #12]
 801fc6a:	47a0      	blx	r4
 801fc6c:	4603      	mov	r3, r0
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	d127      	bne.n	801fcc2 <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fc72:	491b      	ldr	r1, [pc, #108]	@ (801fce0 <http_post_cgi_handler+0xa0>)
 801fc74:	68f8      	ldr	r0, [r7, #12]
 801fc76:	f7f0 fab3 	bl	80101e0 <strcmp>
 801fc7a:	4603      	mov	r3, r0
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d10b      	bne.n	801fc98 <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801fc80:	2301      	movs	r3, #1
 801fc82:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801fc84:	7dbb      	ldrb	r3, [r7, #22]
 801fc86:	461a      	mov	r2, r3
 801fc88:	4916      	ldr	r1, [pc, #88]	@ (801fce4 <http_post_cgi_handler+0xa4>)
 801fc8a:	6878      	ldr	r0, [r7, #4]
 801fc8c:	f00d fe32 	bl	802d8f4 <siprintf>
 801fc90:	4603      	mov	r3, r0
 801fc92:	b29b      	uxth	r3, r3
 801fc94:	82bb      	strh	r3, [r7, #20]
 801fc96:	e014      	b.n	801fcc2 <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801fc98:	4913      	ldr	r1, [pc, #76]	@ (801fce8 <http_post_cgi_handler+0xa8>)
 801fc9a:	68f8      	ldr	r0, [r7, #12]
 801fc9c:	f7f0 faa0 	bl	80101e0 <strcmp>
 801fca0:	4603      	mov	r3, r0
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	d10b      	bne.n	801fcbe <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801fca6:	2301      	movs	r3, #1
 801fca8:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801fcaa:	7dbb      	ldrb	r3, [r7, #22]
 801fcac:	461a      	mov	r2, r3
 801fcae:	490d      	ldr	r1, [pc, #52]	@ (801fce4 <http_post_cgi_handler+0xa4>)
 801fcb0:	6878      	ldr	r0, [r7, #4]
 801fcb2:	f00d fe1f 	bl	802d8f4 <siprintf>
 801fcb6:	4603      	mov	r3, r0
 801fcb8:	b29b      	uxth	r3, r3
 801fcba:	82bb      	strh	r3, [r7, #20]
 801fcbc:	e001      	b.n	801fcc2 <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801fcbe:	2300      	movs	r3, #0
 801fcc0:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fcc2:	7dfb      	ldrb	r3, [r7, #23]
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d003      	beq.n	801fcd0 <http_post_cgi_handler+0x90>
 801fcc8:	8abb      	ldrh	r3, [r7, #20]
 801fcca:	461a      	mov	r2, r3
 801fccc:	683b      	ldr	r3, [r7, #0]
 801fcce:	601a      	str	r2, [r3, #0]
	return ret;
 801fcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 801fcd2:	4618      	mov	r0, r3
 801fcd4:	371c      	adds	r7, #28
 801fcd6:	46bd      	mov	sp, r7
 801fcd8:	bd90      	pop	{r4, r7, pc}
 801fcda:	bf00      	nop
 801fcdc:	20001534 	.word	0x20001534
 801fce0:	080337ac 	.word	0x080337ac
 801fce4:	080337b8 	.word	0x080337b8
 801fce8:	080337bc 	.word	0x080337bc

0801fcec <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801fcec:	b480      	push	{r7}
 801fcee:	b085      	sub	sp, #20
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	60f8      	str	r0, [r7, #12]
 801fcf4:	60b9      	str	r1, [r7, #8]
 801fcf6:	607a      	str	r2, [r7, #4]

	;
}
 801fcf8:	bf00      	nop
 801fcfa:	4618      	mov	r0, r3
 801fcfc:	3714      	adds	r7, #20
 801fcfe:	46bd      	mov	sp, r7
 801fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd04:	4770      	bx	lr

0801fd06 <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801fd06:	b480      	push	{r7}
 801fd08:	b085      	sub	sp, #20
 801fd0a:	af00      	add	r7, sp, #0
 801fd0c:	60f8      	str	r0, [r7, #12]
 801fd0e:	60b9      	str	r1, [r7, #8]
 801fd10:	607a      	str	r2, [r7, #4]
 801fd12:	603b      	str	r3, [r7, #0]
	;
}
 801fd14:	bf00      	nop
 801fd16:	4618      	mov	r0, r3
 801fd18:	3714      	adds	r7, #20
 801fd1a:	46bd      	mov	sp, r7
 801fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd20:	4770      	bx	lr
	...

0801fd24 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801fd24:	b480      	push	{r7}
 801fd26:	b083      	sub	sp, #12
 801fd28:	af00      	add	r7, sp, #0
 801fd2a:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801fd2c:	4b07      	ldr	r3, [pc, #28]	@ (801fd4c <reg_external_post_cgi_processor+0x28>)
 801fd2e:	4a08      	ldr	r2, [pc, #32]	@ (801fd50 <reg_external_post_cgi_processor+0x2c>)
 801fd30:	601a      	str	r2, [r3, #0]
	if (function) {
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d002      	beq.n	801fd3e <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801fd38:	4a04      	ldr	r2, [pc, #16]	@ (801fd4c <reg_external_post_cgi_processor+0x28>)
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	6013      	str	r3, [r2, #0]
	}

}
 801fd3e:	bf00      	nop
 801fd40:	370c      	adds	r7, #12
 801fd42:	46bd      	mov	sp, r7
 801fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd48:	4770      	bx	lr
 801fd4a:	bf00      	nop
 801fd4c:	20001534 	.word	0x20001534
 801fd50:	0801fd07 	.word	0x0801fd07

0801fd54 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801fd54:	b480      	push	{r7}
 801fd56:	b083      	sub	sp, #12
 801fd58:	af00      	add	r7, sp, #0
 801fd5a:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801fd5c:	4b07      	ldr	r3, [pc, #28]	@ (801fd7c <reg_external_get_cgi_processor+0x28>)
 801fd5e:	4a08      	ldr	r2, [pc, #32]	@ (801fd80 <reg_external_get_cgi_processor+0x2c>)
 801fd60:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801fd62:	687b      	ldr	r3, [r7, #4]
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d002      	beq.n	801fd6e <reg_external_get_cgi_processor+0x1a>
 801fd68:	4a04      	ldr	r2, [pc, #16]	@ (801fd7c <reg_external_get_cgi_processor+0x28>)
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	6013      	str	r3, [r2, #0]

}
 801fd6e:	bf00      	nop
 801fd70:	370c      	adds	r7, #12
 801fd72:	46bd      	mov	sp, r7
 801fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd78:	4770      	bx	lr
 801fd7a:	bf00      	nop
 801fd7c:	20001538 	.word	0x20001538
 801fd80:	0801fced 	.word	0x0801fced

0801fd84 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801fd84:	b480      	push	{r7}
 801fd86:	af00      	add	r7, sp, #0
 801fd88:	bf00      	nop
 801fd8a:	46bd      	mov	sp, r7
 801fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd90:	4770      	bx	lr

0801fd92 <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801fd92:	b480      	push	{r7}
 801fd94:	b083      	sub	sp, #12
 801fd96:	af00      	add	r7, sp, #0
 801fd98:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	f242 7210 	movw	r2, #10000	@ 0x2710
 801fda0:	fb02 f303 	mul.w	r3, r2, r3
 801fda4:	607b      	str	r3, [r7, #4]

	while (sec){
 801fda6:	e002      	b.n	801fdae <proto_delay_func+0x1c>
		sec--;
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	3b01      	subs	r3, #1
 801fdac:	607b      	str	r3, [r7, #4]
	while (sec){
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	2b00      	cmp	r3, #0
 801fdb2:	d1f9      	bne.n	801fda8 <proto_delay_func+0x16>
	}

}
 801fdb4:	bf00      	nop
 801fdb6:	bf00      	nop
 801fdb8:	370c      	adds	r7, #12
 801fdba:	46bd      	mov	sp, r7
 801fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdc0:	4770      	bx	lr
	...

0801fdc4 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801fdc4:	b480      	push	{r7}
 801fdc6:	b083      	sub	sp, #12
 801fdc8:	af00      	add	r7, sp, #0
 801fdca:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801fdcc:	4a04      	ldr	r2, [pc, #16]	@ (801fde0 <w5500_lib_init+0x1c>)
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	6013      	str	r3, [r2, #0]
}
 801fdd2:	bf00      	nop
 801fdd4:	370c      	adds	r7, #12
 801fdd6:	46bd      	mov	sp, r7
 801fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fddc:	4770      	bx	lr
 801fdde:	bf00      	nop
 801fde0:	20001540 	.word	0x20001540

0801fde4 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801fde4:	b580      	push	{r7, lr}
 801fde6:	b082      	sub	sp, #8
 801fde8:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801fdea:	2303      	movs	r3, #3
 801fdec:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801fdee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801fdf2:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801fdf4:	4b07      	ldr	r3, [pc, #28]	@ (801fe14 <network_init+0x30>)
 801fdf6:	681b      	ldr	r3, [r3, #0]
 801fdf8:	4619      	mov	r1, r3
 801fdfa:	2000      	movs	r0, #0
 801fdfc:	f7fa fa3a 	bl	801a274 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801fe00:	1d3b      	adds	r3, r7, #4
 801fe02:	4619      	mov	r1, r3
 801fe04:	2004      	movs	r0, #4
 801fe06:	f7fa fa35 	bl	801a274 <ctlnetwork>
}
 801fe0a:	bf00      	nop
 801fe0c:	3708      	adds	r7, #8
 801fe0e:	46bd      	mov	sp, r7
 801fe10:	bd80      	pop	{r7, pc}
 801fe12:	bf00      	nop
 801fe14:	20001540 	.word	0x20001540

0801fe18 <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801fe18:	b480      	push	{r7}
 801fe1a:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801fe1c:	4b03      	ldr	r3, [pc, #12]	@ (801fe2c <Callback_IPConflict+0x14>)
 801fe1e:	2200      	movs	r2, #0
 801fe20:	701a      	strb	r2, [r3, #0]
}
 801fe22:	bf00      	nop
 801fe24:	46bd      	mov	sp, r7
 801fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe2a:	4770      	bx	lr
 801fe2c:	2000153c 	.word	0x2000153c

0801fe30 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801fe30:	b580      	push	{r7, lr}
 801fe32:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801fe34:	4b11      	ldr	r3, [pc, #68]	@ (801fe7c <Callback_IPAssigned+0x4c>)
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	3306      	adds	r3, #6
 801fe3a:	4618      	mov	r0, r3
 801fe3c:	f7fc f9ae 	bl	801c19c <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801fe40:	4b0e      	ldr	r3, [pc, #56]	@ (801fe7c <Callback_IPAssigned+0x4c>)
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	330e      	adds	r3, #14
 801fe46:	4618      	mov	r0, r3
 801fe48:	f7fc f9c8 	bl	801c1dc <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801fe4c:	4b0b      	ldr	r3, [pc, #44]	@ (801fe7c <Callback_IPAssigned+0x4c>)
 801fe4e:	681b      	ldr	r3, [r3, #0]
 801fe50:	330a      	adds	r3, #10
 801fe52:	4618      	mov	r0, r3
 801fe54:	f7fc f9e2 	bl	801c21c <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801fe58:	4b08      	ldr	r3, [pc, #32]	@ (801fe7c <Callback_IPAssigned+0x4c>)
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	3312      	adds	r3, #18
 801fe5e:	4618      	mov	r0, r3
 801fe60:	f7fc f9fc 	bl	801c25c <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801fe64:	4b05      	ldr	r3, [pc, #20]	@ (801fe7c <Callback_IPAssigned+0x4c>)
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	2202      	movs	r2, #2
 801fe6a:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801fe6c:	f7ff ffba 	bl	801fde4 <network_init>

   ip_dhcp_assigned = true;
 801fe70:	4b03      	ldr	r3, [pc, #12]	@ (801fe80 <Callback_IPAssigned+0x50>)
 801fe72:	2201      	movs	r2, #1
 801fe74:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801fe76:	bf00      	nop
 801fe78:	bd80      	pop	{r7, pc}
 801fe7a:	bf00      	nop
 801fe7c:	20001540 	.word	0x20001540
 801fe80:	2000153c 	.word	0x2000153c

0801fe84 <dhcp_rutine>:

void dhcp_rutine(void){
 801fe84:	b580      	push	{r7, lr}
 801fe86:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801fe88:	f7fb ff32 	bl	801bcf0 <DHCP_run>
 801fe8c:	4603      	mov	r3, r0
 801fe8e:	2b00      	cmp	r3, #0
 801fe90:	d004      	beq.n	801fe9c <dhcp_rutine+0x18>
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	db09      	blt.n	801feaa <dhcp_rutine+0x26>
 801fe96:	3b02      	subs	r3, #2
 801fe98:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801fe9a:	e006      	b.n	801feaa <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801fe9c:	4b04      	ldr	r3, [pc, #16]	@ (801feb0 <dhcp_rutine+0x2c>)
 801fe9e:	781b      	ldrb	r3, [r3, #0]
 801fea0:	3301      	adds	r3, #1
 801fea2:	b2da      	uxtb	r2, r3
 801fea4:	4b02      	ldr	r3, [pc, #8]	@ (801feb0 <dhcp_rutine+0x2c>)
 801fea6:	701a      	strb	r2, [r3, #0]
				break;
 801fea8:	e000      	b.n	801feac <dhcp_rutine+0x28>
				break;
 801feaa:	bf00      	nop
			}
}
 801feac:	bf00      	nop
 801feae:	bd80      	pop	{r7, pc}
 801feb0:	20001544 	.word	0x20001544

0801feb4 <link_status>:

int link_status(void){
 801feb4:	b580      	push	{r7, lr}
 801feb6:	b082      	sub	sp, #8
 801feb8:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801feba:	1dfb      	adds	r3, r7, #7
 801febc:	4619      	mov	r1, r3
 801febe:	200f      	movs	r0, #15
 801fec0:	f7fa f8f8 	bl	801a0b4 <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801fec4:	79fb      	ldrb	r3, [r7, #7]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d102      	bne.n	801fed0 <link_status+0x1c>
 801feca:	4b04      	ldr	r3, [pc, #16]	@ (801fedc <link_status+0x28>)
 801fecc:	2200      	movs	r2, #0
 801fece:	701a      	strb	r2, [r3, #0]
	return temp;
 801fed0:	79fb      	ldrb	r3, [r7, #7]
}
 801fed2:	4618      	mov	r0, r3
 801fed4:	3708      	adds	r7, #8
 801fed6:	46bd      	mov	sp, r7
 801fed8:	bd80      	pop	{r7, pc}
 801feda:	bf00      	nop
 801fedc:	2000153c 	.word	0x2000153c

0801fee0 <link_duplex>:

int link_duplex(void){
 801fee0:	b580      	push	{r7, lr}
 801fee2:	b082      	sub	sp, #8
 801fee4:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fee6:	1d3b      	adds	r3, r7, #4
 801fee8:	4618      	mov	r0, r3
 801feea:	f7fa fc73 	bl	801a7d4 <wizphy_getphystat>
	return phy_status.duplex;
 801feee:	79fb      	ldrb	r3, [r7, #7]
}
 801fef0:	4618      	mov	r0, r3
 801fef2:	3708      	adds	r7, #8
 801fef4:	46bd      	mov	sp, r7
 801fef6:	bd80      	pop	{r7, pc}

0801fef8 <link_speed>:

int link_speed(void){
 801fef8:	b580      	push	{r7, lr}
 801fefa:	b082      	sub	sp, #8
 801fefc:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fefe:	1d3b      	adds	r3, r7, #4
 801ff00:	4618      	mov	r0, r3
 801ff02:	f7fa fc67 	bl	801a7d4 <wizphy_getphystat>
	return phy_status.speed;
 801ff06:	79bb      	ldrb	r3, [r7, #6]
}
 801ff08:	4618      	mov	r0, r3
 801ff0a:	3708      	adds	r7, #8
 801ff0c:	46bd      	mov	sp, r7
 801ff0e:	bd80      	pop	{r7, pc}

0801ff10 <assigned_ip>:

int assigned_ip(void){
 801ff10:	b480      	push	{r7}
 801ff12:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801ff14:	4b03      	ldr	r3, [pc, #12]	@ (801ff24 <assigned_ip+0x14>)
 801ff16:	781b      	ldrb	r3, [r3, #0]
}
 801ff18:	4618      	mov	r0, r3
 801ff1a:	46bd      	mov	sp, r7
 801ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff20:	4770      	bx	lr
 801ff22:	bf00      	nop
 801ff24:	2000153c 	.word	0x2000153c

0801ff28 <set_ip_aasigned>:

void set_ip_aasigned(void){
 801ff28:	b480      	push	{r7}
 801ff2a:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801ff2c:	4b03      	ldr	r3, [pc, #12]	@ (801ff3c <set_ip_aasigned+0x14>)
 801ff2e:	2201      	movs	r2, #1
 801ff30:	701a      	strb	r2, [r3, #0]
}
 801ff32:	bf00      	nop
 801ff34:	46bd      	mov	sp, r7
 801ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff3a:	4770      	bx	lr
 801ff3c:	2000153c 	.word	0x2000153c

0801ff40 <w5500_init>:

int w5500_init(void)
{
 801ff40:	b590      	push	{r4, r7, lr}
 801ff42:	b085      	sub	sp, #20
 801ff44:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801ff46:	4b18      	ldr	r3, [pc, #96]	@ (801ffa8 <w5500_init+0x68>)
 801ff48:	463c      	mov	r4, r7
 801ff4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ff4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801ff50:	4b16      	ldr	r3, [pc, #88]	@ (801ffac <w5500_init+0x6c>)
 801ff52:	681b      	ldr	r3, [r3, #0]
 801ff54:	4798      	blx	r3
  delay_ms(delay0_5s);
 801ff56:	4b16      	ldr	r3, [pc, #88]	@ (801ffb0 <w5500_init+0x70>)
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801ff5e:	4798      	blx	r3
  ResetOFF();
 801ff60:	4b14      	ldr	r3, [pc, #80]	@ (801ffb4 <w5500_init+0x74>)
 801ff62:	681b      	ldr	r3, [r3, #0]
 801ff64:	4798      	blx	r3
  delay_ms(delay3s);
 801ff66:	4b12      	ldr	r3, [pc, #72]	@ (801ffb0 <w5500_init+0x70>)
 801ff68:	681b      	ldr	r3, [r3, #0]
 801ff6a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801ff6e:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801ff70:	463b      	mov	r3, r7
 801ff72:	4619      	mov	r1, r3
 801ff74:	2001      	movs	r0, #1
 801ff76:	f7fa f89d 	bl	801a0b4 <ctlwizchip>
 801ff7a:	4603      	mov	r3, r0
 801ff7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff80:	d102      	bne.n	801ff88 <w5500_init+0x48>
  {
	  return -1;
 801ff82:	f04f 33ff 	mov.w	r3, #4294967295
 801ff86:	e00b      	b.n	801ffa0 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801ff88:	f7ff ff94 	bl	801feb4 <link_status>
 801ff8c:	4603      	mov	r3, r0
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d102      	bne.n	801ff98 <w5500_init+0x58>
	   return -1;
 801ff92:	f04f 33ff 	mov.w	r3, #4294967295
 801ff96:	e003      	b.n	801ffa0 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801ff98:	4b07      	ldr	r3, [pc, #28]	@ (801ffb8 <w5500_init+0x78>)
 801ff9a:	2200      	movs	r2, #0
 801ff9c:	701a      	strb	r2, [r3, #0]
  return 0;
 801ff9e:	2300      	movs	r3, #0
}
 801ffa0:	4618      	mov	r0, r3
 801ffa2:	3714      	adds	r7, #20
 801ffa4:	46bd      	mov	sp, r7
 801ffa6:	bd90      	pop	{r4, r7, pc}
 801ffa8:	080337d0 	.word	0x080337d0
 801ffac:	2000154c 	.word	0x2000154c
 801ffb0:	20001548 	.word	0x20001548
 801ffb4:	20001550 	.word	0x20001550
 801ffb8:	2000153c 	.word	0x2000153c

0801ffbc <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801ffbc:	b480      	push	{r7}
 801ffbe:	b083      	sub	sp, #12
 801ffc0:	af00      	add	r7, sp, #0
 801ffc2:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801ffc4:	4b07      	ldr	r3, [pc, #28]	@ (801ffe4 <w5500_delay_cb+0x28>)
 801ffc6:	4a08      	ldr	r2, [pc, #32]	@ (801ffe8 <w5500_delay_cb+0x2c>)
 801ffc8:	601a      	str	r2, [r3, #0]

	if (function){
 801ffca:	687b      	ldr	r3, [r7, #4]
 801ffcc:	2b00      	cmp	r3, #0
 801ffce:	d002      	beq.n	801ffd6 <w5500_delay_cb+0x1a>
		delay_ms = function;
 801ffd0:	4a04      	ldr	r2, [pc, #16]	@ (801ffe4 <w5500_delay_cb+0x28>)
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	6013      	str	r3, [r2, #0]
	}
}
 801ffd6:	bf00      	nop
 801ffd8:	370c      	adds	r7, #12
 801ffda:	46bd      	mov	sp, r7
 801ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffe0:	4770      	bx	lr
 801ffe2:	bf00      	nop
 801ffe4:	20001548 	.word	0x20001548
 801ffe8:	0801fd93 	.word	0x0801fd93

0801ffec <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801ffec:	b480      	push	{r7}
 801ffee:	b083      	sub	sp, #12
 801fff0:	af00      	add	r7, sp, #0
 801fff2:	6078      	str	r0, [r7, #4]
 801fff4:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801fff6:	4b0c      	ldr	r3, [pc, #48]	@ (8020028 <w5500_reset_cb+0x3c>)
 801fff8:	4a0c      	ldr	r2, [pc, #48]	@ (802002c <w5500_reset_cb+0x40>)
 801fffa:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801fffc:	4b0c      	ldr	r3, [pc, #48]	@ (8020030 <w5500_reset_cb+0x44>)
 801fffe:	4a0b      	ldr	r2, [pc, #44]	@ (802002c <w5500_reset_cb+0x40>)
 8020000:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	2b00      	cmp	r3, #0
 8020006:	d002      	beq.n	802000e <w5500_reset_cb+0x22>
 8020008:	4a07      	ldr	r2, [pc, #28]	@ (8020028 <w5500_reset_cb+0x3c>)
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 802000e:	683b      	ldr	r3, [r7, #0]
 8020010:	2b00      	cmp	r3, #0
 8020012:	d002      	beq.n	802001a <w5500_reset_cb+0x2e>
 8020014:	4a06      	ldr	r2, [pc, #24]	@ (8020030 <w5500_reset_cb+0x44>)
 8020016:	683b      	ldr	r3, [r7, #0]
 8020018:	6013      	str	r3, [r2, #0]
}
 802001a:	bf00      	nop
 802001c:	370c      	adds	r7, #12
 802001e:	46bd      	mov	sp, r7
 8020020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020024:	4770      	bx	lr
 8020026:	bf00      	nop
 8020028:	2000154c 	.word	0x2000154c
 802002c:	0801fd85 	.word	0x0801fd85
 8020030:	20001550 	.word	0x20001550

08020034 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 8020034:	b580      	push	{r7, lr}
 8020036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 8020038:	2200      	movs	r2, #0
 802003a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 802003e:	4802      	ldr	r0, [pc, #8]	@ (8020048 <Eth_reset_on+0x14>)
 8020040:	f7f5 ff6a 	bl	8015f18 <HAL_GPIO_WritePin>
}
 8020044:	bf00      	nop
 8020046:	bd80      	pop	{r7, pc}
 8020048:	40020000 	.word	0x40020000

0802004c <Eth_reset_off>:

void Eth_reset_off(void){
 802004c:	b580      	push	{r7, lr}
 802004e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 8020050:	2201      	movs	r2, #1
 8020052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8020056:	4802      	ldr	r0, [pc, #8]	@ (8020060 <Eth_reset_off+0x14>)
 8020058:	f7f5 ff5e 	bl	8015f18 <HAL_GPIO_WritePin>
}
 802005c:	bf00      	nop
 802005e:	bd80      	pop	{r7, pc}
 8020060:	40020000 	.word	0x40020000

08020064 <Eth_spi_select>:

void Eth_spi_select(void){
 8020064:	b580      	push	{r7, lr}
 8020066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8020068:	2200      	movs	r2, #0
 802006a:	2140      	movs	r1, #64	@ 0x40
 802006c:	4802      	ldr	r0, [pc, #8]	@ (8020078 <Eth_spi_select+0x14>)
 802006e:	f7f5 ff53 	bl	8015f18 <HAL_GPIO_WritePin>
}
 8020072:	bf00      	nop
 8020074:	bd80      	pop	{r7, pc}
 8020076:	bf00      	nop
 8020078:	40020400 	.word	0x40020400

0802007c <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 802007c:	b580      	push	{r7, lr}
 802007e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8020080:	2201      	movs	r2, #1
 8020082:	2140      	movs	r1, #64	@ 0x40
 8020084:	4802      	ldr	r0, [pc, #8]	@ (8020090 <Eth_spi_deselect+0x14>)
 8020086:	f7f5 ff47 	bl	8015f18 <HAL_GPIO_WritePin>
}
 802008a:	bf00      	nop
 802008c:	bd80      	pop	{r7, pc}
 802008e:	bf00      	nop
 8020090:	40020400 	.word	0x40020400

08020094 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 8020094:	b084      	sub	sp, #16
 8020096:	b580      	push	{r7, lr}
 8020098:	af00      	add	r7, sp, #0
 802009a:	f107 0c08 	add.w	ip, r7, #8
 802009e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 80200a2:	4b07      	ldr	r3, [pc, #28]	@ (80200c0 <Reg_eth_spi+0x2c>)
 80200a4:	4618      	mov	r0, r3
 80200a6:	f107 0308 	add.w	r3, r7, #8
 80200aa:	2258      	movs	r2, #88	@ 0x58
 80200ac:	4619      	mov	r1, r3
 80200ae:	f00d ff44 	bl	802df3a <memcpy>
}
 80200b2:	bf00      	nop
 80200b4:	46bd      	mov	sp, r7
 80200b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80200ba:	b004      	add	sp, #16
 80200bc:	4770      	bx	lr
 80200be:	bf00      	nop
 80200c0:	20001554 	.word	0x20001554

080200c4 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 80200c4:	b580      	push	{r7, lr}
 80200c6:	b082      	sub	sp, #8
 80200c8:	af00      	add	r7, sp, #0
 80200ca:	4603      	mov	r3, r0
 80200cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 80200ce:	1df9      	adds	r1, r7, #7
 80200d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80200d4:	2201      	movs	r2, #1
 80200d6:	4803      	ldr	r0, [pc, #12]	@ (80200e4 <Eth_spi_send_byte+0x20>)
 80200d8:	f7f6 fcdd 	bl	8016a96 <HAL_SPI_Transmit>
}
 80200dc:	bf00      	nop
 80200de:	3708      	adds	r7, #8
 80200e0:	46bd      	mov	sp, r7
 80200e2:	bd80      	pop	{r7, pc}
 80200e4:	20001554 	.word	0x20001554

080200e8 <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 80200e8:	b580      	push	{r7, lr}
 80200ea:	b082      	sub	sp, #8
 80200ec:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 80200ee:	1df9      	adds	r1, r7, #7
 80200f0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80200f4:	2201      	movs	r2, #1
 80200f6:	4804      	ldr	r0, [pc, #16]	@ (8020108 <Eth_spi_resv_byte+0x20>)
 80200f8:	f7f6 fe10 	bl	8016d1c <HAL_SPI_Receive>
	return byte;
 80200fc:	79fb      	ldrb	r3, [r7, #7]
}
 80200fe:	4618      	mov	r0, r3
 8020100:	3708      	adds	r7, #8
 8020102:	46bd      	mov	sp, r7
 8020104:	bd80      	pop	{r7, pc}
 8020106:	bf00      	nop
 8020108:	20001554 	.word	0x20001554

0802010c <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 802010c:	b480      	push	{r7}
 802010e:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8020110:	bf00      	nop
 8020112:	46bd      	mov	sp, r7
 8020114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020118:	4770      	bx	lr
	...

0802011c <__NVIC_SetPriority>:
{
 802011c:	b480      	push	{r7}
 802011e:	b083      	sub	sp, #12
 8020120:	af00      	add	r7, sp, #0
 8020122:	4603      	mov	r3, r0
 8020124:	6039      	str	r1, [r7, #0]
 8020126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802012c:	2b00      	cmp	r3, #0
 802012e:	db0a      	blt.n	8020146 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020130:	683b      	ldr	r3, [r7, #0]
 8020132:	b2da      	uxtb	r2, r3
 8020134:	490c      	ldr	r1, [pc, #48]	@ (8020168 <__NVIC_SetPriority+0x4c>)
 8020136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802013a:	0112      	lsls	r2, r2, #4
 802013c:	b2d2      	uxtb	r2, r2
 802013e:	440b      	add	r3, r1
 8020140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8020144:	e00a      	b.n	802015c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020146:	683b      	ldr	r3, [r7, #0]
 8020148:	b2da      	uxtb	r2, r3
 802014a:	4908      	ldr	r1, [pc, #32]	@ (802016c <__NVIC_SetPriority+0x50>)
 802014c:	79fb      	ldrb	r3, [r7, #7]
 802014e:	f003 030f 	and.w	r3, r3, #15
 8020152:	3b04      	subs	r3, #4
 8020154:	0112      	lsls	r2, r2, #4
 8020156:	b2d2      	uxtb	r2, r2
 8020158:	440b      	add	r3, r1
 802015a:	761a      	strb	r2, [r3, #24]
}
 802015c:	bf00      	nop
 802015e:	370c      	adds	r7, #12
 8020160:	46bd      	mov	sp, r7
 8020162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020166:	4770      	bx	lr
 8020168:	e000e100 	.word	0xe000e100
 802016c:	e000ed00 	.word	0xe000ed00

08020170 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8020170:	b580      	push	{r7, lr}
 8020172:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8020174:	4b05      	ldr	r3, [pc, #20]	@ (802018c <SysTick_Handler+0x1c>)
 8020176:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8020178:	f002 fc10 	bl	802299c <xTaskGetSchedulerState>
 802017c:	4603      	mov	r3, r0
 802017e:	2b01      	cmp	r3, #1
 8020180:	d001      	beq.n	8020186 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8020182:	f003 fb09 	bl	8023798 <xPortSysTickHandler>
  }
}
 8020186:	bf00      	nop
 8020188:	bd80      	pop	{r7, pc}
 802018a:	bf00      	nop
 802018c:	e000e010 	.word	0xe000e010

08020190 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8020190:	b580      	push	{r7, lr}
 8020192:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8020194:	2100      	movs	r1, #0
 8020196:	f06f 0004 	mvn.w	r0, #4
 802019a:	f7ff ffbf 	bl	802011c <__NVIC_SetPriority>
#endif
}
 802019e:	bf00      	nop
 80201a0:	bd80      	pop	{r7, pc}
	...

080201a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80201a4:	b480      	push	{r7}
 80201a6:	b083      	sub	sp, #12
 80201a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80201aa:	f3ef 8305 	mrs	r3, IPSR
 80201ae:	603b      	str	r3, [r7, #0]
  return(result);
 80201b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d003      	beq.n	80201be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80201b6:	f06f 0305 	mvn.w	r3, #5
 80201ba:	607b      	str	r3, [r7, #4]
 80201bc:	e00c      	b.n	80201d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80201be:	4b0a      	ldr	r3, [pc, #40]	@ (80201e8 <osKernelInitialize+0x44>)
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d105      	bne.n	80201d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80201c6:	4b08      	ldr	r3, [pc, #32]	@ (80201e8 <osKernelInitialize+0x44>)
 80201c8:	2201      	movs	r2, #1
 80201ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80201cc:	2300      	movs	r3, #0
 80201ce:	607b      	str	r3, [r7, #4]
 80201d0:	e002      	b.n	80201d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80201d2:	f04f 33ff 	mov.w	r3, #4294967295
 80201d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80201d8:	687b      	ldr	r3, [r7, #4]
}
 80201da:	4618      	mov	r0, r3
 80201dc:	370c      	adds	r7, #12
 80201de:	46bd      	mov	sp, r7
 80201e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201e4:	4770      	bx	lr
 80201e6:	bf00      	nop
 80201e8:	200015ac 	.word	0x200015ac

080201ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80201ec:	b580      	push	{r7, lr}
 80201ee:	b082      	sub	sp, #8
 80201f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80201f2:	f3ef 8305 	mrs	r3, IPSR
 80201f6:	603b      	str	r3, [r7, #0]
  return(result);
 80201f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d003      	beq.n	8020206 <osKernelStart+0x1a>
    stat = osErrorISR;
 80201fe:	f06f 0305 	mvn.w	r3, #5
 8020202:	607b      	str	r3, [r7, #4]
 8020204:	e010      	b.n	8020228 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8020206:	4b0b      	ldr	r3, [pc, #44]	@ (8020234 <osKernelStart+0x48>)
 8020208:	681b      	ldr	r3, [r3, #0]
 802020a:	2b01      	cmp	r3, #1
 802020c:	d109      	bne.n	8020222 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 802020e:	f7ff ffbf 	bl	8020190 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8020212:	4b08      	ldr	r3, [pc, #32]	@ (8020234 <osKernelStart+0x48>)
 8020214:	2202      	movs	r2, #2
 8020216:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8020218:	f001 fef0 	bl	8021ffc <vTaskStartScheduler>
      stat = osOK;
 802021c:	2300      	movs	r3, #0
 802021e:	607b      	str	r3, [r7, #4]
 8020220:	e002      	b.n	8020228 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8020222:	f04f 33ff 	mov.w	r3, #4294967295
 8020226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8020228:	687b      	ldr	r3, [r7, #4]
}
 802022a:	4618      	mov	r0, r3
 802022c:	3708      	adds	r7, #8
 802022e:	46bd      	mov	sp, r7
 8020230:	bd80      	pop	{r7, pc}
 8020232:	bf00      	nop
 8020234:	200015ac 	.word	0x200015ac

08020238 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8020238:	b580      	push	{r7, lr}
 802023a:	b08e      	sub	sp, #56	@ 0x38
 802023c:	af04      	add	r7, sp, #16
 802023e:	60f8      	str	r0, [r7, #12]
 8020240:	60b9      	str	r1, [r7, #8]
 8020242:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8020244:	2300      	movs	r3, #0
 8020246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020248:	f3ef 8305 	mrs	r3, IPSR
 802024c:	617b      	str	r3, [r7, #20]
  return(result);
 802024e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8020250:	2b00      	cmp	r3, #0
 8020252:	d17e      	bne.n	8020352 <osThreadNew+0x11a>
 8020254:	68fb      	ldr	r3, [r7, #12]
 8020256:	2b00      	cmp	r3, #0
 8020258:	d07b      	beq.n	8020352 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 802025a:	2380      	movs	r3, #128	@ 0x80
 802025c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 802025e:	2318      	movs	r3, #24
 8020260:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8020262:	2300      	movs	r3, #0
 8020264:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8020266:	f04f 33ff 	mov.w	r3, #4294967295
 802026a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	2b00      	cmp	r3, #0
 8020270:	d045      	beq.n	80202fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	681b      	ldr	r3, [r3, #0]
 8020276:	2b00      	cmp	r3, #0
 8020278:	d002      	beq.n	8020280 <osThreadNew+0x48>
        name = attr->name;
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	681b      	ldr	r3, [r3, #0]
 802027e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	699b      	ldr	r3, [r3, #24]
 8020284:	2b00      	cmp	r3, #0
 8020286:	d002      	beq.n	802028e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	699b      	ldr	r3, [r3, #24]
 802028c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 802028e:	69fb      	ldr	r3, [r7, #28]
 8020290:	2b00      	cmp	r3, #0
 8020292:	d008      	beq.n	80202a6 <osThreadNew+0x6e>
 8020294:	69fb      	ldr	r3, [r7, #28]
 8020296:	2b38      	cmp	r3, #56	@ 0x38
 8020298:	d805      	bhi.n	80202a6 <osThreadNew+0x6e>
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	685b      	ldr	r3, [r3, #4]
 802029e:	f003 0301 	and.w	r3, r3, #1
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	d001      	beq.n	80202aa <osThreadNew+0x72>
        return (NULL);
 80202a6:	2300      	movs	r3, #0
 80202a8:	e054      	b.n	8020354 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	695b      	ldr	r3, [r3, #20]
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d003      	beq.n	80202ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	695b      	ldr	r3, [r3, #20]
 80202b6:	089b      	lsrs	r3, r3, #2
 80202b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	689b      	ldr	r3, [r3, #8]
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d00e      	beq.n	80202e0 <osThreadNew+0xa8>
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	68db      	ldr	r3, [r3, #12]
 80202c6:	2bab      	cmp	r3, #171	@ 0xab
 80202c8:	d90a      	bls.n	80202e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80202ce:	2b00      	cmp	r3, #0
 80202d0:	d006      	beq.n	80202e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	695b      	ldr	r3, [r3, #20]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d002      	beq.n	80202e0 <osThreadNew+0xa8>
        mem = 1;
 80202da:	2301      	movs	r3, #1
 80202dc:	61bb      	str	r3, [r7, #24]
 80202de:	e010      	b.n	8020302 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	689b      	ldr	r3, [r3, #8]
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d10c      	bne.n	8020302 <osThreadNew+0xca>
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	68db      	ldr	r3, [r3, #12]
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	d108      	bne.n	8020302 <osThreadNew+0xca>
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	691b      	ldr	r3, [r3, #16]
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d104      	bne.n	8020302 <osThreadNew+0xca>
          mem = 0;
 80202f8:	2300      	movs	r3, #0
 80202fa:	61bb      	str	r3, [r7, #24]
 80202fc:	e001      	b.n	8020302 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80202fe:	2300      	movs	r3, #0
 8020300:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8020302:	69bb      	ldr	r3, [r7, #24]
 8020304:	2b01      	cmp	r3, #1
 8020306:	d110      	bne.n	802032a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 802030c:	687a      	ldr	r2, [r7, #4]
 802030e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020310:	9202      	str	r2, [sp, #8]
 8020312:	9301      	str	r3, [sp, #4]
 8020314:	69fb      	ldr	r3, [r7, #28]
 8020316:	9300      	str	r3, [sp, #0]
 8020318:	68bb      	ldr	r3, [r7, #8]
 802031a:	6a3a      	ldr	r2, [r7, #32]
 802031c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802031e:	68f8      	ldr	r0, [r7, #12]
 8020320:	f001 fc76 	bl	8021c10 <xTaskCreateStatic>
 8020324:	4603      	mov	r3, r0
 8020326:	613b      	str	r3, [r7, #16]
 8020328:	e013      	b.n	8020352 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 802032a:	69bb      	ldr	r3, [r7, #24]
 802032c:	2b00      	cmp	r3, #0
 802032e:	d110      	bne.n	8020352 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8020330:	6a3b      	ldr	r3, [r7, #32]
 8020332:	b29a      	uxth	r2, r3
 8020334:	f107 0310 	add.w	r3, r7, #16
 8020338:	9301      	str	r3, [sp, #4]
 802033a:	69fb      	ldr	r3, [r7, #28]
 802033c:	9300      	str	r3, [sp, #0]
 802033e:	68bb      	ldr	r3, [r7, #8]
 8020340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020342:	68f8      	ldr	r0, [r7, #12]
 8020344:	f001 fcc4 	bl	8021cd0 <xTaskCreate>
 8020348:	4603      	mov	r3, r0
 802034a:	2b01      	cmp	r3, #1
 802034c:	d001      	beq.n	8020352 <osThreadNew+0x11a>
            hTask = NULL;
 802034e:	2300      	movs	r3, #0
 8020350:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8020352:	693b      	ldr	r3, [r7, #16]
}
 8020354:	4618      	mov	r0, r3
 8020356:	3728      	adds	r7, #40	@ 0x28
 8020358:	46bd      	mov	sp, r7
 802035a:	bd80      	pop	{r7, pc}

0802035c <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 802035c:	b580      	push	{r7, lr}
 802035e:	b086      	sub	sp, #24
 8020360:	af00      	add	r7, sp, #0
 8020362:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8020364:	687b      	ldr	r3, [r7, #4]
 8020366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020368:	f3ef 8305 	mrs	r3, IPSR
 802036c:	60fb      	str	r3, [r7, #12]
  return(result);
 802036e:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8020370:	2b00      	cmp	r3, #0
 8020372:	d102      	bne.n	802037a <osThreadGetStackSpace+0x1e>
 8020374:	693b      	ldr	r3, [r7, #16]
 8020376:	2b00      	cmp	r3, #0
 8020378:	d102      	bne.n	8020380 <osThreadGetStackSpace+0x24>
    sz = 0U;
 802037a:	2300      	movs	r3, #0
 802037c:	617b      	str	r3, [r7, #20]
 802037e:	e005      	b.n	802038c <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 8020380:	6938      	ldr	r0, [r7, #16]
 8020382:	f002 fa89 	bl	8022898 <uxTaskGetStackHighWaterMark>
 8020386:	4603      	mov	r3, r0
 8020388:	009b      	lsls	r3, r3, #2
 802038a:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 802038c:	697b      	ldr	r3, [r7, #20]
}
 802038e:	4618      	mov	r0, r3
 8020390:	3718      	adds	r7, #24
 8020392:	46bd      	mov	sp, r7
 8020394:	bd80      	pop	{r7, pc}
	...

08020398 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8020398:	b480      	push	{r7}
 802039a:	b083      	sub	sp, #12
 802039c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802039e:	f3ef 8305 	mrs	r3, IPSR
 80203a2:	603b      	str	r3, [r7, #0]
  return(result);
 80203a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	d003      	beq.n	80203b2 <osThreadYield+0x1a>
    stat = osErrorISR;
 80203aa:	f06f 0305 	mvn.w	r3, #5
 80203ae:	607b      	str	r3, [r7, #4]
 80203b0:	e009      	b.n	80203c6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80203b2:	2300      	movs	r3, #0
 80203b4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80203b6:	4b07      	ldr	r3, [pc, #28]	@ (80203d4 <osThreadYield+0x3c>)
 80203b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80203bc:	601a      	str	r2, [r3, #0]
 80203be:	f3bf 8f4f 	dsb	sy
 80203c2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80203c6:	687b      	ldr	r3, [r7, #4]
}
 80203c8:	4618      	mov	r0, r3
 80203ca:	370c      	adds	r7, #12
 80203cc:	46bd      	mov	sp, r7
 80203ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203d2:	4770      	bx	lr
 80203d4:	e000ed04 	.word	0xe000ed04

080203d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80203d8:	b580      	push	{r7, lr}
 80203da:	b084      	sub	sp, #16
 80203dc:	af00      	add	r7, sp, #0
 80203de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80203e0:	f3ef 8305 	mrs	r3, IPSR
 80203e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80203e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d003      	beq.n	80203f4 <osDelay+0x1c>
    stat = osErrorISR;
 80203ec:	f06f 0305 	mvn.w	r3, #5
 80203f0:	60fb      	str	r3, [r7, #12]
 80203f2:	e007      	b.n	8020404 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80203f4:	2300      	movs	r3, #0
 80203f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	2b00      	cmp	r3, #0
 80203fc:	d002      	beq.n	8020404 <osDelay+0x2c>
      vTaskDelay(ticks);
 80203fe:	6878      	ldr	r0, [r7, #4]
 8020400:	f001 fdc6 	bl	8021f90 <vTaskDelay>
    }
  }

  return (stat);
 8020404:	68fb      	ldr	r3, [r7, #12]
}
 8020406:	4618      	mov	r0, r3
 8020408:	3710      	adds	r7, #16
 802040a:	46bd      	mov	sp, r7
 802040c:	bd80      	pop	{r7, pc}

0802040e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 802040e:	b580      	push	{r7, lr}
 8020410:	b088      	sub	sp, #32
 8020412:	af00      	add	r7, sp, #0
 8020414:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8020416:	2300      	movs	r3, #0
 8020418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802041a:	f3ef 8305 	mrs	r3, IPSR
 802041e:	60bb      	str	r3, [r7, #8]
  return(result);
 8020420:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8020422:	2b00      	cmp	r3, #0
 8020424:	d174      	bne.n	8020510 <osMutexNew+0x102>
    if (attr != NULL) {
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	2b00      	cmp	r3, #0
 802042a:	d003      	beq.n	8020434 <osMutexNew+0x26>
      type = attr->attr_bits;
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	685b      	ldr	r3, [r3, #4]
 8020430:	61bb      	str	r3, [r7, #24]
 8020432:	e001      	b.n	8020438 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8020434:	2300      	movs	r3, #0
 8020436:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8020438:	69bb      	ldr	r3, [r7, #24]
 802043a:	f003 0301 	and.w	r3, r3, #1
 802043e:	2b00      	cmp	r3, #0
 8020440:	d002      	beq.n	8020448 <osMutexNew+0x3a>
      rmtx = 1U;
 8020442:	2301      	movs	r3, #1
 8020444:	617b      	str	r3, [r7, #20]
 8020446:	e001      	b.n	802044c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8020448:	2300      	movs	r3, #0
 802044a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 802044c:	69bb      	ldr	r3, [r7, #24]
 802044e:	f003 0308 	and.w	r3, r3, #8
 8020452:	2b00      	cmp	r3, #0
 8020454:	d15c      	bne.n	8020510 <osMutexNew+0x102>
      mem = -1;
 8020456:	f04f 33ff 	mov.w	r3, #4294967295
 802045a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 802045c:	687b      	ldr	r3, [r7, #4]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d015      	beq.n	802048e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	689b      	ldr	r3, [r3, #8]
 8020466:	2b00      	cmp	r3, #0
 8020468:	d006      	beq.n	8020478 <osMutexNew+0x6a>
 802046a:	687b      	ldr	r3, [r7, #4]
 802046c:	68db      	ldr	r3, [r3, #12]
 802046e:	2b4f      	cmp	r3, #79	@ 0x4f
 8020470:	d902      	bls.n	8020478 <osMutexNew+0x6a>
          mem = 1;
 8020472:	2301      	movs	r3, #1
 8020474:	613b      	str	r3, [r7, #16]
 8020476:	e00c      	b.n	8020492 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8020478:	687b      	ldr	r3, [r7, #4]
 802047a:	689b      	ldr	r3, [r3, #8]
 802047c:	2b00      	cmp	r3, #0
 802047e:	d108      	bne.n	8020492 <osMutexNew+0x84>
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	68db      	ldr	r3, [r3, #12]
 8020484:	2b00      	cmp	r3, #0
 8020486:	d104      	bne.n	8020492 <osMutexNew+0x84>
            mem = 0;
 8020488:	2300      	movs	r3, #0
 802048a:	613b      	str	r3, [r7, #16]
 802048c:	e001      	b.n	8020492 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 802048e:	2300      	movs	r3, #0
 8020490:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8020492:	693b      	ldr	r3, [r7, #16]
 8020494:	2b01      	cmp	r3, #1
 8020496:	d112      	bne.n	80204be <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8020498:	697b      	ldr	r3, [r7, #20]
 802049a:	2b00      	cmp	r3, #0
 802049c:	d007      	beq.n	80204ae <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	689b      	ldr	r3, [r3, #8]
 80204a2:	4619      	mov	r1, r3
 80204a4:	2004      	movs	r0, #4
 80204a6:	f000 fc70 	bl	8020d8a <xQueueCreateMutexStatic>
 80204aa:	61f8      	str	r0, [r7, #28]
 80204ac:	e016      	b.n	80204dc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80204ae:	687b      	ldr	r3, [r7, #4]
 80204b0:	689b      	ldr	r3, [r3, #8]
 80204b2:	4619      	mov	r1, r3
 80204b4:	2001      	movs	r0, #1
 80204b6:	f000 fc68 	bl	8020d8a <xQueueCreateMutexStatic>
 80204ba:	61f8      	str	r0, [r7, #28]
 80204bc:	e00e      	b.n	80204dc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80204be:	693b      	ldr	r3, [r7, #16]
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d10b      	bne.n	80204dc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80204c4:	697b      	ldr	r3, [r7, #20]
 80204c6:	2b00      	cmp	r3, #0
 80204c8:	d004      	beq.n	80204d4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80204ca:	2004      	movs	r0, #4
 80204cc:	f000 fc45 	bl	8020d5a <xQueueCreateMutex>
 80204d0:	61f8      	str	r0, [r7, #28]
 80204d2:	e003      	b.n	80204dc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80204d4:	2001      	movs	r0, #1
 80204d6:	f000 fc40 	bl	8020d5a <xQueueCreateMutex>
 80204da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80204dc:	69fb      	ldr	r3, [r7, #28]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	d00c      	beq.n	80204fc <osMutexNew+0xee>
        if (attr != NULL) {
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	2b00      	cmp	r3, #0
 80204e6:	d003      	beq.n	80204f0 <osMutexNew+0xe2>
          name = attr->name;
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	681b      	ldr	r3, [r3, #0]
 80204ec:	60fb      	str	r3, [r7, #12]
 80204ee:	e001      	b.n	80204f4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80204f0:	2300      	movs	r3, #0
 80204f2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80204f4:	68f9      	ldr	r1, [r7, #12]
 80204f6:	69f8      	ldr	r0, [r7, #28]
 80204f8:	f001 fb2c 	bl	8021b54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80204fc:	69fb      	ldr	r3, [r7, #28]
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d006      	beq.n	8020510 <osMutexNew+0x102>
 8020502:	697b      	ldr	r3, [r7, #20]
 8020504:	2b00      	cmp	r3, #0
 8020506:	d003      	beq.n	8020510 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8020508:	69fb      	ldr	r3, [r7, #28]
 802050a:	f043 0301 	orr.w	r3, r3, #1
 802050e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8020510:	69fb      	ldr	r3, [r7, #28]
}
 8020512:	4618      	mov	r0, r3
 8020514:	3720      	adds	r7, #32
 8020516:	46bd      	mov	sp, r7
 8020518:	bd80      	pop	{r7, pc}

0802051a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 802051a:	b580      	push	{r7, lr}
 802051c:	b086      	sub	sp, #24
 802051e:	af00      	add	r7, sp, #0
 8020520:	6078      	str	r0, [r7, #4]
 8020522:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	f023 0301 	bic.w	r3, r3, #1
 802052a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	f003 0301 	and.w	r3, r3, #1
 8020532:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8020534:	2300      	movs	r3, #0
 8020536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020538:	f3ef 8305 	mrs	r3, IPSR
 802053c:	60bb      	str	r3, [r7, #8]
  return(result);
 802053e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8020540:	2b00      	cmp	r3, #0
 8020542:	d003      	beq.n	802054c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8020544:	f06f 0305 	mvn.w	r3, #5
 8020548:	617b      	str	r3, [r7, #20]
 802054a:	e02c      	b.n	80205a6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 802054c:	693b      	ldr	r3, [r7, #16]
 802054e:	2b00      	cmp	r3, #0
 8020550:	d103      	bne.n	802055a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8020552:	f06f 0303 	mvn.w	r3, #3
 8020556:	617b      	str	r3, [r7, #20]
 8020558:	e025      	b.n	80205a6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 802055a:	68fb      	ldr	r3, [r7, #12]
 802055c:	2b00      	cmp	r3, #0
 802055e:	d011      	beq.n	8020584 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8020560:	6839      	ldr	r1, [r7, #0]
 8020562:	6938      	ldr	r0, [r7, #16]
 8020564:	f000 fc61 	bl	8020e2a <xQueueTakeMutexRecursive>
 8020568:	4603      	mov	r3, r0
 802056a:	2b01      	cmp	r3, #1
 802056c:	d01b      	beq.n	80205a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 802056e:	683b      	ldr	r3, [r7, #0]
 8020570:	2b00      	cmp	r3, #0
 8020572:	d003      	beq.n	802057c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8020574:	f06f 0301 	mvn.w	r3, #1
 8020578:	617b      	str	r3, [r7, #20]
 802057a:	e014      	b.n	80205a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 802057c:	f06f 0302 	mvn.w	r3, #2
 8020580:	617b      	str	r3, [r7, #20]
 8020582:	e010      	b.n	80205a6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8020584:	6839      	ldr	r1, [r7, #0]
 8020586:	6938      	ldr	r0, [r7, #16]
 8020588:	f000 ff08 	bl	802139c <xQueueSemaphoreTake>
 802058c:	4603      	mov	r3, r0
 802058e:	2b01      	cmp	r3, #1
 8020590:	d009      	beq.n	80205a6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8020592:	683b      	ldr	r3, [r7, #0]
 8020594:	2b00      	cmp	r3, #0
 8020596:	d003      	beq.n	80205a0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8020598:	f06f 0301 	mvn.w	r3, #1
 802059c:	617b      	str	r3, [r7, #20]
 802059e:	e002      	b.n	80205a6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80205a0:	f06f 0302 	mvn.w	r3, #2
 80205a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80205a6:	697b      	ldr	r3, [r7, #20]
}
 80205a8:	4618      	mov	r0, r3
 80205aa:	3718      	adds	r7, #24
 80205ac:	46bd      	mov	sp, r7
 80205ae:	bd80      	pop	{r7, pc}

080205b0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80205b0:	b580      	push	{r7, lr}
 80205b2:	b086      	sub	sp, #24
 80205b4:	af00      	add	r7, sp, #0
 80205b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80205b8:	687b      	ldr	r3, [r7, #4]
 80205ba:	f023 0301 	bic.w	r3, r3, #1
 80205be:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	f003 0301 	and.w	r3, r3, #1
 80205c6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80205c8:	2300      	movs	r3, #0
 80205ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80205cc:	f3ef 8305 	mrs	r3, IPSR
 80205d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80205d2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d003      	beq.n	80205e0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80205d8:	f06f 0305 	mvn.w	r3, #5
 80205dc:	617b      	str	r3, [r7, #20]
 80205de:	e01f      	b.n	8020620 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80205e0:	693b      	ldr	r3, [r7, #16]
 80205e2:	2b00      	cmp	r3, #0
 80205e4:	d103      	bne.n	80205ee <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80205e6:	f06f 0303 	mvn.w	r3, #3
 80205ea:	617b      	str	r3, [r7, #20]
 80205ec:	e018      	b.n	8020620 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80205ee:	68fb      	ldr	r3, [r7, #12]
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	d009      	beq.n	8020608 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80205f4:	6938      	ldr	r0, [r7, #16]
 80205f6:	f000 fbe3 	bl	8020dc0 <xQueueGiveMutexRecursive>
 80205fa:	4603      	mov	r3, r0
 80205fc:	2b01      	cmp	r3, #1
 80205fe:	d00f      	beq.n	8020620 <osMutexRelease+0x70>
        stat = osErrorResource;
 8020600:	f06f 0302 	mvn.w	r3, #2
 8020604:	617b      	str	r3, [r7, #20]
 8020606:	e00b      	b.n	8020620 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8020608:	2300      	movs	r3, #0
 802060a:	2200      	movs	r2, #0
 802060c:	2100      	movs	r1, #0
 802060e:	6938      	ldr	r0, [r7, #16]
 8020610:	f000 fc42 	bl	8020e98 <xQueueGenericSend>
 8020614:	4603      	mov	r3, r0
 8020616:	2b01      	cmp	r3, #1
 8020618:	d002      	beq.n	8020620 <osMutexRelease+0x70>
        stat = osErrorResource;
 802061a:	f06f 0302 	mvn.w	r3, #2
 802061e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8020620:	697b      	ldr	r3, [r7, #20]
}
 8020622:	4618      	mov	r0, r3
 8020624:	3718      	adds	r7, #24
 8020626:	46bd      	mov	sp, r7
 8020628:	bd80      	pop	{r7, pc}

0802062a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 802062a:	b580      	push	{r7, lr}
 802062c:	b08a      	sub	sp, #40	@ 0x28
 802062e:	af02      	add	r7, sp, #8
 8020630:	60f8      	str	r0, [r7, #12]
 8020632:	60b9      	str	r1, [r7, #8]
 8020634:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8020636:	2300      	movs	r3, #0
 8020638:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802063a:	f3ef 8305 	mrs	r3, IPSR
 802063e:	613b      	str	r3, [r7, #16]
  return(result);
 8020640:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8020642:	2b00      	cmp	r3, #0
 8020644:	d15f      	bne.n	8020706 <osMessageQueueNew+0xdc>
 8020646:	68fb      	ldr	r3, [r7, #12]
 8020648:	2b00      	cmp	r3, #0
 802064a:	d05c      	beq.n	8020706 <osMessageQueueNew+0xdc>
 802064c:	68bb      	ldr	r3, [r7, #8]
 802064e:	2b00      	cmp	r3, #0
 8020650:	d059      	beq.n	8020706 <osMessageQueueNew+0xdc>
    mem = -1;
 8020652:	f04f 33ff 	mov.w	r3, #4294967295
 8020656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	2b00      	cmp	r3, #0
 802065c:	d029      	beq.n	80206b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 802065e:	687b      	ldr	r3, [r7, #4]
 8020660:	689b      	ldr	r3, [r3, #8]
 8020662:	2b00      	cmp	r3, #0
 8020664:	d012      	beq.n	802068c <osMessageQueueNew+0x62>
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	68db      	ldr	r3, [r3, #12]
 802066a:	2b4f      	cmp	r3, #79	@ 0x4f
 802066c:	d90e      	bls.n	802068c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 802066e:	687b      	ldr	r3, [r7, #4]
 8020670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8020672:	2b00      	cmp	r3, #0
 8020674:	d00a      	beq.n	802068c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	695a      	ldr	r2, [r3, #20]
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	68b9      	ldr	r1, [r7, #8]
 802067e:	fb01 f303 	mul.w	r3, r1, r3
 8020682:	429a      	cmp	r2, r3
 8020684:	d302      	bcc.n	802068c <osMessageQueueNew+0x62>
        mem = 1;
 8020686:	2301      	movs	r3, #1
 8020688:	61bb      	str	r3, [r7, #24]
 802068a:	e014      	b.n	80206b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	689b      	ldr	r3, [r3, #8]
 8020690:	2b00      	cmp	r3, #0
 8020692:	d110      	bne.n	80206b6 <osMessageQueueNew+0x8c>
 8020694:	687b      	ldr	r3, [r7, #4]
 8020696:	68db      	ldr	r3, [r3, #12]
 8020698:	2b00      	cmp	r3, #0
 802069a:	d10c      	bne.n	80206b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	d108      	bne.n	80206b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80206a4:	687b      	ldr	r3, [r7, #4]
 80206a6:	695b      	ldr	r3, [r3, #20]
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d104      	bne.n	80206b6 <osMessageQueueNew+0x8c>
          mem = 0;
 80206ac:	2300      	movs	r3, #0
 80206ae:	61bb      	str	r3, [r7, #24]
 80206b0:	e001      	b.n	80206b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80206b2:	2300      	movs	r3, #0
 80206b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80206b6:	69bb      	ldr	r3, [r7, #24]
 80206b8:	2b01      	cmp	r3, #1
 80206ba:	d10b      	bne.n	80206d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	691a      	ldr	r2, [r3, #16]
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	689b      	ldr	r3, [r3, #8]
 80206c4:	2100      	movs	r1, #0
 80206c6:	9100      	str	r1, [sp, #0]
 80206c8:	68b9      	ldr	r1, [r7, #8]
 80206ca:	68f8      	ldr	r0, [r7, #12]
 80206cc:	f000 fa50 	bl	8020b70 <xQueueGenericCreateStatic>
 80206d0:	61f8      	str	r0, [r7, #28]
 80206d2:	e008      	b.n	80206e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80206d4:	69bb      	ldr	r3, [r7, #24]
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	d105      	bne.n	80206e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80206da:	2200      	movs	r2, #0
 80206dc:	68b9      	ldr	r1, [r7, #8]
 80206de:	68f8      	ldr	r0, [r7, #12]
 80206e0:	f000 fac3 	bl	8020c6a <xQueueGenericCreate>
 80206e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80206e6:	69fb      	ldr	r3, [r7, #28]
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d00c      	beq.n	8020706 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	d003      	beq.n	80206fa <osMessageQueueNew+0xd0>
        name = attr->name;
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	617b      	str	r3, [r7, #20]
 80206f8:	e001      	b.n	80206fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80206fa:	2300      	movs	r3, #0
 80206fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80206fe:	6979      	ldr	r1, [r7, #20]
 8020700:	69f8      	ldr	r0, [r7, #28]
 8020702:	f001 fa27 	bl	8021b54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8020706:	69fb      	ldr	r3, [r7, #28]
}
 8020708:	4618      	mov	r0, r3
 802070a:	3720      	adds	r7, #32
 802070c:	46bd      	mov	sp, r7
 802070e:	bd80      	pop	{r7, pc}

08020710 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8020710:	b580      	push	{r7, lr}
 8020712:	b088      	sub	sp, #32
 8020714:	af00      	add	r7, sp, #0
 8020716:	60f8      	str	r0, [r7, #12]
 8020718:	60b9      	str	r1, [r7, #8]
 802071a:	603b      	str	r3, [r7, #0]
 802071c:	4613      	mov	r3, r2
 802071e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020720:	68fb      	ldr	r3, [r7, #12]
 8020722:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020724:	2300      	movs	r3, #0
 8020726:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020728:	f3ef 8305 	mrs	r3, IPSR
 802072c:	617b      	str	r3, [r7, #20]
  return(result);
 802072e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8020730:	2b00      	cmp	r3, #0
 8020732:	d028      	beq.n	8020786 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020734:	69bb      	ldr	r3, [r7, #24]
 8020736:	2b00      	cmp	r3, #0
 8020738:	d005      	beq.n	8020746 <osMessageQueuePut+0x36>
 802073a:	68bb      	ldr	r3, [r7, #8]
 802073c:	2b00      	cmp	r3, #0
 802073e:	d002      	beq.n	8020746 <osMessageQueuePut+0x36>
 8020740:	683b      	ldr	r3, [r7, #0]
 8020742:	2b00      	cmp	r3, #0
 8020744:	d003      	beq.n	802074e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8020746:	f06f 0303 	mvn.w	r3, #3
 802074a:	61fb      	str	r3, [r7, #28]
 802074c:	e038      	b.n	80207c0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 802074e:	2300      	movs	r3, #0
 8020750:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8020752:	f107 0210 	add.w	r2, r7, #16
 8020756:	2300      	movs	r3, #0
 8020758:	68b9      	ldr	r1, [r7, #8]
 802075a:	69b8      	ldr	r0, [r7, #24]
 802075c:	f000 fc9e 	bl	802109c <xQueueGenericSendFromISR>
 8020760:	4603      	mov	r3, r0
 8020762:	2b01      	cmp	r3, #1
 8020764:	d003      	beq.n	802076e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8020766:	f06f 0302 	mvn.w	r3, #2
 802076a:	61fb      	str	r3, [r7, #28]
 802076c:	e028      	b.n	80207c0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 802076e:	693b      	ldr	r3, [r7, #16]
 8020770:	2b00      	cmp	r3, #0
 8020772:	d025      	beq.n	80207c0 <osMessageQueuePut+0xb0>
 8020774:	4b15      	ldr	r3, [pc, #84]	@ (80207cc <osMessageQueuePut+0xbc>)
 8020776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802077a:	601a      	str	r2, [r3, #0]
 802077c:	f3bf 8f4f 	dsb	sy
 8020780:	f3bf 8f6f 	isb	sy
 8020784:	e01c      	b.n	80207c0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8020786:	69bb      	ldr	r3, [r7, #24]
 8020788:	2b00      	cmp	r3, #0
 802078a:	d002      	beq.n	8020792 <osMessageQueuePut+0x82>
 802078c:	68bb      	ldr	r3, [r7, #8]
 802078e:	2b00      	cmp	r3, #0
 8020790:	d103      	bne.n	802079a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8020792:	f06f 0303 	mvn.w	r3, #3
 8020796:	61fb      	str	r3, [r7, #28]
 8020798:	e012      	b.n	80207c0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 802079a:	2300      	movs	r3, #0
 802079c:	683a      	ldr	r2, [r7, #0]
 802079e:	68b9      	ldr	r1, [r7, #8]
 80207a0:	69b8      	ldr	r0, [r7, #24]
 80207a2:	f000 fb79 	bl	8020e98 <xQueueGenericSend>
 80207a6:	4603      	mov	r3, r0
 80207a8:	2b01      	cmp	r3, #1
 80207aa:	d009      	beq.n	80207c0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80207ac:	683b      	ldr	r3, [r7, #0]
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	d003      	beq.n	80207ba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80207b2:	f06f 0301 	mvn.w	r3, #1
 80207b6:	61fb      	str	r3, [r7, #28]
 80207b8:	e002      	b.n	80207c0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80207ba:	f06f 0302 	mvn.w	r3, #2
 80207be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80207c0:	69fb      	ldr	r3, [r7, #28]
}
 80207c2:	4618      	mov	r0, r3
 80207c4:	3720      	adds	r7, #32
 80207c6:	46bd      	mov	sp, r7
 80207c8:	bd80      	pop	{r7, pc}
 80207ca:	bf00      	nop
 80207cc:	e000ed04 	.word	0xe000ed04

080207d0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b088      	sub	sp, #32
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	60f8      	str	r0, [r7, #12]
 80207d8:	60b9      	str	r1, [r7, #8]
 80207da:	607a      	str	r2, [r7, #4]
 80207dc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80207e2:	2300      	movs	r3, #0
 80207e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80207e6:	f3ef 8305 	mrs	r3, IPSR
 80207ea:	617b      	str	r3, [r7, #20]
  return(result);
 80207ec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d028      	beq.n	8020844 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80207f2:	69bb      	ldr	r3, [r7, #24]
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d005      	beq.n	8020804 <osMessageQueueGet+0x34>
 80207f8:	68bb      	ldr	r3, [r7, #8]
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	d002      	beq.n	8020804 <osMessageQueueGet+0x34>
 80207fe:	683b      	ldr	r3, [r7, #0]
 8020800:	2b00      	cmp	r3, #0
 8020802:	d003      	beq.n	802080c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8020804:	f06f 0303 	mvn.w	r3, #3
 8020808:	61fb      	str	r3, [r7, #28]
 802080a:	e037      	b.n	802087c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 802080c:	2300      	movs	r3, #0
 802080e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8020810:	f107 0310 	add.w	r3, r7, #16
 8020814:	461a      	mov	r2, r3
 8020816:	68b9      	ldr	r1, [r7, #8]
 8020818:	69b8      	ldr	r0, [r7, #24]
 802081a:	f000 ffb3 	bl	8021784 <xQueueReceiveFromISR>
 802081e:	4603      	mov	r3, r0
 8020820:	2b01      	cmp	r3, #1
 8020822:	d003      	beq.n	802082c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8020824:	f06f 0302 	mvn.w	r3, #2
 8020828:	61fb      	str	r3, [r7, #28]
 802082a:	e027      	b.n	802087c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 802082c:	693b      	ldr	r3, [r7, #16]
 802082e:	2b00      	cmp	r3, #0
 8020830:	d024      	beq.n	802087c <osMessageQueueGet+0xac>
 8020832:	4b15      	ldr	r3, [pc, #84]	@ (8020888 <osMessageQueueGet+0xb8>)
 8020834:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020838:	601a      	str	r2, [r3, #0]
 802083a:	f3bf 8f4f 	dsb	sy
 802083e:	f3bf 8f6f 	isb	sy
 8020842:	e01b      	b.n	802087c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8020844:	69bb      	ldr	r3, [r7, #24]
 8020846:	2b00      	cmp	r3, #0
 8020848:	d002      	beq.n	8020850 <osMessageQueueGet+0x80>
 802084a:	68bb      	ldr	r3, [r7, #8]
 802084c:	2b00      	cmp	r3, #0
 802084e:	d103      	bne.n	8020858 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8020850:	f06f 0303 	mvn.w	r3, #3
 8020854:	61fb      	str	r3, [r7, #28]
 8020856:	e011      	b.n	802087c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8020858:	683a      	ldr	r2, [r7, #0]
 802085a:	68b9      	ldr	r1, [r7, #8]
 802085c:	69b8      	ldr	r0, [r7, #24]
 802085e:	f000 fcbb 	bl	80211d8 <xQueueReceive>
 8020862:	4603      	mov	r3, r0
 8020864:	2b01      	cmp	r3, #1
 8020866:	d009      	beq.n	802087c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8020868:	683b      	ldr	r3, [r7, #0]
 802086a:	2b00      	cmp	r3, #0
 802086c:	d003      	beq.n	8020876 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 802086e:	f06f 0301 	mvn.w	r3, #1
 8020872:	61fb      	str	r3, [r7, #28]
 8020874:	e002      	b.n	802087c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8020876:	f06f 0302 	mvn.w	r3, #2
 802087a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 802087c:	69fb      	ldr	r3, [r7, #28]
}
 802087e:	4618      	mov	r0, r3
 8020880:	3720      	adds	r7, #32
 8020882:	46bd      	mov	sp, r7
 8020884:	bd80      	pop	{r7, pc}
 8020886:	bf00      	nop
 8020888:	e000ed04 	.word	0xe000ed04

0802088c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 802088c:	b580      	push	{r7, lr}
 802088e:	b086      	sub	sp, #24
 8020890:	af00      	add	r7, sp, #0
 8020892:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8020898:	693b      	ldr	r3, [r7, #16]
 802089a:	2b00      	cmp	r3, #0
 802089c:	d102      	bne.n	80208a4 <osMessageQueueGetCount+0x18>
    count = 0U;
 802089e:	2300      	movs	r3, #0
 80208a0:	617b      	str	r3, [r7, #20]
 80208a2:	e00e      	b.n	80208c2 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80208a4:	f3ef 8305 	mrs	r3, IPSR
 80208a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80208aa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d004      	beq.n	80208ba <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80208b0:	6938      	ldr	r0, [r7, #16]
 80208b2:	f001 f808 	bl	80218c6 <uxQueueMessagesWaitingFromISR>
 80208b6:	6178      	str	r0, [r7, #20]
 80208b8:	e003      	b.n	80208c2 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80208ba:	6938      	ldr	r0, [r7, #16]
 80208bc:	f000 ffe4 	bl	8021888 <uxQueueMessagesWaiting>
 80208c0:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80208c2:	697b      	ldr	r3, [r7, #20]
}
 80208c4:	4618      	mov	r0, r3
 80208c6:	3718      	adds	r7, #24
 80208c8:	46bd      	mov	sp, r7
 80208ca:	bd80      	pop	{r7, pc}

080208cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80208cc:	b480      	push	{r7}
 80208ce:	b085      	sub	sp, #20
 80208d0:	af00      	add	r7, sp, #0
 80208d2:	60f8      	str	r0, [r7, #12]
 80208d4:	60b9      	str	r1, [r7, #8]
 80208d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80208d8:	68fb      	ldr	r3, [r7, #12]
 80208da:	4a07      	ldr	r2, [pc, #28]	@ (80208f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80208dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80208de:	68bb      	ldr	r3, [r7, #8]
 80208e0:	4a06      	ldr	r2, [pc, #24]	@ (80208fc <vApplicationGetIdleTaskMemory+0x30>)
 80208e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	2280      	movs	r2, #128	@ 0x80
 80208e8:	601a      	str	r2, [r3, #0]
}
 80208ea:	bf00      	nop
 80208ec:	3714      	adds	r7, #20
 80208ee:	46bd      	mov	sp, r7
 80208f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f4:	4770      	bx	lr
 80208f6:	bf00      	nop
 80208f8:	200015b0 	.word	0x200015b0
 80208fc:	2000165c 	.word	0x2000165c

08020900 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8020900:	b480      	push	{r7}
 8020902:	b085      	sub	sp, #20
 8020904:	af00      	add	r7, sp, #0
 8020906:	60f8      	str	r0, [r7, #12]
 8020908:	60b9      	str	r1, [r7, #8]
 802090a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 802090c:	68fb      	ldr	r3, [r7, #12]
 802090e:	4a07      	ldr	r2, [pc, #28]	@ (802092c <vApplicationGetTimerTaskMemory+0x2c>)
 8020910:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8020912:	68bb      	ldr	r3, [r7, #8]
 8020914:	4a06      	ldr	r2, [pc, #24]	@ (8020930 <vApplicationGetTimerTaskMemory+0x30>)
 8020916:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 802091e:	601a      	str	r2, [r3, #0]
}
 8020920:	bf00      	nop
 8020922:	3714      	adds	r7, #20
 8020924:	46bd      	mov	sp, r7
 8020926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802092a:	4770      	bx	lr
 802092c:	2000185c 	.word	0x2000185c
 8020930:	20001908 	.word	0x20001908

08020934 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8020934:	b480      	push	{r7}
 8020936:	b083      	sub	sp, #12
 8020938:	af00      	add	r7, sp, #0
 802093a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	f103 0208 	add.w	r2, r3, #8
 8020942:	687b      	ldr	r3, [r7, #4]
 8020944:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8020946:	687b      	ldr	r3, [r7, #4]
 8020948:	f04f 32ff 	mov.w	r2, #4294967295
 802094c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	f103 0208 	add.w	r2, r3, #8
 8020954:	687b      	ldr	r3, [r7, #4]
 8020956:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	f103 0208 	add.w	r2, r3, #8
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	2200      	movs	r2, #0
 8020966:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8020968:	bf00      	nop
 802096a:	370c      	adds	r7, #12
 802096c:	46bd      	mov	sp, r7
 802096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020972:	4770      	bx	lr

08020974 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8020974:	b480      	push	{r7}
 8020976:	b083      	sub	sp, #12
 8020978:	af00      	add	r7, sp, #0
 802097a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	2200      	movs	r2, #0
 8020980:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8020982:	bf00      	nop
 8020984:	370c      	adds	r7, #12
 8020986:	46bd      	mov	sp, r7
 8020988:	f85d 7b04 	ldr.w	r7, [sp], #4
 802098c:	4770      	bx	lr

0802098e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802098e:	b480      	push	{r7}
 8020990:	b085      	sub	sp, #20
 8020992:	af00      	add	r7, sp, #0
 8020994:	6078      	str	r0, [r7, #4]
 8020996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	685b      	ldr	r3, [r3, #4]
 802099c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 802099e:	683b      	ldr	r3, [r7, #0]
 80209a0:	68fa      	ldr	r2, [r7, #12]
 80209a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80209a4:	68fb      	ldr	r3, [r7, #12]
 80209a6:	689a      	ldr	r2, [r3, #8]
 80209a8:	683b      	ldr	r3, [r7, #0]
 80209aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80209ac:	68fb      	ldr	r3, [r7, #12]
 80209ae:	689b      	ldr	r3, [r3, #8]
 80209b0:	683a      	ldr	r2, [r7, #0]
 80209b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80209b4:	68fb      	ldr	r3, [r7, #12]
 80209b6:	683a      	ldr	r2, [r7, #0]
 80209b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80209ba:	683b      	ldr	r3, [r7, #0]
 80209bc:	687a      	ldr	r2, [r7, #4]
 80209be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	681b      	ldr	r3, [r3, #0]
 80209c4:	1c5a      	adds	r2, r3, #1
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	601a      	str	r2, [r3, #0]
}
 80209ca:	bf00      	nop
 80209cc:	3714      	adds	r7, #20
 80209ce:	46bd      	mov	sp, r7
 80209d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209d4:	4770      	bx	lr

080209d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80209d6:	b480      	push	{r7}
 80209d8:	b085      	sub	sp, #20
 80209da:	af00      	add	r7, sp, #0
 80209dc:	6078      	str	r0, [r7, #4]
 80209de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80209e0:	683b      	ldr	r3, [r7, #0]
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80209e6:	68bb      	ldr	r3, [r7, #8]
 80209e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80209ec:	d103      	bne.n	80209f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	691b      	ldr	r3, [r3, #16]
 80209f2:	60fb      	str	r3, [r7, #12]
 80209f4:	e00c      	b.n	8020a10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80209f6:	687b      	ldr	r3, [r7, #4]
 80209f8:	3308      	adds	r3, #8
 80209fa:	60fb      	str	r3, [r7, #12]
 80209fc:	e002      	b.n	8020a04 <vListInsert+0x2e>
 80209fe:	68fb      	ldr	r3, [r7, #12]
 8020a00:	685b      	ldr	r3, [r3, #4]
 8020a02:	60fb      	str	r3, [r7, #12]
 8020a04:	68fb      	ldr	r3, [r7, #12]
 8020a06:	685b      	ldr	r3, [r3, #4]
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	68ba      	ldr	r2, [r7, #8]
 8020a0c:	429a      	cmp	r2, r3
 8020a0e:	d2f6      	bcs.n	80209fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8020a10:	68fb      	ldr	r3, [r7, #12]
 8020a12:	685a      	ldr	r2, [r3, #4]
 8020a14:	683b      	ldr	r3, [r7, #0]
 8020a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8020a18:	683b      	ldr	r3, [r7, #0]
 8020a1a:	685b      	ldr	r3, [r3, #4]
 8020a1c:	683a      	ldr	r2, [r7, #0]
 8020a1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8020a20:	683b      	ldr	r3, [r7, #0]
 8020a22:	68fa      	ldr	r2, [r7, #12]
 8020a24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8020a26:	68fb      	ldr	r3, [r7, #12]
 8020a28:	683a      	ldr	r2, [r7, #0]
 8020a2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8020a2c:	683b      	ldr	r3, [r7, #0]
 8020a2e:	687a      	ldr	r2, [r7, #4]
 8020a30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	1c5a      	adds	r2, r3, #1
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	601a      	str	r2, [r3, #0]
}
 8020a3c:	bf00      	nop
 8020a3e:	3714      	adds	r7, #20
 8020a40:	46bd      	mov	sp, r7
 8020a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a46:	4770      	bx	lr

08020a48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8020a48:	b480      	push	{r7}
 8020a4a:	b085      	sub	sp, #20
 8020a4c:	af00      	add	r7, sp, #0
 8020a4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8020a50:	687b      	ldr	r3, [r7, #4]
 8020a52:	691b      	ldr	r3, [r3, #16]
 8020a54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	685b      	ldr	r3, [r3, #4]
 8020a5a:	687a      	ldr	r2, [r7, #4]
 8020a5c:	6892      	ldr	r2, [r2, #8]
 8020a5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8020a60:	687b      	ldr	r3, [r7, #4]
 8020a62:	689b      	ldr	r3, [r3, #8]
 8020a64:	687a      	ldr	r2, [r7, #4]
 8020a66:	6852      	ldr	r2, [r2, #4]
 8020a68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8020a6a:	68fb      	ldr	r3, [r7, #12]
 8020a6c:	685b      	ldr	r3, [r3, #4]
 8020a6e:	687a      	ldr	r2, [r7, #4]
 8020a70:	429a      	cmp	r2, r3
 8020a72:	d103      	bne.n	8020a7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8020a74:	687b      	ldr	r3, [r7, #4]
 8020a76:	689a      	ldr	r2, [r3, #8]
 8020a78:	68fb      	ldr	r3, [r7, #12]
 8020a7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	2200      	movs	r2, #0
 8020a80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8020a82:	68fb      	ldr	r3, [r7, #12]
 8020a84:	681b      	ldr	r3, [r3, #0]
 8020a86:	1e5a      	subs	r2, r3, #1
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8020a8c:	68fb      	ldr	r3, [r7, #12]
 8020a8e:	681b      	ldr	r3, [r3, #0]
}
 8020a90:	4618      	mov	r0, r3
 8020a92:	3714      	adds	r7, #20
 8020a94:	46bd      	mov	sp, r7
 8020a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a9a:	4770      	bx	lr

08020a9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b084      	sub	sp, #16
 8020aa0:	af00      	add	r7, sp, #0
 8020aa2:	6078      	str	r0, [r7, #4]
 8020aa4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	2b00      	cmp	r3, #0
 8020aae:	d10b      	bne.n	8020ac8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8020ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020ab4:	f383 8811 	msr	BASEPRI, r3
 8020ab8:	f3bf 8f6f 	isb	sy
 8020abc:	f3bf 8f4f 	dsb	sy
 8020ac0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8020ac2:	bf00      	nop
 8020ac4:	bf00      	nop
 8020ac6:	e7fd      	b.n	8020ac4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8020ac8:	f002 fdd6 	bl	8023678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020acc:	68fb      	ldr	r3, [r7, #12]
 8020ace:	681a      	ldr	r2, [r3, #0]
 8020ad0:	68fb      	ldr	r3, [r7, #12]
 8020ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020ad4:	68f9      	ldr	r1, [r7, #12]
 8020ad6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8020ad8:	fb01 f303 	mul.w	r3, r1, r3
 8020adc:	441a      	add	r2, r3
 8020ade:	68fb      	ldr	r3, [r7, #12]
 8020ae0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8020ae2:	68fb      	ldr	r3, [r7, #12]
 8020ae4:	2200      	movs	r2, #0
 8020ae6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8020ae8:	68fb      	ldr	r3, [r7, #12]
 8020aea:	681a      	ldr	r2, [r3, #0]
 8020aec:	68fb      	ldr	r3, [r7, #12]
 8020aee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020af0:	68fb      	ldr	r3, [r7, #12]
 8020af2:	681a      	ldr	r2, [r3, #0]
 8020af4:	68fb      	ldr	r3, [r7, #12]
 8020af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020af8:	3b01      	subs	r3, #1
 8020afa:	68f9      	ldr	r1, [r7, #12]
 8020afc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8020afe:	fb01 f303 	mul.w	r3, r1, r3
 8020b02:	441a      	add	r2, r3
 8020b04:	68fb      	ldr	r3, [r7, #12]
 8020b06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8020b08:	68fb      	ldr	r3, [r7, #12]
 8020b0a:	22ff      	movs	r2, #255	@ 0xff
 8020b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8020b10:	68fb      	ldr	r3, [r7, #12]
 8020b12:	22ff      	movs	r2, #255	@ 0xff
 8020b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8020b18:	683b      	ldr	r3, [r7, #0]
 8020b1a:	2b00      	cmp	r3, #0
 8020b1c:	d114      	bne.n	8020b48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	691b      	ldr	r3, [r3, #16]
 8020b22:	2b00      	cmp	r3, #0
 8020b24:	d01a      	beq.n	8020b5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020b26:	68fb      	ldr	r3, [r7, #12]
 8020b28:	3310      	adds	r3, #16
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	f001 fd28 	bl	8022580 <xTaskRemoveFromEventList>
 8020b30:	4603      	mov	r3, r0
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d012      	beq.n	8020b5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8020b36:	4b0d      	ldr	r3, [pc, #52]	@ (8020b6c <xQueueGenericReset+0xd0>)
 8020b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020b3c:	601a      	str	r2, [r3, #0]
 8020b3e:	f3bf 8f4f 	dsb	sy
 8020b42:	f3bf 8f6f 	isb	sy
 8020b46:	e009      	b.n	8020b5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8020b48:	68fb      	ldr	r3, [r7, #12]
 8020b4a:	3310      	adds	r3, #16
 8020b4c:	4618      	mov	r0, r3
 8020b4e:	f7ff fef1 	bl	8020934 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8020b52:	68fb      	ldr	r3, [r7, #12]
 8020b54:	3324      	adds	r3, #36	@ 0x24
 8020b56:	4618      	mov	r0, r3
 8020b58:	f7ff feec 	bl	8020934 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8020b5c:	f002 fdbe 	bl	80236dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8020b60:	2301      	movs	r3, #1
}
 8020b62:	4618      	mov	r0, r3
 8020b64:	3710      	adds	r7, #16
 8020b66:	46bd      	mov	sp, r7
 8020b68:	bd80      	pop	{r7, pc}
 8020b6a:	bf00      	nop
 8020b6c:	e000ed04 	.word	0xe000ed04

08020b70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8020b70:	b580      	push	{r7, lr}
 8020b72:	b08e      	sub	sp, #56	@ 0x38
 8020b74:	af02      	add	r7, sp, #8
 8020b76:	60f8      	str	r0, [r7, #12]
 8020b78:	60b9      	str	r1, [r7, #8]
 8020b7a:	607a      	str	r2, [r7, #4]
 8020b7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020b7e:	68fb      	ldr	r3, [r7, #12]
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	d10b      	bne.n	8020b9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8020b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020b88:	f383 8811 	msr	BASEPRI, r3
 8020b8c:	f3bf 8f6f 	isb	sy
 8020b90:	f3bf 8f4f 	dsb	sy
 8020b94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8020b96:	bf00      	nop
 8020b98:	bf00      	nop
 8020b9a:	e7fd      	b.n	8020b98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8020b9c:	683b      	ldr	r3, [r7, #0]
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	d10b      	bne.n	8020bba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8020ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020ba6:	f383 8811 	msr	BASEPRI, r3
 8020baa:	f3bf 8f6f 	isb	sy
 8020bae:	f3bf 8f4f 	dsb	sy
 8020bb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8020bb4:	bf00      	nop
 8020bb6:	bf00      	nop
 8020bb8:	e7fd      	b.n	8020bb6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	2b00      	cmp	r3, #0
 8020bbe:	d002      	beq.n	8020bc6 <xQueueGenericCreateStatic+0x56>
 8020bc0:	68bb      	ldr	r3, [r7, #8]
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	d001      	beq.n	8020bca <xQueueGenericCreateStatic+0x5a>
 8020bc6:	2301      	movs	r3, #1
 8020bc8:	e000      	b.n	8020bcc <xQueueGenericCreateStatic+0x5c>
 8020bca:	2300      	movs	r3, #0
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d10b      	bne.n	8020be8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8020bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020bd4:	f383 8811 	msr	BASEPRI, r3
 8020bd8:	f3bf 8f6f 	isb	sy
 8020bdc:	f3bf 8f4f 	dsb	sy
 8020be0:	623b      	str	r3, [r7, #32]
}
 8020be2:	bf00      	nop
 8020be4:	bf00      	nop
 8020be6:	e7fd      	b.n	8020be4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8020be8:	687b      	ldr	r3, [r7, #4]
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d102      	bne.n	8020bf4 <xQueueGenericCreateStatic+0x84>
 8020bee:	68bb      	ldr	r3, [r7, #8]
 8020bf0:	2b00      	cmp	r3, #0
 8020bf2:	d101      	bne.n	8020bf8 <xQueueGenericCreateStatic+0x88>
 8020bf4:	2301      	movs	r3, #1
 8020bf6:	e000      	b.n	8020bfa <xQueueGenericCreateStatic+0x8a>
 8020bf8:	2300      	movs	r3, #0
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	d10b      	bne.n	8020c16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8020bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020c02:	f383 8811 	msr	BASEPRI, r3
 8020c06:	f3bf 8f6f 	isb	sy
 8020c0a:	f3bf 8f4f 	dsb	sy
 8020c0e:	61fb      	str	r3, [r7, #28]
}
 8020c10:	bf00      	nop
 8020c12:	bf00      	nop
 8020c14:	e7fd      	b.n	8020c12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8020c16:	2350      	movs	r3, #80	@ 0x50
 8020c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8020c1a:	697b      	ldr	r3, [r7, #20]
 8020c1c:	2b50      	cmp	r3, #80	@ 0x50
 8020c1e:	d00b      	beq.n	8020c38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8020c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020c24:	f383 8811 	msr	BASEPRI, r3
 8020c28:	f3bf 8f6f 	isb	sy
 8020c2c:	f3bf 8f4f 	dsb	sy
 8020c30:	61bb      	str	r3, [r7, #24]
}
 8020c32:	bf00      	nop
 8020c34:	bf00      	nop
 8020c36:	e7fd      	b.n	8020c34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8020c38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020c3a:	683b      	ldr	r3, [r7, #0]
 8020c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8020c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	d00d      	beq.n	8020c60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8020c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c46:	2201      	movs	r2, #1
 8020c48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020c4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8020c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020c52:	9300      	str	r3, [sp, #0]
 8020c54:	4613      	mov	r3, r2
 8020c56:	687a      	ldr	r2, [r7, #4]
 8020c58:	68b9      	ldr	r1, [r7, #8]
 8020c5a:	68f8      	ldr	r0, [r7, #12]
 8020c5c:	f000 f840 	bl	8020ce0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8020c62:	4618      	mov	r0, r3
 8020c64:	3730      	adds	r7, #48	@ 0x30
 8020c66:	46bd      	mov	sp, r7
 8020c68:	bd80      	pop	{r7, pc}

08020c6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8020c6a:	b580      	push	{r7, lr}
 8020c6c:	b08a      	sub	sp, #40	@ 0x28
 8020c6e:	af02      	add	r7, sp, #8
 8020c70:	60f8      	str	r0, [r7, #12]
 8020c72:	60b9      	str	r1, [r7, #8]
 8020c74:	4613      	mov	r3, r2
 8020c76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020c78:	68fb      	ldr	r3, [r7, #12]
 8020c7a:	2b00      	cmp	r3, #0
 8020c7c:	d10b      	bne.n	8020c96 <xQueueGenericCreate+0x2c>
	__asm volatile
 8020c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020c82:	f383 8811 	msr	BASEPRI, r3
 8020c86:	f3bf 8f6f 	isb	sy
 8020c8a:	f3bf 8f4f 	dsb	sy
 8020c8e:	613b      	str	r3, [r7, #16]
}
 8020c90:	bf00      	nop
 8020c92:	bf00      	nop
 8020c94:	e7fd      	b.n	8020c92 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020c96:	68fb      	ldr	r3, [r7, #12]
 8020c98:	68ba      	ldr	r2, [r7, #8]
 8020c9a:	fb02 f303 	mul.w	r3, r2, r3
 8020c9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8020ca0:	69fb      	ldr	r3, [r7, #28]
 8020ca2:	3350      	adds	r3, #80	@ 0x50
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	f002 fe09 	bl	80238bc <pvPortMalloc>
 8020caa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020cac:	69bb      	ldr	r3, [r7, #24]
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d011      	beq.n	8020cd6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8020cb2:	69bb      	ldr	r3, [r7, #24]
 8020cb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020cb6:	697b      	ldr	r3, [r7, #20]
 8020cb8:	3350      	adds	r3, #80	@ 0x50
 8020cba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020cbc:	69bb      	ldr	r3, [r7, #24]
 8020cbe:	2200      	movs	r2, #0
 8020cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020cc4:	79fa      	ldrb	r2, [r7, #7]
 8020cc6:	69bb      	ldr	r3, [r7, #24]
 8020cc8:	9300      	str	r3, [sp, #0]
 8020cca:	4613      	mov	r3, r2
 8020ccc:	697a      	ldr	r2, [r7, #20]
 8020cce:	68b9      	ldr	r1, [r7, #8]
 8020cd0:	68f8      	ldr	r0, [r7, #12]
 8020cd2:	f000 f805 	bl	8020ce0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020cd6:	69bb      	ldr	r3, [r7, #24]
	}
 8020cd8:	4618      	mov	r0, r3
 8020cda:	3720      	adds	r7, #32
 8020cdc:	46bd      	mov	sp, r7
 8020cde:	bd80      	pop	{r7, pc}

08020ce0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8020ce0:	b580      	push	{r7, lr}
 8020ce2:	b084      	sub	sp, #16
 8020ce4:	af00      	add	r7, sp, #0
 8020ce6:	60f8      	str	r0, [r7, #12]
 8020ce8:	60b9      	str	r1, [r7, #8]
 8020cea:	607a      	str	r2, [r7, #4]
 8020cec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8020cee:	68bb      	ldr	r3, [r7, #8]
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d103      	bne.n	8020cfc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8020cf4:	69bb      	ldr	r3, [r7, #24]
 8020cf6:	69ba      	ldr	r2, [r7, #24]
 8020cf8:	601a      	str	r2, [r3, #0]
 8020cfa:	e002      	b.n	8020d02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020cfc:	69bb      	ldr	r3, [r7, #24]
 8020cfe:	687a      	ldr	r2, [r7, #4]
 8020d00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8020d02:	69bb      	ldr	r3, [r7, #24]
 8020d04:	68fa      	ldr	r2, [r7, #12]
 8020d06:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8020d08:	69bb      	ldr	r3, [r7, #24]
 8020d0a:	68ba      	ldr	r2, [r7, #8]
 8020d0c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8020d0e:	2101      	movs	r1, #1
 8020d10:	69b8      	ldr	r0, [r7, #24]
 8020d12:	f7ff fec3 	bl	8020a9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8020d16:	69bb      	ldr	r3, [r7, #24]
 8020d18:	78fa      	ldrb	r2, [r7, #3]
 8020d1a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8020d1e:	bf00      	nop
 8020d20:	3710      	adds	r7, #16
 8020d22:	46bd      	mov	sp, r7
 8020d24:	bd80      	pop	{r7, pc}

08020d26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8020d26:	b580      	push	{r7, lr}
 8020d28:	b082      	sub	sp, #8
 8020d2a:	af00      	add	r7, sp, #0
 8020d2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d00e      	beq.n	8020d52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	2200      	movs	r2, #0
 8020d38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	2200      	movs	r2, #0
 8020d44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8020d46:	2300      	movs	r3, #0
 8020d48:	2200      	movs	r2, #0
 8020d4a:	2100      	movs	r1, #0
 8020d4c:	6878      	ldr	r0, [r7, #4]
 8020d4e:	f000 f8a3 	bl	8020e98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8020d52:	bf00      	nop
 8020d54:	3708      	adds	r7, #8
 8020d56:	46bd      	mov	sp, r7
 8020d58:	bd80      	pop	{r7, pc}

08020d5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8020d5a:	b580      	push	{r7, lr}
 8020d5c:	b086      	sub	sp, #24
 8020d5e:	af00      	add	r7, sp, #0
 8020d60:	4603      	mov	r3, r0
 8020d62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020d64:	2301      	movs	r3, #1
 8020d66:	617b      	str	r3, [r7, #20]
 8020d68:	2300      	movs	r3, #0
 8020d6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8020d6c:	79fb      	ldrb	r3, [r7, #7]
 8020d6e:	461a      	mov	r2, r3
 8020d70:	6939      	ldr	r1, [r7, #16]
 8020d72:	6978      	ldr	r0, [r7, #20]
 8020d74:	f7ff ff79 	bl	8020c6a <xQueueGenericCreate>
 8020d78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020d7a:	68f8      	ldr	r0, [r7, #12]
 8020d7c:	f7ff ffd3 	bl	8020d26 <prvInitialiseMutex>

		return xNewQueue;
 8020d80:	68fb      	ldr	r3, [r7, #12]
	}
 8020d82:	4618      	mov	r0, r3
 8020d84:	3718      	adds	r7, #24
 8020d86:	46bd      	mov	sp, r7
 8020d88:	bd80      	pop	{r7, pc}

08020d8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8020d8a:	b580      	push	{r7, lr}
 8020d8c:	b088      	sub	sp, #32
 8020d8e:	af02      	add	r7, sp, #8
 8020d90:	4603      	mov	r3, r0
 8020d92:	6039      	str	r1, [r7, #0]
 8020d94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020d96:	2301      	movs	r3, #1
 8020d98:	617b      	str	r3, [r7, #20]
 8020d9a:	2300      	movs	r3, #0
 8020d9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8020d9e:	79fb      	ldrb	r3, [r7, #7]
 8020da0:	9300      	str	r3, [sp, #0]
 8020da2:	683b      	ldr	r3, [r7, #0]
 8020da4:	2200      	movs	r2, #0
 8020da6:	6939      	ldr	r1, [r7, #16]
 8020da8:	6978      	ldr	r0, [r7, #20]
 8020daa:	f7ff fee1 	bl	8020b70 <xQueueGenericCreateStatic>
 8020dae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020db0:	68f8      	ldr	r0, [r7, #12]
 8020db2:	f7ff ffb8 	bl	8020d26 <prvInitialiseMutex>

		return xNewQueue;
 8020db6:	68fb      	ldr	r3, [r7, #12]
	}
 8020db8:	4618      	mov	r0, r3
 8020dba:	3718      	adds	r7, #24
 8020dbc:	46bd      	mov	sp, r7
 8020dbe:	bd80      	pop	{r7, pc}

08020dc0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8020dc0:	b590      	push	{r4, r7, lr}
 8020dc2:	b087      	sub	sp, #28
 8020dc4:	af00      	add	r7, sp, #0
 8020dc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020dcc:	693b      	ldr	r3, [r7, #16]
 8020dce:	2b00      	cmp	r3, #0
 8020dd0:	d10b      	bne.n	8020dea <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8020dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020dd6:	f383 8811 	msr	BASEPRI, r3
 8020dda:	f3bf 8f6f 	isb	sy
 8020dde:	f3bf 8f4f 	dsb	sy
 8020de2:	60fb      	str	r3, [r7, #12]
}
 8020de4:	bf00      	nop
 8020de6:	bf00      	nop
 8020de8:	e7fd      	b.n	8020de6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020dea:	693b      	ldr	r3, [r7, #16]
 8020dec:	689c      	ldr	r4, [r3, #8]
 8020dee:	f001 fdc5 	bl	802297c <xTaskGetCurrentTaskHandle>
 8020df2:	4603      	mov	r3, r0
 8020df4:	429c      	cmp	r4, r3
 8020df6:	d111      	bne.n	8020e1c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8020df8:	693b      	ldr	r3, [r7, #16]
 8020dfa:	68db      	ldr	r3, [r3, #12]
 8020dfc:	1e5a      	subs	r2, r3, #1
 8020dfe:	693b      	ldr	r3, [r7, #16]
 8020e00:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8020e02:	693b      	ldr	r3, [r7, #16]
 8020e04:	68db      	ldr	r3, [r3, #12]
 8020e06:	2b00      	cmp	r3, #0
 8020e08:	d105      	bne.n	8020e16 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	2200      	movs	r2, #0
 8020e0e:	2100      	movs	r1, #0
 8020e10:	6938      	ldr	r0, [r7, #16]
 8020e12:	f000 f841 	bl	8020e98 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020e16:	2301      	movs	r3, #1
 8020e18:	617b      	str	r3, [r7, #20]
 8020e1a:	e001      	b.n	8020e20 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8020e20:	697b      	ldr	r3, [r7, #20]
	}
 8020e22:	4618      	mov	r0, r3
 8020e24:	371c      	adds	r7, #28
 8020e26:	46bd      	mov	sp, r7
 8020e28:	bd90      	pop	{r4, r7, pc}

08020e2a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8020e2a:	b590      	push	{r4, r7, lr}
 8020e2c:	b087      	sub	sp, #28
 8020e2e:	af00      	add	r7, sp, #0
 8020e30:	6078      	str	r0, [r7, #4]
 8020e32:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020e38:	693b      	ldr	r3, [r7, #16]
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d10b      	bne.n	8020e56 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8020e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020e42:	f383 8811 	msr	BASEPRI, r3
 8020e46:	f3bf 8f6f 	isb	sy
 8020e4a:	f3bf 8f4f 	dsb	sy
 8020e4e:	60fb      	str	r3, [r7, #12]
}
 8020e50:	bf00      	nop
 8020e52:	bf00      	nop
 8020e54:	e7fd      	b.n	8020e52 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020e56:	693b      	ldr	r3, [r7, #16]
 8020e58:	689c      	ldr	r4, [r3, #8]
 8020e5a:	f001 fd8f 	bl	802297c <xTaskGetCurrentTaskHandle>
 8020e5e:	4603      	mov	r3, r0
 8020e60:	429c      	cmp	r4, r3
 8020e62:	d107      	bne.n	8020e74 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020e64:	693b      	ldr	r3, [r7, #16]
 8020e66:	68db      	ldr	r3, [r3, #12]
 8020e68:	1c5a      	adds	r2, r3, #1
 8020e6a:	693b      	ldr	r3, [r7, #16]
 8020e6c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8020e6e:	2301      	movs	r3, #1
 8020e70:	617b      	str	r3, [r7, #20]
 8020e72:	e00c      	b.n	8020e8e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020e74:	6839      	ldr	r1, [r7, #0]
 8020e76:	6938      	ldr	r0, [r7, #16]
 8020e78:	f000 fa90 	bl	802139c <xQueueSemaphoreTake>
 8020e7c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8020e7e:	697b      	ldr	r3, [r7, #20]
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d004      	beq.n	8020e8e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020e84:	693b      	ldr	r3, [r7, #16]
 8020e86:	68db      	ldr	r3, [r3, #12]
 8020e88:	1c5a      	adds	r2, r3, #1
 8020e8a:	693b      	ldr	r3, [r7, #16]
 8020e8c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8020e8e:	697b      	ldr	r3, [r7, #20]
	}
 8020e90:	4618      	mov	r0, r3
 8020e92:	371c      	adds	r7, #28
 8020e94:	46bd      	mov	sp, r7
 8020e96:	bd90      	pop	{r4, r7, pc}

08020e98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020e98:	b580      	push	{r7, lr}
 8020e9a:	b08e      	sub	sp, #56	@ 0x38
 8020e9c:	af00      	add	r7, sp, #0
 8020e9e:	60f8      	str	r0, [r7, #12]
 8020ea0:	60b9      	str	r1, [r7, #8]
 8020ea2:	607a      	str	r2, [r7, #4]
 8020ea4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020ea6:	2300      	movs	r3, #0
 8020ea8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020eaa:	68fb      	ldr	r3, [r7, #12]
 8020eac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8020eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d10b      	bne.n	8020ecc <xQueueGenericSend+0x34>
	__asm volatile
 8020eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020eb8:	f383 8811 	msr	BASEPRI, r3
 8020ebc:	f3bf 8f6f 	isb	sy
 8020ec0:	f3bf 8f4f 	dsb	sy
 8020ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8020ec6:	bf00      	nop
 8020ec8:	bf00      	nop
 8020eca:	e7fd      	b.n	8020ec8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020ecc:	68bb      	ldr	r3, [r7, #8]
 8020ece:	2b00      	cmp	r3, #0
 8020ed0:	d103      	bne.n	8020eda <xQueueGenericSend+0x42>
 8020ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d101      	bne.n	8020ede <xQueueGenericSend+0x46>
 8020eda:	2301      	movs	r3, #1
 8020edc:	e000      	b.n	8020ee0 <xQueueGenericSend+0x48>
 8020ede:	2300      	movs	r3, #0
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d10b      	bne.n	8020efc <xQueueGenericSend+0x64>
	__asm volatile
 8020ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020ee8:	f383 8811 	msr	BASEPRI, r3
 8020eec:	f3bf 8f6f 	isb	sy
 8020ef0:	f3bf 8f4f 	dsb	sy
 8020ef4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8020ef6:	bf00      	nop
 8020ef8:	bf00      	nop
 8020efa:	e7fd      	b.n	8020ef8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020efc:	683b      	ldr	r3, [r7, #0]
 8020efe:	2b02      	cmp	r3, #2
 8020f00:	d103      	bne.n	8020f0a <xQueueGenericSend+0x72>
 8020f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020f06:	2b01      	cmp	r3, #1
 8020f08:	d101      	bne.n	8020f0e <xQueueGenericSend+0x76>
 8020f0a:	2301      	movs	r3, #1
 8020f0c:	e000      	b.n	8020f10 <xQueueGenericSend+0x78>
 8020f0e:	2300      	movs	r3, #0
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d10b      	bne.n	8020f2c <xQueueGenericSend+0x94>
	__asm volatile
 8020f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020f18:	f383 8811 	msr	BASEPRI, r3
 8020f1c:	f3bf 8f6f 	isb	sy
 8020f20:	f3bf 8f4f 	dsb	sy
 8020f24:	623b      	str	r3, [r7, #32]
}
 8020f26:	bf00      	nop
 8020f28:	bf00      	nop
 8020f2a:	e7fd      	b.n	8020f28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020f2c:	f001 fd36 	bl	802299c <xTaskGetSchedulerState>
 8020f30:	4603      	mov	r3, r0
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d102      	bne.n	8020f3c <xQueueGenericSend+0xa4>
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	d101      	bne.n	8020f40 <xQueueGenericSend+0xa8>
 8020f3c:	2301      	movs	r3, #1
 8020f3e:	e000      	b.n	8020f42 <xQueueGenericSend+0xaa>
 8020f40:	2300      	movs	r3, #0
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d10b      	bne.n	8020f5e <xQueueGenericSend+0xc6>
	__asm volatile
 8020f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8020f4a:	f383 8811 	msr	BASEPRI, r3
 8020f4e:	f3bf 8f6f 	isb	sy
 8020f52:	f3bf 8f4f 	dsb	sy
 8020f56:	61fb      	str	r3, [r7, #28]
}
 8020f58:	bf00      	nop
 8020f5a:	bf00      	nop
 8020f5c:	e7fd      	b.n	8020f5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020f5e:	f002 fb8b 	bl	8023678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020f6a:	429a      	cmp	r2, r3
 8020f6c:	d302      	bcc.n	8020f74 <xQueueGenericSend+0xdc>
 8020f6e:	683b      	ldr	r3, [r7, #0]
 8020f70:	2b02      	cmp	r3, #2
 8020f72:	d129      	bne.n	8020fc8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020f74:	683a      	ldr	r2, [r7, #0]
 8020f76:	68b9      	ldr	r1, [r7, #8]
 8020f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8020f7a:	f000 fcdb 	bl	8021934 <prvCopyDataToQueue>
 8020f7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d010      	beq.n	8020faa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020f8a:	3324      	adds	r3, #36	@ 0x24
 8020f8c:	4618      	mov	r0, r3
 8020f8e:	f001 faf7 	bl	8022580 <xTaskRemoveFromEventList>
 8020f92:	4603      	mov	r3, r0
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d013      	beq.n	8020fc0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020f98:	4b3f      	ldr	r3, [pc, #252]	@ (8021098 <xQueueGenericSend+0x200>)
 8020f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020f9e:	601a      	str	r2, [r3, #0]
 8020fa0:	f3bf 8f4f 	dsb	sy
 8020fa4:	f3bf 8f6f 	isb	sy
 8020fa8:	e00a      	b.n	8020fc0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	d007      	beq.n	8020fc0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020fb0:	4b39      	ldr	r3, [pc, #228]	@ (8021098 <xQueueGenericSend+0x200>)
 8020fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8020fb6:	601a      	str	r2, [r3, #0]
 8020fb8:	f3bf 8f4f 	dsb	sy
 8020fbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020fc0:	f002 fb8c 	bl	80236dc <vPortExitCritical>
				return pdPASS;
 8020fc4:	2301      	movs	r3, #1
 8020fc6:	e063      	b.n	8021090 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d103      	bne.n	8020fd6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020fce:	f002 fb85 	bl	80236dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020fd2:	2300      	movs	r3, #0
 8020fd4:	e05c      	b.n	8021090 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d106      	bne.n	8020fea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020fdc:	f107 0314 	add.w	r3, r7, #20
 8020fe0:	4618      	mov	r0, r3
 8020fe2:	f001 fb31 	bl	8022648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020fe6:	2301      	movs	r3, #1
 8020fe8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020fea:	f002 fb77 	bl	80236dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020fee:	f001 f877 	bl	80220e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020ff2:	f002 fb41 	bl	8023678 <vPortEnterCritical>
 8020ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8020ffc:	b25b      	sxtb	r3, r3
 8020ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021002:	d103      	bne.n	802100c <xQueueGenericSend+0x174>
 8021004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021006:	2200      	movs	r2, #0
 8021008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802100c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802100e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8021012:	b25b      	sxtb	r3, r3
 8021014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021018:	d103      	bne.n	8021022 <xQueueGenericSend+0x18a>
 802101a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802101c:	2200      	movs	r2, #0
 802101e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8021022:	f002 fb5b 	bl	80236dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021026:	1d3a      	adds	r2, r7, #4
 8021028:	f107 0314 	add.w	r3, r7, #20
 802102c:	4611      	mov	r1, r2
 802102e:	4618      	mov	r0, r3
 8021030:	f001 fb20 	bl	8022674 <xTaskCheckForTimeOut>
 8021034:	4603      	mov	r3, r0
 8021036:	2b00      	cmp	r3, #0
 8021038:	d124      	bne.n	8021084 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 802103a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802103c:	f000 fd72 	bl	8021b24 <prvIsQueueFull>
 8021040:	4603      	mov	r3, r0
 8021042:	2b00      	cmp	r3, #0
 8021044:	d018      	beq.n	8021078 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8021046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021048:	3310      	adds	r3, #16
 802104a:	687a      	ldr	r2, [r7, #4]
 802104c:	4611      	mov	r1, r2
 802104e:	4618      	mov	r0, r3
 8021050:	f001 fa44 	bl	80224dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8021054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021056:	f000 fcfd 	bl	8021a54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 802105a:	f001 f84f 	bl	80220fc <xTaskResumeAll>
 802105e:	4603      	mov	r3, r0
 8021060:	2b00      	cmp	r3, #0
 8021062:	f47f af7c 	bne.w	8020f5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8021066:	4b0c      	ldr	r3, [pc, #48]	@ (8021098 <xQueueGenericSend+0x200>)
 8021068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802106c:	601a      	str	r2, [r3, #0]
 802106e:	f3bf 8f4f 	dsb	sy
 8021072:	f3bf 8f6f 	isb	sy
 8021076:	e772      	b.n	8020f5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8021078:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802107a:	f000 fceb 	bl	8021a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802107e:	f001 f83d 	bl	80220fc <xTaskResumeAll>
 8021082:	e76c      	b.n	8020f5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8021084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021086:	f000 fce5 	bl	8021a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802108a:	f001 f837 	bl	80220fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 802108e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8021090:	4618      	mov	r0, r3
 8021092:	3738      	adds	r7, #56	@ 0x38
 8021094:	46bd      	mov	sp, r7
 8021096:	bd80      	pop	{r7, pc}
 8021098:	e000ed04 	.word	0xe000ed04

0802109c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 802109c:	b580      	push	{r7, lr}
 802109e:	b090      	sub	sp, #64	@ 0x40
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	60f8      	str	r0, [r7, #12]
 80210a4:	60b9      	str	r1, [r7, #8]
 80210a6:	607a      	str	r2, [r7, #4]
 80210a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80210aa:	68fb      	ldr	r3, [r7, #12]
 80210ac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80210ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d10b      	bne.n	80210cc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80210b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80210b8:	f383 8811 	msr	BASEPRI, r3
 80210bc:	f3bf 8f6f 	isb	sy
 80210c0:	f3bf 8f4f 	dsb	sy
 80210c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80210c6:	bf00      	nop
 80210c8:	bf00      	nop
 80210ca:	e7fd      	b.n	80210c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80210cc:	68bb      	ldr	r3, [r7, #8]
 80210ce:	2b00      	cmp	r3, #0
 80210d0:	d103      	bne.n	80210da <xQueueGenericSendFromISR+0x3e>
 80210d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80210d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d101      	bne.n	80210de <xQueueGenericSendFromISR+0x42>
 80210da:	2301      	movs	r3, #1
 80210dc:	e000      	b.n	80210e0 <xQueueGenericSendFromISR+0x44>
 80210de:	2300      	movs	r3, #0
 80210e0:	2b00      	cmp	r3, #0
 80210e2:	d10b      	bne.n	80210fc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80210e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80210e8:	f383 8811 	msr	BASEPRI, r3
 80210ec:	f3bf 8f6f 	isb	sy
 80210f0:	f3bf 8f4f 	dsb	sy
 80210f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80210f6:	bf00      	nop
 80210f8:	bf00      	nop
 80210fa:	e7fd      	b.n	80210f8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80210fc:	683b      	ldr	r3, [r7, #0]
 80210fe:	2b02      	cmp	r3, #2
 8021100:	d103      	bne.n	802110a <xQueueGenericSendFromISR+0x6e>
 8021102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021106:	2b01      	cmp	r3, #1
 8021108:	d101      	bne.n	802110e <xQueueGenericSendFromISR+0x72>
 802110a:	2301      	movs	r3, #1
 802110c:	e000      	b.n	8021110 <xQueueGenericSendFromISR+0x74>
 802110e:	2300      	movs	r3, #0
 8021110:	2b00      	cmp	r3, #0
 8021112:	d10b      	bne.n	802112c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8021114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021118:	f383 8811 	msr	BASEPRI, r3
 802111c:	f3bf 8f6f 	isb	sy
 8021120:	f3bf 8f4f 	dsb	sy
 8021124:	623b      	str	r3, [r7, #32]
}
 8021126:	bf00      	nop
 8021128:	bf00      	nop
 802112a:	e7fd      	b.n	8021128 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802112c:	f002 fb84 	bl	8023838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8021130:	f3ef 8211 	mrs	r2, BASEPRI
 8021134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021138:	f383 8811 	msr	BASEPRI, r3
 802113c:	f3bf 8f6f 	isb	sy
 8021140:	f3bf 8f4f 	dsb	sy
 8021144:	61fa      	str	r2, [r7, #28]
 8021146:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8021148:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802114a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802114c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802114e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021154:	429a      	cmp	r2, r3
 8021156:	d302      	bcc.n	802115e <xQueueGenericSendFromISR+0xc2>
 8021158:	683b      	ldr	r3, [r7, #0]
 802115a:	2b02      	cmp	r3, #2
 802115c:	d12f      	bne.n	80211be <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 802115e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021160:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8021164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802116a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802116c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 802116e:	683a      	ldr	r2, [r7, #0]
 8021170:	68b9      	ldr	r1, [r7, #8]
 8021172:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8021174:	f000 fbde 	bl	8021934 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8021178:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 802117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021180:	d112      	bne.n	80211a8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021186:	2b00      	cmp	r3, #0
 8021188:	d016      	beq.n	80211b8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802118a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802118c:	3324      	adds	r3, #36	@ 0x24
 802118e:	4618      	mov	r0, r3
 8021190:	f001 f9f6 	bl	8022580 <xTaskRemoveFromEventList>
 8021194:	4603      	mov	r3, r0
 8021196:	2b00      	cmp	r3, #0
 8021198:	d00e      	beq.n	80211b8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	2b00      	cmp	r3, #0
 802119e:	d00b      	beq.n	80211b8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	2201      	movs	r2, #1
 80211a4:	601a      	str	r2, [r3, #0]
 80211a6:	e007      	b.n	80211b8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80211a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80211ac:	3301      	adds	r3, #1
 80211ae:	b2db      	uxtb	r3, r3
 80211b0:	b25a      	sxtb	r2, r3
 80211b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80211b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80211b8:	2301      	movs	r3, #1
 80211ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80211bc:	e001      	b.n	80211c2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80211be:	2300      	movs	r3, #0
 80211c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80211c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80211c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80211c6:	697b      	ldr	r3, [r7, #20]
 80211c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80211cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80211ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80211d0:	4618      	mov	r0, r3
 80211d2:	3740      	adds	r7, #64	@ 0x40
 80211d4:	46bd      	mov	sp, r7
 80211d6:	bd80      	pop	{r7, pc}

080211d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80211d8:	b580      	push	{r7, lr}
 80211da:	b08c      	sub	sp, #48	@ 0x30
 80211dc:	af00      	add	r7, sp, #0
 80211de:	60f8      	str	r0, [r7, #12]
 80211e0:	60b9      	str	r1, [r7, #8]
 80211e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80211e4:	2300      	movs	r3, #0
 80211e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80211e8:	68fb      	ldr	r3, [r7, #12]
 80211ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80211ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d10b      	bne.n	802120a <xQueueReceive+0x32>
	__asm volatile
 80211f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80211f6:	f383 8811 	msr	BASEPRI, r3
 80211fa:	f3bf 8f6f 	isb	sy
 80211fe:	f3bf 8f4f 	dsb	sy
 8021202:	623b      	str	r3, [r7, #32]
}
 8021204:	bf00      	nop
 8021206:	bf00      	nop
 8021208:	e7fd      	b.n	8021206 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802120a:	68bb      	ldr	r3, [r7, #8]
 802120c:	2b00      	cmp	r3, #0
 802120e:	d103      	bne.n	8021218 <xQueueReceive+0x40>
 8021210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021214:	2b00      	cmp	r3, #0
 8021216:	d101      	bne.n	802121c <xQueueReceive+0x44>
 8021218:	2301      	movs	r3, #1
 802121a:	e000      	b.n	802121e <xQueueReceive+0x46>
 802121c:	2300      	movs	r3, #0
 802121e:	2b00      	cmp	r3, #0
 8021220:	d10b      	bne.n	802123a <xQueueReceive+0x62>
	__asm volatile
 8021222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021226:	f383 8811 	msr	BASEPRI, r3
 802122a:	f3bf 8f6f 	isb	sy
 802122e:	f3bf 8f4f 	dsb	sy
 8021232:	61fb      	str	r3, [r7, #28]
}
 8021234:	bf00      	nop
 8021236:	bf00      	nop
 8021238:	e7fd      	b.n	8021236 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802123a:	f001 fbaf 	bl	802299c <xTaskGetSchedulerState>
 802123e:	4603      	mov	r3, r0
 8021240:	2b00      	cmp	r3, #0
 8021242:	d102      	bne.n	802124a <xQueueReceive+0x72>
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	2b00      	cmp	r3, #0
 8021248:	d101      	bne.n	802124e <xQueueReceive+0x76>
 802124a:	2301      	movs	r3, #1
 802124c:	e000      	b.n	8021250 <xQueueReceive+0x78>
 802124e:	2300      	movs	r3, #0
 8021250:	2b00      	cmp	r3, #0
 8021252:	d10b      	bne.n	802126c <xQueueReceive+0x94>
	__asm volatile
 8021254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021258:	f383 8811 	msr	BASEPRI, r3
 802125c:	f3bf 8f6f 	isb	sy
 8021260:	f3bf 8f4f 	dsb	sy
 8021264:	61bb      	str	r3, [r7, #24]
}
 8021266:	bf00      	nop
 8021268:	bf00      	nop
 802126a:	e7fd      	b.n	8021268 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802126c:	f002 fa04 	bl	8023678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021274:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021278:	2b00      	cmp	r3, #0
 802127a:	d01f      	beq.n	80212bc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 802127c:	68b9      	ldr	r1, [r7, #8]
 802127e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021280:	f000 fbc2 	bl	8021a08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021286:	1e5a      	subs	r2, r3, #1
 8021288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802128a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802128c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802128e:	691b      	ldr	r3, [r3, #16]
 8021290:	2b00      	cmp	r3, #0
 8021292:	d00f      	beq.n	80212b4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021296:	3310      	adds	r3, #16
 8021298:	4618      	mov	r0, r3
 802129a:	f001 f971 	bl	8022580 <xTaskRemoveFromEventList>
 802129e:	4603      	mov	r3, r0
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	d007      	beq.n	80212b4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80212a4:	4b3c      	ldr	r3, [pc, #240]	@ (8021398 <xQueueReceive+0x1c0>)
 80212a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80212aa:	601a      	str	r2, [r3, #0]
 80212ac:	f3bf 8f4f 	dsb	sy
 80212b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80212b4:	f002 fa12 	bl	80236dc <vPortExitCritical>
				return pdPASS;
 80212b8:	2301      	movs	r3, #1
 80212ba:	e069      	b.n	8021390 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80212bc:	687b      	ldr	r3, [r7, #4]
 80212be:	2b00      	cmp	r3, #0
 80212c0:	d103      	bne.n	80212ca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80212c2:	f002 fa0b 	bl	80236dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80212c6:	2300      	movs	r3, #0
 80212c8:	e062      	b.n	8021390 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80212ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d106      	bne.n	80212de <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80212d0:	f107 0310 	add.w	r3, r7, #16
 80212d4:	4618      	mov	r0, r3
 80212d6:	f001 f9b7 	bl	8022648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80212da:	2301      	movs	r3, #1
 80212dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80212de:	f002 f9fd 	bl	80236dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80212e2:	f000 fefd 	bl	80220e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80212e6:	f002 f9c7 	bl	8023678 <vPortEnterCritical>
 80212ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80212f0:	b25b      	sxtb	r3, r3
 80212f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212f6:	d103      	bne.n	8021300 <xQueueReceive+0x128>
 80212f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80212fa:	2200      	movs	r2, #0
 80212fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8021300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8021306:	b25b      	sxtb	r3, r3
 8021308:	f1b3 3fff 	cmp.w	r3, #4294967295
 802130c:	d103      	bne.n	8021316 <xQueueReceive+0x13e>
 802130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021310:	2200      	movs	r2, #0
 8021312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8021316:	f002 f9e1 	bl	80236dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 802131a:	1d3a      	adds	r2, r7, #4
 802131c:	f107 0310 	add.w	r3, r7, #16
 8021320:	4611      	mov	r1, r2
 8021322:	4618      	mov	r0, r3
 8021324:	f001 f9a6 	bl	8022674 <xTaskCheckForTimeOut>
 8021328:	4603      	mov	r3, r0
 802132a:	2b00      	cmp	r3, #0
 802132c:	d123      	bne.n	8021376 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802132e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021330:	f000 fbe2 	bl	8021af8 <prvIsQueueEmpty>
 8021334:	4603      	mov	r3, r0
 8021336:	2b00      	cmp	r3, #0
 8021338:	d017      	beq.n	802136a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802133a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802133c:	3324      	adds	r3, #36	@ 0x24
 802133e:	687a      	ldr	r2, [r7, #4]
 8021340:	4611      	mov	r1, r2
 8021342:	4618      	mov	r0, r3
 8021344:	f001 f8ca 	bl	80224dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802134a:	f000 fb83 	bl	8021a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802134e:	f000 fed5 	bl	80220fc <xTaskResumeAll>
 8021352:	4603      	mov	r3, r0
 8021354:	2b00      	cmp	r3, #0
 8021356:	d189      	bne.n	802126c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8021358:	4b0f      	ldr	r3, [pc, #60]	@ (8021398 <xQueueReceive+0x1c0>)
 802135a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802135e:	601a      	str	r2, [r3, #0]
 8021360:	f3bf 8f4f 	dsb	sy
 8021364:	f3bf 8f6f 	isb	sy
 8021368:	e780      	b.n	802126c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 802136a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802136c:	f000 fb72 	bl	8021a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021370:	f000 fec4 	bl	80220fc <xTaskResumeAll>
 8021374:	e77a      	b.n	802126c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8021376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021378:	f000 fb6c 	bl	8021a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 802137c:	f000 febe 	bl	80220fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021382:	f000 fbb9 	bl	8021af8 <prvIsQueueEmpty>
 8021386:	4603      	mov	r3, r0
 8021388:	2b00      	cmp	r3, #0
 802138a:	f43f af6f 	beq.w	802126c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802138e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8021390:	4618      	mov	r0, r3
 8021392:	3730      	adds	r7, #48	@ 0x30
 8021394:	46bd      	mov	sp, r7
 8021396:	bd80      	pop	{r7, pc}
 8021398:	e000ed04 	.word	0xe000ed04

0802139c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 802139c:	b580      	push	{r7, lr}
 802139e:	b08e      	sub	sp, #56	@ 0x38
 80213a0:	af00      	add	r7, sp, #0
 80213a2:	6078      	str	r0, [r7, #4]
 80213a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80213a6:	2300      	movs	r3, #0
 80213a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80213ae:	2300      	movs	r3, #0
 80213b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80213b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d10b      	bne.n	80213d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80213b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80213bc:	f383 8811 	msr	BASEPRI, r3
 80213c0:	f3bf 8f6f 	isb	sy
 80213c4:	f3bf 8f4f 	dsb	sy
 80213c8:	623b      	str	r3, [r7, #32]
}
 80213ca:	bf00      	nop
 80213cc:	bf00      	nop
 80213ce:	e7fd      	b.n	80213cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80213d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80213d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d00b      	beq.n	80213f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80213d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80213dc:	f383 8811 	msr	BASEPRI, r3
 80213e0:	f3bf 8f6f 	isb	sy
 80213e4:	f3bf 8f4f 	dsb	sy
 80213e8:	61fb      	str	r3, [r7, #28]
}
 80213ea:	bf00      	nop
 80213ec:	bf00      	nop
 80213ee:	e7fd      	b.n	80213ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80213f0:	f001 fad4 	bl	802299c <xTaskGetSchedulerState>
 80213f4:	4603      	mov	r3, r0
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d102      	bne.n	8021400 <xQueueSemaphoreTake+0x64>
 80213fa:	683b      	ldr	r3, [r7, #0]
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d101      	bne.n	8021404 <xQueueSemaphoreTake+0x68>
 8021400:	2301      	movs	r3, #1
 8021402:	e000      	b.n	8021406 <xQueueSemaphoreTake+0x6a>
 8021404:	2300      	movs	r3, #0
 8021406:	2b00      	cmp	r3, #0
 8021408:	d10b      	bne.n	8021422 <xQueueSemaphoreTake+0x86>
	__asm volatile
 802140a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802140e:	f383 8811 	msr	BASEPRI, r3
 8021412:	f3bf 8f6f 	isb	sy
 8021416:	f3bf 8f4f 	dsb	sy
 802141a:	61bb      	str	r3, [r7, #24]
}
 802141c:	bf00      	nop
 802141e:	bf00      	nop
 8021420:	e7fd      	b.n	802141e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021422:	f002 f929 	bl	8023678 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8021426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802142a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 802142c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802142e:	2b00      	cmp	r3, #0
 8021430:	d024      	beq.n	802147c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8021432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021434:	1e5a      	subs	r2, r3, #1
 8021436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021438:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802143a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802143c:	681b      	ldr	r3, [r3, #0]
 802143e:	2b00      	cmp	r3, #0
 8021440:	d104      	bne.n	802144c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8021442:	f001 fc25 	bl	8022c90 <pvTaskIncrementMutexHeldCount>
 8021446:	4602      	mov	r2, r0
 8021448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802144a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802144e:	691b      	ldr	r3, [r3, #16]
 8021450:	2b00      	cmp	r3, #0
 8021452:	d00f      	beq.n	8021474 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021456:	3310      	adds	r3, #16
 8021458:	4618      	mov	r0, r3
 802145a:	f001 f891 	bl	8022580 <xTaskRemoveFromEventList>
 802145e:	4603      	mov	r3, r0
 8021460:	2b00      	cmp	r3, #0
 8021462:	d007      	beq.n	8021474 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8021464:	4b54      	ldr	r3, [pc, #336]	@ (80215b8 <xQueueSemaphoreTake+0x21c>)
 8021466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802146a:	601a      	str	r2, [r3, #0]
 802146c:	f3bf 8f4f 	dsb	sy
 8021470:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8021474:	f002 f932 	bl	80236dc <vPortExitCritical>
				return pdPASS;
 8021478:	2301      	movs	r3, #1
 802147a:	e098      	b.n	80215ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802147c:	683b      	ldr	r3, [r7, #0]
 802147e:	2b00      	cmp	r3, #0
 8021480:	d112      	bne.n	80214a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8021482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021484:	2b00      	cmp	r3, #0
 8021486:	d00b      	beq.n	80214a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8021488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802148c:	f383 8811 	msr	BASEPRI, r3
 8021490:	f3bf 8f6f 	isb	sy
 8021494:	f3bf 8f4f 	dsb	sy
 8021498:	617b      	str	r3, [r7, #20]
}
 802149a:	bf00      	nop
 802149c:	bf00      	nop
 802149e:	e7fd      	b.n	802149c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80214a0:	f002 f91c 	bl	80236dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80214a4:	2300      	movs	r3, #0
 80214a6:	e082      	b.n	80215ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80214a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d106      	bne.n	80214bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80214ae:	f107 030c 	add.w	r3, r7, #12
 80214b2:	4618      	mov	r0, r3
 80214b4:	f001 f8c8 	bl	8022648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80214b8:	2301      	movs	r3, #1
 80214ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80214bc:	f002 f90e 	bl	80236dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80214c0:	f000 fe0e 	bl	80220e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80214c4:	f002 f8d8 	bl	8023678 <vPortEnterCritical>
 80214c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80214ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80214ce:	b25b      	sxtb	r3, r3
 80214d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80214d4:	d103      	bne.n	80214de <xQueueSemaphoreTake+0x142>
 80214d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80214d8:	2200      	movs	r2, #0
 80214da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80214de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80214e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80214e4:	b25b      	sxtb	r3, r3
 80214e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80214ea:	d103      	bne.n	80214f4 <xQueueSemaphoreTake+0x158>
 80214ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80214ee:	2200      	movs	r2, #0
 80214f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80214f4:	f002 f8f2 	bl	80236dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80214f8:	463a      	mov	r2, r7
 80214fa:	f107 030c 	add.w	r3, r7, #12
 80214fe:	4611      	mov	r1, r2
 8021500:	4618      	mov	r0, r3
 8021502:	f001 f8b7 	bl	8022674 <xTaskCheckForTimeOut>
 8021506:	4603      	mov	r3, r0
 8021508:	2b00      	cmp	r3, #0
 802150a:	d132      	bne.n	8021572 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802150c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802150e:	f000 faf3 	bl	8021af8 <prvIsQueueEmpty>
 8021512:	4603      	mov	r3, r0
 8021514:	2b00      	cmp	r3, #0
 8021516:	d026      	beq.n	8021566 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	2b00      	cmp	r3, #0
 802151e:	d109      	bne.n	8021534 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8021520:	f002 f8aa 	bl	8023678 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8021524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021526:	689b      	ldr	r3, [r3, #8]
 8021528:	4618      	mov	r0, r3
 802152a:	f001 fa55 	bl	80229d8 <xTaskPriorityInherit>
 802152e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8021530:	f002 f8d4 	bl	80236dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021536:	3324      	adds	r3, #36	@ 0x24
 8021538:	683a      	ldr	r2, [r7, #0]
 802153a:	4611      	mov	r1, r2
 802153c:	4618      	mov	r0, r3
 802153e:	f000 ffcd 	bl	80224dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8021544:	f000 fa86 	bl	8021a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021548:	f000 fdd8 	bl	80220fc <xTaskResumeAll>
 802154c:	4603      	mov	r3, r0
 802154e:	2b00      	cmp	r3, #0
 8021550:	f47f af67 	bne.w	8021422 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8021554:	4b18      	ldr	r3, [pc, #96]	@ (80215b8 <xQueueSemaphoreTake+0x21c>)
 8021556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802155a:	601a      	str	r2, [r3, #0]
 802155c:	f3bf 8f4f 	dsb	sy
 8021560:	f3bf 8f6f 	isb	sy
 8021564:	e75d      	b.n	8021422 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8021566:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8021568:	f000 fa74 	bl	8021a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802156c:	f000 fdc6 	bl	80220fc <xTaskResumeAll>
 8021570:	e757      	b.n	8021422 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8021572:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8021574:	f000 fa6e 	bl	8021a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021578:	f000 fdc0 	bl	80220fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802157c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 802157e:	f000 fabb 	bl	8021af8 <prvIsQueueEmpty>
 8021582:	4603      	mov	r3, r0
 8021584:	2b00      	cmp	r3, #0
 8021586:	f43f af4c 	beq.w	8021422 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 802158a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802158c:	2b00      	cmp	r3, #0
 802158e:	d00d      	beq.n	80215ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8021590:	f002 f872 	bl	8023678 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8021594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8021596:	f000 f9b5 	bl	8021904 <prvGetDisinheritPriorityAfterTimeout>
 802159a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 802159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802159e:	689b      	ldr	r3, [r3, #8]
 80215a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80215a2:	4618      	mov	r0, r3
 80215a4:	f001 faf0 	bl	8022b88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80215a8:	f002 f898 	bl	80236dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80215ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80215ae:	4618      	mov	r0, r3
 80215b0:	3738      	adds	r7, #56	@ 0x38
 80215b2:	46bd      	mov	sp, r7
 80215b4:	bd80      	pop	{r7, pc}
 80215b6:	bf00      	nop
 80215b8:	e000ed04 	.word	0xe000ed04

080215bc <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b08e      	sub	sp, #56	@ 0x38
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	60f8      	str	r0, [r7, #12]
 80215c4:	60b9      	str	r1, [r7, #8]
 80215c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80215c8:	2300      	movs	r3, #0
 80215ca:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 80215cc:	68fb      	ldr	r3, [r7, #12]
 80215ce:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80215d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d10b      	bne.n	80215ee <xQueuePeek+0x32>
	__asm volatile
 80215d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80215da:	f383 8811 	msr	BASEPRI, r3
 80215de:	f3bf 8f6f 	isb	sy
 80215e2:	f3bf 8f4f 	dsb	sy
 80215e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80215e8:	bf00      	nop
 80215ea:	bf00      	nop
 80215ec:	e7fd      	b.n	80215ea <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80215ee:	68bb      	ldr	r3, [r7, #8]
 80215f0:	2b00      	cmp	r3, #0
 80215f2:	d103      	bne.n	80215fc <xQueuePeek+0x40>
 80215f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80215f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80215f8:	2b00      	cmp	r3, #0
 80215fa:	d101      	bne.n	8021600 <xQueuePeek+0x44>
 80215fc:	2301      	movs	r3, #1
 80215fe:	e000      	b.n	8021602 <xQueuePeek+0x46>
 8021600:	2300      	movs	r3, #0
 8021602:	2b00      	cmp	r3, #0
 8021604:	d10b      	bne.n	802161e <xQueuePeek+0x62>
	__asm volatile
 8021606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802160a:	f383 8811 	msr	BASEPRI, r3
 802160e:	f3bf 8f6f 	isb	sy
 8021612:	f3bf 8f4f 	dsb	sy
 8021616:	623b      	str	r3, [r7, #32]
}
 8021618:	bf00      	nop
 802161a:	bf00      	nop
 802161c:	e7fd      	b.n	802161a <xQueuePeek+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802161e:	f001 f9bd 	bl	802299c <xTaskGetSchedulerState>
 8021622:	4603      	mov	r3, r0
 8021624:	2b00      	cmp	r3, #0
 8021626:	d102      	bne.n	802162e <xQueuePeek+0x72>
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	2b00      	cmp	r3, #0
 802162c:	d101      	bne.n	8021632 <xQueuePeek+0x76>
 802162e:	2301      	movs	r3, #1
 8021630:	e000      	b.n	8021634 <xQueuePeek+0x78>
 8021632:	2300      	movs	r3, #0
 8021634:	2b00      	cmp	r3, #0
 8021636:	d10b      	bne.n	8021650 <xQueuePeek+0x94>
	__asm volatile
 8021638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802163c:	f383 8811 	msr	BASEPRI, r3
 8021640:	f3bf 8f6f 	isb	sy
 8021644:	f3bf 8f4f 	dsb	sy
 8021648:	61fb      	str	r3, [r7, #28]
}
 802164a:	bf00      	nop
 802164c:	bf00      	nop
 802164e:	e7fd      	b.n	802164c <xQueuePeek+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021650:	f002 f812 	bl	8023678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021658:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802165a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802165c:	2b00      	cmp	r3, #0
 802165e:	d021      	beq.n	80216a4 <xQueuePeek+0xe8>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8021660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021662:	68db      	ldr	r3, [r3, #12]
 8021664:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021666:	68b9      	ldr	r1, [r7, #8]
 8021668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802166a:	f000 f9cd 	bl	8021a08 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 802166e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021672:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021678:	2b00      	cmp	r3, #0
 802167a:	d00f      	beq.n	802169c <xQueuePeek+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802167c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802167e:	3324      	adds	r3, #36	@ 0x24
 8021680:	4618      	mov	r0, r3
 8021682:	f000 ff7d 	bl	8022580 <xTaskRemoveFromEventList>
 8021686:	4603      	mov	r3, r0
 8021688:	2b00      	cmp	r3, #0
 802168a:	d007      	beq.n	802169c <xQueuePeek+0xe0>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 802168c:	4b3c      	ldr	r3, [pc, #240]	@ (8021780 <xQueuePeek+0x1c4>)
 802168e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021692:	601a      	str	r2, [r3, #0]
 8021694:	f3bf 8f4f 	dsb	sy
 8021698:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802169c:	f002 f81e 	bl	80236dc <vPortExitCritical>
				return pdPASS;
 80216a0:	2301      	movs	r3, #1
 80216a2:	e069      	b.n	8021778 <xQueuePeek+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	2b00      	cmp	r3, #0
 80216a8:	d103      	bne.n	80216b2 <xQueuePeek+0xf6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80216aa:	f002 f817 	bl	80236dc <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80216ae:	2300      	movs	r3, #0
 80216b0:	e062      	b.n	8021778 <xQueuePeek+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
 80216b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	d106      	bne.n	80216c6 <xQueuePeek+0x10a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80216b8:	f107 0314 	add.w	r3, r7, #20
 80216bc:	4618      	mov	r0, r3
 80216be:	f000 ffc3 	bl	8022648 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80216c2:	2301      	movs	r3, #1
 80216c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80216c6:	f002 f809 	bl	80236dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80216ca:	f000 fd09 	bl	80220e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80216ce:	f001 ffd3 	bl	8023678 <vPortEnterCritical>
 80216d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80216d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80216d8:	b25b      	sxtb	r3, r3
 80216da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80216de:	d103      	bne.n	80216e8 <xQueuePeek+0x12c>
 80216e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80216e2:	2200      	movs	r2, #0
 80216e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80216e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80216ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80216ee:	b25b      	sxtb	r3, r3
 80216f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80216f4:	d103      	bne.n	80216fe <xQueuePeek+0x142>
 80216f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80216f8:	2200      	movs	r2, #0
 80216fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80216fe:	f001 ffed 	bl	80236dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021702:	1d3a      	adds	r2, r7, #4
 8021704:	f107 0314 	add.w	r3, r7, #20
 8021708:	4611      	mov	r1, r2
 802170a:	4618      	mov	r0, r3
 802170c:	f000 ffb2 	bl	8022674 <xTaskCheckForTimeOut>
 8021710:	4603      	mov	r3, r0
 8021712:	2b00      	cmp	r3, #0
 8021714:	d123      	bne.n	802175e <xQueuePeek+0x1a2>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021716:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021718:	f000 f9ee 	bl	8021af8 <prvIsQueueEmpty>
 802171c:	4603      	mov	r3, r0
 802171e:	2b00      	cmp	r3, #0
 8021720:	d017      	beq.n	8021752 <xQueuePeek+0x196>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021724:	3324      	adds	r3, #36	@ 0x24
 8021726:	687a      	ldr	r2, [r7, #4]
 8021728:	4611      	mov	r1, r2
 802172a:	4618      	mov	r0, r3
 802172c:	f000 fed6 	bl	80224dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021730:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021732:	f000 f98f 	bl	8021a54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021736:	f000 fce1 	bl	80220fc <xTaskResumeAll>
 802173a:	4603      	mov	r3, r0
 802173c:	2b00      	cmp	r3, #0
 802173e:	d187      	bne.n	8021650 <xQueuePeek+0x94>
				{
					portYIELD_WITHIN_API();
 8021740:	4b0f      	ldr	r3, [pc, #60]	@ (8021780 <xQueuePeek+0x1c4>)
 8021742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021746:	601a      	str	r2, [r3, #0]
 8021748:	f3bf 8f4f 	dsb	sy
 802174c:	f3bf 8f6f 	isb	sy
 8021750:	e77e      	b.n	8021650 <xQueuePeek+0x94>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8021752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021754:	f000 f97e 	bl	8021a54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021758:	f000 fcd0 	bl	80220fc <xTaskResumeAll>
 802175c:	e778      	b.n	8021650 <xQueuePeek+0x94>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 802175e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8021760:	f000 f978 	bl	8021a54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021764:	f000 fcca 	bl	80220fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802176a:	f000 f9c5 	bl	8021af8 <prvIsQueueEmpty>
 802176e:	4603      	mov	r3, r0
 8021770:	2b00      	cmp	r3, #0
 8021772:	f43f af6d 	beq.w	8021650 <xQueuePeek+0x94>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8021776:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8021778:	4618      	mov	r0, r3
 802177a:	3738      	adds	r7, #56	@ 0x38
 802177c:	46bd      	mov	sp, r7
 802177e:	bd80      	pop	{r7, pc}
 8021780:	e000ed04 	.word	0xe000ed04

08021784 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8021784:	b580      	push	{r7, lr}
 8021786:	b08e      	sub	sp, #56	@ 0x38
 8021788:	af00      	add	r7, sp, #0
 802178a:	60f8      	str	r0, [r7, #12]
 802178c:	60b9      	str	r1, [r7, #8]
 802178e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8021790:	68fb      	ldr	r3, [r7, #12]
 8021792:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8021794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021796:	2b00      	cmp	r3, #0
 8021798:	d10b      	bne.n	80217b2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 802179a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802179e:	f383 8811 	msr	BASEPRI, r3
 80217a2:	f3bf 8f6f 	isb	sy
 80217a6:	f3bf 8f4f 	dsb	sy
 80217aa:	623b      	str	r3, [r7, #32]
}
 80217ac:	bf00      	nop
 80217ae:	bf00      	nop
 80217b0:	e7fd      	b.n	80217ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80217b2:	68bb      	ldr	r3, [r7, #8]
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	d103      	bne.n	80217c0 <xQueueReceiveFromISR+0x3c>
 80217b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80217ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d101      	bne.n	80217c4 <xQueueReceiveFromISR+0x40>
 80217c0:	2301      	movs	r3, #1
 80217c2:	e000      	b.n	80217c6 <xQueueReceiveFromISR+0x42>
 80217c4:	2300      	movs	r3, #0
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d10b      	bne.n	80217e2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80217ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80217ce:	f383 8811 	msr	BASEPRI, r3
 80217d2:	f3bf 8f6f 	isb	sy
 80217d6:	f3bf 8f4f 	dsb	sy
 80217da:	61fb      	str	r3, [r7, #28]
}
 80217dc:	bf00      	nop
 80217de:	bf00      	nop
 80217e0:	e7fd      	b.n	80217de <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80217e2:	f002 f829 	bl	8023838 <vPortValidateInterruptPriority>
	__asm volatile
 80217e6:	f3ef 8211 	mrs	r2, BASEPRI
 80217ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80217ee:	f383 8811 	msr	BASEPRI, r3
 80217f2:	f3bf 8f6f 	isb	sy
 80217f6:	f3bf 8f4f 	dsb	sy
 80217fa:	61ba      	str	r2, [r7, #24]
 80217fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80217fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021800:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021806:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802180a:	2b00      	cmp	r3, #0
 802180c:	d02f      	beq.n	802186e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 802180e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021818:	68b9      	ldr	r1, [r7, #8]
 802181a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 802181c:	f000 f8f4 	bl	8021a08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021822:	1e5a      	subs	r2, r3, #1
 8021824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021826:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8021828:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 802182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021830:	d112      	bne.n	8021858 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021834:	691b      	ldr	r3, [r3, #16]
 8021836:	2b00      	cmp	r3, #0
 8021838:	d016      	beq.n	8021868 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802183a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802183c:	3310      	adds	r3, #16
 802183e:	4618      	mov	r0, r3
 8021840:	f000 fe9e 	bl	8022580 <xTaskRemoveFromEventList>
 8021844:	4603      	mov	r3, r0
 8021846:	2b00      	cmp	r3, #0
 8021848:	d00e      	beq.n	8021868 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 802184a:	687b      	ldr	r3, [r7, #4]
 802184c:	2b00      	cmp	r3, #0
 802184e:	d00b      	beq.n	8021868 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	2201      	movs	r2, #1
 8021854:	601a      	str	r2, [r3, #0]
 8021856:	e007      	b.n	8021868 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8021858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802185c:	3301      	adds	r3, #1
 802185e:	b2db      	uxtb	r3, r3
 8021860:	b25a      	sxtb	r2, r3
 8021862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8021868:	2301      	movs	r3, #1
 802186a:	637b      	str	r3, [r7, #52]	@ 0x34
 802186c:	e001      	b.n	8021872 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 802186e:	2300      	movs	r3, #0
 8021870:	637b      	str	r3, [r7, #52]	@ 0x34
 8021872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021874:	613b      	str	r3, [r7, #16]
	__asm volatile
 8021876:	693b      	ldr	r3, [r7, #16]
 8021878:	f383 8811 	msr	BASEPRI, r3
}
 802187c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802187e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8021880:	4618      	mov	r0, r3
 8021882:	3738      	adds	r7, #56	@ 0x38
 8021884:	46bd      	mov	sp, r7
 8021886:	bd80      	pop	{r7, pc}

08021888 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8021888:	b580      	push	{r7, lr}
 802188a:	b084      	sub	sp, #16
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	2b00      	cmp	r3, #0
 8021894:	d10b      	bne.n	80218ae <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8021896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802189a:	f383 8811 	msr	BASEPRI, r3
 802189e:	f3bf 8f6f 	isb	sy
 80218a2:	f3bf 8f4f 	dsb	sy
 80218a6:	60bb      	str	r3, [r7, #8]
}
 80218a8:	bf00      	nop
 80218aa:	bf00      	nop
 80218ac:	e7fd      	b.n	80218aa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80218ae:	f001 fee3 	bl	8023678 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80218b2:	687b      	ldr	r3, [r7, #4]
 80218b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80218b6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80218b8:	f001 ff10 	bl	80236dc <vPortExitCritical>

	return uxReturn;
 80218bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80218be:	4618      	mov	r0, r3
 80218c0:	3710      	adds	r7, #16
 80218c2:	46bd      	mov	sp, r7
 80218c4:	bd80      	pop	{r7, pc}

080218c6 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80218c6:	b480      	push	{r7}
 80218c8:	b087      	sub	sp, #28
 80218ca:	af00      	add	r7, sp, #0
 80218cc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80218ce:	687b      	ldr	r3, [r7, #4]
 80218d0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80218d2:	697b      	ldr	r3, [r7, #20]
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d10b      	bne.n	80218f0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80218d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80218dc:	f383 8811 	msr	BASEPRI, r3
 80218e0:	f3bf 8f6f 	isb	sy
 80218e4:	f3bf 8f4f 	dsb	sy
 80218e8:	60fb      	str	r3, [r7, #12]
}
 80218ea:	bf00      	nop
 80218ec:	bf00      	nop
 80218ee:	e7fd      	b.n	80218ec <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80218f0:	697b      	ldr	r3, [r7, #20]
 80218f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80218f4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80218f6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80218f8:	4618      	mov	r0, r3
 80218fa:	371c      	adds	r7, #28
 80218fc:	46bd      	mov	sp, r7
 80218fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021902:	4770      	bx	lr

08021904 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8021904:	b480      	push	{r7}
 8021906:	b085      	sub	sp, #20
 8021908:	af00      	add	r7, sp, #0
 802190a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 802190c:	687b      	ldr	r3, [r7, #4]
 802190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021910:	2b00      	cmp	r3, #0
 8021912:	d006      	beq.n	8021922 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021918:	681b      	ldr	r3, [r3, #0]
 802191a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 802191e:	60fb      	str	r3, [r7, #12]
 8021920:	e001      	b.n	8021926 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8021922:	2300      	movs	r3, #0
 8021924:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8021926:	68fb      	ldr	r3, [r7, #12]
	}
 8021928:	4618      	mov	r0, r3
 802192a:	3714      	adds	r7, #20
 802192c:	46bd      	mov	sp, r7
 802192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021932:	4770      	bx	lr

08021934 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8021934:	b580      	push	{r7, lr}
 8021936:	b086      	sub	sp, #24
 8021938:	af00      	add	r7, sp, #0
 802193a:	60f8      	str	r0, [r7, #12]
 802193c:	60b9      	str	r1, [r7, #8]
 802193e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8021940:	2300      	movs	r3, #0
 8021942:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021944:	68fb      	ldr	r3, [r7, #12]
 8021946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021948:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 802194a:	68fb      	ldr	r3, [r7, #12]
 802194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802194e:	2b00      	cmp	r3, #0
 8021950:	d10d      	bne.n	802196e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021952:	68fb      	ldr	r3, [r7, #12]
 8021954:	681b      	ldr	r3, [r3, #0]
 8021956:	2b00      	cmp	r3, #0
 8021958:	d14d      	bne.n	80219f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	689b      	ldr	r3, [r3, #8]
 802195e:	4618      	mov	r0, r3
 8021960:	f001 f8a2 	bl	8022aa8 <xTaskPriorityDisinherit>
 8021964:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8021966:	68fb      	ldr	r3, [r7, #12]
 8021968:	2200      	movs	r2, #0
 802196a:	609a      	str	r2, [r3, #8]
 802196c:	e043      	b.n	80219f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802196e:	687b      	ldr	r3, [r7, #4]
 8021970:	2b00      	cmp	r3, #0
 8021972:	d119      	bne.n	80219a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021974:	68fb      	ldr	r3, [r7, #12]
 8021976:	6858      	ldr	r0, [r3, #4]
 8021978:	68fb      	ldr	r3, [r7, #12]
 802197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802197c:	461a      	mov	r2, r3
 802197e:	68b9      	ldr	r1, [r7, #8]
 8021980:	f00c fadb 	bl	802df3a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021984:	68fb      	ldr	r3, [r7, #12]
 8021986:	685a      	ldr	r2, [r3, #4]
 8021988:	68fb      	ldr	r3, [r7, #12]
 802198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802198c:	441a      	add	r2, r3
 802198e:	68fb      	ldr	r3, [r7, #12]
 8021990:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021992:	68fb      	ldr	r3, [r7, #12]
 8021994:	685a      	ldr	r2, [r3, #4]
 8021996:	68fb      	ldr	r3, [r7, #12]
 8021998:	689b      	ldr	r3, [r3, #8]
 802199a:	429a      	cmp	r2, r3
 802199c:	d32b      	bcc.n	80219f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	681a      	ldr	r2, [r3, #0]
 80219a2:	68fb      	ldr	r3, [r7, #12]
 80219a4:	605a      	str	r2, [r3, #4]
 80219a6:	e026      	b.n	80219f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80219a8:	68fb      	ldr	r3, [r7, #12]
 80219aa:	68d8      	ldr	r0, [r3, #12]
 80219ac:	68fb      	ldr	r3, [r7, #12]
 80219ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80219b0:	461a      	mov	r2, r3
 80219b2:	68b9      	ldr	r1, [r7, #8]
 80219b4:	f00c fac1 	bl	802df3a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80219b8:	68fb      	ldr	r3, [r7, #12]
 80219ba:	68da      	ldr	r2, [r3, #12]
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80219c0:	425b      	negs	r3, r3
 80219c2:	441a      	add	r2, r3
 80219c4:	68fb      	ldr	r3, [r7, #12]
 80219c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80219c8:	68fb      	ldr	r3, [r7, #12]
 80219ca:	68da      	ldr	r2, [r3, #12]
 80219cc:	68fb      	ldr	r3, [r7, #12]
 80219ce:	681b      	ldr	r3, [r3, #0]
 80219d0:	429a      	cmp	r2, r3
 80219d2:	d207      	bcs.n	80219e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80219d4:	68fb      	ldr	r3, [r7, #12]
 80219d6:	689a      	ldr	r2, [r3, #8]
 80219d8:	68fb      	ldr	r3, [r7, #12]
 80219da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80219dc:	425b      	negs	r3, r3
 80219de:	441a      	add	r2, r3
 80219e0:	68fb      	ldr	r3, [r7, #12]
 80219e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	2b02      	cmp	r3, #2
 80219e8:	d105      	bne.n	80219f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80219ea:	693b      	ldr	r3, [r7, #16]
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d002      	beq.n	80219f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80219f0:	693b      	ldr	r3, [r7, #16]
 80219f2:	3b01      	subs	r3, #1
 80219f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80219f6:	693b      	ldr	r3, [r7, #16]
 80219f8:	1c5a      	adds	r2, r3, #1
 80219fa:	68fb      	ldr	r3, [r7, #12]
 80219fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80219fe:	697b      	ldr	r3, [r7, #20]
}
 8021a00:	4618      	mov	r0, r3
 8021a02:	3718      	adds	r7, #24
 8021a04:	46bd      	mov	sp, r7
 8021a06:	bd80      	pop	{r7, pc}

08021a08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8021a08:	b580      	push	{r7, lr}
 8021a0a:	b082      	sub	sp, #8
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	6078      	str	r0, [r7, #4]
 8021a10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d018      	beq.n	8021a4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	68da      	ldr	r2, [r3, #12]
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021a22:	441a      	add	r2, r3
 8021a24:	687b      	ldr	r3, [r7, #4]
 8021a26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	68da      	ldr	r2, [r3, #12]
 8021a2c:	687b      	ldr	r3, [r7, #4]
 8021a2e:	689b      	ldr	r3, [r3, #8]
 8021a30:	429a      	cmp	r2, r3
 8021a32:	d303      	bcc.n	8021a3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8021a34:	687b      	ldr	r3, [r7, #4]
 8021a36:	681a      	ldr	r2, [r3, #0]
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	68d9      	ldr	r1, [r3, #12]
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021a44:	461a      	mov	r2, r3
 8021a46:	6838      	ldr	r0, [r7, #0]
 8021a48:	f00c fa77 	bl	802df3a <memcpy>
	}
}
 8021a4c:	bf00      	nop
 8021a4e:	3708      	adds	r7, #8
 8021a50:	46bd      	mov	sp, r7
 8021a52:	bd80      	pop	{r7, pc}

08021a54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8021a54:	b580      	push	{r7, lr}
 8021a56:	b084      	sub	sp, #16
 8021a58:	af00      	add	r7, sp, #0
 8021a5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8021a5c:	f001 fe0c 	bl	8023678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8021a66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8021a68:	e011      	b.n	8021a8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021a6a:	687b      	ldr	r3, [r7, #4]
 8021a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	d012      	beq.n	8021a98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8021a72:	687b      	ldr	r3, [r7, #4]
 8021a74:	3324      	adds	r3, #36	@ 0x24
 8021a76:	4618      	mov	r0, r3
 8021a78:	f000 fd82 	bl	8022580 <xTaskRemoveFromEventList>
 8021a7c:	4603      	mov	r3, r0
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d001      	beq.n	8021a86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8021a82:	f000 fe5b 	bl	802273c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8021a86:	7bfb      	ldrb	r3, [r7, #15]
 8021a88:	3b01      	subs	r3, #1
 8021a8a:	b2db      	uxtb	r3, r3
 8021a8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8021a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	dce9      	bgt.n	8021a6a <prvUnlockQueue+0x16>
 8021a96:	e000      	b.n	8021a9a <prvUnlockQueue+0x46>
					break;
 8021a98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	22ff      	movs	r2, #255	@ 0xff
 8021a9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8021aa2:	f001 fe1b 	bl	80236dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8021aa6:	f001 fde7 	bl	8023678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8021aaa:	687b      	ldr	r3, [r7, #4]
 8021aac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021ab0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021ab2:	e011      	b.n	8021ad8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	691b      	ldr	r3, [r3, #16]
 8021ab8:	2b00      	cmp	r3, #0
 8021aba:	d012      	beq.n	8021ae2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	3310      	adds	r3, #16
 8021ac0:	4618      	mov	r0, r3
 8021ac2:	f000 fd5d 	bl	8022580 <xTaskRemoveFromEventList>
 8021ac6:	4603      	mov	r3, r0
 8021ac8:	2b00      	cmp	r3, #0
 8021aca:	d001      	beq.n	8021ad0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8021acc:	f000 fe36 	bl	802273c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8021ad0:	7bbb      	ldrb	r3, [r7, #14]
 8021ad2:	3b01      	subs	r3, #1
 8021ad4:	b2db      	uxtb	r3, r3
 8021ad6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	dce9      	bgt.n	8021ab4 <prvUnlockQueue+0x60>
 8021ae0:	e000      	b.n	8021ae4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8021ae2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	22ff      	movs	r2, #255	@ 0xff
 8021ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8021aec:	f001 fdf6 	bl	80236dc <vPortExitCritical>
}
 8021af0:	bf00      	nop
 8021af2:	3710      	adds	r7, #16
 8021af4:	46bd      	mov	sp, r7
 8021af6:	bd80      	pop	{r7, pc}

08021af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b084      	sub	sp, #16
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021b00:	f001 fdba 	bl	8023678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021b04:	687b      	ldr	r3, [r7, #4]
 8021b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	d102      	bne.n	8021b12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8021b0c:	2301      	movs	r3, #1
 8021b0e:	60fb      	str	r3, [r7, #12]
 8021b10:	e001      	b.n	8021b16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8021b12:	2300      	movs	r3, #0
 8021b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021b16:	f001 fde1 	bl	80236dc <vPortExitCritical>

	return xReturn;
 8021b1a:	68fb      	ldr	r3, [r7, #12]
}
 8021b1c:	4618      	mov	r0, r3
 8021b1e:	3710      	adds	r7, #16
 8021b20:	46bd      	mov	sp, r7
 8021b22:	bd80      	pop	{r7, pc}

08021b24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8021b24:	b580      	push	{r7, lr}
 8021b26:	b084      	sub	sp, #16
 8021b28:	af00      	add	r7, sp, #0
 8021b2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021b2c:	f001 fda4 	bl	8023678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021b38:	429a      	cmp	r2, r3
 8021b3a:	d102      	bne.n	8021b42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8021b3c:	2301      	movs	r3, #1
 8021b3e:	60fb      	str	r3, [r7, #12]
 8021b40:	e001      	b.n	8021b46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8021b42:	2300      	movs	r3, #0
 8021b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021b46:	f001 fdc9 	bl	80236dc <vPortExitCritical>

	return xReturn;
 8021b4a:	68fb      	ldr	r3, [r7, #12]
}
 8021b4c:	4618      	mov	r0, r3
 8021b4e:	3710      	adds	r7, #16
 8021b50:	46bd      	mov	sp, r7
 8021b52:	bd80      	pop	{r7, pc}

08021b54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8021b54:	b480      	push	{r7}
 8021b56:	b085      	sub	sp, #20
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
 8021b5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021b5e:	2300      	movs	r3, #0
 8021b60:	60fb      	str	r3, [r7, #12]
 8021b62:	e014      	b.n	8021b8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8021b64:	4a0f      	ldr	r2, [pc, #60]	@ (8021ba4 <vQueueAddToRegistry+0x50>)
 8021b66:	68fb      	ldr	r3, [r7, #12]
 8021b68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d10b      	bne.n	8021b88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8021b70:	490c      	ldr	r1, [pc, #48]	@ (8021ba4 <vQueueAddToRegistry+0x50>)
 8021b72:	68fb      	ldr	r3, [r7, #12]
 8021b74:	683a      	ldr	r2, [r7, #0]
 8021b76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8021b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8021ba4 <vQueueAddToRegistry+0x50>)
 8021b7c:	68fb      	ldr	r3, [r7, #12]
 8021b7e:	00db      	lsls	r3, r3, #3
 8021b80:	4413      	add	r3, r2
 8021b82:	687a      	ldr	r2, [r7, #4]
 8021b84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8021b86:	e006      	b.n	8021b96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021b88:	68fb      	ldr	r3, [r7, #12]
 8021b8a:	3301      	adds	r3, #1
 8021b8c:	60fb      	str	r3, [r7, #12]
 8021b8e:	68fb      	ldr	r3, [r7, #12]
 8021b90:	2b09      	cmp	r3, #9
 8021b92:	d9e7      	bls.n	8021b64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8021b94:	bf00      	nop
 8021b96:	bf00      	nop
 8021b98:	3714      	adds	r7, #20
 8021b9a:	46bd      	mov	sp, r7
 8021b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ba0:	4770      	bx	lr
 8021ba2:	bf00      	nop
 8021ba4:	20001d08 	.word	0x20001d08

08021ba8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021ba8:	b580      	push	{r7, lr}
 8021baa:	b086      	sub	sp, #24
 8021bac:	af00      	add	r7, sp, #0
 8021bae:	60f8      	str	r0, [r7, #12]
 8021bb0:	60b9      	str	r1, [r7, #8]
 8021bb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8021bb4:	68fb      	ldr	r3, [r7, #12]
 8021bb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8021bb8:	f001 fd5e 	bl	8023678 <vPortEnterCritical>
 8021bbc:	697b      	ldr	r3, [r7, #20]
 8021bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8021bc2:	b25b      	sxtb	r3, r3
 8021bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021bc8:	d103      	bne.n	8021bd2 <vQueueWaitForMessageRestricted+0x2a>
 8021bca:	697b      	ldr	r3, [r7, #20]
 8021bcc:	2200      	movs	r2, #0
 8021bce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8021bd2:	697b      	ldr	r3, [r7, #20]
 8021bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8021bd8:	b25b      	sxtb	r3, r3
 8021bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021bde:	d103      	bne.n	8021be8 <vQueueWaitForMessageRestricted+0x40>
 8021be0:	697b      	ldr	r3, [r7, #20]
 8021be2:	2200      	movs	r2, #0
 8021be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8021be8:	f001 fd78 	bl	80236dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8021bec:	697b      	ldr	r3, [r7, #20]
 8021bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021bf0:	2b00      	cmp	r3, #0
 8021bf2:	d106      	bne.n	8021c02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8021bf4:	697b      	ldr	r3, [r7, #20]
 8021bf6:	3324      	adds	r3, #36	@ 0x24
 8021bf8:	687a      	ldr	r2, [r7, #4]
 8021bfa:	68b9      	ldr	r1, [r7, #8]
 8021bfc:	4618      	mov	r0, r3
 8021bfe:	f000 fc93 	bl	8022528 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8021c02:	6978      	ldr	r0, [r7, #20]
 8021c04:	f7ff ff26 	bl	8021a54 <prvUnlockQueue>
	}
 8021c08:	bf00      	nop
 8021c0a:	3718      	adds	r7, #24
 8021c0c:	46bd      	mov	sp, r7
 8021c0e:	bd80      	pop	{r7, pc}

08021c10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8021c10:	b580      	push	{r7, lr}
 8021c12:	b08e      	sub	sp, #56	@ 0x38
 8021c14:	af04      	add	r7, sp, #16
 8021c16:	60f8      	str	r0, [r7, #12]
 8021c18:	60b9      	str	r1, [r7, #8]
 8021c1a:	607a      	str	r2, [r7, #4]
 8021c1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8021c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	d10b      	bne.n	8021c3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8021c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021c28:	f383 8811 	msr	BASEPRI, r3
 8021c2c:	f3bf 8f6f 	isb	sy
 8021c30:	f3bf 8f4f 	dsb	sy
 8021c34:	623b      	str	r3, [r7, #32]
}
 8021c36:	bf00      	nop
 8021c38:	bf00      	nop
 8021c3a:	e7fd      	b.n	8021c38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8021c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c3e:	2b00      	cmp	r3, #0
 8021c40:	d10b      	bne.n	8021c5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8021c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021c46:	f383 8811 	msr	BASEPRI, r3
 8021c4a:	f3bf 8f6f 	isb	sy
 8021c4e:	f3bf 8f4f 	dsb	sy
 8021c52:	61fb      	str	r3, [r7, #28]
}
 8021c54:	bf00      	nop
 8021c56:	bf00      	nop
 8021c58:	e7fd      	b.n	8021c56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8021c5a:	23ac      	movs	r3, #172	@ 0xac
 8021c5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8021c5e:	693b      	ldr	r3, [r7, #16]
 8021c60:	2bac      	cmp	r3, #172	@ 0xac
 8021c62:	d00b      	beq.n	8021c7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8021c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021c68:	f383 8811 	msr	BASEPRI, r3
 8021c6c:	f3bf 8f6f 	isb	sy
 8021c70:	f3bf 8f4f 	dsb	sy
 8021c74:	61bb      	str	r3, [r7, #24]
}
 8021c76:	bf00      	nop
 8021c78:	bf00      	nop
 8021c7a:	e7fd      	b.n	8021c78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8021c7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8021c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d01e      	beq.n	8021cc2 <xTaskCreateStatic+0xb2>
 8021c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d01b      	beq.n	8021cc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8021c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021c8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8021c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8021c92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8021c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c96:	2202      	movs	r2, #2
 8021c98:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8021c9c:	2300      	movs	r3, #0
 8021c9e:	9303      	str	r3, [sp, #12]
 8021ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ca2:	9302      	str	r3, [sp, #8]
 8021ca4:	f107 0314 	add.w	r3, r7, #20
 8021ca8:	9301      	str	r3, [sp, #4]
 8021caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021cac:	9300      	str	r3, [sp, #0]
 8021cae:	683b      	ldr	r3, [r7, #0]
 8021cb0:	687a      	ldr	r2, [r7, #4]
 8021cb2:	68b9      	ldr	r1, [r7, #8]
 8021cb4:	68f8      	ldr	r0, [r7, #12]
 8021cb6:	f000 f851 	bl	8021d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021cba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8021cbc:	f000 f8f8 	bl	8021eb0 <prvAddNewTaskToReadyList>
 8021cc0:	e001      	b.n	8021cc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8021cc2:	2300      	movs	r3, #0
 8021cc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8021cc6:	697b      	ldr	r3, [r7, #20]
	}
 8021cc8:	4618      	mov	r0, r3
 8021cca:	3728      	adds	r7, #40	@ 0x28
 8021ccc:	46bd      	mov	sp, r7
 8021cce:	bd80      	pop	{r7, pc}

08021cd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8021cd0:	b580      	push	{r7, lr}
 8021cd2:	b08c      	sub	sp, #48	@ 0x30
 8021cd4:	af04      	add	r7, sp, #16
 8021cd6:	60f8      	str	r0, [r7, #12]
 8021cd8:	60b9      	str	r1, [r7, #8]
 8021cda:	603b      	str	r3, [r7, #0]
 8021cdc:	4613      	mov	r3, r2
 8021cde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8021ce0:	88fb      	ldrh	r3, [r7, #6]
 8021ce2:	009b      	lsls	r3, r3, #2
 8021ce4:	4618      	mov	r0, r3
 8021ce6:	f001 fde9 	bl	80238bc <pvPortMalloc>
 8021cea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8021cec:	697b      	ldr	r3, [r7, #20]
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d00e      	beq.n	8021d10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021cf2:	20ac      	movs	r0, #172	@ 0xac
 8021cf4:	f001 fde2 	bl	80238bc <pvPortMalloc>
 8021cf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021cfa:	69fb      	ldr	r3, [r7, #28]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d003      	beq.n	8021d08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8021d00:	69fb      	ldr	r3, [r7, #28]
 8021d02:	697a      	ldr	r2, [r7, #20]
 8021d04:	631a      	str	r2, [r3, #48]	@ 0x30
 8021d06:	e005      	b.n	8021d14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8021d08:	6978      	ldr	r0, [r7, #20]
 8021d0a:	f001 fe1d 	bl	8023948 <vPortFree>
 8021d0e:	e001      	b.n	8021d14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8021d10:	2300      	movs	r3, #0
 8021d12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8021d14:	69fb      	ldr	r3, [r7, #28]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d017      	beq.n	8021d4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8021d1a:	69fb      	ldr	r3, [r7, #28]
 8021d1c:	2200      	movs	r2, #0
 8021d1e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8021d22:	88fa      	ldrh	r2, [r7, #6]
 8021d24:	2300      	movs	r3, #0
 8021d26:	9303      	str	r3, [sp, #12]
 8021d28:	69fb      	ldr	r3, [r7, #28]
 8021d2a:	9302      	str	r3, [sp, #8]
 8021d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d2e:	9301      	str	r3, [sp, #4]
 8021d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d32:	9300      	str	r3, [sp, #0]
 8021d34:	683b      	ldr	r3, [r7, #0]
 8021d36:	68b9      	ldr	r1, [r7, #8]
 8021d38:	68f8      	ldr	r0, [r7, #12]
 8021d3a:	f000 f80f 	bl	8021d5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021d3e:	69f8      	ldr	r0, [r7, #28]
 8021d40:	f000 f8b6 	bl	8021eb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8021d44:	2301      	movs	r3, #1
 8021d46:	61bb      	str	r3, [r7, #24]
 8021d48:	e002      	b.n	8021d50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8021d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8021d4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8021d50:	69bb      	ldr	r3, [r7, #24]
	}
 8021d52:	4618      	mov	r0, r3
 8021d54:	3720      	adds	r7, #32
 8021d56:	46bd      	mov	sp, r7
 8021d58:	bd80      	pop	{r7, pc}
	...

08021d5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8021d5c:	b580      	push	{r7, lr}
 8021d5e:	b088      	sub	sp, #32
 8021d60:	af00      	add	r7, sp, #0
 8021d62:	60f8      	str	r0, [r7, #12]
 8021d64:	60b9      	str	r1, [r7, #8]
 8021d66:	607a      	str	r2, [r7, #4]
 8021d68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8021d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8021d6e:	687b      	ldr	r3, [r7, #4]
 8021d70:	009b      	lsls	r3, r3, #2
 8021d72:	461a      	mov	r2, r3
 8021d74:	21a5      	movs	r1, #165	@ 0xa5
 8021d76:	f00b ff0b 	bl	802db90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8021d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021d7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8021d7e:	687b      	ldr	r3, [r7, #4]
 8021d80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8021d84:	3b01      	subs	r3, #1
 8021d86:	009b      	lsls	r3, r3, #2
 8021d88:	4413      	add	r3, r2
 8021d8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8021d8c:	69bb      	ldr	r3, [r7, #24]
 8021d8e:	f023 0307 	bic.w	r3, r3, #7
 8021d92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8021d94:	69bb      	ldr	r3, [r7, #24]
 8021d96:	f003 0307 	and.w	r3, r3, #7
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	d00b      	beq.n	8021db6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8021d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021da2:	f383 8811 	msr	BASEPRI, r3
 8021da6:	f3bf 8f6f 	isb	sy
 8021daa:	f3bf 8f4f 	dsb	sy
 8021dae:	617b      	str	r3, [r7, #20]
}
 8021db0:	bf00      	nop
 8021db2:	bf00      	nop
 8021db4:	e7fd      	b.n	8021db2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8021db6:	68bb      	ldr	r3, [r7, #8]
 8021db8:	2b00      	cmp	r3, #0
 8021dba:	d01f      	beq.n	8021dfc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021dbc:	2300      	movs	r3, #0
 8021dbe:	61fb      	str	r3, [r7, #28]
 8021dc0:	e012      	b.n	8021de8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8021dc2:	68ba      	ldr	r2, [r7, #8]
 8021dc4:	69fb      	ldr	r3, [r7, #28]
 8021dc6:	4413      	add	r3, r2
 8021dc8:	7819      	ldrb	r1, [r3, #0]
 8021dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021dcc:	69fb      	ldr	r3, [r7, #28]
 8021dce:	4413      	add	r3, r2
 8021dd0:	3334      	adds	r3, #52	@ 0x34
 8021dd2:	460a      	mov	r2, r1
 8021dd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8021dd6:	68ba      	ldr	r2, [r7, #8]
 8021dd8:	69fb      	ldr	r3, [r7, #28]
 8021dda:	4413      	add	r3, r2
 8021ddc:	781b      	ldrb	r3, [r3, #0]
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	d006      	beq.n	8021df0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021de2:	69fb      	ldr	r3, [r7, #28]
 8021de4:	3301      	adds	r3, #1
 8021de6:	61fb      	str	r3, [r7, #28]
 8021de8:	69fb      	ldr	r3, [r7, #28]
 8021dea:	2b0f      	cmp	r3, #15
 8021dec:	d9e9      	bls.n	8021dc2 <prvInitialiseNewTask+0x66>
 8021dee:	e000      	b.n	8021df2 <prvInitialiseNewTask+0x96>
			{
				break;
 8021df0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8021df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021df4:	2200      	movs	r2, #0
 8021df6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8021dfa:	e003      	b.n	8021e04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8021dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021dfe:	2200      	movs	r2, #0
 8021e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8021e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e06:	2b37      	cmp	r3, #55	@ 0x37
 8021e08:	d901      	bls.n	8021e0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8021e0a:	2337      	movs	r3, #55	@ 0x37
 8021e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021e12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8021e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021e18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8021e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e1c:	2200      	movs	r2, #0
 8021e1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8021e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e22:	3304      	adds	r3, #4
 8021e24:	4618      	mov	r0, r3
 8021e26:	f7fe fda5 	bl	8020974 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8021e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e2c:	3318      	adds	r3, #24
 8021e2e:	4618      	mov	r0, r3
 8021e30:	f7fe fda0 	bl	8020974 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8021e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021e38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8021e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8021e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021e48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8021e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e4c:	2200      	movs	r2, #0
 8021e4e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8021e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e52:	2200      	movs	r2, #0
 8021e54:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e5a:	2200      	movs	r2, #0
 8021e5c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8021e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e62:	3358      	adds	r3, #88	@ 0x58
 8021e64:	224c      	movs	r2, #76	@ 0x4c
 8021e66:	2100      	movs	r1, #0
 8021e68:	4618      	mov	r0, r3
 8021e6a:	f00b fe91 	bl	802db90 <memset>
 8021e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e70:	4a0c      	ldr	r2, [pc, #48]	@ (8021ea4 <prvInitialiseNewTask+0x148>)
 8021e72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8021e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e76:	4a0c      	ldr	r2, [pc, #48]	@ (8021ea8 <prvInitialiseNewTask+0x14c>)
 8021e78:	661a      	str	r2, [r3, #96]	@ 0x60
 8021e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8021eac <prvInitialiseNewTask+0x150>)
 8021e7e:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8021e80:	683a      	ldr	r2, [r7, #0]
 8021e82:	68f9      	ldr	r1, [r7, #12]
 8021e84:	69b8      	ldr	r0, [r7, #24]
 8021e86:	f001 fac5 	bl	8023414 <pxPortInitialiseStack>
 8021e8a:	4602      	mov	r2, r0
 8021e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021e8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8021e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	d002      	beq.n	8021e9c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8021e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021e9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021e9c:	bf00      	nop
 8021e9e:	3720      	adds	r7, #32
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	bd80      	pop	{r7, pc}
 8021ea4:	2000d9d0 	.word	0x2000d9d0
 8021ea8:	2000da38 	.word	0x2000da38
 8021eac:	2000daa0 	.word	0x2000daa0

08021eb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b082      	sub	sp, #8
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021eb8:	f001 fbde 	bl	8023678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8021f74 <prvAddNewTaskToReadyList+0xc4>)
 8021ebe:	681b      	ldr	r3, [r3, #0]
 8021ec0:	3301      	adds	r3, #1
 8021ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8021f74 <prvAddNewTaskToReadyList+0xc4>)
 8021ec4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8021f78 <prvAddNewTaskToReadyList+0xc8>)
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d109      	bne.n	8021ee2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8021ece:	4a2a      	ldr	r2, [pc, #168]	@ (8021f78 <prvAddNewTaskToReadyList+0xc8>)
 8021ed0:	687b      	ldr	r3, [r7, #4]
 8021ed2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021ed4:	4b27      	ldr	r3, [pc, #156]	@ (8021f74 <prvAddNewTaskToReadyList+0xc4>)
 8021ed6:	681b      	ldr	r3, [r3, #0]
 8021ed8:	2b01      	cmp	r3, #1
 8021eda:	d110      	bne.n	8021efe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021edc:	f000 fc52 	bl	8022784 <prvInitialiseTaskLists>
 8021ee0:	e00d      	b.n	8021efe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8021ee2:	4b26      	ldr	r3, [pc, #152]	@ (8021f7c <prvAddNewTaskToReadyList+0xcc>)
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d109      	bne.n	8021efe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021eea:	4b23      	ldr	r3, [pc, #140]	@ (8021f78 <prvAddNewTaskToReadyList+0xc8>)
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021ef0:	687b      	ldr	r3, [r7, #4]
 8021ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021ef4:	429a      	cmp	r2, r3
 8021ef6:	d802      	bhi.n	8021efe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8021f78 <prvAddNewTaskToReadyList+0xc8>)
 8021efa:	687b      	ldr	r3, [r7, #4]
 8021efc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8021efe:	4b20      	ldr	r3, [pc, #128]	@ (8021f80 <prvAddNewTaskToReadyList+0xd0>)
 8021f00:	681b      	ldr	r3, [r3, #0]
 8021f02:	3301      	adds	r3, #1
 8021f04:	4a1e      	ldr	r2, [pc, #120]	@ (8021f80 <prvAddNewTaskToReadyList+0xd0>)
 8021f06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021f08:	4b1d      	ldr	r3, [pc, #116]	@ (8021f80 <prvAddNewTaskToReadyList+0xd0>)
 8021f0a:	681a      	ldr	r2, [r3, #0]
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021f14:	4b1b      	ldr	r3, [pc, #108]	@ (8021f84 <prvAddNewTaskToReadyList+0xd4>)
 8021f16:	681b      	ldr	r3, [r3, #0]
 8021f18:	429a      	cmp	r2, r3
 8021f1a:	d903      	bls.n	8021f24 <prvAddNewTaskToReadyList+0x74>
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f20:	4a18      	ldr	r2, [pc, #96]	@ (8021f84 <prvAddNewTaskToReadyList+0xd4>)
 8021f22:	6013      	str	r3, [r2, #0]
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021f28:	4613      	mov	r3, r2
 8021f2a:	009b      	lsls	r3, r3, #2
 8021f2c:	4413      	add	r3, r2
 8021f2e:	009b      	lsls	r3, r3, #2
 8021f30:	4a15      	ldr	r2, [pc, #84]	@ (8021f88 <prvAddNewTaskToReadyList+0xd8>)
 8021f32:	441a      	add	r2, r3
 8021f34:	687b      	ldr	r3, [r7, #4]
 8021f36:	3304      	adds	r3, #4
 8021f38:	4619      	mov	r1, r3
 8021f3a:	4610      	mov	r0, r2
 8021f3c:	f7fe fd27 	bl	802098e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8021f40:	f001 fbcc 	bl	80236dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021f44:	4b0d      	ldr	r3, [pc, #52]	@ (8021f7c <prvAddNewTaskToReadyList+0xcc>)
 8021f46:	681b      	ldr	r3, [r3, #0]
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	d00e      	beq.n	8021f6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8021f78 <prvAddNewTaskToReadyList+0xc8>)
 8021f4e:	681b      	ldr	r3, [r3, #0]
 8021f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021f56:	429a      	cmp	r2, r3
 8021f58:	d207      	bcs.n	8021f6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8021f8c <prvAddNewTaskToReadyList+0xdc>)
 8021f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021f60:	601a      	str	r2, [r3, #0]
 8021f62:	f3bf 8f4f 	dsb	sy
 8021f66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021f6a:	bf00      	nop
 8021f6c:	3708      	adds	r7, #8
 8021f6e:	46bd      	mov	sp, r7
 8021f70:	bd80      	pop	{r7, pc}
 8021f72:	bf00      	nop
 8021f74:	2000222c 	.word	0x2000222c
 8021f78:	20001d58 	.word	0x20001d58
 8021f7c:	20002238 	.word	0x20002238
 8021f80:	20002248 	.word	0x20002248
 8021f84:	20002234 	.word	0x20002234
 8021f88:	20001d5c 	.word	0x20001d5c
 8021f8c:	e000ed04 	.word	0xe000ed04

08021f90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8021f90:	b580      	push	{r7, lr}
 8021f92:	b084      	sub	sp, #16
 8021f94:	af00      	add	r7, sp, #0
 8021f96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021f98:	2300      	movs	r3, #0
 8021f9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021f9c:	687b      	ldr	r3, [r7, #4]
 8021f9e:	2b00      	cmp	r3, #0
 8021fa0:	d018      	beq.n	8021fd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8021fa2:	4b14      	ldr	r3, [pc, #80]	@ (8021ff4 <vTaskDelay+0x64>)
 8021fa4:	681b      	ldr	r3, [r3, #0]
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d00b      	beq.n	8021fc2 <vTaskDelay+0x32>
	__asm volatile
 8021faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8021fae:	f383 8811 	msr	BASEPRI, r3
 8021fb2:	f3bf 8f6f 	isb	sy
 8021fb6:	f3bf 8f4f 	dsb	sy
 8021fba:	60bb      	str	r3, [r7, #8]
}
 8021fbc:	bf00      	nop
 8021fbe:	bf00      	nop
 8021fc0:	e7fd      	b.n	8021fbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8021fc2:	f000 f88d 	bl	80220e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021fc6:	2100      	movs	r1, #0
 8021fc8:	6878      	ldr	r0, [r7, #4]
 8021fca:	f000 fe75 	bl	8022cb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021fce:	f000 f895 	bl	80220fc <xTaskResumeAll>
 8021fd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8021fd4:	68fb      	ldr	r3, [r7, #12]
 8021fd6:	2b00      	cmp	r3, #0
 8021fd8:	d107      	bne.n	8021fea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8021fda:	4b07      	ldr	r3, [pc, #28]	@ (8021ff8 <vTaskDelay+0x68>)
 8021fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8021fe0:	601a      	str	r2, [r3, #0]
 8021fe2:	f3bf 8f4f 	dsb	sy
 8021fe6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021fea:	bf00      	nop
 8021fec:	3710      	adds	r7, #16
 8021fee:	46bd      	mov	sp, r7
 8021ff0:	bd80      	pop	{r7, pc}
 8021ff2:	bf00      	nop
 8021ff4:	20002254 	.word	0x20002254
 8021ff8:	e000ed04 	.word	0xe000ed04

08021ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b08a      	sub	sp, #40	@ 0x28
 8022000:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8022002:	2300      	movs	r3, #0
 8022004:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8022006:	2300      	movs	r3, #0
 8022008:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 802200a:	463a      	mov	r2, r7
 802200c:	1d39      	adds	r1, r7, #4
 802200e:	f107 0308 	add.w	r3, r7, #8
 8022012:	4618      	mov	r0, r3
 8022014:	f7fe fc5a 	bl	80208cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8022018:	6839      	ldr	r1, [r7, #0]
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	68ba      	ldr	r2, [r7, #8]
 802201e:	9202      	str	r2, [sp, #8]
 8022020:	9301      	str	r3, [sp, #4]
 8022022:	2300      	movs	r3, #0
 8022024:	9300      	str	r3, [sp, #0]
 8022026:	2300      	movs	r3, #0
 8022028:	460a      	mov	r2, r1
 802202a:	4925      	ldr	r1, [pc, #148]	@ (80220c0 <vTaskStartScheduler+0xc4>)
 802202c:	4825      	ldr	r0, [pc, #148]	@ (80220c4 <vTaskStartScheduler+0xc8>)
 802202e:	f7ff fdef 	bl	8021c10 <xTaskCreateStatic>
 8022032:	4603      	mov	r3, r0
 8022034:	4a24      	ldr	r2, [pc, #144]	@ (80220c8 <vTaskStartScheduler+0xcc>)
 8022036:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8022038:	4b23      	ldr	r3, [pc, #140]	@ (80220c8 <vTaskStartScheduler+0xcc>)
 802203a:	681b      	ldr	r3, [r3, #0]
 802203c:	2b00      	cmp	r3, #0
 802203e:	d002      	beq.n	8022046 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8022040:	2301      	movs	r3, #1
 8022042:	617b      	str	r3, [r7, #20]
 8022044:	e001      	b.n	802204a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8022046:	2300      	movs	r3, #0
 8022048:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 802204a:	697b      	ldr	r3, [r7, #20]
 802204c:	2b01      	cmp	r3, #1
 802204e:	d102      	bne.n	8022056 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8022050:	f000 fe86 	bl	8022d60 <xTimerCreateTimerTask>
 8022054:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8022056:	697b      	ldr	r3, [r7, #20]
 8022058:	2b01      	cmp	r3, #1
 802205a:	d11d      	bne.n	8022098 <vTaskStartScheduler+0x9c>
	__asm volatile
 802205c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022060:	f383 8811 	msr	BASEPRI, r3
 8022064:	f3bf 8f6f 	isb	sy
 8022068:	f3bf 8f4f 	dsb	sy
 802206c:	613b      	str	r3, [r7, #16]
}
 802206e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8022070:	4b16      	ldr	r3, [pc, #88]	@ (80220cc <vTaskStartScheduler+0xd0>)
 8022072:	681b      	ldr	r3, [r3, #0]
 8022074:	3358      	adds	r3, #88	@ 0x58
 8022076:	4a16      	ldr	r2, [pc, #88]	@ (80220d0 <vTaskStartScheduler+0xd4>)
 8022078:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 802207a:	4b16      	ldr	r3, [pc, #88]	@ (80220d4 <vTaskStartScheduler+0xd8>)
 802207c:	f04f 32ff 	mov.w	r2, #4294967295
 8022080:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8022082:	4b15      	ldr	r3, [pc, #84]	@ (80220d8 <vTaskStartScheduler+0xdc>)
 8022084:	2201      	movs	r2, #1
 8022086:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8022088:	4b14      	ldr	r3, [pc, #80]	@ (80220dc <vTaskStartScheduler+0xe0>)
 802208a:	2200      	movs	r2, #0
 802208c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 802208e:	f7ee ffd5 	bl	801103c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8022092:	f001 fa4d 	bl	8023530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8022096:	e00f      	b.n	80220b8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8022098:	697b      	ldr	r3, [r7, #20]
 802209a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802209e:	d10b      	bne.n	80220b8 <vTaskStartScheduler+0xbc>
	__asm volatile
 80220a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80220a4:	f383 8811 	msr	BASEPRI, r3
 80220a8:	f3bf 8f6f 	isb	sy
 80220ac:	f3bf 8f4f 	dsb	sy
 80220b0:	60fb      	str	r3, [r7, #12]
}
 80220b2:	bf00      	nop
 80220b4:	bf00      	nop
 80220b6:	e7fd      	b.n	80220b4 <vTaskStartScheduler+0xb8>
}
 80220b8:	bf00      	nop
 80220ba:	3718      	adds	r7, #24
 80220bc:	46bd      	mov	sp, r7
 80220be:	bd80      	pop	{r7, pc}
 80220c0:	080337e0 	.word	0x080337e0
 80220c4:	08022755 	.word	0x08022755
 80220c8:	20002250 	.word	0x20002250
 80220cc:	20001d58 	.word	0x20001d58
 80220d0:	2000013c 	.word	0x2000013c
 80220d4:	2000224c 	.word	0x2000224c
 80220d8:	20002238 	.word	0x20002238
 80220dc:	20002230 	.word	0x20002230

080220e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80220e0:	b480      	push	{r7}
 80220e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80220e4:	4b04      	ldr	r3, [pc, #16]	@ (80220f8 <vTaskSuspendAll+0x18>)
 80220e6:	681b      	ldr	r3, [r3, #0]
 80220e8:	3301      	adds	r3, #1
 80220ea:	4a03      	ldr	r2, [pc, #12]	@ (80220f8 <vTaskSuspendAll+0x18>)
 80220ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80220ee:	bf00      	nop
 80220f0:	46bd      	mov	sp, r7
 80220f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220f6:	4770      	bx	lr
 80220f8:	20002254 	.word	0x20002254

080220fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80220fc:	b580      	push	{r7, lr}
 80220fe:	b084      	sub	sp, #16
 8022100:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8022102:	2300      	movs	r3, #0
 8022104:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8022106:	2300      	movs	r3, #0
 8022108:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802210a:	4b42      	ldr	r3, [pc, #264]	@ (8022214 <xTaskResumeAll+0x118>)
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	2b00      	cmp	r3, #0
 8022110:	d10b      	bne.n	802212a <xTaskResumeAll+0x2e>
	__asm volatile
 8022112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022116:	f383 8811 	msr	BASEPRI, r3
 802211a:	f3bf 8f6f 	isb	sy
 802211e:	f3bf 8f4f 	dsb	sy
 8022122:	603b      	str	r3, [r7, #0]
}
 8022124:	bf00      	nop
 8022126:	bf00      	nop
 8022128:	e7fd      	b.n	8022126 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 802212a:	f001 faa5 	bl	8023678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802212e:	4b39      	ldr	r3, [pc, #228]	@ (8022214 <xTaskResumeAll+0x118>)
 8022130:	681b      	ldr	r3, [r3, #0]
 8022132:	3b01      	subs	r3, #1
 8022134:	4a37      	ldr	r2, [pc, #220]	@ (8022214 <xTaskResumeAll+0x118>)
 8022136:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022138:	4b36      	ldr	r3, [pc, #216]	@ (8022214 <xTaskResumeAll+0x118>)
 802213a:	681b      	ldr	r3, [r3, #0]
 802213c:	2b00      	cmp	r3, #0
 802213e:	d162      	bne.n	8022206 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8022140:	4b35      	ldr	r3, [pc, #212]	@ (8022218 <xTaskResumeAll+0x11c>)
 8022142:	681b      	ldr	r3, [r3, #0]
 8022144:	2b00      	cmp	r3, #0
 8022146:	d05e      	beq.n	8022206 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022148:	e02f      	b.n	80221aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802214a:	4b34      	ldr	r3, [pc, #208]	@ (802221c <xTaskResumeAll+0x120>)
 802214c:	68db      	ldr	r3, [r3, #12]
 802214e:	68db      	ldr	r3, [r3, #12]
 8022150:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022152:	68fb      	ldr	r3, [r7, #12]
 8022154:	3318      	adds	r3, #24
 8022156:	4618      	mov	r0, r3
 8022158:	f7fe fc76 	bl	8020a48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	3304      	adds	r3, #4
 8022160:	4618      	mov	r0, r3
 8022162:	f7fe fc71 	bl	8020a48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8022166:	68fb      	ldr	r3, [r7, #12]
 8022168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802216a:	4b2d      	ldr	r3, [pc, #180]	@ (8022220 <xTaskResumeAll+0x124>)
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	429a      	cmp	r2, r3
 8022170:	d903      	bls.n	802217a <xTaskResumeAll+0x7e>
 8022172:	68fb      	ldr	r3, [r7, #12]
 8022174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022176:	4a2a      	ldr	r2, [pc, #168]	@ (8022220 <xTaskResumeAll+0x124>)
 8022178:	6013      	str	r3, [r2, #0]
 802217a:	68fb      	ldr	r3, [r7, #12]
 802217c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802217e:	4613      	mov	r3, r2
 8022180:	009b      	lsls	r3, r3, #2
 8022182:	4413      	add	r3, r2
 8022184:	009b      	lsls	r3, r3, #2
 8022186:	4a27      	ldr	r2, [pc, #156]	@ (8022224 <xTaskResumeAll+0x128>)
 8022188:	441a      	add	r2, r3
 802218a:	68fb      	ldr	r3, [r7, #12]
 802218c:	3304      	adds	r3, #4
 802218e:	4619      	mov	r1, r3
 8022190:	4610      	mov	r0, r2
 8022192:	f7fe fbfc 	bl	802098e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8022196:	68fb      	ldr	r3, [r7, #12]
 8022198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802219a:	4b23      	ldr	r3, [pc, #140]	@ (8022228 <xTaskResumeAll+0x12c>)
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221a0:	429a      	cmp	r2, r3
 80221a2:	d302      	bcc.n	80221aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80221a4:	4b21      	ldr	r3, [pc, #132]	@ (802222c <xTaskResumeAll+0x130>)
 80221a6:	2201      	movs	r2, #1
 80221a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80221aa:	4b1c      	ldr	r3, [pc, #112]	@ (802221c <xTaskResumeAll+0x120>)
 80221ac:	681b      	ldr	r3, [r3, #0]
 80221ae:	2b00      	cmp	r3, #0
 80221b0:	d1cb      	bne.n	802214a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80221b2:	68fb      	ldr	r3, [r7, #12]
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d001      	beq.n	80221bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80221b8:	f000 fbc0 	bl	802293c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80221bc:	4b1c      	ldr	r3, [pc, #112]	@ (8022230 <xTaskResumeAll+0x134>)
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80221c2:	687b      	ldr	r3, [r7, #4]
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	d010      	beq.n	80221ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80221c8:	f000 f846 	bl	8022258 <xTaskIncrementTick>
 80221cc:	4603      	mov	r3, r0
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	d002      	beq.n	80221d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80221d2:	4b16      	ldr	r3, [pc, #88]	@ (802222c <xTaskResumeAll+0x130>)
 80221d4:	2201      	movs	r2, #1
 80221d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80221d8:	687b      	ldr	r3, [r7, #4]
 80221da:	3b01      	subs	r3, #1
 80221dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	2b00      	cmp	r3, #0
 80221e2:	d1f1      	bne.n	80221c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80221e4:	4b12      	ldr	r3, [pc, #72]	@ (8022230 <xTaskResumeAll+0x134>)
 80221e6:	2200      	movs	r2, #0
 80221e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80221ea:	4b10      	ldr	r3, [pc, #64]	@ (802222c <xTaskResumeAll+0x130>)
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d009      	beq.n	8022206 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80221f2:	2301      	movs	r3, #1
 80221f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80221f6:	4b0f      	ldr	r3, [pc, #60]	@ (8022234 <xTaskResumeAll+0x138>)
 80221f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80221fc:	601a      	str	r2, [r3, #0]
 80221fe:	f3bf 8f4f 	dsb	sy
 8022202:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022206:	f001 fa69 	bl	80236dc <vPortExitCritical>

	return xAlreadyYielded;
 802220a:	68bb      	ldr	r3, [r7, #8]
}
 802220c:	4618      	mov	r0, r3
 802220e:	3710      	adds	r7, #16
 8022210:	46bd      	mov	sp, r7
 8022212:	bd80      	pop	{r7, pc}
 8022214:	20002254 	.word	0x20002254
 8022218:	2000222c 	.word	0x2000222c
 802221c:	200021ec 	.word	0x200021ec
 8022220:	20002234 	.word	0x20002234
 8022224:	20001d5c 	.word	0x20001d5c
 8022228:	20001d58 	.word	0x20001d58
 802222c:	20002240 	.word	0x20002240
 8022230:	2000223c 	.word	0x2000223c
 8022234:	e000ed04 	.word	0xe000ed04

08022238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8022238:	b480      	push	{r7}
 802223a:	b083      	sub	sp, #12
 802223c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802223e:	4b05      	ldr	r3, [pc, #20]	@ (8022254 <xTaskGetTickCount+0x1c>)
 8022240:	681b      	ldr	r3, [r3, #0]
 8022242:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8022244:	687b      	ldr	r3, [r7, #4]
}
 8022246:	4618      	mov	r0, r3
 8022248:	370c      	adds	r7, #12
 802224a:	46bd      	mov	sp, r7
 802224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022250:	4770      	bx	lr
 8022252:	bf00      	nop
 8022254:	20002230 	.word	0x20002230

08022258 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8022258:	b580      	push	{r7, lr}
 802225a:	b086      	sub	sp, #24
 802225c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 802225e:	2300      	movs	r3, #0
 8022260:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022262:	4b53      	ldr	r3, [pc, #332]	@ (80223b0 <xTaskIncrementTick+0x158>)
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	2b00      	cmp	r3, #0
 8022268:	f040 8096 	bne.w	8022398 <xTaskIncrementTick+0x140>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 802226c:	4b51      	ldr	r3, [pc, #324]	@ (80223b4 <xTaskIncrementTick+0x15c>)
 802226e:	681b      	ldr	r3, [r3, #0]
 8022270:	3301      	adds	r3, #1
 8022272:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8022274:	4a4f      	ldr	r2, [pc, #316]	@ (80223b4 <xTaskIncrementTick+0x15c>)
 8022276:	693b      	ldr	r3, [r7, #16]
 8022278:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 802227a:	693b      	ldr	r3, [r7, #16]
 802227c:	2b00      	cmp	r3, #0
 802227e:	d121      	bne.n	80222c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8022280:	4b4d      	ldr	r3, [pc, #308]	@ (80223b8 <xTaskIncrementTick+0x160>)
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	681b      	ldr	r3, [r3, #0]
 8022286:	2b00      	cmp	r3, #0
 8022288:	d00b      	beq.n	80222a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 802228a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802228e:	f383 8811 	msr	BASEPRI, r3
 8022292:	f3bf 8f6f 	isb	sy
 8022296:	f3bf 8f4f 	dsb	sy
 802229a:	603b      	str	r3, [r7, #0]
}
 802229c:	bf00      	nop
 802229e:	bf00      	nop
 80222a0:	e7fd      	b.n	802229e <xTaskIncrementTick+0x46>
 80222a2:	4b45      	ldr	r3, [pc, #276]	@ (80223b8 <xTaskIncrementTick+0x160>)
 80222a4:	681b      	ldr	r3, [r3, #0]
 80222a6:	60fb      	str	r3, [r7, #12]
 80222a8:	4b44      	ldr	r3, [pc, #272]	@ (80223bc <xTaskIncrementTick+0x164>)
 80222aa:	681b      	ldr	r3, [r3, #0]
 80222ac:	4a42      	ldr	r2, [pc, #264]	@ (80223b8 <xTaskIncrementTick+0x160>)
 80222ae:	6013      	str	r3, [r2, #0]
 80222b0:	4a42      	ldr	r2, [pc, #264]	@ (80223bc <xTaskIncrementTick+0x164>)
 80222b2:	68fb      	ldr	r3, [r7, #12]
 80222b4:	6013      	str	r3, [r2, #0]
 80222b6:	4b42      	ldr	r3, [pc, #264]	@ (80223c0 <xTaskIncrementTick+0x168>)
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	3301      	adds	r3, #1
 80222bc:	4a40      	ldr	r2, [pc, #256]	@ (80223c0 <xTaskIncrementTick+0x168>)
 80222be:	6013      	str	r3, [r2, #0]
 80222c0:	f000 fb3c 	bl	802293c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80222c4:	4b3f      	ldr	r3, [pc, #252]	@ (80223c4 <xTaskIncrementTick+0x16c>)
 80222c6:	681b      	ldr	r3, [r3, #0]
 80222c8:	693a      	ldr	r2, [r7, #16]
 80222ca:	429a      	cmp	r2, r3
 80222cc:	d349      	bcc.n	8022362 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80222ce:	4b3a      	ldr	r3, [pc, #232]	@ (80223b8 <xTaskIncrementTick+0x160>)
 80222d0:	681b      	ldr	r3, [r3, #0]
 80222d2:	681b      	ldr	r3, [r3, #0]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d104      	bne.n	80222e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80222d8:	4b3a      	ldr	r3, [pc, #232]	@ (80223c4 <xTaskIncrementTick+0x16c>)
 80222da:	f04f 32ff 	mov.w	r2, #4294967295
 80222de:	601a      	str	r2, [r3, #0]
					break;
 80222e0:	e03f      	b.n	8022362 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80222e2:	4b35      	ldr	r3, [pc, #212]	@ (80223b8 <xTaskIncrementTick+0x160>)
 80222e4:	681b      	ldr	r3, [r3, #0]
 80222e6:	68db      	ldr	r3, [r3, #12]
 80222e8:	68db      	ldr	r3, [r3, #12]
 80222ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80222ec:	68bb      	ldr	r3, [r7, #8]
 80222ee:	685b      	ldr	r3, [r3, #4]
 80222f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80222f2:	693a      	ldr	r2, [r7, #16]
 80222f4:	687b      	ldr	r3, [r7, #4]
 80222f6:	429a      	cmp	r2, r3
 80222f8:	d203      	bcs.n	8022302 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80222fa:	4a32      	ldr	r2, [pc, #200]	@ (80223c4 <xTaskIncrementTick+0x16c>)
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8022300:	e02f      	b.n	8022362 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022302:	68bb      	ldr	r3, [r7, #8]
 8022304:	3304      	adds	r3, #4
 8022306:	4618      	mov	r0, r3
 8022308:	f7fe fb9e 	bl	8020a48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802230c:	68bb      	ldr	r3, [r7, #8]
 802230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022310:	2b00      	cmp	r3, #0
 8022312:	d004      	beq.n	802231e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022314:	68bb      	ldr	r3, [r7, #8]
 8022316:	3318      	adds	r3, #24
 8022318:	4618      	mov	r0, r3
 802231a:	f7fe fb95 	bl	8020a48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802231e:	68bb      	ldr	r3, [r7, #8]
 8022320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022322:	4b29      	ldr	r3, [pc, #164]	@ (80223c8 <xTaskIncrementTick+0x170>)
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	429a      	cmp	r2, r3
 8022328:	d903      	bls.n	8022332 <xTaskIncrementTick+0xda>
 802232a:	68bb      	ldr	r3, [r7, #8]
 802232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802232e:	4a26      	ldr	r2, [pc, #152]	@ (80223c8 <xTaskIncrementTick+0x170>)
 8022330:	6013      	str	r3, [r2, #0]
 8022332:	68bb      	ldr	r3, [r7, #8]
 8022334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022336:	4613      	mov	r3, r2
 8022338:	009b      	lsls	r3, r3, #2
 802233a:	4413      	add	r3, r2
 802233c:	009b      	lsls	r3, r3, #2
 802233e:	4a23      	ldr	r2, [pc, #140]	@ (80223cc <xTaskIncrementTick+0x174>)
 8022340:	441a      	add	r2, r3
 8022342:	68bb      	ldr	r3, [r7, #8]
 8022344:	3304      	adds	r3, #4
 8022346:	4619      	mov	r1, r3
 8022348:	4610      	mov	r0, r2
 802234a:	f7fe fb20 	bl	802098e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802234e:	68bb      	ldr	r3, [r7, #8]
 8022350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022352:	4b1f      	ldr	r3, [pc, #124]	@ (80223d0 <xTaskIncrementTick+0x178>)
 8022354:	681b      	ldr	r3, [r3, #0]
 8022356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022358:	429a      	cmp	r2, r3
 802235a:	d3b8      	bcc.n	80222ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 802235c:	2301      	movs	r3, #1
 802235e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022360:	e7b5      	b.n	80222ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8022362:	4b1b      	ldr	r3, [pc, #108]	@ (80223d0 <xTaskIncrementTick+0x178>)
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022368:	4918      	ldr	r1, [pc, #96]	@ (80223cc <xTaskIncrementTick+0x174>)
 802236a:	4613      	mov	r3, r2
 802236c:	009b      	lsls	r3, r3, #2
 802236e:	4413      	add	r3, r2
 8022370:	009b      	lsls	r3, r3, #2
 8022372:	440b      	add	r3, r1
 8022374:	681b      	ldr	r3, [r3, #0]
 8022376:	2b01      	cmp	r3, #1
 8022378:	d901      	bls.n	802237e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 802237a:	2301      	movs	r3, #1
 802237c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 802237e:	4b15      	ldr	r3, [pc, #84]	@ (80223d4 <xTaskIncrementTick+0x17c>)
 8022380:	681b      	ldr	r3, [r3, #0]
 8022382:	2b00      	cmp	r3, #0
 8022384:	d101      	bne.n	802238a <xTaskIncrementTick+0x132>
			{
				vApplicationTickHook();
 8022386:	f7ee fe68 	bl	801105a <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 802238a:	4b13      	ldr	r3, [pc, #76]	@ (80223d8 <xTaskIncrementTick+0x180>)
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	2b00      	cmp	r3, #0
 8022390:	d009      	beq.n	80223a6 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8022392:	2301      	movs	r3, #1
 8022394:	617b      	str	r3, [r7, #20]
 8022396:	e006      	b.n	80223a6 <xTaskIncrementTick+0x14e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8022398:	4b0e      	ldr	r3, [pc, #56]	@ (80223d4 <xTaskIncrementTick+0x17c>)
 802239a:	681b      	ldr	r3, [r3, #0]
 802239c:	3301      	adds	r3, #1
 802239e:	4a0d      	ldr	r2, [pc, #52]	@ (80223d4 <xTaskIncrementTick+0x17c>)
 80223a0:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80223a2:	f7ee fe5a 	bl	801105a <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80223a6:	697b      	ldr	r3, [r7, #20]
}
 80223a8:	4618      	mov	r0, r3
 80223aa:	3718      	adds	r7, #24
 80223ac:	46bd      	mov	sp, r7
 80223ae:	bd80      	pop	{r7, pc}
 80223b0:	20002254 	.word	0x20002254
 80223b4:	20002230 	.word	0x20002230
 80223b8:	200021e4 	.word	0x200021e4
 80223bc:	200021e8 	.word	0x200021e8
 80223c0:	20002244 	.word	0x20002244
 80223c4:	2000224c 	.word	0x2000224c
 80223c8:	20002234 	.word	0x20002234
 80223cc:	20001d5c 	.word	0x20001d5c
 80223d0:	20001d58 	.word	0x20001d58
 80223d4:	2000223c 	.word	0x2000223c
 80223d8:	20002240 	.word	0x20002240

080223dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80223dc:	b580      	push	{r7, lr}
 80223de:	b084      	sub	sp, #16
 80223e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80223e2:	4b36      	ldr	r3, [pc, #216]	@ (80224bc <vTaskSwitchContext+0xe0>)
 80223e4:	681b      	ldr	r3, [r3, #0]
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d003      	beq.n	80223f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80223ea:	4b35      	ldr	r3, [pc, #212]	@ (80224c0 <vTaskSwitchContext+0xe4>)
 80223ec:	2201      	movs	r2, #1
 80223ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80223f0:	e060      	b.n	80224b4 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 80223f2:	4b33      	ldr	r3, [pc, #204]	@ (80224c0 <vTaskSwitchContext+0xe4>)
 80223f4:	2200      	movs	r2, #0
 80223f6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80223f8:	f7ee fe27 	bl	801104a <getRunTimeCounterValue>
 80223fc:	4603      	mov	r3, r0
 80223fe:	4a31      	ldr	r2, [pc, #196]	@ (80224c4 <vTaskSwitchContext+0xe8>)
 8022400:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8022402:	4b30      	ldr	r3, [pc, #192]	@ (80224c4 <vTaskSwitchContext+0xe8>)
 8022404:	681a      	ldr	r2, [r3, #0]
 8022406:	4b30      	ldr	r3, [pc, #192]	@ (80224c8 <vTaskSwitchContext+0xec>)
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	429a      	cmp	r2, r3
 802240c:	d909      	bls.n	8022422 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 802240e:	4b2f      	ldr	r3, [pc, #188]	@ (80224cc <vTaskSwitchContext+0xf0>)
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8022414:	4a2b      	ldr	r2, [pc, #172]	@ (80224c4 <vTaskSwitchContext+0xe8>)
 8022416:	6810      	ldr	r0, [r2, #0]
 8022418:	4a2b      	ldr	r2, [pc, #172]	@ (80224c8 <vTaskSwitchContext+0xec>)
 802241a:	6812      	ldr	r2, [r2, #0]
 802241c:	1a82      	subs	r2, r0, r2
 802241e:	440a      	add	r2, r1
 8022420:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8022422:	4b28      	ldr	r3, [pc, #160]	@ (80224c4 <vTaskSwitchContext+0xe8>)
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	4a28      	ldr	r2, [pc, #160]	@ (80224c8 <vTaskSwitchContext+0xec>)
 8022428:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802242a:	4b29      	ldr	r3, [pc, #164]	@ (80224d0 <vTaskSwitchContext+0xf4>)
 802242c:	681b      	ldr	r3, [r3, #0]
 802242e:	60fb      	str	r3, [r7, #12]
 8022430:	e011      	b.n	8022456 <vTaskSwitchContext+0x7a>
 8022432:	68fb      	ldr	r3, [r7, #12]
 8022434:	2b00      	cmp	r3, #0
 8022436:	d10b      	bne.n	8022450 <vTaskSwitchContext+0x74>
	__asm volatile
 8022438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802243c:	f383 8811 	msr	BASEPRI, r3
 8022440:	f3bf 8f6f 	isb	sy
 8022444:	f3bf 8f4f 	dsb	sy
 8022448:	607b      	str	r3, [r7, #4]
}
 802244a:	bf00      	nop
 802244c:	bf00      	nop
 802244e:	e7fd      	b.n	802244c <vTaskSwitchContext+0x70>
 8022450:	68fb      	ldr	r3, [r7, #12]
 8022452:	3b01      	subs	r3, #1
 8022454:	60fb      	str	r3, [r7, #12]
 8022456:	491f      	ldr	r1, [pc, #124]	@ (80224d4 <vTaskSwitchContext+0xf8>)
 8022458:	68fa      	ldr	r2, [r7, #12]
 802245a:	4613      	mov	r3, r2
 802245c:	009b      	lsls	r3, r3, #2
 802245e:	4413      	add	r3, r2
 8022460:	009b      	lsls	r3, r3, #2
 8022462:	440b      	add	r3, r1
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	2b00      	cmp	r3, #0
 8022468:	d0e3      	beq.n	8022432 <vTaskSwitchContext+0x56>
 802246a:	68fa      	ldr	r2, [r7, #12]
 802246c:	4613      	mov	r3, r2
 802246e:	009b      	lsls	r3, r3, #2
 8022470:	4413      	add	r3, r2
 8022472:	009b      	lsls	r3, r3, #2
 8022474:	4a17      	ldr	r2, [pc, #92]	@ (80224d4 <vTaskSwitchContext+0xf8>)
 8022476:	4413      	add	r3, r2
 8022478:	60bb      	str	r3, [r7, #8]
 802247a:	68bb      	ldr	r3, [r7, #8]
 802247c:	685b      	ldr	r3, [r3, #4]
 802247e:	685a      	ldr	r2, [r3, #4]
 8022480:	68bb      	ldr	r3, [r7, #8]
 8022482:	605a      	str	r2, [r3, #4]
 8022484:	68bb      	ldr	r3, [r7, #8]
 8022486:	685a      	ldr	r2, [r3, #4]
 8022488:	68bb      	ldr	r3, [r7, #8]
 802248a:	3308      	adds	r3, #8
 802248c:	429a      	cmp	r2, r3
 802248e:	d104      	bne.n	802249a <vTaskSwitchContext+0xbe>
 8022490:	68bb      	ldr	r3, [r7, #8]
 8022492:	685b      	ldr	r3, [r3, #4]
 8022494:	685a      	ldr	r2, [r3, #4]
 8022496:	68bb      	ldr	r3, [r7, #8]
 8022498:	605a      	str	r2, [r3, #4]
 802249a:	68bb      	ldr	r3, [r7, #8]
 802249c:	685b      	ldr	r3, [r3, #4]
 802249e:	68db      	ldr	r3, [r3, #12]
 80224a0:	4a0a      	ldr	r2, [pc, #40]	@ (80224cc <vTaskSwitchContext+0xf0>)
 80224a2:	6013      	str	r3, [r2, #0]
 80224a4:	4a0a      	ldr	r2, [pc, #40]	@ (80224d0 <vTaskSwitchContext+0xf4>)
 80224a6:	68fb      	ldr	r3, [r7, #12]
 80224a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80224aa:	4b08      	ldr	r3, [pc, #32]	@ (80224cc <vTaskSwitchContext+0xf0>)
 80224ac:	681b      	ldr	r3, [r3, #0]
 80224ae:	3358      	adds	r3, #88	@ 0x58
 80224b0:	4a09      	ldr	r2, [pc, #36]	@ (80224d8 <vTaskSwitchContext+0xfc>)
 80224b2:	6013      	str	r3, [r2, #0]
}
 80224b4:	bf00      	nop
 80224b6:	3710      	adds	r7, #16
 80224b8:	46bd      	mov	sp, r7
 80224ba:	bd80      	pop	{r7, pc}
 80224bc:	20002254 	.word	0x20002254
 80224c0:	20002240 	.word	0x20002240
 80224c4:	2000225c 	.word	0x2000225c
 80224c8:	20002258 	.word	0x20002258
 80224cc:	20001d58 	.word	0x20001d58
 80224d0:	20002234 	.word	0x20002234
 80224d4:	20001d5c 	.word	0x20001d5c
 80224d8:	2000013c 	.word	0x2000013c

080224dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80224dc:	b580      	push	{r7, lr}
 80224de:	b084      	sub	sp, #16
 80224e0:	af00      	add	r7, sp, #0
 80224e2:	6078      	str	r0, [r7, #4]
 80224e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	2b00      	cmp	r3, #0
 80224ea:	d10b      	bne.n	8022504 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80224ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80224f0:	f383 8811 	msr	BASEPRI, r3
 80224f4:	f3bf 8f6f 	isb	sy
 80224f8:	f3bf 8f4f 	dsb	sy
 80224fc:	60fb      	str	r3, [r7, #12]
}
 80224fe:	bf00      	nop
 8022500:	bf00      	nop
 8022502:	e7fd      	b.n	8022500 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022504:	4b07      	ldr	r3, [pc, #28]	@ (8022524 <vTaskPlaceOnEventList+0x48>)
 8022506:	681b      	ldr	r3, [r3, #0]
 8022508:	3318      	adds	r3, #24
 802250a:	4619      	mov	r1, r3
 802250c:	6878      	ldr	r0, [r7, #4]
 802250e:	f7fe fa62 	bl	80209d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022512:	2101      	movs	r1, #1
 8022514:	6838      	ldr	r0, [r7, #0]
 8022516:	f000 fbcf 	bl	8022cb8 <prvAddCurrentTaskToDelayedList>
}
 802251a:	bf00      	nop
 802251c:	3710      	adds	r7, #16
 802251e:	46bd      	mov	sp, r7
 8022520:	bd80      	pop	{r7, pc}
 8022522:	bf00      	nop
 8022524:	20001d58 	.word	0x20001d58

08022528 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022528:	b580      	push	{r7, lr}
 802252a:	b086      	sub	sp, #24
 802252c:	af00      	add	r7, sp, #0
 802252e:	60f8      	str	r0, [r7, #12]
 8022530:	60b9      	str	r1, [r7, #8]
 8022532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8022534:	68fb      	ldr	r3, [r7, #12]
 8022536:	2b00      	cmp	r3, #0
 8022538:	d10b      	bne.n	8022552 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 802253a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802253e:	f383 8811 	msr	BASEPRI, r3
 8022542:	f3bf 8f6f 	isb	sy
 8022546:	f3bf 8f4f 	dsb	sy
 802254a:	617b      	str	r3, [r7, #20]
}
 802254c:	bf00      	nop
 802254e:	bf00      	nop
 8022550:	e7fd      	b.n	802254e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022552:	4b0a      	ldr	r3, [pc, #40]	@ (802257c <vTaskPlaceOnEventListRestricted+0x54>)
 8022554:	681b      	ldr	r3, [r3, #0]
 8022556:	3318      	adds	r3, #24
 8022558:	4619      	mov	r1, r3
 802255a:	68f8      	ldr	r0, [r7, #12]
 802255c:	f7fe fa17 	bl	802098e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	2b00      	cmp	r3, #0
 8022564:	d002      	beq.n	802256c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8022566:	f04f 33ff 	mov.w	r3, #4294967295
 802256a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 802256c:	6879      	ldr	r1, [r7, #4]
 802256e:	68b8      	ldr	r0, [r7, #8]
 8022570:	f000 fba2 	bl	8022cb8 <prvAddCurrentTaskToDelayedList>
	}
 8022574:	bf00      	nop
 8022576:	3718      	adds	r7, #24
 8022578:	46bd      	mov	sp, r7
 802257a:	bd80      	pop	{r7, pc}
 802257c:	20001d58 	.word	0x20001d58

08022580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8022580:	b580      	push	{r7, lr}
 8022582:	b086      	sub	sp, #24
 8022584:	af00      	add	r7, sp, #0
 8022586:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022588:	687b      	ldr	r3, [r7, #4]
 802258a:	68db      	ldr	r3, [r3, #12]
 802258c:	68db      	ldr	r3, [r3, #12]
 802258e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8022590:	693b      	ldr	r3, [r7, #16]
 8022592:	2b00      	cmp	r3, #0
 8022594:	d10b      	bne.n	80225ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8022596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802259a:	f383 8811 	msr	BASEPRI, r3
 802259e:	f3bf 8f6f 	isb	sy
 80225a2:	f3bf 8f4f 	dsb	sy
 80225a6:	60fb      	str	r3, [r7, #12]
}
 80225a8:	bf00      	nop
 80225aa:	bf00      	nop
 80225ac:	e7fd      	b.n	80225aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80225ae:	693b      	ldr	r3, [r7, #16]
 80225b0:	3318      	adds	r3, #24
 80225b2:	4618      	mov	r0, r3
 80225b4:	f7fe fa48 	bl	8020a48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80225b8:	4b1d      	ldr	r3, [pc, #116]	@ (8022630 <xTaskRemoveFromEventList+0xb0>)
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	2b00      	cmp	r3, #0
 80225be:	d11d      	bne.n	80225fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80225c0:	693b      	ldr	r3, [r7, #16]
 80225c2:	3304      	adds	r3, #4
 80225c4:	4618      	mov	r0, r3
 80225c6:	f7fe fa3f 	bl	8020a48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80225ca:	693b      	ldr	r3, [r7, #16]
 80225cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80225ce:	4b19      	ldr	r3, [pc, #100]	@ (8022634 <xTaskRemoveFromEventList+0xb4>)
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	429a      	cmp	r2, r3
 80225d4:	d903      	bls.n	80225de <xTaskRemoveFromEventList+0x5e>
 80225d6:	693b      	ldr	r3, [r7, #16]
 80225d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80225da:	4a16      	ldr	r2, [pc, #88]	@ (8022634 <xTaskRemoveFromEventList+0xb4>)
 80225dc:	6013      	str	r3, [r2, #0]
 80225de:	693b      	ldr	r3, [r7, #16]
 80225e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80225e2:	4613      	mov	r3, r2
 80225e4:	009b      	lsls	r3, r3, #2
 80225e6:	4413      	add	r3, r2
 80225e8:	009b      	lsls	r3, r3, #2
 80225ea:	4a13      	ldr	r2, [pc, #76]	@ (8022638 <xTaskRemoveFromEventList+0xb8>)
 80225ec:	441a      	add	r2, r3
 80225ee:	693b      	ldr	r3, [r7, #16]
 80225f0:	3304      	adds	r3, #4
 80225f2:	4619      	mov	r1, r3
 80225f4:	4610      	mov	r0, r2
 80225f6:	f7fe f9ca 	bl	802098e <vListInsertEnd>
 80225fa:	e005      	b.n	8022608 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80225fc:	693b      	ldr	r3, [r7, #16]
 80225fe:	3318      	adds	r3, #24
 8022600:	4619      	mov	r1, r3
 8022602:	480e      	ldr	r0, [pc, #56]	@ (802263c <xTaskRemoveFromEventList+0xbc>)
 8022604:	f7fe f9c3 	bl	802098e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022608:	693b      	ldr	r3, [r7, #16]
 802260a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802260c:	4b0c      	ldr	r3, [pc, #48]	@ (8022640 <xTaskRemoveFromEventList+0xc0>)
 802260e:	681b      	ldr	r3, [r3, #0]
 8022610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022612:	429a      	cmp	r2, r3
 8022614:	d905      	bls.n	8022622 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8022616:	2301      	movs	r3, #1
 8022618:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 802261a:	4b0a      	ldr	r3, [pc, #40]	@ (8022644 <xTaskRemoveFromEventList+0xc4>)
 802261c:	2201      	movs	r2, #1
 802261e:	601a      	str	r2, [r3, #0]
 8022620:	e001      	b.n	8022626 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8022622:	2300      	movs	r3, #0
 8022624:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8022626:	697b      	ldr	r3, [r7, #20]
}
 8022628:	4618      	mov	r0, r3
 802262a:	3718      	adds	r7, #24
 802262c:	46bd      	mov	sp, r7
 802262e:	bd80      	pop	{r7, pc}
 8022630:	20002254 	.word	0x20002254
 8022634:	20002234 	.word	0x20002234
 8022638:	20001d5c 	.word	0x20001d5c
 802263c:	200021ec 	.word	0x200021ec
 8022640:	20001d58 	.word	0x20001d58
 8022644:	20002240 	.word	0x20002240

08022648 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8022648:	b480      	push	{r7}
 802264a:	b083      	sub	sp, #12
 802264c:	af00      	add	r7, sp, #0
 802264e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8022650:	4b06      	ldr	r3, [pc, #24]	@ (802266c <vTaskInternalSetTimeOutState+0x24>)
 8022652:	681a      	ldr	r2, [r3, #0]
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8022658:	4b05      	ldr	r3, [pc, #20]	@ (8022670 <vTaskInternalSetTimeOutState+0x28>)
 802265a:	681a      	ldr	r2, [r3, #0]
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	605a      	str	r2, [r3, #4]
}
 8022660:	bf00      	nop
 8022662:	370c      	adds	r7, #12
 8022664:	46bd      	mov	sp, r7
 8022666:	f85d 7b04 	ldr.w	r7, [sp], #4
 802266a:	4770      	bx	lr
 802266c:	20002244 	.word	0x20002244
 8022670:	20002230 	.word	0x20002230

08022674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8022674:	b580      	push	{r7, lr}
 8022676:	b088      	sub	sp, #32
 8022678:	af00      	add	r7, sp, #0
 802267a:	6078      	str	r0, [r7, #4]
 802267c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802267e:	687b      	ldr	r3, [r7, #4]
 8022680:	2b00      	cmp	r3, #0
 8022682:	d10b      	bne.n	802269c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8022684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022688:	f383 8811 	msr	BASEPRI, r3
 802268c:	f3bf 8f6f 	isb	sy
 8022690:	f3bf 8f4f 	dsb	sy
 8022694:	613b      	str	r3, [r7, #16]
}
 8022696:	bf00      	nop
 8022698:	bf00      	nop
 802269a:	e7fd      	b.n	8022698 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 802269c:	683b      	ldr	r3, [r7, #0]
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d10b      	bne.n	80226ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80226a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80226a6:	f383 8811 	msr	BASEPRI, r3
 80226aa:	f3bf 8f6f 	isb	sy
 80226ae:	f3bf 8f4f 	dsb	sy
 80226b2:	60fb      	str	r3, [r7, #12]
}
 80226b4:	bf00      	nop
 80226b6:	bf00      	nop
 80226b8:	e7fd      	b.n	80226b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80226ba:	f000 ffdd 	bl	8023678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80226be:	4b1d      	ldr	r3, [pc, #116]	@ (8022734 <xTaskCheckForTimeOut+0xc0>)
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80226c4:	687b      	ldr	r3, [r7, #4]
 80226c6:	685b      	ldr	r3, [r3, #4]
 80226c8:	69ba      	ldr	r2, [r7, #24]
 80226ca:	1ad3      	subs	r3, r2, r3
 80226cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80226ce:	683b      	ldr	r3, [r7, #0]
 80226d0:	681b      	ldr	r3, [r3, #0]
 80226d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80226d6:	d102      	bne.n	80226de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80226d8:	2300      	movs	r3, #0
 80226da:	61fb      	str	r3, [r7, #28]
 80226dc:	e023      	b.n	8022726 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	681a      	ldr	r2, [r3, #0]
 80226e2:	4b15      	ldr	r3, [pc, #84]	@ (8022738 <xTaskCheckForTimeOut+0xc4>)
 80226e4:	681b      	ldr	r3, [r3, #0]
 80226e6:	429a      	cmp	r2, r3
 80226e8:	d007      	beq.n	80226fa <xTaskCheckForTimeOut+0x86>
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	685b      	ldr	r3, [r3, #4]
 80226ee:	69ba      	ldr	r2, [r7, #24]
 80226f0:	429a      	cmp	r2, r3
 80226f2:	d302      	bcc.n	80226fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80226f4:	2301      	movs	r3, #1
 80226f6:	61fb      	str	r3, [r7, #28]
 80226f8:	e015      	b.n	8022726 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80226fa:	683b      	ldr	r3, [r7, #0]
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	697a      	ldr	r2, [r7, #20]
 8022700:	429a      	cmp	r2, r3
 8022702:	d20b      	bcs.n	802271c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8022704:	683b      	ldr	r3, [r7, #0]
 8022706:	681a      	ldr	r2, [r3, #0]
 8022708:	697b      	ldr	r3, [r7, #20]
 802270a:	1ad2      	subs	r2, r2, r3
 802270c:	683b      	ldr	r3, [r7, #0]
 802270e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022710:	6878      	ldr	r0, [r7, #4]
 8022712:	f7ff ff99 	bl	8022648 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8022716:	2300      	movs	r3, #0
 8022718:	61fb      	str	r3, [r7, #28]
 802271a:	e004      	b.n	8022726 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 802271c:	683b      	ldr	r3, [r7, #0]
 802271e:	2200      	movs	r2, #0
 8022720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8022722:	2301      	movs	r3, #1
 8022724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8022726:	f000 ffd9 	bl	80236dc <vPortExitCritical>

	return xReturn;
 802272a:	69fb      	ldr	r3, [r7, #28]
}
 802272c:	4618      	mov	r0, r3
 802272e:	3720      	adds	r7, #32
 8022730:	46bd      	mov	sp, r7
 8022732:	bd80      	pop	{r7, pc}
 8022734:	20002230 	.word	0x20002230
 8022738:	20002244 	.word	0x20002244

0802273c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 802273c:	b480      	push	{r7}
 802273e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8022740:	4b03      	ldr	r3, [pc, #12]	@ (8022750 <vTaskMissedYield+0x14>)
 8022742:	2201      	movs	r2, #1
 8022744:	601a      	str	r2, [r3, #0]
}
 8022746:	bf00      	nop
 8022748:	46bd      	mov	sp, r7
 802274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802274e:	4770      	bx	lr
 8022750:	20002240 	.word	0x20002240

08022754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8022754:	b580      	push	{r7, lr}
 8022756:	b082      	sub	sp, #8
 8022758:	af00      	add	r7, sp, #0
 802275a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 802275c:	f000 f852 	bl	8022804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8022760:	4b06      	ldr	r3, [pc, #24]	@ (802277c <prvIdleTask+0x28>)
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	2b01      	cmp	r3, #1
 8022766:	d9f9      	bls.n	802275c <prvIdleTask+0x8>
			{
				taskYIELD();
 8022768:	4b05      	ldr	r3, [pc, #20]	@ (8022780 <prvIdleTask+0x2c>)
 802276a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 802276e:	601a      	str	r2, [r3, #0]
 8022770:	f3bf 8f4f 	dsb	sy
 8022774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8022778:	e7f0      	b.n	802275c <prvIdleTask+0x8>
 802277a:	bf00      	nop
 802277c:	20001d5c 	.word	0x20001d5c
 8022780:	e000ed04 	.word	0xe000ed04

08022784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8022784:	b580      	push	{r7, lr}
 8022786:	b082      	sub	sp, #8
 8022788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802278a:	2300      	movs	r3, #0
 802278c:	607b      	str	r3, [r7, #4]
 802278e:	e00c      	b.n	80227aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8022790:	687a      	ldr	r2, [r7, #4]
 8022792:	4613      	mov	r3, r2
 8022794:	009b      	lsls	r3, r3, #2
 8022796:	4413      	add	r3, r2
 8022798:	009b      	lsls	r3, r3, #2
 802279a:	4a12      	ldr	r2, [pc, #72]	@ (80227e4 <prvInitialiseTaskLists+0x60>)
 802279c:	4413      	add	r3, r2
 802279e:	4618      	mov	r0, r3
 80227a0:	f7fe f8c8 	bl	8020934 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	3301      	adds	r3, #1
 80227a8:	607b      	str	r3, [r7, #4]
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	2b37      	cmp	r3, #55	@ 0x37
 80227ae:	d9ef      	bls.n	8022790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80227b0:	480d      	ldr	r0, [pc, #52]	@ (80227e8 <prvInitialiseTaskLists+0x64>)
 80227b2:	f7fe f8bf 	bl	8020934 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80227b6:	480d      	ldr	r0, [pc, #52]	@ (80227ec <prvInitialiseTaskLists+0x68>)
 80227b8:	f7fe f8bc 	bl	8020934 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80227bc:	480c      	ldr	r0, [pc, #48]	@ (80227f0 <prvInitialiseTaskLists+0x6c>)
 80227be:	f7fe f8b9 	bl	8020934 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80227c2:	480c      	ldr	r0, [pc, #48]	@ (80227f4 <prvInitialiseTaskLists+0x70>)
 80227c4:	f7fe f8b6 	bl	8020934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80227c8:	480b      	ldr	r0, [pc, #44]	@ (80227f8 <prvInitialiseTaskLists+0x74>)
 80227ca:	f7fe f8b3 	bl	8020934 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80227ce:	4b0b      	ldr	r3, [pc, #44]	@ (80227fc <prvInitialiseTaskLists+0x78>)
 80227d0:	4a05      	ldr	r2, [pc, #20]	@ (80227e8 <prvInitialiseTaskLists+0x64>)
 80227d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80227d4:	4b0a      	ldr	r3, [pc, #40]	@ (8022800 <prvInitialiseTaskLists+0x7c>)
 80227d6:	4a05      	ldr	r2, [pc, #20]	@ (80227ec <prvInitialiseTaskLists+0x68>)
 80227d8:	601a      	str	r2, [r3, #0]
}
 80227da:	bf00      	nop
 80227dc:	3708      	adds	r7, #8
 80227de:	46bd      	mov	sp, r7
 80227e0:	bd80      	pop	{r7, pc}
 80227e2:	bf00      	nop
 80227e4:	20001d5c 	.word	0x20001d5c
 80227e8:	200021bc 	.word	0x200021bc
 80227ec:	200021d0 	.word	0x200021d0
 80227f0:	200021ec 	.word	0x200021ec
 80227f4:	20002200 	.word	0x20002200
 80227f8:	20002218 	.word	0x20002218
 80227fc:	200021e4 	.word	0x200021e4
 8022800:	200021e8 	.word	0x200021e8

08022804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8022804:	b580      	push	{r7, lr}
 8022806:	b082      	sub	sp, #8
 8022808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 802280a:	e019      	b.n	8022840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 802280c:	f000 ff34 	bl	8023678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022810:	4b10      	ldr	r3, [pc, #64]	@ (8022854 <prvCheckTasksWaitingTermination+0x50>)
 8022812:	68db      	ldr	r3, [r3, #12]
 8022814:	68db      	ldr	r3, [r3, #12]
 8022816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	3304      	adds	r3, #4
 802281c:	4618      	mov	r0, r3
 802281e:	f7fe f913 	bl	8020a48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8022822:	4b0d      	ldr	r3, [pc, #52]	@ (8022858 <prvCheckTasksWaitingTermination+0x54>)
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	3b01      	subs	r3, #1
 8022828:	4a0b      	ldr	r2, [pc, #44]	@ (8022858 <prvCheckTasksWaitingTermination+0x54>)
 802282a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 802282c:	4b0b      	ldr	r3, [pc, #44]	@ (802285c <prvCheckTasksWaitingTermination+0x58>)
 802282e:	681b      	ldr	r3, [r3, #0]
 8022830:	3b01      	subs	r3, #1
 8022832:	4a0a      	ldr	r2, [pc, #40]	@ (802285c <prvCheckTasksWaitingTermination+0x58>)
 8022834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8022836:	f000 ff51 	bl	80236dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 802283a:	6878      	ldr	r0, [r7, #4]
 802283c:	f000 f848 	bl	80228d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022840:	4b06      	ldr	r3, [pc, #24]	@ (802285c <prvCheckTasksWaitingTermination+0x58>)
 8022842:	681b      	ldr	r3, [r3, #0]
 8022844:	2b00      	cmp	r3, #0
 8022846:	d1e1      	bne.n	802280c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8022848:	bf00      	nop
 802284a:	bf00      	nop
 802284c:	3708      	adds	r7, #8
 802284e:	46bd      	mov	sp, r7
 8022850:	bd80      	pop	{r7, pc}
 8022852:	bf00      	nop
 8022854:	20002200 	.word	0x20002200
 8022858:	2000222c 	.word	0x2000222c
 802285c:	20002214 	.word	0x20002214

08022860 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8022860:	b480      	push	{r7}
 8022862:	b085      	sub	sp, #20
 8022864:	af00      	add	r7, sp, #0
 8022866:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8022868:	2300      	movs	r3, #0
 802286a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802286c:	e005      	b.n	802287a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	3301      	adds	r3, #1
 8022872:	607b      	str	r3, [r7, #4]
			ulCount++;
 8022874:	68fb      	ldr	r3, [r7, #12]
 8022876:	3301      	adds	r3, #1
 8022878:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	781b      	ldrb	r3, [r3, #0]
 802287e:	2ba5      	cmp	r3, #165	@ 0xa5
 8022880:	d0f5      	beq.n	802286e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8022882:	68fb      	ldr	r3, [r7, #12]
 8022884:	089b      	lsrs	r3, r3, #2
 8022886:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	b29b      	uxth	r3, r3
	}
 802288c:	4618      	mov	r0, r3
 802288e:	3714      	adds	r7, #20
 8022890:	46bd      	mov	sp, r7
 8022892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022896:	4770      	bx	lr

08022898 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8022898:	b580      	push	{r7, lr}
 802289a:	b086      	sub	sp, #24
 802289c:	af00      	add	r7, sp, #0
 802289e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	d102      	bne.n	80228ac <uxTaskGetStackHighWaterMark+0x14>
 80228a6:	4b09      	ldr	r3, [pc, #36]	@ (80228cc <uxTaskGetStackHighWaterMark+0x34>)
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	e000      	b.n	80228ae <uxTaskGetStackHighWaterMark+0x16>
 80228ac:	687b      	ldr	r3, [r7, #4]
 80228ae:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80228b0:	697b      	ldr	r3, [r7, #20]
 80228b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80228b4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80228b6:	6938      	ldr	r0, [r7, #16]
 80228b8:	f7ff ffd2 	bl	8022860 <prvTaskCheckFreeStackSpace>
 80228bc:	4603      	mov	r3, r0
 80228be:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80228c0:	68fb      	ldr	r3, [r7, #12]
	}
 80228c2:	4618      	mov	r0, r3
 80228c4:	3718      	adds	r7, #24
 80228c6:	46bd      	mov	sp, r7
 80228c8:	bd80      	pop	{r7, pc}
 80228ca:	bf00      	nop
 80228cc:	20001d58 	.word	0x20001d58

080228d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80228d0:	b580      	push	{r7, lr}
 80228d2:	b084      	sub	sp, #16
 80228d4:	af00      	add	r7, sp, #0
 80228d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	3358      	adds	r3, #88	@ 0x58
 80228dc:	4618      	mov	r0, r3
 80228de:	f00b fa5b 	bl	802dd98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d108      	bne.n	80228fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80228f0:	4618      	mov	r0, r3
 80228f2:	f001 f829 	bl	8023948 <vPortFree>
				vPortFree( pxTCB );
 80228f6:	6878      	ldr	r0, [r7, #4]
 80228f8:	f001 f826 	bl	8023948 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80228fc:	e019      	b.n	8022932 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8022904:	2b01      	cmp	r3, #1
 8022906:	d103      	bne.n	8022910 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022908:	6878      	ldr	r0, [r7, #4]
 802290a:	f001 f81d 	bl	8023948 <vPortFree>
	}
 802290e:	e010      	b.n	8022932 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8022916:	2b02      	cmp	r3, #2
 8022918:	d00b      	beq.n	8022932 <prvDeleteTCB+0x62>
	__asm volatile
 802291a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802291e:	f383 8811 	msr	BASEPRI, r3
 8022922:	f3bf 8f6f 	isb	sy
 8022926:	f3bf 8f4f 	dsb	sy
 802292a:	60fb      	str	r3, [r7, #12]
}
 802292c:	bf00      	nop
 802292e:	bf00      	nop
 8022930:	e7fd      	b.n	802292e <prvDeleteTCB+0x5e>
	}
 8022932:	bf00      	nop
 8022934:	3710      	adds	r7, #16
 8022936:	46bd      	mov	sp, r7
 8022938:	bd80      	pop	{r7, pc}
	...

0802293c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 802293c:	b480      	push	{r7}
 802293e:	b083      	sub	sp, #12
 8022940:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022942:	4b0c      	ldr	r3, [pc, #48]	@ (8022974 <prvResetNextTaskUnblockTime+0x38>)
 8022944:	681b      	ldr	r3, [r3, #0]
 8022946:	681b      	ldr	r3, [r3, #0]
 8022948:	2b00      	cmp	r3, #0
 802294a:	d104      	bne.n	8022956 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 802294c:	4b0a      	ldr	r3, [pc, #40]	@ (8022978 <prvResetNextTaskUnblockTime+0x3c>)
 802294e:	f04f 32ff 	mov.w	r2, #4294967295
 8022952:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8022954:	e008      	b.n	8022968 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022956:	4b07      	ldr	r3, [pc, #28]	@ (8022974 <prvResetNextTaskUnblockTime+0x38>)
 8022958:	681b      	ldr	r3, [r3, #0]
 802295a:	68db      	ldr	r3, [r3, #12]
 802295c:	68db      	ldr	r3, [r3, #12]
 802295e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8022960:	687b      	ldr	r3, [r7, #4]
 8022962:	685b      	ldr	r3, [r3, #4]
 8022964:	4a04      	ldr	r2, [pc, #16]	@ (8022978 <prvResetNextTaskUnblockTime+0x3c>)
 8022966:	6013      	str	r3, [r2, #0]
}
 8022968:	bf00      	nop
 802296a:	370c      	adds	r7, #12
 802296c:	46bd      	mov	sp, r7
 802296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022972:	4770      	bx	lr
 8022974:	200021e4 	.word	0x200021e4
 8022978:	2000224c 	.word	0x2000224c

0802297c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 802297c:	b480      	push	{r7}
 802297e:	b083      	sub	sp, #12
 8022980:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8022982:	4b05      	ldr	r3, [pc, #20]	@ (8022998 <xTaskGetCurrentTaskHandle+0x1c>)
 8022984:	681b      	ldr	r3, [r3, #0]
 8022986:	607b      	str	r3, [r7, #4]

		return xReturn;
 8022988:	687b      	ldr	r3, [r7, #4]
	}
 802298a:	4618      	mov	r0, r3
 802298c:	370c      	adds	r7, #12
 802298e:	46bd      	mov	sp, r7
 8022990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022994:	4770      	bx	lr
 8022996:	bf00      	nop
 8022998:	20001d58 	.word	0x20001d58

0802299c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 802299c:	b480      	push	{r7}
 802299e:	b083      	sub	sp, #12
 80229a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80229a2:	4b0b      	ldr	r3, [pc, #44]	@ (80229d0 <xTaskGetSchedulerState+0x34>)
 80229a4:	681b      	ldr	r3, [r3, #0]
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d102      	bne.n	80229b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80229aa:	2301      	movs	r3, #1
 80229ac:	607b      	str	r3, [r7, #4]
 80229ae:	e008      	b.n	80229c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80229b0:	4b08      	ldr	r3, [pc, #32]	@ (80229d4 <xTaskGetSchedulerState+0x38>)
 80229b2:	681b      	ldr	r3, [r3, #0]
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d102      	bne.n	80229be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80229b8:	2302      	movs	r3, #2
 80229ba:	607b      	str	r3, [r7, #4]
 80229bc:	e001      	b.n	80229c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80229be:	2300      	movs	r3, #0
 80229c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80229c2:	687b      	ldr	r3, [r7, #4]
	}
 80229c4:	4618      	mov	r0, r3
 80229c6:	370c      	adds	r7, #12
 80229c8:	46bd      	mov	sp, r7
 80229ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229ce:	4770      	bx	lr
 80229d0:	20002238 	.word	0x20002238
 80229d4:	20002254 	.word	0x20002254

080229d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80229d8:	b580      	push	{r7, lr}
 80229da:	b084      	sub	sp, #16
 80229dc:	af00      	add	r7, sp, #0
 80229de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80229e4:	2300      	movs	r3, #0
 80229e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d051      	beq.n	8022a92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80229ee:	68bb      	ldr	r3, [r7, #8]
 80229f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80229f2:	4b2a      	ldr	r3, [pc, #168]	@ (8022a9c <xTaskPriorityInherit+0xc4>)
 80229f4:	681b      	ldr	r3, [r3, #0]
 80229f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80229f8:	429a      	cmp	r2, r3
 80229fa:	d241      	bcs.n	8022a80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80229fc:	68bb      	ldr	r3, [r7, #8]
 80229fe:	699b      	ldr	r3, [r3, #24]
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	db06      	blt.n	8022a12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022a04:	4b25      	ldr	r3, [pc, #148]	@ (8022a9c <xTaskPriorityInherit+0xc4>)
 8022a06:	681b      	ldr	r3, [r3, #0]
 8022a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022a0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8022a0e:	68bb      	ldr	r3, [r7, #8]
 8022a10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8022a12:	68bb      	ldr	r3, [r7, #8]
 8022a14:	6959      	ldr	r1, [r3, #20]
 8022a16:	68bb      	ldr	r3, [r7, #8]
 8022a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022a1a:	4613      	mov	r3, r2
 8022a1c:	009b      	lsls	r3, r3, #2
 8022a1e:	4413      	add	r3, r2
 8022a20:	009b      	lsls	r3, r3, #2
 8022a22:	4a1f      	ldr	r2, [pc, #124]	@ (8022aa0 <xTaskPriorityInherit+0xc8>)
 8022a24:	4413      	add	r3, r2
 8022a26:	4299      	cmp	r1, r3
 8022a28:	d122      	bne.n	8022a70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022a2a:	68bb      	ldr	r3, [r7, #8]
 8022a2c:	3304      	adds	r3, #4
 8022a2e:	4618      	mov	r0, r3
 8022a30:	f7fe f80a 	bl	8020a48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022a34:	4b19      	ldr	r3, [pc, #100]	@ (8022a9c <xTaskPriorityInherit+0xc4>)
 8022a36:	681b      	ldr	r3, [r3, #0]
 8022a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022a3a:	68bb      	ldr	r3, [r7, #8]
 8022a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8022a3e:	68bb      	ldr	r3, [r7, #8]
 8022a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022a42:	4b18      	ldr	r3, [pc, #96]	@ (8022aa4 <xTaskPriorityInherit+0xcc>)
 8022a44:	681b      	ldr	r3, [r3, #0]
 8022a46:	429a      	cmp	r2, r3
 8022a48:	d903      	bls.n	8022a52 <xTaskPriorityInherit+0x7a>
 8022a4a:	68bb      	ldr	r3, [r7, #8]
 8022a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022a4e:	4a15      	ldr	r2, [pc, #84]	@ (8022aa4 <xTaskPriorityInherit+0xcc>)
 8022a50:	6013      	str	r3, [r2, #0]
 8022a52:	68bb      	ldr	r3, [r7, #8]
 8022a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022a56:	4613      	mov	r3, r2
 8022a58:	009b      	lsls	r3, r3, #2
 8022a5a:	4413      	add	r3, r2
 8022a5c:	009b      	lsls	r3, r3, #2
 8022a5e:	4a10      	ldr	r2, [pc, #64]	@ (8022aa0 <xTaskPriorityInherit+0xc8>)
 8022a60:	441a      	add	r2, r3
 8022a62:	68bb      	ldr	r3, [r7, #8]
 8022a64:	3304      	adds	r3, #4
 8022a66:	4619      	mov	r1, r3
 8022a68:	4610      	mov	r0, r2
 8022a6a:	f7fd ff90 	bl	802098e <vListInsertEnd>
 8022a6e:	e004      	b.n	8022a7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022a70:	4b0a      	ldr	r3, [pc, #40]	@ (8022a9c <xTaskPriorityInherit+0xc4>)
 8022a72:	681b      	ldr	r3, [r3, #0]
 8022a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022a76:	68bb      	ldr	r3, [r7, #8]
 8022a78:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8022a7a:	2301      	movs	r3, #1
 8022a7c:	60fb      	str	r3, [r7, #12]
 8022a7e:	e008      	b.n	8022a92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8022a80:	68bb      	ldr	r3, [r7, #8]
 8022a82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022a84:	4b05      	ldr	r3, [pc, #20]	@ (8022a9c <xTaskPriorityInherit+0xc4>)
 8022a86:	681b      	ldr	r3, [r3, #0]
 8022a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022a8a:	429a      	cmp	r2, r3
 8022a8c:	d201      	bcs.n	8022a92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8022a8e:	2301      	movs	r3, #1
 8022a90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022a92:	68fb      	ldr	r3, [r7, #12]
	}
 8022a94:	4618      	mov	r0, r3
 8022a96:	3710      	adds	r7, #16
 8022a98:	46bd      	mov	sp, r7
 8022a9a:	bd80      	pop	{r7, pc}
 8022a9c:	20001d58 	.word	0x20001d58
 8022aa0:	20001d5c 	.word	0x20001d5c
 8022aa4:	20002234 	.word	0x20002234

08022aa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8022aa8:	b580      	push	{r7, lr}
 8022aaa:	b086      	sub	sp, #24
 8022aac:	af00      	add	r7, sp, #0
 8022aae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8022ab4:	2300      	movs	r3, #0
 8022ab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d058      	beq.n	8022b70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8022abe:	4b2f      	ldr	r3, [pc, #188]	@ (8022b7c <xTaskPriorityDisinherit+0xd4>)
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	693a      	ldr	r2, [r7, #16]
 8022ac4:	429a      	cmp	r2, r3
 8022ac6:	d00b      	beq.n	8022ae0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8022ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022acc:	f383 8811 	msr	BASEPRI, r3
 8022ad0:	f3bf 8f6f 	isb	sy
 8022ad4:	f3bf 8f4f 	dsb	sy
 8022ad8:	60fb      	str	r3, [r7, #12]
}
 8022ada:	bf00      	nop
 8022adc:	bf00      	nop
 8022ade:	e7fd      	b.n	8022adc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8022ae0:	693b      	ldr	r3, [r7, #16]
 8022ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d10b      	bne.n	8022b00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8022ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022aec:	f383 8811 	msr	BASEPRI, r3
 8022af0:	f3bf 8f6f 	isb	sy
 8022af4:	f3bf 8f4f 	dsb	sy
 8022af8:	60bb      	str	r3, [r7, #8]
}
 8022afa:	bf00      	nop
 8022afc:	bf00      	nop
 8022afe:	e7fd      	b.n	8022afc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8022b00:	693b      	ldr	r3, [r7, #16]
 8022b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022b04:	1e5a      	subs	r2, r3, #1
 8022b06:	693b      	ldr	r3, [r7, #16]
 8022b08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8022b0a:	693b      	ldr	r3, [r7, #16]
 8022b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022b0e:	693b      	ldr	r3, [r7, #16]
 8022b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022b12:	429a      	cmp	r2, r3
 8022b14:	d02c      	beq.n	8022b70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8022b16:	693b      	ldr	r3, [r7, #16]
 8022b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022b1a:	2b00      	cmp	r3, #0
 8022b1c:	d128      	bne.n	8022b70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022b1e:	693b      	ldr	r3, [r7, #16]
 8022b20:	3304      	adds	r3, #4
 8022b22:	4618      	mov	r0, r3
 8022b24:	f7fd ff90 	bl	8020a48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8022b28:	693b      	ldr	r3, [r7, #16]
 8022b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8022b2c:	693b      	ldr	r3, [r7, #16]
 8022b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022b30:	693b      	ldr	r3, [r7, #16]
 8022b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022b34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8022b38:	693b      	ldr	r3, [r7, #16]
 8022b3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8022b3c:	693b      	ldr	r3, [r7, #16]
 8022b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022b40:	4b0f      	ldr	r3, [pc, #60]	@ (8022b80 <xTaskPriorityDisinherit+0xd8>)
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	429a      	cmp	r2, r3
 8022b46:	d903      	bls.n	8022b50 <xTaskPriorityDisinherit+0xa8>
 8022b48:	693b      	ldr	r3, [r7, #16]
 8022b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8022b80 <xTaskPriorityDisinherit+0xd8>)
 8022b4e:	6013      	str	r3, [r2, #0]
 8022b50:	693b      	ldr	r3, [r7, #16]
 8022b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022b54:	4613      	mov	r3, r2
 8022b56:	009b      	lsls	r3, r3, #2
 8022b58:	4413      	add	r3, r2
 8022b5a:	009b      	lsls	r3, r3, #2
 8022b5c:	4a09      	ldr	r2, [pc, #36]	@ (8022b84 <xTaskPriorityDisinherit+0xdc>)
 8022b5e:	441a      	add	r2, r3
 8022b60:	693b      	ldr	r3, [r7, #16]
 8022b62:	3304      	adds	r3, #4
 8022b64:	4619      	mov	r1, r3
 8022b66:	4610      	mov	r0, r2
 8022b68:	f7fd ff11 	bl	802098e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8022b6c:	2301      	movs	r3, #1
 8022b6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022b70:	697b      	ldr	r3, [r7, #20]
	}
 8022b72:	4618      	mov	r0, r3
 8022b74:	3718      	adds	r7, #24
 8022b76:	46bd      	mov	sp, r7
 8022b78:	bd80      	pop	{r7, pc}
 8022b7a:	bf00      	nop
 8022b7c:	20001d58 	.word	0x20001d58
 8022b80:	20002234 	.word	0x20002234
 8022b84:	20001d5c 	.word	0x20001d5c

08022b88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8022b88:	b580      	push	{r7, lr}
 8022b8a:	b088      	sub	sp, #32
 8022b8c:	af00      	add	r7, sp, #0
 8022b8e:	6078      	str	r0, [r7, #4]
 8022b90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8022b96:	2301      	movs	r3, #1
 8022b98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	2b00      	cmp	r3, #0
 8022b9e:	d06c      	beq.n	8022c7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8022ba0:	69bb      	ldr	r3, [r7, #24]
 8022ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022ba4:	2b00      	cmp	r3, #0
 8022ba6:	d10b      	bne.n	8022bc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8022ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022bac:	f383 8811 	msr	BASEPRI, r3
 8022bb0:	f3bf 8f6f 	isb	sy
 8022bb4:	f3bf 8f4f 	dsb	sy
 8022bb8:	60fb      	str	r3, [r7, #12]
}
 8022bba:	bf00      	nop
 8022bbc:	bf00      	nop
 8022bbe:	e7fd      	b.n	8022bbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8022bc0:	69bb      	ldr	r3, [r7, #24]
 8022bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022bc4:	683a      	ldr	r2, [r7, #0]
 8022bc6:	429a      	cmp	r2, r3
 8022bc8:	d902      	bls.n	8022bd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8022bca:	683b      	ldr	r3, [r7, #0]
 8022bcc:	61fb      	str	r3, [r7, #28]
 8022bce:	e002      	b.n	8022bd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8022bd0:	69bb      	ldr	r3, [r7, #24]
 8022bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022bd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8022bd6:	69bb      	ldr	r3, [r7, #24]
 8022bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022bda:	69fa      	ldr	r2, [r7, #28]
 8022bdc:	429a      	cmp	r2, r3
 8022bde:	d04c      	beq.n	8022c7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8022be0:	69bb      	ldr	r3, [r7, #24]
 8022be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022be4:	697a      	ldr	r2, [r7, #20]
 8022be6:	429a      	cmp	r2, r3
 8022be8:	d147      	bne.n	8022c7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8022bea:	4b26      	ldr	r3, [pc, #152]	@ (8022c84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022bec:	681b      	ldr	r3, [r3, #0]
 8022bee:	69ba      	ldr	r2, [r7, #24]
 8022bf0:	429a      	cmp	r2, r3
 8022bf2:	d10b      	bne.n	8022c0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8022bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022bf8:	f383 8811 	msr	BASEPRI, r3
 8022bfc:	f3bf 8f6f 	isb	sy
 8022c00:	f3bf 8f4f 	dsb	sy
 8022c04:	60bb      	str	r3, [r7, #8]
}
 8022c06:	bf00      	nop
 8022c08:	bf00      	nop
 8022c0a:	e7fd      	b.n	8022c08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8022c0c:	69bb      	ldr	r3, [r7, #24]
 8022c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8022c12:	69bb      	ldr	r3, [r7, #24]
 8022c14:	69fa      	ldr	r2, [r7, #28]
 8022c16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022c18:	69bb      	ldr	r3, [r7, #24]
 8022c1a:	699b      	ldr	r3, [r3, #24]
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	db04      	blt.n	8022c2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022c20:	69fb      	ldr	r3, [r7, #28]
 8022c22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8022c26:	69bb      	ldr	r3, [r7, #24]
 8022c28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8022c2a:	69bb      	ldr	r3, [r7, #24]
 8022c2c:	6959      	ldr	r1, [r3, #20]
 8022c2e:	693a      	ldr	r2, [r7, #16]
 8022c30:	4613      	mov	r3, r2
 8022c32:	009b      	lsls	r3, r3, #2
 8022c34:	4413      	add	r3, r2
 8022c36:	009b      	lsls	r3, r3, #2
 8022c38:	4a13      	ldr	r2, [pc, #76]	@ (8022c88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022c3a:	4413      	add	r3, r2
 8022c3c:	4299      	cmp	r1, r3
 8022c3e:	d11c      	bne.n	8022c7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022c40:	69bb      	ldr	r3, [r7, #24]
 8022c42:	3304      	adds	r3, #4
 8022c44:	4618      	mov	r0, r3
 8022c46:	f7fd feff 	bl	8020a48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8022c4a:	69bb      	ldr	r3, [r7, #24]
 8022c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8022c8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8022c50:	681b      	ldr	r3, [r3, #0]
 8022c52:	429a      	cmp	r2, r3
 8022c54:	d903      	bls.n	8022c5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8022c56:	69bb      	ldr	r3, [r7, #24]
 8022c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8022c8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8022c5c:	6013      	str	r3, [r2, #0]
 8022c5e:	69bb      	ldr	r3, [r7, #24]
 8022c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8022c62:	4613      	mov	r3, r2
 8022c64:	009b      	lsls	r3, r3, #2
 8022c66:	4413      	add	r3, r2
 8022c68:	009b      	lsls	r3, r3, #2
 8022c6a:	4a07      	ldr	r2, [pc, #28]	@ (8022c88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022c6c:	441a      	add	r2, r3
 8022c6e:	69bb      	ldr	r3, [r7, #24]
 8022c70:	3304      	adds	r3, #4
 8022c72:	4619      	mov	r1, r3
 8022c74:	4610      	mov	r0, r2
 8022c76:	f7fd fe8a 	bl	802098e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022c7a:	bf00      	nop
 8022c7c:	3720      	adds	r7, #32
 8022c7e:	46bd      	mov	sp, r7
 8022c80:	bd80      	pop	{r7, pc}
 8022c82:	bf00      	nop
 8022c84:	20001d58 	.word	0x20001d58
 8022c88:	20001d5c 	.word	0x20001d5c
 8022c8c:	20002234 	.word	0x20002234

08022c90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8022c90:	b480      	push	{r7}
 8022c92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8022c94:	4b07      	ldr	r3, [pc, #28]	@ (8022cb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8022c96:	681b      	ldr	r3, [r3, #0]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d004      	beq.n	8022ca6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8022c9c:	4b05      	ldr	r3, [pc, #20]	@ (8022cb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8022c9e:	681b      	ldr	r3, [r3, #0]
 8022ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8022ca2:	3201      	adds	r2, #1
 8022ca4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8022ca6:	4b03      	ldr	r3, [pc, #12]	@ (8022cb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8022ca8:	681b      	ldr	r3, [r3, #0]
	}
 8022caa:	4618      	mov	r0, r3
 8022cac:	46bd      	mov	sp, r7
 8022cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cb2:	4770      	bx	lr
 8022cb4:	20001d58 	.word	0x20001d58

08022cb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022cb8:	b580      	push	{r7, lr}
 8022cba:	b084      	sub	sp, #16
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	6078      	str	r0, [r7, #4]
 8022cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8022cc2:	4b21      	ldr	r3, [pc, #132]	@ (8022d48 <prvAddCurrentTaskToDelayedList+0x90>)
 8022cc4:	681b      	ldr	r3, [r3, #0]
 8022cc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022cc8:	4b20      	ldr	r3, [pc, #128]	@ (8022d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	3304      	adds	r3, #4
 8022cce:	4618      	mov	r0, r3
 8022cd0:	f7fd feba 	bl	8020a48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022cda:	d10a      	bne.n	8022cf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8022cdc:	683b      	ldr	r3, [r7, #0]
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d007      	beq.n	8022cf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8022d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8022ce4:	681b      	ldr	r3, [r3, #0]
 8022ce6:	3304      	adds	r3, #4
 8022ce8:	4619      	mov	r1, r3
 8022cea:	4819      	ldr	r0, [pc, #100]	@ (8022d50 <prvAddCurrentTaskToDelayedList+0x98>)
 8022cec:	f7fd fe4f 	bl	802098e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8022cf0:	e026      	b.n	8022d40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8022cf2:	68fa      	ldr	r2, [r7, #12]
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	4413      	add	r3, r2
 8022cf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022cfa:	4b14      	ldr	r3, [pc, #80]	@ (8022d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8022cfc:	681b      	ldr	r3, [r3, #0]
 8022cfe:	68ba      	ldr	r2, [r7, #8]
 8022d00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8022d02:	68ba      	ldr	r2, [r7, #8]
 8022d04:	68fb      	ldr	r3, [r7, #12]
 8022d06:	429a      	cmp	r2, r3
 8022d08:	d209      	bcs.n	8022d1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022d0a:	4b12      	ldr	r3, [pc, #72]	@ (8022d54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022d0c:	681a      	ldr	r2, [r3, #0]
 8022d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8022d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8022d10:	681b      	ldr	r3, [r3, #0]
 8022d12:	3304      	adds	r3, #4
 8022d14:	4619      	mov	r1, r3
 8022d16:	4610      	mov	r0, r2
 8022d18:	f7fd fe5d 	bl	80209d6 <vListInsert>
}
 8022d1c:	e010      	b.n	8022d40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8022d58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8022d20:	681a      	ldr	r2, [r3, #0]
 8022d22:	4b0a      	ldr	r3, [pc, #40]	@ (8022d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8022d24:	681b      	ldr	r3, [r3, #0]
 8022d26:	3304      	adds	r3, #4
 8022d28:	4619      	mov	r1, r3
 8022d2a:	4610      	mov	r0, r2
 8022d2c:	f7fd fe53 	bl	80209d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022d30:	4b0a      	ldr	r3, [pc, #40]	@ (8022d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8022d32:	681b      	ldr	r3, [r3, #0]
 8022d34:	68ba      	ldr	r2, [r7, #8]
 8022d36:	429a      	cmp	r2, r3
 8022d38:	d202      	bcs.n	8022d40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8022d3a:	4a08      	ldr	r2, [pc, #32]	@ (8022d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8022d3c:	68bb      	ldr	r3, [r7, #8]
 8022d3e:	6013      	str	r3, [r2, #0]
}
 8022d40:	bf00      	nop
 8022d42:	3710      	adds	r7, #16
 8022d44:	46bd      	mov	sp, r7
 8022d46:	bd80      	pop	{r7, pc}
 8022d48:	20002230 	.word	0x20002230
 8022d4c:	20001d58 	.word	0x20001d58
 8022d50:	20002218 	.word	0x20002218
 8022d54:	200021e8 	.word	0x200021e8
 8022d58:	200021e4 	.word	0x200021e4
 8022d5c:	2000224c 	.word	0x2000224c

08022d60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8022d60:	b580      	push	{r7, lr}
 8022d62:	b08a      	sub	sp, #40	@ 0x28
 8022d64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022d66:	2300      	movs	r3, #0
 8022d68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8022d6a:	f000 fb13 	bl	8023394 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8022d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8022de4 <xTimerCreateTimerTask+0x84>)
 8022d70:	681b      	ldr	r3, [r3, #0]
 8022d72:	2b00      	cmp	r3, #0
 8022d74:	d021      	beq.n	8022dba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8022d76:	2300      	movs	r3, #0
 8022d78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8022d7a:	2300      	movs	r3, #0
 8022d7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8022d7e:	1d3a      	adds	r2, r7, #4
 8022d80:	f107 0108 	add.w	r1, r7, #8
 8022d84:	f107 030c 	add.w	r3, r7, #12
 8022d88:	4618      	mov	r0, r3
 8022d8a:	f7fd fdb9 	bl	8020900 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8022d8e:	6879      	ldr	r1, [r7, #4]
 8022d90:	68bb      	ldr	r3, [r7, #8]
 8022d92:	68fa      	ldr	r2, [r7, #12]
 8022d94:	9202      	str	r2, [sp, #8]
 8022d96:	9301      	str	r3, [sp, #4]
 8022d98:	2302      	movs	r3, #2
 8022d9a:	9300      	str	r3, [sp, #0]
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	460a      	mov	r2, r1
 8022da0:	4911      	ldr	r1, [pc, #68]	@ (8022de8 <xTimerCreateTimerTask+0x88>)
 8022da2:	4812      	ldr	r0, [pc, #72]	@ (8022dec <xTimerCreateTimerTask+0x8c>)
 8022da4:	f7fe ff34 	bl	8021c10 <xTaskCreateStatic>
 8022da8:	4603      	mov	r3, r0
 8022daa:	4a11      	ldr	r2, [pc, #68]	@ (8022df0 <xTimerCreateTimerTask+0x90>)
 8022dac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8022dae:	4b10      	ldr	r3, [pc, #64]	@ (8022df0 <xTimerCreateTimerTask+0x90>)
 8022db0:	681b      	ldr	r3, [r3, #0]
 8022db2:	2b00      	cmp	r3, #0
 8022db4:	d001      	beq.n	8022dba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8022db6:	2301      	movs	r3, #1
 8022db8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8022dba:	697b      	ldr	r3, [r7, #20]
 8022dbc:	2b00      	cmp	r3, #0
 8022dbe:	d10b      	bne.n	8022dd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8022dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022dc4:	f383 8811 	msr	BASEPRI, r3
 8022dc8:	f3bf 8f6f 	isb	sy
 8022dcc:	f3bf 8f4f 	dsb	sy
 8022dd0:	613b      	str	r3, [r7, #16]
}
 8022dd2:	bf00      	nop
 8022dd4:	bf00      	nop
 8022dd6:	e7fd      	b.n	8022dd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8022dd8:	697b      	ldr	r3, [r7, #20]
}
 8022dda:	4618      	mov	r0, r3
 8022ddc:	3718      	adds	r7, #24
 8022dde:	46bd      	mov	sp, r7
 8022de0:	bd80      	pop	{r7, pc}
 8022de2:	bf00      	nop
 8022de4:	20002290 	.word	0x20002290
 8022de8:	080337e8 	.word	0x080337e8
 8022dec:	08022f2d 	.word	0x08022f2d
 8022df0:	20002294 	.word	0x20002294

08022df4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8022df4:	b580      	push	{r7, lr}
 8022df6:	b08a      	sub	sp, #40	@ 0x28
 8022df8:	af00      	add	r7, sp, #0
 8022dfa:	60f8      	str	r0, [r7, #12]
 8022dfc:	60b9      	str	r1, [r7, #8]
 8022dfe:	607a      	str	r2, [r7, #4]
 8022e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8022e02:	2300      	movs	r3, #0
 8022e04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8022e06:	68fb      	ldr	r3, [r7, #12]
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	d10b      	bne.n	8022e24 <xTimerGenericCommand+0x30>
	__asm volatile
 8022e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022e10:	f383 8811 	msr	BASEPRI, r3
 8022e14:	f3bf 8f6f 	isb	sy
 8022e18:	f3bf 8f4f 	dsb	sy
 8022e1c:	623b      	str	r3, [r7, #32]
}
 8022e1e:	bf00      	nop
 8022e20:	bf00      	nop
 8022e22:	e7fd      	b.n	8022e20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022e24:	4b19      	ldr	r3, [pc, #100]	@ (8022e8c <xTimerGenericCommand+0x98>)
 8022e26:	681b      	ldr	r3, [r3, #0]
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	d02a      	beq.n	8022e82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022e2c:	68bb      	ldr	r3, [r7, #8]
 8022e2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022e30:	687b      	ldr	r3, [r7, #4]
 8022e32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8022e34:	68fb      	ldr	r3, [r7, #12]
 8022e36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8022e38:	68bb      	ldr	r3, [r7, #8]
 8022e3a:	2b05      	cmp	r3, #5
 8022e3c:	dc18      	bgt.n	8022e70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022e3e:	f7ff fdad 	bl	802299c <xTaskGetSchedulerState>
 8022e42:	4603      	mov	r3, r0
 8022e44:	2b02      	cmp	r3, #2
 8022e46:	d109      	bne.n	8022e5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8022e48:	4b10      	ldr	r3, [pc, #64]	@ (8022e8c <xTimerGenericCommand+0x98>)
 8022e4a:	6818      	ldr	r0, [r3, #0]
 8022e4c:	f107 0110 	add.w	r1, r7, #16
 8022e50:	2300      	movs	r3, #0
 8022e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8022e54:	f7fe f820 	bl	8020e98 <xQueueGenericSend>
 8022e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8022e5a:	e012      	b.n	8022e82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8022e8c <xTimerGenericCommand+0x98>)
 8022e5e:	6818      	ldr	r0, [r3, #0]
 8022e60:	f107 0110 	add.w	r1, r7, #16
 8022e64:	2300      	movs	r3, #0
 8022e66:	2200      	movs	r2, #0
 8022e68:	f7fe f816 	bl	8020e98 <xQueueGenericSend>
 8022e6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8022e6e:	e008      	b.n	8022e82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022e70:	4b06      	ldr	r3, [pc, #24]	@ (8022e8c <xTimerGenericCommand+0x98>)
 8022e72:	6818      	ldr	r0, [r3, #0]
 8022e74:	f107 0110 	add.w	r1, r7, #16
 8022e78:	2300      	movs	r3, #0
 8022e7a:	683a      	ldr	r2, [r7, #0]
 8022e7c:	f7fe f90e 	bl	802109c <xQueueGenericSendFromISR>
 8022e80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8022e84:	4618      	mov	r0, r3
 8022e86:	3728      	adds	r7, #40	@ 0x28
 8022e88:	46bd      	mov	sp, r7
 8022e8a:	bd80      	pop	{r7, pc}
 8022e8c:	20002290 	.word	0x20002290

08022e90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8022e90:	b580      	push	{r7, lr}
 8022e92:	b088      	sub	sp, #32
 8022e94:	af02      	add	r7, sp, #8
 8022e96:	6078      	str	r0, [r7, #4]
 8022e98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022e9a:	4b23      	ldr	r3, [pc, #140]	@ (8022f28 <prvProcessExpiredTimer+0x98>)
 8022e9c:	681b      	ldr	r3, [r3, #0]
 8022e9e:	68db      	ldr	r3, [r3, #12]
 8022ea0:	68db      	ldr	r3, [r3, #12]
 8022ea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022ea4:	697b      	ldr	r3, [r7, #20]
 8022ea6:	3304      	adds	r3, #4
 8022ea8:	4618      	mov	r0, r3
 8022eaa:	f7fd fdcd 	bl	8020a48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022eae:	697b      	ldr	r3, [r7, #20]
 8022eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8022eb4:	f003 0304 	and.w	r3, r3, #4
 8022eb8:	2b00      	cmp	r3, #0
 8022eba:	d023      	beq.n	8022f04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8022ebc:	697b      	ldr	r3, [r7, #20]
 8022ebe:	699a      	ldr	r2, [r3, #24]
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	18d1      	adds	r1, r2, r3
 8022ec4:	687b      	ldr	r3, [r7, #4]
 8022ec6:	683a      	ldr	r2, [r7, #0]
 8022ec8:	6978      	ldr	r0, [r7, #20]
 8022eca:	f000 f8d5 	bl	8023078 <prvInsertTimerInActiveList>
 8022ece:	4603      	mov	r3, r0
 8022ed0:	2b00      	cmp	r3, #0
 8022ed2:	d020      	beq.n	8022f16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	9300      	str	r3, [sp, #0]
 8022ed8:	2300      	movs	r3, #0
 8022eda:	687a      	ldr	r2, [r7, #4]
 8022edc:	2100      	movs	r1, #0
 8022ede:	6978      	ldr	r0, [r7, #20]
 8022ee0:	f7ff ff88 	bl	8022df4 <xTimerGenericCommand>
 8022ee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8022ee6:	693b      	ldr	r3, [r7, #16]
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d114      	bne.n	8022f16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8022eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8022ef0:	f383 8811 	msr	BASEPRI, r3
 8022ef4:	f3bf 8f6f 	isb	sy
 8022ef8:	f3bf 8f4f 	dsb	sy
 8022efc:	60fb      	str	r3, [r7, #12]
}
 8022efe:	bf00      	nop
 8022f00:	bf00      	nop
 8022f02:	e7fd      	b.n	8022f00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022f04:	697b      	ldr	r3, [r7, #20]
 8022f06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8022f0a:	f023 0301 	bic.w	r3, r3, #1
 8022f0e:	b2da      	uxtb	r2, r3
 8022f10:	697b      	ldr	r3, [r7, #20]
 8022f12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022f16:	697b      	ldr	r3, [r7, #20]
 8022f18:	6a1b      	ldr	r3, [r3, #32]
 8022f1a:	6978      	ldr	r0, [r7, #20]
 8022f1c:	4798      	blx	r3
}
 8022f1e:	bf00      	nop
 8022f20:	3718      	adds	r7, #24
 8022f22:	46bd      	mov	sp, r7
 8022f24:	bd80      	pop	{r7, pc}
 8022f26:	bf00      	nop
 8022f28:	20002288 	.word	0x20002288

08022f2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022f2c:	b580      	push	{r7, lr}
 8022f2e:	b084      	sub	sp, #16
 8022f30:	af00      	add	r7, sp, #0
 8022f32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022f34:	f107 0308 	add.w	r3, r7, #8
 8022f38:	4618      	mov	r0, r3
 8022f3a:	f000 f859 	bl	8022ff0 <prvGetNextExpireTime>
 8022f3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022f40:	68bb      	ldr	r3, [r7, #8]
 8022f42:	4619      	mov	r1, r3
 8022f44:	68f8      	ldr	r0, [r7, #12]
 8022f46:	f000 f805 	bl	8022f54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022f4a:	f000 f8d7 	bl	80230fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022f4e:	bf00      	nop
 8022f50:	e7f0      	b.n	8022f34 <prvTimerTask+0x8>
	...

08022f54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022f54:	b580      	push	{r7, lr}
 8022f56:	b084      	sub	sp, #16
 8022f58:	af00      	add	r7, sp, #0
 8022f5a:	6078      	str	r0, [r7, #4]
 8022f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022f5e:	f7ff f8bf 	bl	80220e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022f62:	f107 0308 	add.w	r3, r7, #8
 8022f66:	4618      	mov	r0, r3
 8022f68:	f000 f866 	bl	8023038 <prvSampleTimeNow>
 8022f6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022f6e:	68bb      	ldr	r3, [r7, #8]
 8022f70:	2b00      	cmp	r3, #0
 8022f72:	d130      	bne.n	8022fd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022f74:	683b      	ldr	r3, [r7, #0]
 8022f76:	2b00      	cmp	r3, #0
 8022f78:	d10a      	bne.n	8022f90 <prvProcessTimerOrBlockTask+0x3c>
 8022f7a:	687a      	ldr	r2, [r7, #4]
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	429a      	cmp	r2, r3
 8022f80:	d806      	bhi.n	8022f90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022f82:	f7ff f8bb 	bl	80220fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8022f86:	68f9      	ldr	r1, [r7, #12]
 8022f88:	6878      	ldr	r0, [r7, #4]
 8022f8a:	f7ff ff81 	bl	8022e90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022f8e:	e024      	b.n	8022fda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022f90:	683b      	ldr	r3, [r7, #0]
 8022f92:	2b00      	cmp	r3, #0
 8022f94:	d008      	beq.n	8022fa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8022f96:	4b13      	ldr	r3, [pc, #76]	@ (8022fe4 <prvProcessTimerOrBlockTask+0x90>)
 8022f98:	681b      	ldr	r3, [r3, #0]
 8022f9a:	681b      	ldr	r3, [r3, #0]
 8022f9c:	2b00      	cmp	r3, #0
 8022f9e:	d101      	bne.n	8022fa4 <prvProcessTimerOrBlockTask+0x50>
 8022fa0:	2301      	movs	r3, #1
 8022fa2:	e000      	b.n	8022fa6 <prvProcessTimerOrBlockTask+0x52>
 8022fa4:	2300      	movs	r3, #0
 8022fa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8022fe8 <prvProcessTimerOrBlockTask+0x94>)
 8022faa:	6818      	ldr	r0, [r3, #0]
 8022fac:	687a      	ldr	r2, [r7, #4]
 8022fae:	68fb      	ldr	r3, [r7, #12]
 8022fb0:	1ad3      	subs	r3, r2, r3
 8022fb2:	683a      	ldr	r2, [r7, #0]
 8022fb4:	4619      	mov	r1, r3
 8022fb6:	f7fe fdf7 	bl	8021ba8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022fba:	f7ff f89f 	bl	80220fc <xTaskResumeAll>
 8022fbe:	4603      	mov	r3, r0
 8022fc0:	2b00      	cmp	r3, #0
 8022fc2:	d10a      	bne.n	8022fda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022fc4:	4b09      	ldr	r3, [pc, #36]	@ (8022fec <prvProcessTimerOrBlockTask+0x98>)
 8022fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8022fca:	601a      	str	r2, [r3, #0]
 8022fcc:	f3bf 8f4f 	dsb	sy
 8022fd0:	f3bf 8f6f 	isb	sy
}
 8022fd4:	e001      	b.n	8022fda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8022fd6:	f7ff f891 	bl	80220fc <xTaskResumeAll>
}
 8022fda:	bf00      	nop
 8022fdc:	3710      	adds	r7, #16
 8022fde:	46bd      	mov	sp, r7
 8022fe0:	bd80      	pop	{r7, pc}
 8022fe2:	bf00      	nop
 8022fe4:	2000228c 	.word	0x2000228c
 8022fe8:	20002290 	.word	0x20002290
 8022fec:	e000ed04 	.word	0xe000ed04

08022ff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022ff0:	b480      	push	{r7}
 8022ff2:	b085      	sub	sp, #20
 8022ff4:	af00      	add	r7, sp, #0
 8022ff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8023034 <prvGetNextExpireTime+0x44>)
 8022ffa:	681b      	ldr	r3, [r3, #0]
 8022ffc:	681b      	ldr	r3, [r3, #0]
 8022ffe:	2b00      	cmp	r3, #0
 8023000:	d101      	bne.n	8023006 <prvGetNextExpireTime+0x16>
 8023002:	2201      	movs	r2, #1
 8023004:	e000      	b.n	8023008 <prvGetNextExpireTime+0x18>
 8023006:	2200      	movs	r2, #0
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802300c:	687b      	ldr	r3, [r7, #4]
 802300e:	681b      	ldr	r3, [r3, #0]
 8023010:	2b00      	cmp	r3, #0
 8023012:	d105      	bne.n	8023020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8023014:	4b07      	ldr	r3, [pc, #28]	@ (8023034 <prvGetNextExpireTime+0x44>)
 8023016:	681b      	ldr	r3, [r3, #0]
 8023018:	68db      	ldr	r3, [r3, #12]
 802301a:	681b      	ldr	r3, [r3, #0]
 802301c:	60fb      	str	r3, [r7, #12]
 802301e:	e001      	b.n	8023024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8023020:	2300      	movs	r3, #0
 8023022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8023024:	68fb      	ldr	r3, [r7, #12]
}
 8023026:	4618      	mov	r0, r3
 8023028:	3714      	adds	r7, #20
 802302a:	46bd      	mov	sp, r7
 802302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023030:	4770      	bx	lr
 8023032:	bf00      	nop
 8023034:	20002288 	.word	0x20002288

08023038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8023038:	b580      	push	{r7, lr}
 802303a:	b084      	sub	sp, #16
 802303c:	af00      	add	r7, sp, #0
 802303e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8023040:	f7ff f8fa 	bl	8022238 <xTaskGetTickCount>
 8023044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8023046:	4b0b      	ldr	r3, [pc, #44]	@ (8023074 <prvSampleTimeNow+0x3c>)
 8023048:	681b      	ldr	r3, [r3, #0]
 802304a:	68fa      	ldr	r2, [r7, #12]
 802304c:	429a      	cmp	r2, r3
 802304e:	d205      	bcs.n	802305c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8023050:	f000 f93a 	bl	80232c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	2201      	movs	r2, #1
 8023058:	601a      	str	r2, [r3, #0]
 802305a:	e002      	b.n	8023062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 802305c:	687b      	ldr	r3, [r7, #4]
 802305e:	2200      	movs	r2, #0
 8023060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8023062:	4a04      	ldr	r2, [pc, #16]	@ (8023074 <prvSampleTimeNow+0x3c>)
 8023064:	68fb      	ldr	r3, [r7, #12]
 8023066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8023068:	68fb      	ldr	r3, [r7, #12]
}
 802306a:	4618      	mov	r0, r3
 802306c:	3710      	adds	r7, #16
 802306e:	46bd      	mov	sp, r7
 8023070:	bd80      	pop	{r7, pc}
 8023072:	bf00      	nop
 8023074:	20002298 	.word	0x20002298

08023078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8023078:	b580      	push	{r7, lr}
 802307a:	b086      	sub	sp, #24
 802307c:	af00      	add	r7, sp, #0
 802307e:	60f8      	str	r0, [r7, #12]
 8023080:	60b9      	str	r1, [r7, #8]
 8023082:	607a      	str	r2, [r7, #4]
 8023084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8023086:	2300      	movs	r3, #0
 8023088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 802308a:	68fb      	ldr	r3, [r7, #12]
 802308c:	68ba      	ldr	r2, [r7, #8]
 802308e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8023090:	68fb      	ldr	r3, [r7, #12]
 8023092:	68fa      	ldr	r2, [r7, #12]
 8023094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8023096:	68ba      	ldr	r2, [r7, #8]
 8023098:	687b      	ldr	r3, [r7, #4]
 802309a:	429a      	cmp	r2, r3
 802309c:	d812      	bhi.n	80230c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802309e:	687a      	ldr	r2, [r7, #4]
 80230a0:	683b      	ldr	r3, [r7, #0]
 80230a2:	1ad2      	subs	r2, r2, r3
 80230a4:	68fb      	ldr	r3, [r7, #12]
 80230a6:	699b      	ldr	r3, [r3, #24]
 80230a8:	429a      	cmp	r2, r3
 80230aa:	d302      	bcc.n	80230b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80230ac:	2301      	movs	r3, #1
 80230ae:	617b      	str	r3, [r7, #20]
 80230b0:	e01b      	b.n	80230ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80230b2:	4b10      	ldr	r3, [pc, #64]	@ (80230f4 <prvInsertTimerInActiveList+0x7c>)
 80230b4:	681a      	ldr	r2, [r3, #0]
 80230b6:	68fb      	ldr	r3, [r7, #12]
 80230b8:	3304      	adds	r3, #4
 80230ba:	4619      	mov	r1, r3
 80230bc:	4610      	mov	r0, r2
 80230be:	f7fd fc8a 	bl	80209d6 <vListInsert>
 80230c2:	e012      	b.n	80230ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80230c4:	687a      	ldr	r2, [r7, #4]
 80230c6:	683b      	ldr	r3, [r7, #0]
 80230c8:	429a      	cmp	r2, r3
 80230ca:	d206      	bcs.n	80230da <prvInsertTimerInActiveList+0x62>
 80230cc:	68ba      	ldr	r2, [r7, #8]
 80230ce:	683b      	ldr	r3, [r7, #0]
 80230d0:	429a      	cmp	r2, r3
 80230d2:	d302      	bcc.n	80230da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80230d4:	2301      	movs	r3, #1
 80230d6:	617b      	str	r3, [r7, #20]
 80230d8:	e007      	b.n	80230ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80230da:	4b07      	ldr	r3, [pc, #28]	@ (80230f8 <prvInsertTimerInActiveList+0x80>)
 80230dc:	681a      	ldr	r2, [r3, #0]
 80230de:	68fb      	ldr	r3, [r7, #12]
 80230e0:	3304      	adds	r3, #4
 80230e2:	4619      	mov	r1, r3
 80230e4:	4610      	mov	r0, r2
 80230e6:	f7fd fc76 	bl	80209d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80230ea:	697b      	ldr	r3, [r7, #20]
}
 80230ec:	4618      	mov	r0, r3
 80230ee:	3718      	adds	r7, #24
 80230f0:	46bd      	mov	sp, r7
 80230f2:	bd80      	pop	{r7, pc}
 80230f4:	2000228c 	.word	0x2000228c
 80230f8:	20002288 	.word	0x20002288

080230fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80230fc:	b580      	push	{r7, lr}
 80230fe:	b08e      	sub	sp, #56	@ 0x38
 8023100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8023102:	e0ce      	b.n	80232a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	2b00      	cmp	r3, #0
 8023108:	da19      	bge.n	802313e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802310a:	1d3b      	adds	r3, r7, #4
 802310c:	3304      	adds	r3, #4
 802310e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8023110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023112:	2b00      	cmp	r3, #0
 8023114:	d10b      	bne.n	802312e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8023116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802311a:	f383 8811 	msr	BASEPRI, r3
 802311e:	f3bf 8f6f 	isb	sy
 8023122:	f3bf 8f4f 	dsb	sy
 8023126:	61fb      	str	r3, [r7, #28]
}
 8023128:	bf00      	nop
 802312a:	bf00      	nop
 802312c:	e7fd      	b.n	802312a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023130:	681b      	ldr	r3, [r3, #0]
 8023132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023134:	6850      	ldr	r0, [r2, #4]
 8023136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023138:	6892      	ldr	r2, [r2, #8]
 802313a:	4611      	mov	r1, r2
 802313c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802313e:	687b      	ldr	r3, [r7, #4]
 8023140:	2b00      	cmp	r3, #0
 8023142:	f2c0 80ae 	blt.w	80232a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8023146:	68fb      	ldr	r3, [r7, #12]
 8023148:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 802314a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802314c:	695b      	ldr	r3, [r3, #20]
 802314e:	2b00      	cmp	r3, #0
 8023150:	d004      	beq.n	802315c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023154:	3304      	adds	r3, #4
 8023156:	4618      	mov	r0, r3
 8023158:	f7fd fc76 	bl	8020a48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802315c:	463b      	mov	r3, r7
 802315e:	4618      	mov	r0, r3
 8023160:	f7ff ff6a 	bl	8023038 <prvSampleTimeNow>
 8023164:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8023166:	687b      	ldr	r3, [r7, #4]
 8023168:	2b09      	cmp	r3, #9
 802316a:	f200 8097 	bhi.w	802329c <prvProcessReceivedCommands+0x1a0>
 802316e:	a201      	add	r2, pc, #4	@ (adr r2, 8023174 <prvProcessReceivedCommands+0x78>)
 8023170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023174:	0802319d 	.word	0x0802319d
 8023178:	0802319d 	.word	0x0802319d
 802317c:	0802319d 	.word	0x0802319d
 8023180:	08023213 	.word	0x08023213
 8023184:	08023227 	.word	0x08023227
 8023188:	08023273 	.word	0x08023273
 802318c:	0802319d 	.word	0x0802319d
 8023190:	0802319d 	.word	0x0802319d
 8023194:	08023213 	.word	0x08023213
 8023198:	08023227 	.word	0x08023227
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802319e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80231a2:	f043 0301 	orr.w	r3, r3, #1
 80231a6:	b2da      	uxtb	r2, r3
 80231a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80231aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80231ae:	68ba      	ldr	r2, [r7, #8]
 80231b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80231b2:	699b      	ldr	r3, [r3, #24]
 80231b4:	18d1      	adds	r1, r2, r3
 80231b6:	68bb      	ldr	r3, [r7, #8]
 80231b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80231ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80231bc:	f7ff ff5c 	bl	8023078 <prvInsertTimerInActiveList>
 80231c0:	4603      	mov	r3, r0
 80231c2:	2b00      	cmp	r3, #0
 80231c4:	d06c      	beq.n	80232a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80231c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80231c8:	6a1b      	ldr	r3, [r3, #32]
 80231ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80231cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80231ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80231d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80231d4:	f003 0304 	and.w	r3, r3, #4
 80231d8:	2b00      	cmp	r3, #0
 80231da:	d061      	beq.n	80232a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80231dc:	68ba      	ldr	r2, [r7, #8]
 80231de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80231e0:	699b      	ldr	r3, [r3, #24]
 80231e2:	441a      	add	r2, r3
 80231e4:	2300      	movs	r3, #0
 80231e6:	9300      	str	r3, [sp, #0]
 80231e8:	2300      	movs	r3, #0
 80231ea:	2100      	movs	r1, #0
 80231ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80231ee:	f7ff fe01 	bl	8022df4 <xTimerGenericCommand>
 80231f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80231f4:	6a3b      	ldr	r3, [r7, #32]
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	d152      	bne.n	80232a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80231fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80231fe:	f383 8811 	msr	BASEPRI, r3
 8023202:	f3bf 8f6f 	isb	sy
 8023206:	f3bf 8f4f 	dsb	sy
 802320a:	61bb      	str	r3, [r7, #24]
}
 802320c:	bf00      	nop
 802320e:	bf00      	nop
 8023210:	e7fd      	b.n	802320e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8023218:	f023 0301 	bic.w	r3, r3, #1
 802321c:	b2da      	uxtb	r2, r3
 802321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023220:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8023224:	e03d      	b.n	80232a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8023226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802322c:	f043 0301 	orr.w	r3, r3, #1
 8023230:	b2da      	uxtb	r2, r3
 8023232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023234:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8023238:	68ba      	ldr	r2, [r7, #8]
 802323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802323c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023240:	699b      	ldr	r3, [r3, #24]
 8023242:	2b00      	cmp	r3, #0
 8023244:	d10b      	bne.n	802325e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8023246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802324a:	f383 8811 	msr	BASEPRI, r3
 802324e:	f3bf 8f6f 	isb	sy
 8023252:	f3bf 8f4f 	dsb	sy
 8023256:	617b      	str	r3, [r7, #20]
}
 8023258:	bf00      	nop
 802325a:	bf00      	nop
 802325c:	e7fd      	b.n	802325a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023260:	699a      	ldr	r2, [r3, #24]
 8023262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023264:	18d1      	adds	r1, r2, r3
 8023266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802326a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802326c:	f7ff ff04 	bl	8023078 <prvInsertTimerInActiveList>
					break;
 8023270:	e017      	b.n	80232a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8023272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023274:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8023278:	f003 0302 	and.w	r3, r3, #2
 802327c:	2b00      	cmp	r3, #0
 802327e:	d103      	bne.n	8023288 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8023280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023282:	f000 fb61 	bl	8023948 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8023286:	e00c      	b.n	80232a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802328a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 802328e:	f023 0301 	bic.w	r3, r3, #1
 8023292:	b2da      	uxtb	r2, r3
 8023294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 802329a:	e002      	b.n	80232a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 802329c:	bf00      	nop
 802329e:	e000      	b.n	80232a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80232a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80232a2:	4b08      	ldr	r3, [pc, #32]	@ (80232c4 <prvProcessReceivedCommands+0x1c8>)
 80232a4:	681b      	ldr	r3, [r3, #0]
 80232a6:	1d39      	adds	r1, r7, #4
 80232a8:	2200      	movs	r2, #0
 80232aa:	4618      	mov	r0, r3
 80232ac:	f7fd ff94 	bl	80211d8 <xQueueReceive>
 80232b0:	4603      	mov	r3, r0
 80232b2:	2b00      	cmp	r3, #0
 80232b4:	f47f af26 	bne.w	8023104 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80232b8:	bf00      	nop
 80232ba:	bf00      	nop
 80232bc:	3730      	adds	r7, #48	@ 0x30
 80232be:	46bd      	mov	sp, r7
 80232c0:	bd80      	pop	{r7, pc}
 80232c2:	bf00      	nop
 80232c4:	20002290 	.word	0x20002290

080232c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80232c8:	b580      	push	{r7, lr}
 80232ca:	b088      	sub	sp, #32
 80232cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80232ce:	e049      	b.n	8023364 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80232d0:	4b2e      	ldr	r3, [pc, #184]	@ (802338c <prvSwitchTimerLists+0xc4>)
 80232d2:	681b      	ldr	r3, [r3, #0]
 80232d4:	68db      	ldr	r3, [r3, #12]
 80232d6:	681b      	ldr	r3, [r3, #0]
 80232d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80232da:	4b2c      	ldr	r3, [pc, #176]	@ (802338c <prvSwitchTimerLists+0xc4>)
 80232dc:	681b      	ldr	r3, [r3, #0]
 80232de:	68db      	ldr	r3, [r3, #12]
 80232e0:	68db      	ldr	r3, [r3, #12]
 80232e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80232e4:	68fb      	ldr	r3, [r7, #12]
 80232e6:	3304      	adds	r3, #4
 80232e8:	4618      	mov	r0, r3
 80232ea:	f7fd fbad 	bl	8020a48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80232ee:	68fb      	ldr	r3, [r7, #12]
 80232f0:	6a1b      	ldr	r3, [r3, #32]
 80232f2:	68f8      	ldr	r0, [r7, #12]
 80232f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80232f6:	68fb      	ldr	r3, [r7, #12]
 80232f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80232fc:	f003 0304 	and.w	r3, r3, #4
 8023300:	2b00      	cmp	r3, #0
 8023302:	d02f      	beq.n	8023364 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8023304:	68fb      	ldr	r3, [r7, #12]
 8023306:	699b      	ldr	r3, [r3, #24]
 8023308:	693a      	ldr	r2, [r7, #16]
 802330a:	4413      	add	r3, r2
 802330c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802330e:	68ba      	ldr	r2, [r7, #8]
 8023310:	693b      	ldr	r3, [r7, #16]
 8023312:	429a      	cmp	r2, r3
 8023314:	d90e      	bls.n	8023334 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8023316:	68fb      	ldr	r3, [r7, #12]
 8023318:	68ba      	ldr	r2, [r7, #8]
 802331a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 802331c:	68fb      	ldr	r3, [r7, #12]
 802331e:	68fa      	ldr	r2, [r7, #12]
 8023320:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8023322:	4b1a      	ldr	r3, [pc, #104]	@ (802338c <prvSwitchTimerLists+0xc4>)
 8023324:	681a      	ldr	r2, [r3, #0]
 8023326:	68fb      	ldr	r3, [r7, #12]
 8023328:	3304      	adds	r3, #4
 802332a:	4619      	mov	r1, r3
 802332c:	4610      	mov	r0, r2
 802332e:	f7fd fb52 	bl	80209d6 <vListInsert>
 8023332:	e017      	b.n	8023364 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8023334:	2300      	movs	r3, #0
 8023336:	9300      	str	r3, [sp, #0]
 8023338:	2300      	movs	r3, #0
 802333a:	693a      	ldr	r2, [r7, #16]
 802333c:	2100      	movs	r1, #0
 802333e:	68f8      	ldr	r0, [r7, #12]
 8023340:	f7ff fd58 	bl	8022df4 <xTimerGenericCommand>
 8023344:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8023346:	687b      	ldr	r3, [r7, #4]
 8023348:	2b00      	cmp	r3, #0
 802334a:	d10b      	bne.n	8023364 <prvSwitchTimerLists+0x9c>
	__asm volatile
 802334c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023350:	f383 8811 	msr	BASEPRI, r3
 8023354:	f3bf 8f6f 	isb	sy
 8023358:	f3bf 8f4f 	dsb	sy
 802335c:	603b      	str	r3, [r7, #0]
}
 802335e:	bf00      	nop
 8023360:	bf00      	nop
 8023362:	e7fd      	b.n	8023360 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8023364:	4b09      	ldr	r3, [pc, #36]	@ (802338c <prvSwitchTimerLists+0xc4>)
 8023366:	681b      	ldr	r3, [r3, #0]
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	2b00      	cmp	r3, #0
 802336c:	d1b0      	bne.n	80232d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 802336e:	4b07      	ldr	r3, [pc, #28]	@ (802338c <prvSwitchTimerLists+0xc4>)
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8023374:	4b06      	ldr	r3, [pc, #24]	@ (8023390 <prvSwitchTimerLists+0xc8>)
 8023376:	681b      	ldr	r3, [r3, #0]
 8023378:	4a04      	ldr	r2, [pc, #16]	@ (802338c <prvSwitchTimerLists+0xc4>)
 802337a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 802337c:	4a04      	ldr	r2, [pc, #16]	@ (8023390 <prvSwitchTimerLists+0xc8>)
 802337e:	697b      	ldr	r3, [r7, #20]
 8023380:	6013      	str	r3, [r2, #0]
}
 8023382:	bf00      	nop
 8023384:	3718      	adds	r7, #24
 8023386:	46bd      	mov	sp, r7
 8023388:	bd80      	pop	{r7, pc}
 802338a:	bf00      	nop
 802338c:	20002288 	.word	0x20002288
 8023390:	2000228c 	.word	0x2000228c

08023394 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8023394:	b580      	push	{r7, lr}
 8023396:	b082      	sub	sp, #8
 8023398:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802339a:	f000 f96d 	bl	8023678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 802339e:	4b15      	ldr	r3, [pc, #84]	@ (80233f4 <prvCheckForValidListAndQueue+0x60>)
 80233a0:	681b      	ldr	r3, [r3, #0]
 80233a2:	2b00      	cmp	r3, #0
 80233a4:	d120      	bne.n	80233e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80233a6:	4814      	ldr	r0, [pc, #80]	@ (80233f8 <prvCheckForValidListAndQueue+0x64>)
 80233a8:	f7fd fac4 	bl	8020934 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80233ac:	4813      	ldr	r0, [pc, #76]	@ (80233fc <prvCheckForValidListAndQueue+0x68>)
 80233ae:	f7fd fac1 	bl	8020934 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80233b2:	4b13      	ldr	r3, [pc, #76]	@ (8023400 <prvCheckForValidListAndQueue+0x6c>)
 80233b4:	4a10      	ldr	r2, [pc, #64]	@ (80233f8 <prvCheckForValidListAndQueue+0x64>)
 80233b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80233b8:	4b12      	ldr	r3, [pc, #72]	@ (8023404 <prvCheckForValidListAndQueue+0x70>)
 80233ba:	4a10      	ldr	r2, [pc, #64]	@ (80233fc <prvCheckForValidListAndQueue+0x68>)
 80233bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80233be:	2300      	movs	r3, #0
 80233c0:	9300      	str	r3, [sp, #0]
 80233c2:	4b11      	ldr	r3, [pc, #68]	@ (8023408 <prvCheckForValidListAndQueue+0x74>)
 80233c4:	4a11      	ldr	r2, [pc, #68]	@ (802340c <prvCheckForValidListAndQueue+0x78>)
 80233c6:	2110      	movs	r1, #16
 80233c8:	200a      	movs	r0, #10
 80233ca:	f7fd fbd1 	bl	8020b70 <xQueueGenericCreateStatic>
 80233ce:	4603      	mov	r3, r0
 80233d0:	4a08      	ldr	r2, [pc, #32]	@ (80233f4 <prvCheckForValidListAndQueue+0x60>)
 80233d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80233d4:	4b07      	ldr	r3, [pc, #28]	@ (80233f4 <prvCheckForValidListAndQueue+0x60>)
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	2b00      	cmp	r3, #0
 80233da:	d005      	beq.n	80233e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80233dc:	4b05      	ldr	r3, [pc, #20]	@ (80233f4 <prvCheckForValidListAndQueue+0x60>)
 80233de:	681b      	ldr	r3, [r3, #0]
 80233e0:	490b      	ldr	r1, [pc, #44]	@ (8023410 <prvCheckForValidListAndQueue+0x7c>)
 80233e2:	4618      	mov	r0, r3
 80233e4:	f7fe fbb6 	bl	8021b54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80233e8:	f000 f978 	bl	80236dc <vPortExitCritical>
}
 80233ec:	bf00      	nop
 80233ee:	46bd      	mov	sp, r7
 80233f0:	bd80      	pop	{r7, pc}
 80233f2:	bf00      	nop
 80233f4:	20002290 	.word	0x20002290
 80233f8:	20002260 	.word	0x20002260
 80233fc:	20002274 	.word	0x20002274
 8023400:	20002288 	.word	0x20002288
 8023404:	2000228c 	.word	0x2000228c
 8023408:	2000233c 	.word	0x2000233c
 802340c:	2000229c 	.word	0x2000229c
 8023410:	080337f0 	.word	0x080337f0

08023414 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8023414:	b480      	push	{r7}
 8023416:	b085      	sub	sp, #20
 8023418:	af00      	add	r7, sp, #0
 802341a:	60f8      	str	r0, [r7, #12]
 802341c:	60b9      	str	r1, [r7, #8]
 802341e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8023420:	68fb      	ldr	r3, [r7, #12]
 8023422:	3b04      	subs	r3, #4
 8023424:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8023426:	68fb      	ldr	r3, [r7, #12]
 8023428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 802342c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802342e:	68fb      	ldr	r3, [r7, #12]
 8023430:	3b04      	subs	r3, #4
 8023432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8023434:	68bb      	ldr	r3, [r7, #8]
 8023436:	f023 0201 	bic.w	r2, r3, #1
 802343a:	68fb      	ldr	r3, [r7, #12]
 802343c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 802343e:	68fb      	ldr	r3, [r7, #12]
 8023440:	3b04      	subs	r3, #4
 8023442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8023444:	4a0c      	ldr	r2, [pc, #48]	@ (8023478 <pxPortInitialiseStack+0x64>)
 8023446:	68fb      	ldr	r3, [r7, #12]
 8023448:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802344a:	68fb      	ldr	r3, [r7, #12]
 802344c:	3b14      	subs	r3, #20
 802344e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8023450:	687a      	ldr	r2, [r7, #4]
 8023452:	68fb      	ldr	r3, [r7, #12]
 8023454:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8023456:	68fb      	ldr	r3, [r7, #12]
 8023458:	3b04      	subs	r3, #4
 802345a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 802345c:	68fb      	ldr	r3, [r7, #12]
 802345e:	f06f 0202 	mvn.w	r2, #2
 8023462:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8023464:	68fb      	ldr	r3, [r7, #12]
 8023466:	3b20      	subs	r3, #32
 8023468:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802346a:	68fb      	ldr	r3, [r7, #12]
}
 802346c:	4618      	mov	r0, r3
 802346e:	3714      	adds	r7, #20
 8023470:	46bd      	mov	sp, r7
 8023472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023476:	4770      	bx	lr
 8023478:	0802347d 	.word	0x0802347d

0802347c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 802347c:	b480      	push	{r7}
 802347e:	b085      	sub	sp, #20
 8023480:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8023482:	2300      	movs	r3, #0
 8023484:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8023486:	4b13      	ldr	r3, [pc, #76]	@ (80234d4 <prvTaskExitError+0x58>)
 8023488:	681b      	ldr	r3, [r3, #0]
 802348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802348e:	d00b      	beq.n	80234a8 <prvTaskExitError+0x2c>
	__asm volatile
 8023490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023494:	f383 8811 	msr	BASEPRI, r3
 8023498:	f3bf 8f6f 	isb	sy
 802349c:	f3bf 8f4f 	dsb	sy
 80234a0:	60fb      	str	r3, [r7, #12]
}
 80234a2:	bf00      	nop
 80234a4:	bf00      	nop
 80234a6:	e7fd      	b.n	80234a4 <prvTaskExitError+0x28>
	__asm volatile
 80234a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80234ac:	f383 8811 	msr	BASEPRI, r3
 80234b0:	f3bf 8f6f 	isb	sy
 80234b4:	f3bf 8f4f 	dsb	sy
 80234b8:	60bb      	str	r3, [r7, #8]
}
 80234ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80234bc:	bf00      	nop
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	2b00      	cmp	r3, #0
 80234c2:	d0fc      	beq.n	80234be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80234c4:	bf00      	nop
 80234c6:	bf00      	nop
 80234c8:	3714      	adds	r7, #20
 80234ca:	46bd      	mov	sp, r7
 80234cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d0:	4770      	bx	lr
 80234d2:	bf00      	nop
 80234d4:	20000128 	.word	0x20000128
	...

080234e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80234e0:	4b07      	ldr	r3, [pc, #28]	@ (8023500 <pxCurrentTCBConst2>)
 80234e2:	6819      	ldr	r1, [r3, #0]
 80234e4:	6808      	ldr	r0, [r1, #0]
 80234e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234ea:	f380 8809 	msr	PSP, r0
 80234ee:	f3bf 8f6f 	isb	sy
 80234f2:	f04f 0000 	mov.w	r0, #0
 80234f6:	f380 8811 	msr	BASEPRI, r0
 80234fa:	4770      	bx	lr
 80234fc:	f3af 8000 	nop.w

08023500 <pxCurrentTCBConst2>:
 8023500:	20001d58 	.word	0x20001d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8023504:	bf00      	nop
 8023506:	bf00      	nop

08023508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8023508:	4808      	ldr	r0, [pc, #32]	@ (802352c <prvPortStartFirstTask+0x24>)
 802350a:	6800      	ldr	r0, [r0, #0]
 802350c:	6800      	ldr	r0, [r0, #0]
 802350e:	f380 8808 	msr	MSP, r0
 8023512:	f04f 0000 	mov.w	r0, #0
 8023516:	f380 8814 	msr	CONTROL, r0
 802351a:	b662      	cpsie	i
 802351c:	b661      	cpsie	f
 802351e:	f3bf 8f4f 	dsb	sy
 8023522:	f3bf 8f6f 	isb	sy
 8023526:	df00      	svc	0
 8023528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802352a:	bf00      	nop
 802352c:	e000ed08 	.word	0xe000ed08

08023530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8023530:	b580      	push	{r7, lr}
 8023532:	b086      	sub	sp, #24
 8023534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8023536:	4b47      	ldr	r3, [pc, #284]	@ (8023654 <xPortStartScheduler+0x124>)
 8023538:	681b      	ldr	r3, [r3, #0]
 802353a:	4a47      	ldr	r2, [pc, #284]	@ (8023658 <xPortStartScheduler+0x128>)
 802353c:	4293      	cmp	r3, r2
 802353e:	d10b      	bne.n	8023558 <xPortStartScheduler+0x28>
	__asm volatile
 8023540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023544:	f383 8811 	msr	BASEPRI, r3
 8023548:	f3bf 8f6f 	isb	sy
 802354c:	f3bf 8f4f 	dsb	sy
 8023550:	613b      	str	r3, [r7, #16]
}
 8023552:	bf00      	nop
 8023554:	bf00      	nop
 8023556:	e7fd      	b.n	8023554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8023558:	4b3e      	ldr	r3, [pc, #248]	@ (8023654 <xPortStartScheduler+0x124>)
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	4a3f      	ldr	r2, [pc, #252]	@ (802365c <xPortStartScheduler+0x12c>)
 802355e:	4293      	cmp	r3, r2
 8023560:	d10b      	bne.n	802357a <xPortStartScheduler+0x4a>
	__asm volatile
 8023562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023566:	f383 8811 	msr	BASEPRI, r3
 802356a:	f3bf 8f6f 	isb	sy
 802356e:	f3bf 8f4f 	dsb	sy
 8023572:	60fb      	str	r3, [r7, #12]
}
 8023574:	bf00      	nop
 8023576:	bf00      	nop
 8023578:	e7fd      	b.n	8023576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 802357a:	4b39      	ldr	r3, [pc, #228]	@ (8023660 <xPortStartScheduler+0x130>)
 802357c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802357e:	697b      	ldr	r3, [r7, #20]
 8023580:	781b      	ldrb	r3, [r3, #0]
 8023582:	b2db      	uxtb	r3, r3
 8023584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8023586:	697b      	ldr	r3, [r7, #20]
 8023588:	22ff      	movs	r2, #255	@ 0xff
 802358a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 802358c:	697b      	ldr	r3, [r7, #20]
 802358e:	781b      	ldrb	r3, [r3, #0]
 8023590:	b2db      	uxtb	r3, r3
 8023592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8023594:	78fb      	ldrb	r3, [r7, #3]
 8023596:	b2db      	uxtb	r3, r3
 8023598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 802359c:	b2da      	uxtb	r2, r3
 802359e:	4b31      	ldr	r3, [pc, #196]	@ (8023664 <xPortStartScheduler+0x134>)
 80235a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80235a2:	4b31      	ldr	r3, [pc, #196]	@ (8023668 <xPortStartScheduler+0x138>)
 80235a4:	2207      	movs	r2, #7
 80235a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80235a8:	e009      	b.n	80235be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80235aa:	4b2f      	ldr	r3, [pc, #188]	@ (8023668 <xPortStartScheduler+0x138>)
 80235ac:	681b      	ldr	r3, [r3, #0]
 80235ae:	3b01      	subs	r3, #1
 80235b0:	4a2d      	ldr	r2, [pc, #180]	@ (8023668 <xPortStartScheduler+0x138>)
 80235b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80235b4:	78fb      	ldrb	r3, [r7, #3]
 80235b6:	b2db      	uxtb	r3, r3
 80235b8:	005b      	lsls	r3, r3, #1
 80235ba:	b2db      	uxtb	r3, r3
 80235bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80235be:	78fb      	ldrb	r3, [r7, #3]
 80235c0:	b2db      	uxtb	r3, r3
 80235c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80235c6:	2b80      	cmp	r3, #128	@ 0x80
 80235c8:	d0ef      	beq.n	80235aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80235ca:	4b27      	ldr	r3, [pc, #156]	@ (8023668 <xPortStartScheduler+0x138>)
 80235cc:	681b      	ldr	r3, [r3, #0]
 80235ce:	f1c3 0307 	rsb	r3, r3, #7
 80235d2:	2b04      	cmp	r3, #4
 80235d4:	d00b      	beq.n	80235ee <xPortStartScheduler+0xbe>
	__asm volatile
 80235d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80235da:	f383 8811 	msr	BASEPRI, r3
 80235de:	f3bf 8f6f 	isb	sy
 80235e2:	f3bf 8f4f 	dsb	sy
 80235e6:	60bb      	str	r3, [r7, #8]
}
 80235e8:	bf00      	nop
 80235ea:	bf00      	nop
 80235ec:	e7fd      	b.n	80235ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80235ee:	4b1e      	ldr	r3, [pc, #120]	@ (8023668 <xPortStartScheduler+0x138>)
 80235f0:	681b      	ldr	r3, [r3, #0]
 80235f2:	021b      	lsls	r3, r3, #8
 80235f4:	4a1c      	ldr	r2, [pc, #112]	@ (8023668 <xPortStartScheduler+0x138>)
 80235f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80235f8:	4b1b      	ldr	r3, [pc, #108]	@ (8023668 <xPortStartScheduler+0x138>)
 80235fa:	681b      	ldr	r3, [r3, #0]
 80235fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8023600:	4a19      	ldr	r2, [pc, #100]	@ (8023668 <xPortStartScheduler+0x138>)
 8023602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8023604:	687b      	ldr	r3, [r7, #4]
 8023606:	b2da      	uxtb	r2, r3
 8023608:	697b      	ldr	r3, [r7, #20]
 802360a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 802360c:	4b17      	ldr	r3, [pc, #92]	@ (802366c <xPortStartScheduler+0x13c>)
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	4a16      	ldr	r2, [pc, #88]	@ (802366c <xPortStartScheduler+0x13c>)
 8023612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8023616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8023618:	4b14      	ldr	r3, [pc, #80]	@ (802366c <xPortStartScheduler+0x13c>)
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	4a13      	ldr	r2, [pc, #76]	@ (802366c <xPortStartScheduler+0x13c>)
 802361e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8023622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8023624:	f000 f8da 	bl	80237dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8023628:	4b11      	ldr	r3, [pc, #68]	@ (8023670 <xPortStartScheduler+0x140>)
 802362a:	2200      	movs	r2, #0
 802362c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 802362e:	f000 f8f9 	bl	8023824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8023632:	4b10      	ldr	r3, [pc, #64]	@ (8023674 <xPortStartScheduler+0x144>)
 8023634:	681b      	ldr	r3, [r3, #0]
 8023636:	4a0f      	ldr	r2, [pc, #60]	@ (8023674 <xPortStartScheduler+0x144>)
 8023638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 802363c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 802363e:	f7ff ff63 	bl	8023508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8023642:	f7fe fecb 	bl	80223dc <vTaskSwitchContext>
	prvTaskExitError();
 8023646:	f7ff ff19 	bl	802347c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802364a:	2300      	movs	r3, #0
}
 802364c:	4618      	mov	r0, r3
 802364e:	3718      	adds	r7, #24
 8023650:	46bd      	mov	sp, r7
 8023652:	bd80      	pop	{r7, pc}
 8023654:	e000ed00 	.word	0xe000ed00
 8023658:	410fc271 	.word	0x410fc271
 802365c:	410fc270 	.word	0x410fc270
 8023660:	e000e400 	.word	0xe000e400
 8023664:	2000238c 	.word	0x2000238c
 8023668:	20002390 	.word	0x20002390
 802366c:	e000ed20 	.word	0xe000ed20
 8023670:	20000128 	.word	0x20000128
 8023674:	e000ef34 	.word	0xe000ef34

08023678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8023678:	b480      	push	{r7}
 802367a:	b083      	sub	sp, #12
 802367c:	af00      	add	r7, sp, #0
	__asm volatile
 802367e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023682:	f383 8811 	msr	BASEPRI, r3
 8023686:	f3bf 8f6f 	isb	sy
 802368a:	f3bf 8f4f 	dsb	sy
 802368e:	607b      	str	r3, [r7, #4]
}
 8023690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8023692:	4b10      	ldr	r3, [pc, #64]	@ (80236d4 <vPortEnterCritical+0x5c>)
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	3301      	adds	r3, #1
 8023698:	4a0e      	ldr	r2, [pc, #56]	@ (80236d4 <vPortEnterCritical+0x5c>)
 802369a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 802369c:	4b0d      	ldr	r3, [pc, #52]	@ (80236d4 <vPortEnterCritical+0x5c>)
 802369e:	681b      	ldr	r3, [r3, #0]
 80236a0:	2b01      	cmp	r3, #1
 80236a2:	d110      	bne.n	80236c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80236a4:	4b0c      	ldr	r3, [pc, #48]	@ (80236d8 <vPortEnterCritical+0x60>)
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	b2db      	uxtb	r3, r3
 80236aa:	2b00      	cmp	r3, #0
 80236ac:	d00b      	beq.n	80236c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80236ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80236b2:	f383 8811 	msr	BASEPRI, r3
 80236b6:	f3bf 8f6f 	isb	sy
 80236ba:	f3bf 8f4f 	dsb	sy
 80236be:	603b      	str	r3, [r7, #0]
}
 80236c0:	bf00      	nop
 80236c2:	bf00      	nop
 80236c4:	e7fd      	b.n	80236c2 <vPortEnterCritical+0x4a>
	}
}
 80236c6:	bf00      	nop
 80236c8:	370c      	adds	r7, #12
 80236ca:	46bd      	mov	sp, r7
 80236cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236d0:	4770      	bx	lr
 80236d2:	bf00      	nop
 80236d4:	20000128 	.word	0x20000128
 80236d8:	e000ed04 	.word	0xe000ed04

080236dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80236dc:	b480      	push	{r7}
 80236de:	b083      	sub	sp, #12
 80236e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80236e2:	4b12      	ldr	r3, [pc, #72]	@ (802372c <vPortExitCritical+0x50>)
 80236e4:	681b      	ldr	r3, [r3, #0]
 80236e6:	2b00      	cmp	r3, #0
 80236e8:	d10b      	bne.n	8023702 <vPortExitCritical+0x26>
	__asm volatile
 80236ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80236ee:	f383 8811 	msr	BASEPRI, r3
 80236f2:	f3bf 8f6f 	isb	sy
 80236f6:	f3bf 8f4f 	dsb	sy
 80236fa:	607b      	str	r3, [r7, #4]
}
 80236fc:	bf00      	nop
 80236fe:	bf00      	nop
 8023700:	e7fd      	b.n	80236fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8023702:	4b0a      	ldr	r3, [pc, #40]	@ (802372c <vPortExitCritical+0x50>)
 8023704:	681b      	ldr	r3, [r3, #0]
 8023706:	3b01      	subs	r3, #1
 8023708:	4a08      	ldr	r2, [pc, #32]	@ (802372c <vPortExitCritical+0x50>)
 802370a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 802370c:	4b07      	ldr	r3, [pc, #28]	@ (802372c <vPortExitCritical+0x50>)
 802370e:	681b      	ldr	r3, [r3, #0]
 8023710:	2b00      	cmp	r3, #0
 8023712:	d105      	bne.n	8023720 <vPortExitCritical+0x44>
 8023714:	2300      	movs	r3, #0
 8023716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8023718:	683b      	ldr	r3, [r7, #0]
 802371a:	f383 8811 	msr	BASEPRI, r3
}
 802371e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8023720:	bf00      	nop
 8023722:	370c      	adds	r7, #12
 8023724:	46bd      	mov	sp, r7
 8023726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802372a:	4770      	bx	lr
 802372c:	20000128 	.word	0x20000128

08023730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8023730:	f3ef 8009 	mrs	r0, PSP
 8023734:	f3bf 8f6f 	isb	sy
 8023738:	4b15      	ldr	r3, [pc, #84]	@ (8023790 <pxCurrentTCBConst>)
 802373a:	681a      	ldr	r2, [r3, #0]
 802373c:	f01e 0f10 	tst.w	lr, #16
 8023740:	bf08      	it	eq
 8023742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802374a:	6010      	str	r0, [r2, #0]
 802374c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8023754:	f380 8811 	msr	BASEPRI, r0
 8023758:	f3bf 8f4f 	dsb	sy
 802375c:	f3bf 8f6f 	isb	sy
 8023760:	f7fe fe3c 	bl	80223dc <vTaskSwitchContext>
 8023764:	f04f 0000 	mov.w	r0, #0
 8023768:	f380 8811 	msr	BASEPRI, r0
 802376c:	bc09      	pop	{r0, r3}
 802376e:	6819      	ldr	r1, [r3, #0]
 8023770:	6808      	ldr	r0, [r1, #0]
 8023772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023776:	f01e 0f10 	tst.w	lr, #16
 802377a:	bf08      	it	eq
 802377c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8023780:	f380 8809 	msr	PSP, r0
 8023784:	f3bf 8f6f 	isb	sy
 8023788:	4770      	bx	lr
 802378a:	bf00      	nop
 802378c:	f3af 8000 	nop.w

08023790 <pxCurrentTCBConst>:
 8023790:	20001d58 	.word	0x20001d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8023794:	bf00      	nop
 8023796:	bf00      	nop

08023798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8023798:	b580      	push	{r7, lr}
 802379a:	b082      	sub	sp, #8
 802379c:	af00      	add	r7, sp, #0
	__asm volatile
 802379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80237a2:	f383 8811 	msr	BASEPRI, r3
 80237a6:	f3bf 8f6f 	isb	sy
 80237aa:	f3bf 8f4f 	dsb	sy
 80237ae:	607b      	str	r3, [r7, #4]
}
 80237b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80237b2:	f7fe fd51 	bl	8022258 <xTaskIncrementTick>
 80237b6:	4603      	mov	r3, r0
 80237b8:	2b00      	cmp	r3, #0
 80237ba:	d003      	beq.n	80237c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80237bc:	4b06      	ldr	r3, [pc, #24]	@ (80237d8 <xPortSysTickHandler+0x40>)
 80237be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80237c2:	601a      	str	r2, [r3, #0]
 80237c4:	2300      	movs	r3, #0
 80237c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80237c8:	683b      	ldr	r3, [r7, #0]
 80237ca:	f383 8811 	msr	BASEPRI, r3
}
 80237ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80237d0:	bf00      	nop
 80237d2:	3708      	adds	r7, #8
 80237d4:	46bd      	mov	sp, r7
 80237d6:	bd80      	pop	{r7, pc}
 80237d8:	e000ed04 	.word	0xe000ed04

080237dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80237dc:	b480      	push	{r7}
 80237de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80237e0:	4b0b      	ldr	r3, [pc, #44]	@ (8023810 <vPortSetupTimerInterrupt+0x34>)
 80237e2:	2200      	movs	r2, #0
 80237e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80237e6:	4b0b      	ldr	r3, [pc, #44]	@ (8023814 <vPortSetupTimerInterrupt+0x38>)
 80237e8:	2200      	movs	r2, #0
 80237ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80237ec:	4b0a      	ldr	r3, [pc, #40]	@ (8023818 <vPortSetupTimerInterrupt+0x3c>)
 80237ee:	681b      	ldr	r3, [r3, #0]
 80237f0:	4a0a      	ldr	r2, [pc, #40]	@ (802381c <vPortSetupTimerInterrupt+0x40>)
 80237f2:	fba2 2303 	umull	r2, r3, r2, r3
 80237f6:	099b      	lsrs	r3, r3, #6
 80237f8:	4a09      	ldr	r2, [pc, #36]	@ (8023820 <vPortSetupTimerInterrupt+0x44>)
 80237fa:	3b01      	subs	r3, #1
 80237fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80237fe:	4b04      	ldr	r3, [pc, #16]	@ (8023810 <vPortSetupTimerInterrupt+0x34>)
 8023800:	2207      	movs	r2, #7
 8023802:	601a      	str	r2, [r3, #0]
}
 8023804:	bf00      	nop
 8023806:	46bd      	mov	sp, r7
 8023808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802380c:	4770      	bx	lr
 802380e:	bf00      	nop
 8023810:	e000e010 	.word	0xe000e010
 8023814:	e000e018 	.word	0xe000e018
 8023818:	20000000 	.word	0x20000000
 802381c:	10624dd3 	.word	0x10624dd3
 8023820:	e000e014 	.word	0xe000e014

08023824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8023834 <vPortEnableVFP+0x10>
 8023828:	6801      	ldr	r1, [r0, #0]
 802382a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 802382e:	6001      	str	r1, [r0, #0]
 8023830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023832:	bf00      	nop
 8023834:	e000ed88 	.word	0xe000ed88

08023838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8023838:	b480      	push	{r7}
 802383a:	b085      	sub	sp, #20
 802383c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802383e:	f3ef 8305 	mrs	r3, IPSR
 8023842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8023844:	68fb      	ldr	r3, [r7, #12]
 8023846:	2b0f      	cmp	r3, #15
 8023848:	d915      	bls.n	8023876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802384a:	4a18      	ldr	r2, [pc, #96]	@ (80238ac <vPortValidateInterruptPriority+0x74>)
 802384c:	68fb      	ldr	r3, [r7, #12]
 802384e:	4413      	add	r3, r2
 8023850:	781b      	ldrb	r3, [r3, #0]
 8023852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8023854:	4b16      	ldr	r3, [pc, #88]	@ (80238b0 <vPortValidateInterruptPriority+0x78>)
 8023856:	781b      	ldrb	r3, [r3, #0]
 8023858:	7afa      	ldrb	r2, [r7, #11]
 802385a:	429a      	cmp	r2, r3
 802385c:	d20b      	bcs.n	8023876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 802385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8023862:	f383 8811 	msr	BASEPRI, r3
 8023866:	f3bf 8f6f 	isb	sy
 802386a:	f3bf 8f4f 	dsb	sy
 802386e:	607b      	str	r3, [r7, #4]
}
 8023870:	bf00      	nop
 8023872:	bf00      	nop
 8023874:	e7fd      	b.n	8023872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8023876:	4b0f      	ldr	r3, [pc, #60]	@ (80238b4 <vPortValidateInterruptPriority+0x7c>)
 8023878:	681b      	ldr	r3, [r3, #0]
 802387a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 802387e:	4b0e      	ldr	r3, [pc, #56]	@ (80238b8 <vPortValidateInterruptPriority+0x80>)
 8023880:	681b      	ldr	r3, [r3, #0]
 8023882:	429a      	cmp	r2, r3
 8023884:	d90b      	bls.n	802389e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8023886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802388a:	f383 8811 	msr	BASEPRI, r3
 802388e:	f3bf 8f6f 	isb	sy
 8023892:	f3bf 8f4f 	dsb	sy
 8023896:	603b      	str	r3, [r7, #0]
}
 8023898:	bf00      	nop
 802389a:	bf00      	nop
 802389c:	e7fd      	b.n	802389a <vPortValidateInterruptPriority+0x62>
	}
 802389e:	bf00      	nop
 80238a0:	3714      	adds	r7, #20
 80238a2:	46bd      	mov	sp, r7
 80238a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238a8:	4770      	bx	lr
 80238aa:	bf00      	nop
 80238ac:	e000e3f0 	.word	0xe000e3f0
 80238b0:	2000238c 	.word	0x2000238c
 80238b4:	e000ed0c 	.word	0xe000ed0c
 80238b8:	20002390 	.word	0x20002390

080238bc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80238bc:	b580      	push	{r7, lr}
 80238be:	b084      	sub	sp, #16
 80238c0:	af00      	add	r7, sp, #0
 80238c2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80238c4:	2300      	movs	r3, #0
 80238c6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80238c8:	687b      	ldr	r3, [r7, #4]
 80238ca:	f003 0307 	and.w	r3, r3, #7
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	d004      	beq.n	80238dc <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80238d2:	687b      	ldr	r3, [r7, #4]
 80238d4:	f023 0307 	bic.w	r3, r3, #7
 80238d8:	3308      	adds	r3, #8
 80238da:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80238dc:	f7fe fc00 	bl	80220e0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80238e0:	4b16      	ldr	r3, [pc, #88]	@ (802393c <pvPortMalloc+0x80>)
 80238e2:	681b      	ldr	r3, [r3, #0]
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d105      	bne.n	80238f4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80238e8:	4b15      	ldr	r3, [pc, #84]	@ (8023940 <pvPortMalloc+0x84>)
 80238ea:	f023 0307 	bic.w	r3, r3, #7
 80238ee:	461a      	mov	r2, r3
 80238f0:	4b12      	ldr	r3, [pc, #72]	@ (802393c <pvPortMalloc+0x80>)
 80238f2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80238f4:	4b13      	ldr	r3, [pc, #76]	@ (8023944 <pvPortMalloc+0x88>)
 80238f6:	681a      	ldr	r2, [r3, #0]
 80238f8:	687b      	ldr	r3, [r7, #4]
 80238fa:	4413      	add	r3, r2
 80238fc:	f24b 1227 	movw	r2, #45351	@ 0xb127
 8023900:	4293      	cmp	r3, r2
 8023902:	d813      	bhi.n	802392c <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8023904:	4b0f      	ldr	r3, [pc, #60]	@ (8023944 <pvPortMalloc+0x88>)
 8023906:	681a      	ldr	r2, [r3, #0]
 8023908:	687b      	ldr	r3, [r7, #4]
 802390a:	441a      	add	r2, r3
 802390c:	4b0d      	ldr	r3, [pc, #52]	@ (8023944 <pvPortMalloc+0x88>)
 802390e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8023910:	429a      	cmp	r2, r3
 8023912:	d90b      	bls.n	802392c <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8023914:	4b09      	ldr	r3, [pc, #36]	@ (802393c <pvPortMalloc+0x80>)
 8023916:	681a      	ldr	r2, [r3, #0]
 8023918:	4b0a      	ldr	r3, [pc, #40]	@ (8023944 <pvPortMalloc+0x88>)
 802391a:	681b      	ldr	r3, [r3, #0]
 802391c:	4413      	add	r3, r2
 802391e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8023920:	4b08      	ldr	r3, [pc, #32]	@ (8023944 <pvPortMalloc+0x88>)
 8023922:	681a      	ldr	r2, [r3, #0]
 8023924:	687b      	ldr	r3, [r7, #4]
 8023926:	4413      	add	r3, r2
 8023928:	4a06      	ldr	r2, [pc, #24]	@ (8023944 <pvPortMalloc+0x88>)
 802392a:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 802392c:	f7fe fbe6 	bl	80220fc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8023930:	68fb      	ldr	r3, [r7, #12]
}
 8023932:	4618      	mov	r0, r3
 8023934:	3710      	adds	r7, #16
 8023936:	46bd      	mov	sp, r7
 8023938:	bd80      	pop	{r7, pc}
 802393a:	bf00      	nop
 802393c:	2000d4c8 	.word	0x2000d4c8
 8023940:	2000239c 	.word	0x2000239c
 8023944:	2000d4c4 	.word	0x2000d4c4

08023948 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023948:	b480      	push	{r7}
 802394a:	b085      	sub	sp, #20
 802394c:	af00      	add	r7, sp, #0
 802394e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	2b00      	cmp	r3, #0
 8023954:	d00b      	beq.n	802396e <vPortFree+0x26>
	__asm volatile
 8023956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 802395a:	f383 8811 	msr	BASEPRI, r3
 802395e:	f3bf 8f6f 	isb	sy
 8023962:	f3bf 8f4f 	dsb	sy
 8023966:	60fb      	str	r3, [r7, #12]
}
 8023968:	bf00      	nop
 802396a:	bf00      	nop
 802396c:	e7fd      	b.n	802396a <vPortFree+0x22>
}
 802396e:	bf00      	nop
 8023970:	3714      	adds	r7, #20
 8023972:	46bd      	mov	sp, r7
 8023974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023978:	4770      	bx	lr

0802397a <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 802397a:	b480      	push	{r7}
 802397c:	b083      	sub	sp, #12
 802397e:	af00      	add	r7, sp, #0
 8023980:	6078      	str	r0, [r7, #4]
 8023982:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8023984:	683a      	ldr	r2, [r7, #0]
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	4293      	cmp	r3, r2
 802398a:	bf38      	it	cc
 802398c:	4613      	movcc	r3, r2
}
 802398e:	4618      	mov	r0, r3
 8023990:	370c      	adds	r7, #12
 8023992:	46bd      	mov	sp, r7
 8023994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023998:	4770      	bx	lr

0802399a <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 802399a:	b480      	push	{r7}
 802399c:	b083      	sub	sp, #12
 802399e:	af00      	add	r7, sp, #0
 80239a0:	6078      	str	r0, [r7, #4]
 80239a2:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80239a4:	683a      	ldr	r2, [r7, #0]
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	4293      	cmp	r3, r2
 80239aa:	bf28      	it	cs
 80239ac:	4613      	movcs	r3, r2
}
 80239ae:	4618      	mov	r0, r3
 80239b0:	370c      	adds	r7, #12
 80239b2:	46bd      	mov	sp, r7
 80239b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239b8:	4770      	bx	lr

080239ba <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80239ba:	b480      	push	{r7}
 80239bc:	b083      	sub	sp, #12
 80239be:	af00      	add	r7, sp, #0
 80239c0:	6078      	str	r0, [r7, #4]
 80239c2:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	683a      	ldr	r2, [r7, #0]
 80239c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80239cc:	6839      	ldr	r1, [r7, #0]
 80239ce:	fb01 f202 	mul.w	r2, r1, r2
 80239d2:	1a9b      	subs	r3, r3, r2
 80239d4:	687a      	ldr	r2, [r7, #4]
 80239d6:	1ad3      	subs	r3, r2, r3
}
 80239d8:	4618      	mov	r0, r3
 80239da:	370c      	adds	r7, #12
 80239dc:	46bd      	mov	sp, r7
 80239de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239e2:	4770      	bx	lr

080239e4 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80239e4:	b580      	push	{r7, lr}
 80239e6:	b082      	sub	sp, #8
 80239e8:	af00      	add	r7, sp, #0
 80239ea:	6078      	str	r0, [r7, #4]
 80239ec:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80239ee:	687a      	ldr	r2, [r7, #4]
 80239f0:	683b      	ldr	r3, [r7, #0]
 80239f2:	4413      	add	r3, r2
 80239f4:	3b01      	subs	r3, #1
 80239f6:	6839      	ldr	r1, [r7, #0]
 80239f8:	4618      	mov	r0, r3
 80239fa:	f7ff ffde 	bl	80239ba <lfs_aligndown>
 80239fe:	4603      	mov	r3, r0
}
 8023a00:	4618      	mov	r0, r3
 8023a02:	3708      	adds	r7, #8
 8023a04:	46bd      	mov	sp, r7
 8023a06:	bd80      	pop	{r7, pc}

08023a08 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8023a08:	b480      	push	{r7}
 8023a0a:	b083      	sub	sp, #12
 8023a0c:	af00      	add	r7, sp, #0
 8023a0e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8023a10:	687b      	ldr	r3, [r7, #4]
 8023a12:	3b01      	subs	r3, #1
 8023a14:	fab3 f383 	clz	r3, r3
 8023a18:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8023a1c:	4618      	mov	r0, r3
 8023a1e:	370c      	adds	r7, #12
 8023a20:	46bd      	mov	sp, r7
 8023a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a26:	4770      	bx	lr

08023a28 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023a28:	b480      	push	{r7}
 8023a2a:	b083      	sub	sp, #12
 8023a2c:	af00      	add	r7, sp, #0
 8023a2e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	fa93 f3a3 	rbit	r3, r3
 8023a36:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8023a3a:	4618      	mov	r0, r3
 8023a3c:	370c      	adds	r7, #12
 8023a3e:	46bd      	mov	sp, r7
 8023a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a44:	4770      	bx	lr

08023a46 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8023a46:	b580      	push	{r7, lr}
 8023a48:	b082      	sub	sp, #8
 8023a4a:	af00      	add	r7, sp, #0
 8023a4c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8023a4e:	6878      	ldr	r0, [r7, #4]
 8023a50:	f7ed f94a 	bl	8010ce8 <__popcountsi2>
 8023a54:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8023a56:	4618      	mov	r0, r3
 8023a58:	3708      	adds	r7, #8
 8023a5a:	46bd      	mov	sp, r7
 8023a5c:	bd80      	pop	{r7, pc}

08023a5e <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8023a5e:	b480      	push	{r7}
 8023a60:	b083      	sub	sp, #12
 8023a62:	af00      	add	r7, sp, #0
 8023a64:	6078      	str	r0, [r7, #4]
 8023a66:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8023a68:	687a      	ldr	r2, [r7, #4]
 8023a6a:	683b      	ldr	r3, [r7, #0]
 8023a6c:	1ad3      	subs	r3, r2, r3
}
 8023a6e:	4618      	mov	r0, r3
 8023a70:	370c      	adds	r7, #12
 8023a72:	46bd      	mov	sp, r7
 8023a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a78:	4770      	bx	lr

08023a7a <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8023a7a:	b480      	push	{r7}
 8023a7c:	b083      	sub	sp, #12
 8023a7e:	af00      	add	r7, sp, #0
 8023a80:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 8023a82:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8023a84:	4618      	mov	r0, r3
 8023a86:	370c      	adds	r7, #12
 8023a88:	46bd      	mov	sp, r7
 8023a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a8e:	4770      	bx	lr

08023a90 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8023a90:	b580      	push	{r7, lr}
 8023a92:	b082      	sub	sp, #8
 8023a94:	af00      	add	r7, sp, #0
 8023a96:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8023a98:	6878      	ldr	r0, [r7, #4]
 8023a9a:	f7ff ffee 	bl	8023a7a <lfs_fromle32>
 8023a9e:	4603      	mov	r3, r0
}
 8023aa0:	4618      	mov	r0, r3
 8023aa2:	3708      	adds	r7, #8
 8023aa4:	46bd      	mov	sp, r7
 8023aa6:	bd80      	pop	{r7, pc}

08023aa8 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8023aa8:	b480      	push	{r7}
 8023aaa:	b083      	sub	sp, #12
 8023aac:	af00      	add	r7, sp, #0
 8023aae:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8023ab0:	687b      	ldr	r3, [r7, #4]
 8023ab2:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8023ab4:	4618      	mov	r0, r3
 8023ab6:	370c      	adds	r7, #12
 8023ab8:	46bd      	mov	sp, r7
 8023aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023abe:	4770      	bx	lr

08023ac0 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8023ac0:	b580      	push	{r7, lr}
 8023ac2:	b082      	sub	sp, #8
 8023ac4:	af00      	add	r7, sp, #0
 8023ac6:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8023ac8:	6878      	ldr	r0, [r7, #4]
 8023aca:	f7ff ffed 	bl	8023aa8 <lfs_frombe32>
 8023ace:	4603      	mov	r3, r0
}
 8023ad0:	4618      	mov	r0, r3
 8023ad2:	3708      	adds	r7, #8
 8023ad4:	46bd      	mov	sp, r7
 8023ad6:	bd80      	pop	{r7, pc}

08023ad8 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8023ad8:	b580      	push	{r7, lr}
 8023ada:	b082      	sub	sp, #8
 8023adc:	af00      	add	r7, sp, #0
 8023ade:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8023ae0:	6878      	ldr	r0, [r7, #4]
 8023ae2:	f008 fec3 	bl	802c86c <malloc>
 8023ae6:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8023ae8:	4618      	mov	r0, r3
 8023aea:	3708      	adds	r7, #8
 8023aec:	46bd      	mov	sp, r7
 8023aee:	bd80      	pop	{r7, pc}

08023af0 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8023af0:	b580      	push	{r7, lr}
 8023af2:	b082      	sub	sp, #8
 8023af4:	af00      	add	r7, sp, #0
 8023af6:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8023af8:	6878      	ldr	r0, [r7, #4]
 8023afa:	f008 febf 	bl	802c87c <free>
#else
    (void)p;
#endif
}
 8023afe:	bf00      	nop
 8023b00:	3708      	adds	r7, #8
 8023b02:	46bd      	mov	sp, r7
 8023b04:	bd80      	pop	{r7, pc}

08023b06 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8023b06:	b480      	push	{r7}
 8023b08:	b083      	sub	sp, #12
 8023b0a:	af00      	add	r7, sp, #0
 8023b0c:	6078      	str	r0, [r7, #4]
 8023b0e:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8023b10:	683b      	ldr	r3, [r7, #0]
 8023b12:	f04f 32ff 	mov.w	r2, #4294967295
 8023b16:	601a      	str	r2, [r3, #0]
}
 8023b18:	bf00      	nop
 8023b1a:	370c      	adds	r7, #12
 8023b1c:	46bd      	mov	sp, r7
 8023b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b22:	4770      	bx	lr

08023b24 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8023b24:	b580      	push	{r7, lr}
 8023b26:	b082      	sub	sp, #8
 8023b28:	af00      	add	r7, sp, #0
 8023b2a:	6078      	str	r0, [r7, #4]
 8023b2c:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023b2e:	683b      	ldr	r3, [r7, #0]
 8023b30:	68d8      	ldr	r0, [r3, #12]
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023b38:	461a      	mov	r2, r3
 8023b3a:	21ff      	movs	r1, #255	@ 0xff
 8023b3c:	f00a f828 	bl	802db90 <memset>
    pcache->block = LFS_BLOCK_NULL;
 8023b40:	683b      	ldr	r3, [r7, #0]
 8023b42:	f04f 32ff 	mov.w	r2, #4294967295
 8023b46:	601a      	str	r2, [r3, #0]
}
 8023b48:	bf00      	nop
 8023b4a:	3708      	adds	r7, #8
 8023b4c:	46bd      	mov	sp, r7
 8023b4e:	bd80      	pop	{r7, pc}

08023b50 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8023b50:	b5b0      	push	{r4, r5, r7, lr}
 8023b52:	b08a      	sub	sp, #40	@ 0x28
 8023b54:	af02      	add	r7, sp, #8
 8023b56:	60f8      	str	r0, [r7, #12]
 8023b58:	60b9      	str	r1, [r7, #8]
 8023b5a:	607a      	str	r2, [r7, #4]
 8023b5c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8023b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023b60:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8023b62:	68fb      	ldr	r3, [r7, #12]
 8023b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023b66:	6a1b      	ldr	r3, [r3, #32]
 8023b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023b6a:	429a      	cmp	r2, r3
 8023b6c:	d208      	bcs.n	8023b80 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8023b6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023b72:	441a      	add	r2, r3
 8023b74:	68fb      	ldr	r3, [r7, #12]
 8023b76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023b78:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8023b7a:	429a      	cmp	r2, r3
 8023b7c:	f240 811b 	bls.w	8023db6 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8023b80:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8023b84:	e11c      	b.n	8023dc0 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8023b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023b88:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8023b8a:	68bb      	ldr	r3, [r7, #8]
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	d03f      	beq.n	8023c10 <lfs_bd_read+0xc0>
 8023b90:	68bb      	ldr	r3, [r7, #8]
 8023b92:	681b      	ldr	r3, [r3, #0]
 8023b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023b96:	429a      	cmp	r2, r3
 8023b98:	d13a      	bne.n	8023c10 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8023b9a:	68bb      	ldr	r3, [r7, #8]
 8023b9c:	685a      	ldr	r2, [r3, #4]
 8023b9e:	68bb      	ldr	r3, [r7, #8]
 8023ba0:	689b      	ldr	r3, [r3, #8]
 8023ba2:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8023ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023ba6:	429a      	cmp	r2, r3
 8023ba8:	d232      	bcs.n	8023c10 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8023baa:	68bb      	ldr	r3, [r7, #8]
 8023bac:	685b      	ldr	r3, [r3, #4]
 8023bae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023bb0:	429a      	cmp	r2, r3
 8023bb2:	d324      	bcc.n	8023bfe <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8023bb4:	68bb      	ldr	r3, [r7, #8]
 8023bb6:	689a      	ldr	r2, [r3, #8]
 8023bb8:	68bb      	ldr	r3, [r7, #8]
 8023bba:	6859      	ldr	r1, [r3, #4]
 8023bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023bbe:	1acb      	subs	r3, r1, r3
 8023bc0:	4413      	add	r3, r2
 8023bc2:	4619      	mov	r1, r3
 8023bc4:	69b8      	ldr	r0, [r7, #24]
 8023bc6:	f7ff fee8 	bl	802399a <lfs_min>
 8023bca:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8023bcc:	68bb      	ldr	r3, [r7, #8]
 8023bce:	68da      	ldr	r2, [r3, #12]
 8023bd0:	68bb      	ldr	r3, [r7, #8]
 8023bd2:	685b      	ldr	r3, [r3, #4]
 8023bd4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023bd6:	1acb      	subs	r3, r1, r3
 8023bd8:	4413      	add	r3, r2
 8023bda:	69ba      	ldr	r2, [r7, #24]
 8023bdc:	4619      	mov	r1, r3
 8023bde:	69f8      	ldr	r0, [r7, #28]
 8023be0:	f00a f9ab 	bl	802df3a <memcpy>

                data += diff;
 8023be4:	69fa      	ldr	r2, [r7, #28]
 8023be6:	69bb      	ldr	r3, [r7, #24]
 8023be8:	4413      	add	r3, r2
 8023bea:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023bee:	69bb      	ldr	r3, [r7, #24]
 8023bf0:	4413      	add	r3, r2
 8023bf2:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8023bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023bf6:	69bb      	ldr	r3, [r7, #24]
 8023bf8:	1ad3      	subs	r3, r2, r3
 8023bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8023bfc:	e0db      	b.n	8023db6 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8023bfe:	68bb      	ldr	r3, [r7, #8]
 8023c00:	685a      	ldr	r2, [r3, #4]
 8023c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023c04:	1ad3      	subs	r3, r2, r3
 8023c06:	4619      	mov	r1, r3
 8023c08:	69b8      	ldr	r0, [r7, #24]
 8023c0a:	f7ff fec6 	bl	802399a <lfs_min>
 8023c0e:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	681b      	ldr	r3, [r3, #0]
 8023c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023c16:	429a      	cmp	r2, r3
 8023c18:	d13a      	bne.n	8023c90 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	685a      	ldr	r2, [r3, #4]
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	689b      	ldr	r3, [r3, #8]
 8023c22:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023c24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023c26:	429a      	cmp	r2, r3
 8023c28:	d232      	bcs.n	8023c90 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023c2a:	687b      	ldr	r3, [r7, #4]
 8023c2c:	685b      	ldr	r3, [r3, #4]
 8023c2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023c30:	429a      	cmp	r2, r3
 8023c32:	d324      	bcc.n	8023c7e <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023c34:	687b      	ldr	r3, [r7, #4]
 8023c36:	689a      	ldr	r2, [r3, #8]
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	6859      	ldr	r1, [r3, #4]
 8023c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023c3e:	1acb      	subs	r3, r1, r3
 8023c40:	4413      	add	r3, r2
 8023c42:	4619      	mov	r1, r3
 8023c44:	69b8      	ldr	r0, [r7, #24]
 8023c46:	f7ff fea8 	bl	802399a <lfs_min>
 8023c4a:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	68da      	ldr	r2, [r3, #12]
 8023c50:	687b      	ldr	r3, [r7, #4]
 8023c52:	685b      	ldr	r3, [r3, #4]
 8023c54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8023c56:	1acb      	subs	r3, r1, r3
 8023c58:	4413      	add	r3, r2
 8023c5a:	69ba      	ldr	r2, [r7, #24]
 8023c5c:	4619      	mov	r1, r3
 8023c5e:	69f8      	ldr	r0, [r7, #28]
 8023c60:	f00a f96b 	bl	802df3a <memcpy>

                data += diff;
 8023c64:	69fa      	ldr	r2, [r7, #28]
 8023c66:	69bb      	ldr	r3, [r7, #24]
 8023c68:	4413      	add	r3, r2
 8023c6a:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023c6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023c6e:	69bb      	ldr	r3, [r7, #24]
 8023c70:	4413      	add	r3, r2
 8023c72:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8023c74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023c76:	69bb      	ldr	r3, [r7, #24]
 8023c78:	1ad3      	subs	r3, r2, r3
 8023c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8023c7c:	e09b      	b.n	8023db6 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8023c7e:	687b      	ldr	r3, [r7, #4]
 8023c80:	685a      	ldr	r2, [r3, #4]
 8023c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023c84:	1ad3      	subs	r3, r2, r3
 8023c86:	4619      	mov	r1, r3
 8023c88:	69b8      	ldr	r0, [r7, #24]
 8023c8a:	f7ff fe86 	bl	802399a <lfs_min>
 8023c8e:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023c90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023c92:	683b      	ldr	r3, [r7, #0]
 8023c94:	429a      	cmp	r2, r3
 8023c96:	d336      	bcc.n	8023d06 <lfs_bd_read+0x1b6>
 8023c98:	68fb      	ldr	r3, [r7, #12]
 8023c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023c9c:	695a      	ldr	r2, [r3, #20]
 8023c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8023ca4:	fb01 f202 	mul.w	r2, r1, r2
 8023ca8:	1a9b      	subs	r3, r3, r2
 8023caa:	2b00      	cmp	r3, #0
 8023cac:	d12b      	bne.n	8023d06 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8023cae:	68fb      	ldr	r3, [r7, #12]
 8023cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023cb2:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023cb6:	429a      	cmp	r2, r3
 8023cb8:	d325      	bcc.n	8023d06 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8023cba:	68fb      	ldr	r3, [r7, #12]
 8023cbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023cbe:	695b      	ldr	r3, [r3, #20]
 8023cc0:	4619      	mov	r1, r3
 8023cc2:	69b8      	ldr	r0, [r7, #24]
 8023cc4:	f7ff fe79 	bl	80239ba <lfs_aligndown>
 8023cc8:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8023cca:	68fb      	ldr	r3, [r7, #12]
 8023ccc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023cce:	685c      	ldr	r4, [r3, #4]
 8023cd0:	68fb      	ldr	r3, [r7, #12]
 8023cd2:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8023cd4:	69bb      	ldr	r3, [r7, #24]
 8023cd6:	9300      	str	r3, [sp, #0]
 8023cd8:	69fb      	ldr	r3, [r7, #28]
 8023cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023cdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8023cde:	47a0      	blx	r4
 8023ce0:	6178      	str	r0, [r7, #20]
            if (err) {
 8023ce2:	697b      	ldr	r3, [r7, #20]
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	d001      	beq.n	8023cec <lfs_bd_read+0x19c>
                return err;
 8023ce8:	697b      	ldr	r3, [r7, #20]
 8023cea:	e069      	b.n	8023dc0 <lfs_bd_read+0x270>
            }

            data += diff;
 8023cec:	69fa      	ldr	r2, [r7, #28]
 8023cee:	69bb      	ldr	r3, [r7, #24]
 8023cf0:	4413      	add	r3, r2
 8023cf2:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023cf6:	69bb      	ldr	r3, [r7, #24]
 8023cf8:	4413      	add	r3, r2
 8023cfa:	637b      	str	r3, [r7, #52]	@ 0x34
            size -= diff;
 8023cfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023cfe:	69bb      	ldr	r3, [r7, #24]
 8023d00:	1ad3      	subs	r3, r2, r3
 8023d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
            continue;
 8023d04:	e057      	b.n	8023db6 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8023d06:	68fb      	ldr	r3, [r7, #12]
 8023d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023d0a:	6a1b      	ldr	r3, [r3, #32]
 8023d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023d0e:	429a      	cmp	r2, r3
 8023d10:	d305      	bcc.n	8023d1e <lfs_bd_read+0x1ce>
 8023d12:	4b2d      	ldr	r3, [pc, #180]	@ (8023dc8 <lfs_bd_read+0x278>)
 8023d14:	4a2d      	ldr	r2, [pc, #180]	@ (8023dcc <lfs_bd_read+0x27c>)
 8023d16:	216b      	movs	r1, #107	@ 0x6b
 8023d18:	482d      	ldr	r0, [pc, #180]	@ (8023dd0 <lfs_bd_read+0x280>)
 8023d1a:	f008 fd75 	bl	802c808 <__assert_func>
        rcache->block = block;
 8023d1e:	687b      	ldr	r3, [r7, #4]
 8023d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023d22:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023d24:	68fb      	ldr	r3, [r7, #12]
 8023d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023d28:	695b      	ldr	r3, [r3, #20]
 8023d2a:	4619      	mov	r1, r3
 8023d2c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8023d2e:	f7ff fe44 	bl	80239ba <lfs_aligndown>
 8023d32:	4602      	mov	r2, r0
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023d3a:	683b      	ldr	r3, [r7, #0]
 8023d3c:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8023d3e:	68fb      	ldr	r3, [r7, #12]
 8023d40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023d42:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023d44:	4619      	mov	r1, r3
 8023d46:	4610      	mov	r0, r2
 8023d48:	f7ff fe4c 	bl	80239e4 <lfs_alignup>
 8023d4c:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8023d4e:	68fb      	ldr	r3, [r7, #12]
 8023d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023d52:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023d54:	4619      	mov	r1, r3
 8023d56:	4610      	mov	r0, r2
 8023d58:	f7ff fe1f 	bl	802399a <lfs_min>
 8023d5c:	4602      	mov	r2, r0
                - rcache->off,
 8023d5e:	687b      	ldr	r3, [r7, #4]
 8023d60:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8023d62:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8023d64:	68fb      	ldr	r3, [r7, #12]
 8023d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(
 8023d6a:	4619      	mov	r1, r3
 8023d6c:	4610      	mov	r0, r2
 8023d6e:	f7ff fe14 	bl	802399a <lfs_min>
 8023d72:	4602      	mov	r2, r0
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023d78:	68fb      	ldr	r3, [r7, #12]
 8023d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023d7c:	685c      	ldr	r4, [r3, #4]
 8023d7e:	68fb      	ldr	r3, [r7, #12]
 8023d80:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	6819      	ldr	r1, [r3, #0]
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023d8e:	687b      	ldr	r3, [r7, #4]
 8023d90:	689b      	ldr	r3, [r3, #8]
 8023d92:	9300      	str	r3, [sp, #0]
 8023d94:	462b      	mov	r3, r5
 8023d96:	47a0      	blx	r4
 8023d98:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8023d9a:	693b      	ldr	r3, [r7, #16]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	dd05      	ble.n	8023dac <lfs_bd_read+0x25c>
 8023da0:	4b0c      	ldr	r3, [pc, #48]	@ (8023dd4 <lfs_bd_read+0x284>)
 8023da2:	4a0a      	ldr	r2, [pc, #40]	@ (8023dcc <lfs_bd_read+0x27c>)
 8023da4:	2176      	movs	r1, #118	@ 0x76
 8023da6:	480a      	ldr	r0, [pc, #40]	@ (8023dd0 <lfs_bd_read+0x280>)
 8023da8:	f008 fd2e 	bl	802c808 <__assert_func>
        if (err) {
 8023dac:	693b      	ldr	r3, [r7, #16]
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	d001      	beq.n	8023db6 <lfs_bd_read+0x266>
            return err;
 8023db2:	693b      	ldr	r3, [r7, #16]
 8023db4:	e004      	b.n	8023dc0 <lfs_bd_read+0x270>
    while (size > 0) {
 8023db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023db8:	2b00      	cmp	r3, #0
 8023dba:	f47f aee4 	bne.w	8023b86 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8023dbe:	2300      	movs	r3, #0
}
 8023dc0:	4618      	mov	r0, r3
 8023dc2:	3720      	adds	r7, #32
 8023dc4:	46bd      	mov	sp, r7
 8023dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8023dc8:	080337f8 	.word	0x080337f8
 8023dcc:	08034acc 	.word	0x08034acc
 8023dd0:	08033818 	.word	0x08033818
 8023dd4:	0803384c 	.word	0x0803384c

08023dd8 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023dd8:	b580      	push	{r7, lr}
 8023dda:	b08e      	sub	sp, #56	@ 0x38
 8023ddc:	af04      	add	r7, sp, #16
 8023dde:	60f8      	str	r0, [r7, #12]
 8023de0:	60b9      	str	r1, [r7, #8]
 8023de2:	607a      	str	r2, [r7, #4]
 8023de4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8023de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023de8:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8023dea:	2300      	movs	r3, #0
 8023dec:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8023dee:	2300      	movs	r3, #0
 8023df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8023df2:	e039      	b.n	8023e68 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8023df4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023df8:	1ad3      	subs	r3, r2, r3
 8023dfa:	2108      	movs	r1, #8
 8023dfc:	4618      	mov	r0, r3
 8023dfe:	f7ff fdcc 	bl	802399a <lfs_min>
 8023e02:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8023e04:	683a      	ldr	r2, [r7, #0]
 8023e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023e08:	1ad1      	subs	r1, r2, r3
 8023e0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023e0e:	4413      	add	r3, r2
 8023e10:	69fa      	ldr	r2, [r7, #28]
 8023e12:	9203      	str	r2, [sp, #12]
 8023e14:	f107 0210 	add.w	r2, r7, #16
 8023e18:	9202      	str	r2, [sp, #8]
 8023e1a:	9301      	str	r3, [sp, #4]
 8023e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023e1e:	9300      	str	r3, [sp, #0]
 8023e20:	460b      	mov	r3, r1
 8023e22:	687a      	ldr	r2, [r7, #4]
 8023e24:	68b9      	ldr	r1, [r7, #8]
 8023e26:	68f8      	ldr	r0, [r7, #12]
 8023e28:	f7ff fe92 	bl	8023b50 <lfs_bd_read>
 8023e2c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8023e2e:	69bb      	ldr	r3, [r7, #24]
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	d001      	beq.n	8023e38 <lfs_bd_cmp+0x60>
            return res;
 8023e34:	69bb      	ldr	r3, [r7, #24]
 8023e36:	e01c      	b.n	8023e72 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023e38:	6a3a      	ldr	r2, [r7, #32]
 8023e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023e3c:	18d1      	adds	r1, r2, r3
 8023e3e:	f107 0310 	add.w	r3, r7, #16
 8023e42:	69fa      	ldr	r2, [r7, #28]
 8023e44:	4618      	mov	r0, r3
 8023e46:	f009 fe79 	bl	802db3c <memcmp>
 8023e4a:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023e4c:	69bb      	ldr	r3, [r7, #24]
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	d006      	beq.n	8023e60 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8023e52:	69bb      	ldr	r3, [r7, #24]
 8023e54:	2b00      	cmp	r3, #0
 8023e56:	da01      	bge.n	8023e5c <lfs_bd_cmp+0x84>
 8023e58:	2301      	movs	r3, #1
 8023e5a:	e00a      	b.n	8023e72 <lfs_bd_cmp+0x9a>
 8023e5c:	2302      	movs	r3, #2
 8023e5e:	e008      	b.n	8023e72 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8023e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023e62:	69fb      	ldr	r3, [r7, #28]
 8023e64:	4413      	add	r3, r2
 8023e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8023e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023e6c:	429a      	cmp	r2, r3
 8023e6e:	d3c1      	bcc.n	8023df4 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8023e70:	2300      	movs	r3, #0
}
 8023e72:	4618      	mov	r0, r3
 8023e74:	3728      	adds	r7, #40	@ 0x28
 8023e76:	46bd      	mov	sp, r7
 8023e78:	bd80      	pop	{r7, pc}
	...

08023e7c <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023e7c:	b5b0      	push	{r4, r5, r7, lr}
 8023e7e:	b08c      	sub	sp, #48	@ 0x30
 8023e80:	af04      	add	r7, sp, #16
 8023e82:	60f8      	str	r0, [r7, #12]
 8023e84:	60b9      	str	r1, [r7, #8]
 8023e86:	607a      	str	r2, [r7, #4]
 8023e88:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8023e8a:	68bb      	ldr	r3, [r7, #8]
 8023e8c:	681b      	ldr	r3, [r3, #0]
 8023e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023e92:	d061      	beq.n	8023f58 <lfs_bd_flush+0xdc>
 8023e94:	68bb      	ldr	r3, [r7, #8]
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	f113 0f02 	cmn.w	r3, #2
 8023e9c:	d05c      	beq.n	8023f58 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8023e9e:	68bb      	ldr	r3, [r7, #8]
 8023ea0:	681a      	ldr	r2, [r3, #0]
 8023ea2:	68fb      	ldr	r3, [r7, #12]
 8023ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023ea6:	6a1b      	ldr	r3, [r3, #32]
 8023ea8:	429a      	cmp	r2, r3
 8023eaa:	d305      	bcc.n	8023eb8 <lfs_bd_flush+0x3c>
 8023eac:	4b2d      	ldr	r3, [pc, #180]	@ (8023f64 <lfs_bd_flush+0xe8>)
 8023eae:	4a2e      	ldr	r2, [pc, #184]	@ (8023f68 <lfs_bd_flush+0xec>)
 8023eb0:	219e      	movs	r1, #158	@ 0x9e
 8023eb2:	482e      	ldr	r0, [pc, #184]	@ (8023f6c <lfs_bd_flush+0xf0>)
 8023eb4:	f008 fca8 	bl	802c808 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8023eb8:	68bb      	ldr	r3, [r7, #8]
 8023eba:	689a      	ldr	r2, [r3, #8]
 8023ebc:	68fb      	ldr	r3, [r7, #12]
 8023ebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023ec0:	699b      	ldr	r3, [r3, #24]
 8023ec2:	4619      	mov	r1, r3
 8023ec4:	4610      	mov	r0, r2
 8023ec6:	f7ff fd8d 	bl	80239e4 <lfs_alignup>
 8023eca:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023ecc:	68fb      	ldr	r3, [r7, #12]
 8023ece:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023ed0:	689c      	ldr	r4, [r3, #8]
 8023ed2:	68fb      	ldr	r3, [r7, #12]
 8023ed4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8023ed6:	68bb      	ldr	r3, [r7, #8]
 8023ed8:	6819      	ldr	r1, [r3, #0]
 8023eda:	68bb      	ldr	r3, [r7, #8]
 8023edc:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8023ede:	68bb      	ldr	r3, [r7, #8]
 8023ee0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023ee2:	69fb      	ldr	r3, [r7, #28]
 8023ee4:	9300      	str	r3, [sp, #0]
 8023ee6:	462b      	mov	r3, r5
 8023ee8:	47a0      	blx	r4
 8023eea:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8023eec:	69bb      	ldr	r3, [r7, #24]
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	dd05      	ble.n	8023efe <lfs_bd_flush+0x82>
 8023ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8023f70 <lfs_bd_flush+0xf4>)
 8023ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8023f68 <lfs_bd_flush+0xec>)
 8023ef6:	21a2      	movs	r1, #162	@ 0xa2
 8023ef8:	481c      	ldr	r0, [pc, #112]	@ (8023f6c <lfs_bd_flush+0xf0>)
 8023efa:	f008 fc85 	bl	802c808 <__assert_func>
        if (err) {
 8023efe:	69bb      	ldr	r3, [r7, #24]
 8023f00:	2b00      	cmp	r3, #0
 8023f02:	d001      	beq.n	8023f08 <lfs_bd_flush+0x8c>
            return err;
 8023f04:	69bb      	ldr	r3, [r7, #24]
 8023f06:	e028      	b.n	8023f5a <lfs_bd_flush+0xde>
        }

        if (validate) {
 8023f08:	78fb      	ldrb	r3, [r7, #3]
 8023f0a:	2b00      	cmp	r3, #0
 8023f0c:	d020      	beq.n	8023f50 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8023f0e:	6879      	ldr	r1, [r7, #4]
 8023f10:	68f8      	ldr	r0, [r7, #12]
 8023f12:	f7ff fdf8 	bl	8023b06 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023f16:	68bb      	ldr	r3, [r7, #8]
 8023f18:	681b      	ldr	r3, [r3, #0]
 8023f1a:	68ba      	ldr	r2, [r7, #8]
 8023f1c:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8023f1e:	68b9      	ldr	r1, [r7, #8]
 8023f20:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8023f22:	69f8      	ldr	r0, [r7, #28]
 8023f24:	9003      	str	r0, [sp, #12]
 8023f26:	9102      	str	r1, [sp, #8]
 8023f28:	9201      	str	r2, [sp, #4]
 8023f2a:	9300      	str	r3, [sp, #0]
 8023f2c:	69fb      	ldr	r3, [r7, #28]
 8023f2e:	687a      	ldr	r2, [r7, #4]
 8023f30:	2100      	movs	r1, #0
 8023f32:	68f8      	ldr	r0, [r7, #12]
 8023f34:	f7ff ff50 	bl	8023dd8 <lfs_bd_cmp>
 8023f38:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023f3a:	697b      	ldr	r3, [r7, #20]
 8023f3c:	2b00      	cmp	r3, #0
 8023f3e:	da01      	bge.n	8023f44 <lfs_bd_flush+0xc8>
                return res;
 8023f40:	697b      	ldr	r3, [r7, #20]
 8023f42:	e00a      	b.n	8023f5a <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023f44:	697b      	ldr	r3, [r7, #20]
 8023f46:	2b00      	cmp	r3, #0
 8023f48:	d002      	beq.n	8023f50 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023f4a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8023f4e:	e004      	b.n	8023f5a <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8023f50:	68b9      	ldr	r1, [r7, #8]
 8023f52:	68f8      	ldr	r0, [r7, #12]
 8023f54:	f7ff fde6 	bl	8023b24 <lfs_cache_zero>
    }

    return 0;
 8023f58:	2300      	movs	r3, #0
}
 8023f5a:	4618      	mov	r0, r3
 8023f5c:	3720      	adds	r7, #32
 8023f5e:	46bd      	mov	sp, r7
 8023f60:	bdb0      	pop	{r4, r5, r7, pc}
 8023f62:	bf00      	nop
 8023f64:	08033858 	.word	0x08033858
 8023f68:	08034ad8 	.word	0x08034ad8
 8023f6c:	08033818 	.word	0x08033818
 8023f70:	0803384c 	.word	0x0803384c

08023f74 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023f74:	b580      	push	{r7, lr}
 8023f76:	b086      	sub	sp, #24
 8023f78:	af00      	add	r7, sp, #0
 8023f7a:	60f8      	str	r0, [r7, #12]
 8023f7c:	60b9      	str	r1, [r7, #8]
 8023f7e:	607a      	str	r2, [r7, #4]
 8023f80:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8023f82:	6879      	ldr	r1, [r7, #4]
 8023f84:	68f8      	ldr	r0, [r7, #12]
 8023f86:	f7ff fdbe 	bl	8023b06 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023f8a:	78fb      	ldrb	r3, [r7, #3]
 8023f8c:	687a      	ldr	r2, [r7, #4]
 8023f8e:	68b9      	ldr	r1, [r7, #8]
 8023f90:	68f8      	ldr	r0, [r7, #12]
 8023f92:	f7ff ff73 	bl	8023e7c <lfs_bd_flush>
 8023f96:	6178      	str	r0, [r7, #20]
    if (err) {
 8023f98:	697b      	ldr	r3, [r7, #20]
 8023f9a:	2b00      	cmp	r3, #0
 8023f9c:	d001      	beq.n	8023fa2 <lfs_bd_sync+0x2e>
        return err;
 8023f9e:	697b      	ldr	r3, [r7, #20]
 8023fa0:	e011      	b.n	8023fc6 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8023fa2:	68fb      	ldr	r3, [r7, #12]
 8023fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023fa6:	691b      	ldr	r3, [r3, #16]
 8023fa8:	68fa      	ldr	r2, [r7, #12]
 8023faa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8023fac:	4610      	mov	r0, r2
 8023fae:	4798      	blx	r3
 8023fb0:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8023fb2:	697b      	ldr	r3, [r7, #20]
 8023fb4:	2b00      	cmp	r3, #0
 8023fb6:	dd05      	ble.n	8023fc4 <lfs_bd_sync+0x50>
 8023fb8:	4b05      	ldr	r3, [pc, #20]	@ (8023fd0 <lfs_bd_sync+0x5c>)
 8023fba:	4a06      	ldr	r2, [pc, #24]	@ (8023fd4 <lfs_bd_sync+0x60>)
 8023fbc:	21c8      	movs	r1, #200	@ 0xc8
 8023fbe:	4806      	ldr	r0, [pc, #24]	@ (8023fd8 <lfs_bd_sync+0x64>)
 8023fc0:	f008 fc22 	bl	802c808 <__assert_func>
    return err;
 8023fc4:	697b      	ldr	r3, [r7, #20]
}
 8023fc6:	4618      	mov	r0, r3
 8023fc8:	3718      	adds	r7, #24
 8023fca:	46bd      	mov	sp, r7
 8023fcc:	bd80      	pop	{r7, pc}
 8023fce:	bf00      	nop
 8023fd0:	0803384c 	.word	0x0803384c
 8023fd4:	08034ae8 	.word	0x08034ae8
 8023fd8:	08033818 	.word	0x08033818

08023fdc <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023fdc:	b580      	push	{r7, lr}
 8023fde:	b088      	sub	sp, #32
 8023fe0:	af00      	add	r7, sp, #0
 8023fe2:	60f8      	str	r0, [r7, #12]
 8023fe4:	60b9      	str	r1, [r7, #8]
 8023fe6:	607a      	str	r2, [r7, #4]
 8023fe8:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8023fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fec:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8023fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ff0:	f113 0f02 	cmn.w	r3, #2
 8023ff4:	d00b      	beq.n	802400e <lfs_bd_prog+0x32>
 8023ff6:	68fb      	ldr	r3, [r7, #12]
 8023ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023ffa:	6a1b      	ldr	r3, [r3, #32]
 8023ffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8023ffe:	429a      	cmp	r2, r3
 8024000:	d305      	bcc.n	802400e <lfs_bd_prog+0x32>
 8024002:	4b48      	ldr	r3, [pc, #288]	@ (8024124 <lfs_bd_prog+0x148>)
 8024004:	4a48      	ldr	r2, [pc, #288]	@ (8024128 <lfs_bd_prog+0x14c>)
 8024006:	21d3      	movs	r1, #211	@ 0xd3
 8024008:	4848      	ldr	r0, [pc, #288]	@ (802412c <lfs_bd_prog+0x150>)
 802400a:	f008 fbfd 	bl	802c808 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 802400e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024012:	441a      	add	r2, r3
 8024014:	68fb      	ldr	r3, [r7, #12]
 8024016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024018:	69db      	ldr	r3, [r3, #28]
 802401a:	429a      	cmp	r2, r3
 802401c:	d979      	bls.n	8024112 <lfs_bd_prog+0x136>
 802401e:	4b44      	ldr	r3, [pc, #272]	@ (8024130 <lfs_bd_prog+0x154>)
 8024020:	4a41      	ldr	r2, [pc, #260]	@ (8024128 <lfs_bd_prog+0x14c>)
 8024022:	21d4      	movs	r1, #212	@ 0xd4
 8024024:	4841      	ldr	r0, [pc, #260]	@ (802412c <lfs_bd_prog+0x150>)
 8024026:	f008 fbef 	bl	802c808 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 802402a:	68bb      	ldr	r3, [r7, #8]
 802402c:	681b      	ldr	r3, [r3, #0]
 802402e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8024030:	429a      	cmp	r2, r3
 8024032:	d151      	bne.n	80240d8 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8024034:	68bb      	ldr	r3, [r7, #8]
 8024036:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8024038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802403a:	429a      	cmp	r2, r3
 802403c:	d34c      	bcc.n	80240d8 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 802403e:	68bb      	ldr	r3, [r7, #8]
 8024040:	685a      	ldr	r2, [r3, #4]
 8024042:	68fb      	ldr	r3, [r7, #12]
 8024044:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024048:	4413      	add	r3, r2
                off >= pcache->off &&
 802404a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802404c:	429a      	cmp	r2, r3
 802404e:	d243      	bcs.n	80240d8 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8024050:	68fb      	ldr	r3, [r7, #12]
 8024052:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8024056:	68bb      	ldr	r3, [r7, #8]
 8024058:	6859      	ldr	r1, [r3, #4]
 802405a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802405c:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 802405e:	4413      	add	r3, r2
 8024060:	4619      	mov	r1, r3
 8024062:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8024064:	f7ff fc99 	bl	802399a <lfs_min>
 8024068:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 802406a:	68bb      	ldr	r3, [r7, #8]
 802406c:	68da      	ldr	r2, [r3, #12]
 802406e:	68bb      	ldr	r3, [r7, #8]
 8024070:	685b      	ldr	r3, [r3, #4]
 8024072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024074:	1acb      	subs	r3, r1, r3
 8024076:	4413      	add	r3, r2
 8024078:	69ba      	ldr	r2, [r7, #24]
 802407a:	69f9      	ldr	r1, [r7, #28]
 802407c:	4618      	mov	r0, r3
 802407e:	f009 ff5c 	bl	802df3a <memcpy>

            data += diff;
 8024082:	69fa      	ldr	r2, [r7, #28]
 8024084:	69bb      	ldr	r3, [r7, #24]
 8024086:	4413      	add	r3, r2
 8024088:	61fb      	str	r3, [r7, #28]
            off += diff;
 802408a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802408c:	69bb      	ldr	r3, [r7, #24]
 802408e:	4413      	add	r3, r2
 8024090:	62fb      	str	r3, [r7, #44]	@ 0x2c
            size -= diff;
 8024092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024094:	69bb      	ldr	r3, [r7, #24]
 8024096:	1ad3      	subs	r3, r2, r3
 8024098:	637b      	str	r3, [r7, #52]	@ 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 802409a:	68bb      	ldr	r3, [r7, #8]
 802409c:	6898      	ldr	r0, [r3, #8]
 802409e:	68bb      	ldr	r3, [r7, #8]
 80240a0:	685b      	ldr	r3, [r3, #4]
 80240a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80240a4:	1ad3      	subs	r3, r2, r3
 80240a6:	4619      	mov	r1, r3
 80240a8:	f7ff fc67 	bl	802397a <lfs_max>
 80240ac:	4602      	mov	r2, r0
 80240ae:	68bb      	ldr	r3, [r7, #8]
 80240b0:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 80240b2:	68bb      	ldr	r3, [r7, #8]
 80240b4:	689a      	ldr	r2, [r3, #8]
 80240b6:	68fb      	ldr	r3, [r7, #12]
 80240b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80240ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80240bc:	429a      	cmp	r2, r3
 80240be:	d127      	bne.n	8024110 <lfs_bd_prog+0x134>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80240c0:	78fb      	ldrb	r3, [r7, #3]
 80240c2:	687a      	ldr	r2, [r7, #4]
 80240c4:	68b9      	ldr	r1, [r7, #8]
 80240c6:	68f8      	ldr	r0, [r7, #12]
 80240c8:	f7ff fed8 	bl	8023e7c <lfs_bd_flush>
 80240cc:	6178      	str	r0, [r7, #20]
                if (err) {
 80240ce:	697b      	ldr	r3, [r7, #20]
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	d01d      	beq.n	8024110 <lfs_bd_prog+0x134>
                    return err;
 80240d4:	697b      	ldr	r3, [r7, #20]
 80240d6:	e020      	b.n	802411a <lfs_bd_prog+0x13e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 80240d8:	68bb      	ldr	r3, [r7, #8]
 80240da:	681b      	ldr	r3, [r3, #0]
 80240dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80240e0:	d005      	beq.n	80240ee <lfs_bd_prog+0x112>
 80240e2:	4b14      	ldr	r3, [pc, #80]	@ (8024134 <lfs_bd_prog+0x158>)
 80240e4:	4a10      	ldr	r2, [pc, #64]	@ (8024128 <lfs_bd_prog+0x14c>)
 80240e6:	21f1      	movs	r1, #241	@ 0xf1
 80240e8:	4810      	ldr	r0, [pc, #64]	@ (802412c <lfs_bd_prog+0x150>)
 80240ea:	f008 fb8d 	bl	802c808 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80240ee:	68bb      	ldr	r3, [r7, #8]
 80240f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80240f2:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80240f4:	68fb      	ldr	r3, [r7, #12]
 80240f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80240f8:	699b      	ldr	r3, [r3, #24]
 80240fa:	4619      	mov	r1, r3
 80240fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80240fe:	f7ff fc5c 	bl	80239ba <lfs_aligndown>
 8024102:	4602      	mov	r2, r0
 8024104:	68bb      	ldr	r3, [r7, #8]
 8024106:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8024108:	68bb      	ldr	r3, [r7, #8]
 802410a:	2200      	movs	r2, #0
 802410c:	609a      	str	r2, [r3, #8]
 802410e:	e000      	b.n	8024112 <lfs_bd_prog+0x136>
            continue;
 8024110:	bf00      	nop
    while (size > 0) {
 8024112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024114:	2b00      	cmp	r3, #0
 8024116:	d188      	bne.n	802402a <lfs_bd_prog+0x4e>
    }

    return 0;
 8024118:	2300      	movs	r3, #0
}
 802411a:	4618      	mov	r0, r3
 802411c:	3720      	adds	r7, #32
 802411e:	46bd      	mov	sp, r7
 8024120:	bd80      	pop	{r7, pc}
 8024122:	bf00      	nop
 8024124:	08033880 	.word	0x08033880
 8024128:	08034af4 	.word	0x08034af4
 802412c:	08033818 	.word	0x08033818
 8024130:	080338bc 	.word	0x080338bc
 8024134:	080338e0 	.word	0x080338e0

08024138 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8024138:	b580      	push	{r7, lr}
 802413a:	b084      	sub	sp, #16
 802413c:	af00      	add	r7, sp, #0
 802413e:	6078      	str	r0, [r7, #4]
 8024140:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8024142:	687b      	ldr	r3, [r7, #4]
 8024144:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024146:	6a1b      	ldr	r3, [r3, #32]
 8024148:	683a      	ldr	r2, [r7, #0]
 802414a:	429a      	cmp	r2, r3
 802414c:	d305      	bcc.n	802415a <lfs_bd_erase+0x22>
 802414e:	4b0f      	ldr	r3, [pc, #60]	@ (802418c <lfs_bd_erase+0x54>)
 8024150:	4a0f      	ldr	r2, [pc, #60]	@ (8024190 <lfs_bd_erase+0x58>)
 8024152:	21ff      	movs	r1, #255	@ 0xff
 8024154:	480f      	ldr	r0, [pc, #60]	@ (8024194 <lfs_bd_erase+0x5c>)
 8024156:	f008 fb57 	bl	802c808 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802415e:	68db      	ldr	r3, [r3, #12]
 8024160:	687a      	ldr	r2, [r7, #4]
 8024162:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024164:	6839      	ldr	r1, [r7, #0]
 8024166:	4610      	mov	r0, r2
 8024168:	4798      	blx	r3
 802416a:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 802416c:	68fb      	ldr	r3, [r7, #12]
 802416e:	2b00      	cmp	r3, #0
 8024170:	dd06      	ble.n	8024180 <lfs_bd_erase+0x48>
 8024172:	4b09      	ldr	r3, [pc, #36]	@ (8024198 <lfs_bd_erase+0x60>)
 8024174:	4a06      	ldr	r2, [pc, #24]	@ (8024190 <lfs_bd_erase+0x58>)
 8024176:	f240 1101 	movw	r1, #257	@ 0x101
 802417a:	4806      	ldr	r0, [pc, #24]	@ (8024194 <lfs_bd_erase+0x5c>)
 802417c:	f008 fb44 	bl	802c808 <__assert_func>
    return err;
 8024180:	68fb      	ldr	r3, [r7, #12]
}
 8024182:	4618      	mov	r0, r3
 8024184:	3710      	adds	r7, #16
 8024186:	46bd      	mov	sp, r7
 8024188:	bd80      	pop	{r7, pc}
 802418a:	bf00      	nop
 802418c:	080337f8 	.word	0x080337f8
 8024190:	08034b00 	.word	0x08034b00
 8024194:	08033818 	.word	0x08033818
 8024198:	0803384c 	.word	0x0803384c

0802419c <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 802419c:	b480      	push	{r7}
 802419e:	b085      	sub	sp, #20
 80241a0:	af00      	add	r7, sp, #0
 80241a2:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80241a4:	687b      	ldr	r3, [r7, #4]
 80241a6:	681b      	ldr	r3, [r3, #0]
 80241a8:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	685a      	ldr	r2, [r3, #4]
 80241ae:	687b      	ldr	r3, [r7, #4]
 80241b0:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80241b2:	687b      	ldr	r3, [r7, #4]
 80241b4:	3304      	adds	r3, #4
 80241b6:	68fa      	ldr	r2, [r7, #12]
 80241b8:	601a      	str	r2, [r3, #0]
}
 80241ba:	bf00      	nop
 80241bc:	3714      	adds	r7, #20
 80241be:	46bd      	mov	sp, r7
 80241c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241c4:	4770      	bx	lr

080241c6 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80241c6:	b480      	push	{r7}
 80241c8:	b083      	sub	sp, #12
 80241ca:	af00      	add	r7, sp, #0
 80241cc:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	681b      	ldr	r3, [r3, #0]
 80241d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80241d6:	d005      	beq.n	80241e4 <lfs_pair_isnull+0x1e>
 80241d8:	687b      	ldr	r3, [r7, #4]
 80241da:	3304      	adds	r3, #4
 80241dc:	681b      	ldr	r3, [r3, #0]
 80241de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80241e2:	d101      	bne.n	80241e8 <lfs_pair_isnull+0x22>
 80241e4:	2301      	movs	r3, #1
 80241e6:	e000      	b.n	80241ea <lfs_pair_isnull+0x24>
 80241e8:	2300      	movs	r3, #0
 80241ea:	f003 0301 	and.w	r3, r3, #1
 80241ee:	b2db      	uxtb	r3, r3
}
 80241f0:	4618      	mov	r0, r3
 80241f2:	370c      	adds	r7, #12
 80241f4:	46bd      	mov	sp, r7
 80241f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241fa:	4770      	bx	lr

080241fc <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80241fc:	b480      	push	{r7}
 80241fe:	b083      	sub	sp, #12
 8024200:	af00      	add	r7, sp, #0
 8024202:	6078      	str	r0, [r7, #4]
 8024204:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8024206:	687b      	ldr	r3, [r7, #4]
 8024208:	681a      	ldr	r2, [r3, #0]
 802420a:	683b      	ldr	r3, [r7, #0]
 802420c:	681b      	ldr	r3, [r3, #0]
 802420e:	429a      	cmp	r2, r3
 8024210:	d017      	beq.n	8024242 <lfs_pair_cmp+0x46>
 8024212:	687b      	ldr	r3, [r7, #4]
 8024214:	3304      	adds	r3, #4
 8024216:	681a      	ldr	r2, [r3, #0]
 8024218:	683b      	ldr	r3, [r7, #0]
 802421a:	3304      	adds	r3, #4
 802421c:	681b      	ldr	r3, [r3, #0]
 802421e:	429a      	cmp	r2, r3
 8024220:	d00f      	beq.n	8024242 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8024222:	687b      	ldr	r3, [r7, #4]
 8024224:	681a      	ldr	r2, [r3, #0]
 8024226:	683b      	ldr	r3, [r7, #0]
 8024228:	3304      	adds	r3, #4
 802422a:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 802422c:	429a      	cmp	r2, r3
 802422e:	d008      	beq.n	8024242 <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	3304      	adds	r3, #4
 8024234:	681a      	ldr	r2, [r3, #0]
 8024236:	683b      	ldr	r3, [r7, #0]
 8024238:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 802423a:	429a      	cmp	r2, r3
 802423c:	d001      	beq.n	8024242 <lfs_pair_cmp+0x46>
 802423e:	2301      	movs	r3, #1
 8024240:	e000      	b.n	8024244 <lfs_pair_cmp+0x48>
 8024242:	2300      	movs	r3, #0
}
 8024244:	4618      	mov	r0, r3
 8024246:	370c      	adds	r7, #12
 8024248:	46bd      	mov	sp, r7
 802424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802424e:	4770      	bx	lr

08024250 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8024250:	b480      	push	{r7}
 8024252:	b083      	sub	sp, #12
 8024254:	af00      	add	r7, sp, #0
 8024256:	6078      	str	r0, [r7, #4]
 8024258:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 802425a:	687b      	ldr	r3, [r7, #4]
 802425c:	681a      	ldr	r2, [r3, #0]
 802425e:	683b      	ldr	r3, [r7, #0]
 8024260:	681b      	ldr	r3, [r3, #0]
 8024262:	429a      	cmp	r2, r3
 8024264:	d107      	bne.n	8024276 <lfs_pair_sync+0x26>
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	3304      	adds	r3, #4
 802426a:	681a      	ldr	r2, [r3, #0]
 802426c:	683b      	ldr	r3, [r7, #0]
 802426e:	3304      	adds	r3, #4
 8024270:	681b      	ldr	r3, [r3, #0]
 8024272:	429a      	cmp	r2, r3
 8024274:	d00d      	beq.n	8024292 <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	681a      	ldr	r2, [r3, #0]
 802427a:	683b      	ldr	r3, [r7, #0]
 802427c:	3304      	adds	r3, #4
 802427e:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8024280:	429a      	cmp	r2, r3
 8024282:	d108      	bne.n	8024296 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8024284:	687b      	ldr	r3, [r7, #4]
 8024286:	3304      	adds	r3, #4
 8024288:	681a      	ldr	r2, [r3, #0]
 802428a:	683b      	ldr	r3, [r7, #0]
 802428c:	681b      	ldr	r3, [r3, #0]
 802428e:	429a      	cmp	r2, r3
 8024290:	d101      	bne.n	8024296 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8024292:	2301      	movs	r3, #1
 8024294:	e000      	b.n	8024298 <lfs_pair_sync+0x48>
 8024296:	2300      	movs	r3, #0
 8024298:	f003 0301 	and.w	r3, r3, #1
 802429c:	b2db      	uxtb	r3, r3
}
 802429e:	4618      	mov	r0, r3
 80242a0:	370c      	adds	r7, #12
 80242a2:	46bd      	mov	sp, r7
 80242a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242a8:	4770      	bx	lr

080242aa <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80242aa:	b590      	push	{r4, r7, lr}
 80242ac:	b083      	sub	sp, #12
 80242ae:	af00      	add	r7, sp, #0
 80242b0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80242b2:	687b      	ldr	r3, [r7, #4]
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	4618      	mov	r0, r3
 80242b8:	f7ff fbdf 	bl	8023a7a <lfs_fromle32>
 80242bc:	4602      	mov	r2, r0
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80242c2:	687b      	ldr	r3, [r7, #4]
 80242c4:	3304      	adds	r3, #4
 80242c6:	681a      	ldr	r2, [r3, #0]
 80242c8:	687b      	ldr	r3, [r7, #4]
 80242ca:	1d1c      	adds	r4, r3, #4
 80242cc:	4610      	mov	r0, r2
 80242ce:	f7ff fbd4 	bl	8023a7a <lfs_fromle32>
 80242d2:	4603      	mov	r3, r0
 80242d4:	6023      	str	r3, [r4, #0]
}
 80242d6:	bf00      	nop
 80242d8:	370c      	adds	r7, #12
 80242da:	46bd      	mov	sp, r7
 80242dc:	bd90      	pop	{r4, r7, pc}

080242de <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80242de:	b590      	push	{r4, r7, lr}
 80242e0:	b083      	sub	sp, #12
 80242e2:	af00      	add	r7, sp, #0
 80242e4:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	681b      	ldr	r3, [r3, #0]
 80242ea:	4618      	mov	r0, r3
 80242ec:	f7ff fbd0 	bl	8023a90 <lfs_tole32>
 80242f0:	4602      	mov	r2, r0
 80242f2:	687b      	ldr	r3, [r7, #4]
 80242f4:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80242f6:	687b      	ldr	r3, [r7, #4]
 80242f8:	3304      	adds	r3, #4
 80242fa:	681a      	ldr	r2, [r3, #0]
 80242fc:	687b      	ldr	r3, [r7, #4]
 80242fe:	1d1c      	adds	r4, r3, #4
 8024300:	4610      	mov	r0, r2
 8024302:	f7ff fbc5 	bl	8023a90 <lfs_tole32>
 8024306:	4603      	mov	r3, r0
 8024308:	6023      	str	r3, [r4, #0]
}
 802430a:	bf00      	nop
 802430c:	370c      	adds	r7, #12
 802430e:	46bd      	mov	sp, r7
 8024310:	bd90      	pop	{r4, r7, pc}

08024312 <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8024312:	b480      	push	{r7}
 8024314:	b083      	sub	sp, #12
 8024316:	af00      	add	r7, sp, #0
 8024318:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 802431a:	687b      	ldr	r3, [r7, #4]
 802431c:	43db      	mvns	r3, r3
 802431e:	0fdb      	lsrs	r3, r3, #31
 8024320:	b2db      	uxtb	r3, r3
}
 8024322:	4618      	mov	r0, r3
 8024324:	370c      	adds	r7, #12
 8024326:	46bd      	mov	sp, r7
 8024328:	f85d 7b04 	ldr.w	r7, [sp], #4
 802432c:	4770      	bx	lr

0802432e <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 802432e:	b480      	push	{r7}
 8024330:	b083      	sub	sp, #12
 8024332:	af00      	add	r7, sp, #0
 8024334:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8024336:	687b      	ldr	r3, [r7, #4]
 8024338:	059b      	lsls	r3, r3, #22
 802433a:	159b      	asrs	r3, r3, #22
 802433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024340:	bf0c      	ite	eq
 8024342:	2301      	moveq	r3, #1
 8024344:	2300      	movne	r3, #0
 8024346:	b2db      	uxtb	r3, r3
}
 8024348:	4618      	mov	r0, r3
 802434a:	370c      	adds	r7, #12
 802434c:	46bd      	mov	sp, r7
 802434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024352:	4770      	bx	lr

08024354 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8024354:	b480      	push	{r7}
 8024356:	b083      	sub	sp, #12
 8024358:	af00      	add	r7, sp, #0
 802435a:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	0d1b      	lsrs	r3, r3, #20
 8024360:	b29b      	uxth	r3, r3
 8024362:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8024366:	b29b      	uxth	r3, r3
}
 8024368:	4618      	mov	r0, r3
 802436a:	370c      	adds	r7, #12
 802436c:	46bd      	mov	sp, r7
 802436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024372:	4770      	bx	lr

08024374 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8024374:	b480      	push	{r7}
 8024376:	b083      	sub	sp, #12
 8024378:	af00      	add	r7, sp, #0
 802437a:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	0d1b      	lsrs	r3, r3, #20
 8024380:	b29b      	uxth	r3, r3
 8024382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8024386:	b29b      	uxth	r3, r3
}
 8024388:	4618      	mov	r0, r3
 802438a:	370c      	adds	r7, #12
 802438c:	46bd      	mov	sp, r7
 802438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024392:	4770      	bx	lr

08024394 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8024394:	b480      	push	{r7}
 8024396:	b083      	sub	sp, #12
 8024398:	af00      	add	r7, sp, #0
 802439a:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 802439c:	687b      	ldr	r3, [r7, #4]
 802439e:	0d1b      	lsrs	r3, r3, #20
 80243a0:	b2db      	uxtb	r3, r3
}
 80243a2:	4618      	mov	r0, r3
 80243a4:	370c      	adds	r7, #12
 80243a6:	46bd      	mov	sp, r7
 80243a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243ac:	4770      	bx	lr

080243ae <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80243ae:	b580      	push	{r7, lr}
 80243b0:	b082      	sub	sp, #8
 80243b2:	af00      	add	r7, sp, #0
 80243b4:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80243b6:	6878      	ldr	r0, [r7, #4]
 80243b8:	f7ff ffec 	bl	8024394 <lfs_tag_chunk>
 80243bc:	4603      	mov	r3, r0
 80243be:	b25b      	sxtb	r3, r3
}
 80243c0:	4618      	mov	r0, r3
 80243c2:	3708      	adds	r7, #8
 80243c4:	46bd      	mov	sp, r7
 80243c6:	bd80      	pop	{r7, pc}

080243c8 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80243c8:	b480      	push	{r7}
 80243ca:	b083      	sub	sp, #12
 80243cc:	af00      	add	r7, sp, #0
 80243ce:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	0a9b      	lsrs	r3, r3, #10
 80243d4:	b29b      	uxth	r3, r3
 80243d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80243da:	b29b      	uxth	r3, r3
}
 80243dc:	4618      	mov	r0, r3
 80243de:	370c      	adds	r7, #12
 80243e0:	46bd      	mov	sp, r7
 80243e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243e6:	4770      	bx	lr

080243e8 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80243e8:	b480      	push	{r7}
 80243ea:	b083      	sub	sp, #12
 80243ec:	af00      	add	r7, sp, #0
 80243ee:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80243f0:	687b      	ldr	r3, [r7, #4]
 80243f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80243f6:	4618      	mov	r0, r3
 80243f8:	370c      	adds	r7, #12
 80243fa:	46bd      	mov	sp, r7
 80243fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024400:	4770      	bx	lr

08024402 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8024402:	b580      	push	{r7, lr}
 8024404:	b082      	sub	sp, #8
 8024406:	af00      	add	r7, sp, #0
 8024408:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 802440a:	6878      	ldr	r0, [r7, #4]
 802440c:	f7ff ff8f 	bl	802432e <lfs_tag_isdelete>
 8024410:	4603      	mov	r3, r0
 8024412:	461a      	mov	r2, r3
 8024414:	687b      	ldr	r3, [r7, #4]
 8024416:	4413      	add	r3, r2
 8024418:	4618      	mov	r0, r3
 802441a:	f7ff ffe5 	bl	80243e8 <lfs_tag_size>
 802441e:	4603      	mov	r3, r0
 8024420:	3304      	adds	r3, #4
}
 8024422:	4618      	mov	r0, r3
 8024424:	3708      	adds	r7, #8
 8024426:	46bd      	mov	sp, r7
 8024428:	bd80      	pop	{r7, pc}

0802442a <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 802442a:	b480      	push	{r7}
 802442c:	b085      	sub	sp, #20
 802442e:	af00      	add	r7, sp, #0
 8024430:	6078      	str	r0, [r7, #4]
 8024432:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8024434:	2300      	movs	r3, #0
 8024436:	60fb      	str	r3, [r7, #12]
 8024438:	e012      	b.n	8024460 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 802443a:	68fb      	ldr	r3, [r7, #12]
 802443c:	009b      	lsls	r3, r3, #2
 802443e:	687a      	ldr	r2, [r7, #4]
 8024440:	4413      	add	r3, r2
 8024442:	6819      	ldr	r1, [r3, #0]
 8024444:	68fb      	ldr	r3, [r7, #12]
 8024446:	009b      	lsls	r3, r3, #2
 8024448:	683a      	ldr	r2, [r7, #0]
 802444a:	4413      	add	r3, r2
 802444c:	681a      	ldr	r2, [r3, #0]
 802444e:	68fb      	ldr	r3, [r7, #12]
 8024450:	009b      	lsls	r3, r3, #2
 8024452:	6878      	ldr	r0, [r7, #4]
 8024454:	4403      	add	r3, r0
 8024456:	404a      	eors	r2, r1
 8024458:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 802445a:	68fb      	ldr	r3, [r7, #12]
 802445c:	3301      	adds	r3, #1
 802445e:	60fb      	str	r3, [r7, #12]
 8024460:	68fb      	ldr	r3, [r7, #12]
 8024462:	2b02      	cmp	r3, #2
 8024464:	dde9      	ble.n	802443a <lfs_gstate_xor+0x10>
    }
}
 8024466:	bf00      	nop
 8024468:	bf00      	nop
 802446a:	3714      	adds	r7, #20
 802446c:	46bd      	mov	sp, r7
 802446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024472:	4770      	bx	lr

08024474 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8024474:	b480      	push	{r7}
 8024476:	b085      	sub	sp, #20
 8024478:	af00      	add	r7, sp, #0
 802447a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 802447c:	2300      	movs	r3, #0
 802447e:	60fb      	str	r3, [r7, #12]
 8024480:	e00b      	b.n	802449a <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8024482:	68fb      	ldr	r3, [r7, #12]
 8024484:	009b      	lsls	r3, r3, #2
 8024486:	687a      	ldr	r2, [r7, #4]
 8024488:	4413      	add	r3, r2
 802448a:	681b      	ldr	r3, [r3, #0]
 802448c:	2b00      	cmp	r3, #0
 802448e:	d001      	beq.n	8024494 <lfs_gstate_iszero+0x20>
            return false;
 8024490:	2300      	movs	r3, #0
 8024492:	e006      	b.n	80244a2 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8024494:	68fb      	ldr	r3, [r7, #12]
 8024496:	3301      	adds	r3, #1
 8024498:	60fb      	str	r3, [r7, #12]
 802449a:	68fb      	ldr	r3, [r7, #12]
 802449c:	2b02      	cmp	r3, #2
 802449e:	ddf0      	ble.n	8024482 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80244a0:	2301      	movs	r3, #1
}
 80244a2:	4618      	mov	r0, r3
 80244a4:	3714      	adds	r7, #20
 80244a6:	46bd      	mov	sp, r7
 80244a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244ac:	4770      	bx	lr

080244ae <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80244ae:	b580      	push	{r7, lr}
 80244b0:	b082      	sub	sp, #8
 80244b2:	af00      	add	r7, sp, #0
 80244b4:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	681b      	ldr	r3, [r3, #0]
 80244ba:	4618      	mov	r0, r3
 80244bc:	f7ff ff94 	bl	80243e8 <lfs_tag_size>
 80244c0:	4603      	mov	r3, r0
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	bf14      	ite	ne
 80244c6:	2301      	movne	r3, #1
 80244c8:	2300      	moveq	r3, #0
 80244ca:	b2db      	uxtb	r3, r3
}
 80244cc:	4618      	mov	r0, r3
 80244ce:	3708      	adds	r7, #8
 80244d0:	46bd      	mov	sp, r7
 80244d2:	bd80      	pop	{r7, pc}

080244d4 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80244d4:	b580      	push	{r7, lr}
 80244d6:	b082      	sub	sp, #8
 80244d8:	af00      	add	r7, sp, #0
 80244da:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80244dc:	687b      	ldr	r3, [r7, #4]
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	4618      	mov	r0, r3
 80244e2:	f7ff ff81 	bl	80243e8 <lfs_tag_size>
 80244e6:	4603      	mov	r3, r0
 80244e8:	b2db      	uxtb	r3, r3
}
 80244ea:	4618      	mov	r0, r3
 80244ec:	3708      	adds	r7, #8
 80244ee:	46bd      	mov	sp, r7
 80244f0:	bd80      	pop	{r7, pc}

080244f2 <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80244f2:	b580      	push	{r7, lr}
 80244f4:	b082      	sub	sp, #8
 80244f6:	af00      	add	r7, sp, #0
 80244f8:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	681b      	ldr	r3, [r3, #0]
 80244fe:	4618      	mov	r0, r3
 8024500:	f7ff ff28 	bl	8024354 <lfs_tag_type1>
 8024504:	4603      	mov	r3, r0
 8024506:	2b00      	cmp	r3, #0
 8024508:	bf14      	ite	ne
 802450a:	2301      	movne	r3, #1
 802450c:	2300      	moveq	r3, #0
 802450e:	b2db      	uxtb	r3, r3
}
 8024510:	4618      	mov	r0, r3
 8024512:	3708      	adds	r7, #8
 8024514:	46bd      	mov	sp, r7
 8024516:	bd80      	pop	{r7, pc}

08024518 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8024518:	b580      	push	{r7, lr}
 802451a:	b082      	sub	sp, #8
 802451c:	af00      	add	r7, sp, #0
 802451e:	6078      	str	r0, [r7, #4]
 8024520:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8024522:	687b      	ldr	r3, [r7, #4]
 8024524:	681b      	ldr	r3, [r3, #0]
 8024526:	4618      	mov	r0, r3
 8024528:	f7ff ff14 	bl	8024354 <lfs_tag_type1>
 802452c:	4603      	mov	r3, r0
 802452e:	2b00      	cmp	r3, #0
 8024530:	d00a      	beq.n	8024548 <lfs_gstate_hasmovehere+0x30>
 8024532:	687b      	ldr	r3, [r7, #4]
 8024534:	3304      	adds	r3, #4
 8024536:	6839      	ldr	r1, [r7, #0]
 8024538:	4618      	mov	r0, r3
 802453a:	f7ff fe5f 	bl	80241fc <lfs_pair_cmp>
 802453e:	4603      	mov	r3, r0
 8024540:	2b00      	cmp	r3, #0
 8024542:	d101      	bne.n	8024548 <lfs_gstate_hasmovehere+0x30>
 8024544:	2301      	movs	r3, #1
 8024546:	e000      	b.n	802454a <lfs_gstate_hasmovehere+0x32>
 8024548:	2300      	movs	r3, #0
 802454a:	f003 0301 	and.w	r3, r3, #1
 802454e:	b2db      	uxtb	r3, r3
}
 8024550:	4618      	mov	r0, r3
 8024552:	3708      	adds	r7, #8
 8024554:	46bd      	mov	sp, r7
 8024556:	bd80      	pop	{r7, pc}

08024558 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8024558:	b580      	push	{r7, lr}
 802455a:	b082      	sub	sp, #8
 802455c:	af00      	add	r7, sp, #0
 802455e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8024560:	687b      	ldr	r3, [r7, #4]
 8024562:	681b      	ldr	r3, [r3, #0]
 8024564:	4618      	mov	r0, r3
 8024566:	f7ff fa88 	bl	8023a7a <lfs_fromle32>
 802456a:	4602      	mov	r2, r0
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8024570:	687b      	ldr	r3, [r7, #4]
 8024572:	685b      	ldr	r3, [r3, #4]
 8024574:	4618      	mov	r0, r3
 8024576:	f7ff fa80 	bl	8023a7a <lfs_fromle32>
 802457a:	4602      	mov	r2, r0
 802457c:	687b      	ldr	r3, [r7, #4]
 802457e:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8024580:	687b      	ldr	r3, [r7, #4]
 8024582:	689b      	ldr	r3, [r3, #8]
 8024584:	4618      	mov	r0, r3
 8024586:	f7ff fa78 	bl	8023a7a <lfs_fromle32>
 802458a:	4602      	mov	r2, r0
 802458c:	687b      	ldr	r3, [r7, #4]
 802458e:	609a      	str	r2, [r3, #8]
}
 8024590:	bf00      	nop
 8024592:	3708      	adds	r7, #8
 8024594:	46bd      	mov	sp, r7
 8024596:	bd80      	pop	{r7, pc}

08024598 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8024598:	b580      	push	{r7, lr}
 802459a:	b082      	sub	sp, #8
 802459c:	af00      	add	r7, sp, #0
 802459e:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80245a0:	687b      	ldr	r3, [r7, #4]
 80245a2:	681b      	ldr	r3, [r3, #0]
 80245a4:	4618      	mov	r0, r3
 80245a6:	f7ff fa73 	bl	8023a90 <lfs_tole32>
 80245aa:	4602      	mov	r2, r0
 80245ac:	687b      	ldr	r3, [r7, #4]
 80245ae:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80245b0:	687b      	ldr	r3, [r7, #4]
 80245b2:	685b      	ldr	r3, [r3, #4]
 80245b4:	4618      	mov	r0, r3
 80245b6:	f7ff fa6b 	bl	8023a90 <lfs_tole32>
 80245ba:	4602      	mov	r2, r0
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80245c0:	687b      	ldr	r3, [r7, #4]
 80245c2:	689b      	ldr	r3, [r3, #8]
 80245c4:	4618      	mov	r0, r3
 80245c6:	f7ff fa63 	bl	8023a90 <lfs_tole32>
 80245ca:	4602      	mov	r2, r0
 80245cc:	687b      	ldr	r3, [r7, #4]
 80245ce:	609a      	str	r2, [r3, #8]
}
 80245d0:	bf00      	nop
 80245d2:	3708      	adds	r7, #8
 80245d4:	46bd      	mov	sp, r7
 80245d6:	bd80      	pop	{r7, pc}

080245d8 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80245d8:	b580      	push	{r7, lr}
 80245da:	b082      	sub	sp, #8
 80245dc:	af00      	add	r7, sp, #0
 80245de:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80245e0:	687b      	ldr	r3, [r7, #4]
 80245e2:	681b      	ldr	r3, [r3, #0]
 80245e4:	4618      	mov	r0, r3
 80245e6:	f7ff fa48 	bl	8023a7a <lfs_fromle32>
 80245ea:	4602      	mov	r2, r0
 80245ec:	687b      	ldr	r3, [r7, #4]
 80245ee:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80245f0:	687b      	ldr	r3, [r7, #4]
 80245f2:	685b      	ldr	r3, [r3, #4]
 80245f4:	4618      	mov	r0, r3
 80245f6:	f7ff fa40 	bl	8023a7a <lfs_fromle32>
 80245fa:	4602      	mov	r2, r0
 80245fc:	687b      	ldr	r3, [r7, #4]
 80245fe:	605a      	str	r2, [r3, #4]
}
 8024600:	bf00      	nop
 8024602:	3708      	adds	r7, #8
 8024604:	46bd      	mov	sp, r7
 8024606:	bd80      	pop	{r7, pc}

08024608 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8024608:	b580      	push	{r7, lr}
 802460a:	b082      	sub	sp, #8
 802460c:	af00      	add	r7, sp, #0
 802460e:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8024610:	687b      	ldr	r3, [r7, #4]
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	4618      	mov	r0, r3
 8024616:	f7ff fa3b 	bl	8023a90 <lfs_tole32>
 802461a:	4602      	mov	r2, r0
 802461c:	687b      	ldr	r3, [r7, #4]
 802461e:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	685b      	ldr	r3, [r3, #4]
 8024624:	4618      	mov	r0, r3
 8024626:	f7ff fa33 	bl	8023a90 <lfs_tole32>
 802462a:	4602      	mov	r2, r0
 802462c:	687b      	ldr	r3, [r7, #4]
 802462e:	605a      	str	r2, [r3, #4]
}
 8024630:	bf00      	nop
 8024632:	3708      	adds	r7, #8
 8024634:	46bd      	mov	sp, r7
 8024636:	bd80      	pop	{r7, pc}

08024638 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8024638:	b580      	push	{r7, lr}
 802463a:	b082      	sub	sp, #8
 802463c:	af00      	add	r7, sp, #0
 802463e:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8024640:	687b      	ldr	r3, [r7, #4]
 8024642:	681b      	ldr	r3, [r3, #0]
 8024644:	4618      	mov	r0, r3
 8024646:	f7ff fa18 	bl	8023a7a <lfs_fromle32>
 802464a:	4602      	mov	r2, r0
 802464c:	687b      	ldr	r3, [r7, #4]
 802464e:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	685b      	ldr	r3, [r3, #4]
 8024654:	4618      	mov	r0, r3
 8024656:	f7ff fa10 	bl	8023a7a <lfs_fromle32>
 802465a:	4602      	mov	r2, r0
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	689b      	ldr	r3, [r3, #8]
 8024664:	4618      	mov	r0, r3
 8024666:	f7ff fa08 	bl	8023a7a <lfs_fromle32>
 802466a:	4602      	mov	r2, r0
 802466c:	687b      	ldr	r3, [r7, #4]
 802466e:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	68db      	ldr	r3, [r3, #12]
 8024674:	4618      	mov	r0, r3
 8024676:	f7ff fa00 	bl	8023a7a <lfs_fromle32>
 802467a:	4602      	mov	r2, r0
 802467c:	687b      	ldr	r3, [r7, #4]
 802467e:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8024680:	687b      	ldr	r3, [r7, #4]
 8024682:	691b      	ldr	r3, [r3, #16]
 8024684:	4618      	mov	r0, r3
 8024686:	f7ff f9f8 	bl	8023a7a <lfs_fromle32>
 802468a:	4602      	mov	r2, r0
 802468c:	687b      	ldr	r3, [r7, #4]
 802468e:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	695b      	ldr	r3, [r3, #20]
 8024694:	4618      	mov	r0, r3
 8024696:	f7ff f9f0 	bl	8023a7a <lfs_fromle32>
 802469a:	4602      	mov	r2, r0
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	615a      	str	r2, [r3, #20]
}
 80246a0:	bf00      	nop
 80246a2:	3708      	adds	r7, #8
 80246a4:	46bd      	mov	sp, r7
 80246a6:	bd80      	pop	{r7, pc}

080246a8 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80246a8:	b580      	push	{r7, lr}
 80246aa:	b082      	sub	sp, #8
 80246ac:	af00      	add	r7, sp, #0
 80246ae:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	681b      	ldr	r3, [r3, #0]
 80246b4:	4618      	mov	r0, r3
 80246b6:	f7ff f9eb 	bl	8023a90 <lfs_tole32>
 80246ba:	4602      	mov	r2, r0
 80246bc:	687b      	ldr	r3, [r7, #4]
 80246be:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80246c0:	687b      	ldr	r3, [r7, #4]
 80246c2:	685b      	ldr	r3, [r3, #4]
 80246c4:	4618      	mov	r0, r3
 80246c6:	f7ff f9e3 	bl	8023a90 <lfs_tole32>
 80246ca:	4602      	mov	r2, r0
 80246cc:	687b      	ldr	r3, [r7, #4]
 80246ce:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80246d0:	687b      	ldr	r3, [r7, #4]
 80246d2:	689b      	ldr	r3, [r3, #8]
 80246d4:	4618      	mov	r0, r3
 80246d6:	f7ff f9db 	bl	8023a90 <lfs_tole32>
 80246da:	4602      	mov	r2, r0
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80246e0:	687b      	ldr	r3, [r7, #4]
 80246e2:	68db      	ldr	r3, [r3, #12]
 80246e4:	4618      	mov	r0, r3
 80246e6:	f7ff f9d3 	bl	8023a90 <lfs_tole32>
 80246ea:	4602      	mov	r2, r0
 80246ec:	687b      	ldr	r3, [r7, #4]
 80246ee:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	691b      	ldr	r3, [r3, #16]
 80246f4:	4618      	mov	r0, r3
 80246f6:	f7ff f9cb 	bl	8023a90 <lfs_tole32>
 80246fa:	4602      	mov	r2, r0
 80246fc:	687b      	ldr	r3, [r7, #4]
 80246fe:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	695b      	ldr	r3, [r3, #20]
 8024704:	4618      	mov	r0, r3
 8024706:	f7ff f9c3 	bl	8023a90 <lfs_tole32>
 802470a:	4602      	mov	r2, r0
 802470c:	687b      	ldr	r3, [r7, #4]
 802470e:	615a      	str	r2, [r3, #20]
}
 8024710:	bf00      	nop
 8024712:	3708      	adds	r7, #8
 8024714:	46bd      	mov	sp, r7
 8024716:	bd80      	pop	{r7, pc}

08024718 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8024718:	b480      	push	{r7}
 802471a:	b085      	sub	sp, #20
 802471c:	af00      	add	r7, sp, #0
 802471e:	6078      	str	r0, [r7, #4]
 8024720:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8024722:	1d3b      	adds	r3, r7, #4
 8024724:	60fb      	str	r3, [r7, #12]
 8024726:	e009      	b.n	802473c <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8024728:	68fb      	ldr	r3, [r7, #12]
 802472a:	681b      	ldr	r3, [r3, #0]
 802472c:	683a      	ldr	r2, [r7, #0]
 802472e:	429a      	cmp	r2, r3
 8024730:	d101      	bne.n	8024736 <lfs_mlist_isopen+0x1e>
            return true;
 8024732:	2301      	movs	r3, #1
 8024734:	e007      	b.n	8024746 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 8024736:	68fb      	ldr	r3, [r7, #12]
 8024738:	681b      	ldr	r3, [r3, #0]
 802473a:	60fb      	str	r3, [r7, #12]
 802473c:	68fb      	ldr	r3, [r7, #12]
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	2b00      	cmp	r3, #0
 8024742:	d1f1      	bne.n	8024728 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 8024744:	2300      	movs	r3, #0
}
 8024746:	4618      	mov	r0, r3
 8024748:	3714      	adds	r7, #20
 802474a:	46bd      	mov	sp, r7
 802474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024750:	4770      	bx	lr

08024752 <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 8024752:	b480      	push	{r7}
 8024754:	b085      	sub	sp, #20
 8024756:	af00      	add	r7, sp, #0
 8024758:	6078      	str	r0, [r7, #4]
 802475a:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	3328      	adds	r3, #40	@ 0x28
 8024760:	60fb      	str	r3, [r7, #12]
 8024762:	e00d      	b.n	8024780 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 8024764:	68fb      	ldr	r3, [r7, #12]
 8024766:	681b      	ldr	r3, [r3, #0]
 8024768:	683a      	ldr	r2, [r7, #0]
 802476a:	429a      	cmp	r2, r3
 802476c:	d105      	bne.n	802477a <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 802476e:	68fb      	ldr	r3, [r7, #12]
 8024770:	681b      	ldr	r3, [r3, #0]
 8024772:	681a      	ldr	r2, [r3, #0]
 8024774:	68fb      	ldr	r3, [r7, #12]
 8024776:	601a      	str	r2, [r3, #0]
            break;
 8024778:	e007      	b.n	802478a <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 802477a:	68fb      	ldr	r3, [r7, #12]
 802477c:	681b      	ldr	r3, [r3, #0]
 802477e:	60fb      	str	r3, [r7, #12]
 8024780:	68fb      	ldr	r3, [r7, #12]
 8024782:	681b      	ldr	r3, [r3, #0]
 8024784:	2b00      	cmp	r3, #0
 8024786:	d1ed      	bne.n	8024764 <lfs_mlist_remove+0x12>
        }
    }
}
 8024788:	bf00      	nop
 802478a:	bf00      	nop
 802478c:	3714      	adds	r7, #20
 802478e:	46bd      	mov	sp, r7
 8024790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024794:	4770      	bx	lr

08024796 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 8024796:	b480      	push	{r7}
 8024798:	b083      	sub	sp, #12
 802479a:	af00      	add	r7, sp, #0
 802479c:	6078      	str	r0, [r7, #4]
 802479e:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80247a0:	687b      	ldr	r3, [r7, #4]
 80247a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80247a4:	683b      	ldr	r3, [r7, #0]
 80247a6:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	683a      	ldr	r2, [r7, #0]
 80247ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80247ae:	bf00      	nop
 80247b0:	370c      	adds	r7, #12
 80247b2:	46bd      	mov	sp, r7
 80247b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247b8:	4770      	bx	lr

080247ba <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80247ba:	b480      	push	{r7}
 80247bc:	b085      	sub	sp, #20
 80247be:	af00      	add	r7, sp, #0
 80247c0:	6078      	str	r0, [r7, #4]
 80247c2:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80247c8:	68fb      	ldr	r3, [r7, #12]
 80247ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80247cc:	683a      	ldr	r2, [r7, #0]
 80247ce:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80247d0:	68fb      	ldr	r3, [r7, #12]
 80247d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80247d4:	6a1b      	ldr	r3, [r3, #32]
 80247d6:	4413      	add	r3, r2
 80247d8:	68fa      	ldr	r2, [r7, #12]
 80247da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80247dc:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80247de:	fbb3 f1f2 	udiv	r1, r3, r2
 80247e2:	fb01 f202 	mul.w	r2, r1, r2
 80247e6:	1a9b      	subs	r3, r3, r2
 80247e8:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80247ea:	68fb      	ldr	r3, [r7, #12]
 80247ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80247ee:	68ba      	ldr	r2, [r7, #8]
 80247f0:	429a      	cmp	r2, r3
 80247f2:	d212      	bcs.n	802481a <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80247f4:	68fb      	ldr	r3, [r7, #12]
 80247f6:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80247f8:	68bb      	ldr	r3, [r7, #8]
 80247fa:	095b      	lsrs	r3, r3, #5
 80247fc:	009a      	lsls	r2, r3, #2
 80247fe:	440a      	add	r2, r1
 8024800:	6811      	ldr	r1, [r2, #0]
 8024802:	68ba      	ldr	r2, [r7, #8]
 8024804:	f002 021f 	and.w	r2, r2, #31
 8024808:	2001      	movs	r0, #1
 802480a:	fa00 f202 	lsl.w	r2, r0, r2
 802480e:	68f8      	ldr	r0, [r7, #12]
 8024810:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8024812:	009b      	lsls	r3, r3, #2
 8024814:	4403      	add	r3, r0
 8024816:	430a      	orrs	r2, r1
 8024818:	601a      	str	r2, [r3, #0]
    }

    return 0;
 802481a:	2300      	movs	r3, #0
}
 802481c:	4618      	mov	r0, r3
 802481e:	3714      	adds	r7, #20
 8024820:	46bd      	mov	sp, r7
 8024822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024826:	4770      	bx	lr

08024828 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024828:	b480      	push	{r7}
 802482a:	b083      	sub	sp, #12
 802482c:	af00      	add	r7, sp, #0
 802482e:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024834:	6a1a      	ldr	r2, [r3, #32]
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	661a      	str	r2, [r3, #96]	@ 0x60
}
 802483a:	bf00      	nop
 802483c:	370c      	adds	r7, #12
 802483e:	46bd      	mov	sp, r7
 8024840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024844:	4770      	bx	lr

08024846 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8024846:	b580      	push	{r7, lr}
 8024848:	b082      	sub	sp, #8
 802484a:	af00      	add	r7, sp, #0
 802484c:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 802484e:	687b      	ldr	r3, [r7, #4]
 8024850:	2200      	movs	r2, #0
 8024852:	659a      	str	r2, [r3, #88]	@ 0x58
    lfs->free.i = 0;
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	2200      	movs	r2, #0
 8024858:	65da      	str	r2, [r3, #92]	@ 0x5c
    lfs_alloc_ack(lfs);
 802485a:	6878      	ldr	r0, [r7, #4]
 802485c:	f7ff ffe4 	bl	8024828 <lfs_alloc_ack>
}
 8024860:	bf00      	nop
 8024862:	3708      	adds	r7, #8
 8024864:	46bd      	mov	sp, r7
 8024866:	bd80      	pop	{r7, pc}

08024868 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8024868:	b580      	push	{r7, lr}
 802486a:	b086      	sub	sp, #24
 802486c:	af02      	add	r7, sp, #8
 802486e:	6078      	str	r0, [r7, #4]
 8024870:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8024872:	e04f      	b.n	8024914 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8024874:	687b      	ldr	r3, [r7, #4]
 8024876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024878:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802487e:	1c5a      	adds	r2, r3, #1
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	65da      	str	r2, [r3, #92]	@ 0x5c
            lfs->free.ack -= 1;
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024888:	1e5a      	subs	r2, r3, #1
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	661a      	str	r2, [r3, #96]	@ 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8024892:	68bb      	ldr	r3, [r7, #8]
 8024894:	095b      	lsrs	r3, r3, #5
 8024896:	009b      	lsls	r3, r3, #2
 8024898:	4413      	add	r3, r2
 802489a:	681a      	ldr	r2, [r3, #0]
 802489c:	68bb      	ldr	r3, [r7, #8]
 802489e:	f003 031f 	and.w	r3, r3, #31
 80248a2:	2101      	movs	r1, #1
 80248a4:	fa01 f303 	lsl.w	r3, r1, r3
 80248a8:	4013      	ands	r3, r2
 80248aa:	2b00      	cmp	r3, #0
 80248ac:	d132      	bne.n	8024914 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80248b2:	68bb      	ldr	r3, [r7, #8]
 80248b4:	4413      	add	r3, r2
 80248b6:	687a      	ldr	r2, [r7, #4]
 80248b8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80248ba:	6a12      	ldr	r2, [r2, #32]
 80248bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80248c0:	fb01 f202 	mul.w	r2, r1, r2
 80248c4:	1a9a      	subs	r2, r3, r2
 80248c6:	683b      	ldr	r3, [r7, #0]
 80248c8:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80248ca:	e009      	b.n	80248e0 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80248d0:	1c5a      	adds	r2, r3, #1
 80248d2:	687b      	ldr	r3, [r7, #4]
 80248d4:	65da      	str	r2, [r3, #92]	@ 0x5c
                    lfs->free.ack -= 1;
 80248d6:	687b      	ldr	r3, [r7, #4]
 80248d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80248da:	1e5a      	subs	r2, r3, #1
 80248dc:	687b      	ldr	r3, [r7, #4]
 80248de:	661a      	str	r2, [r3, #96]	@ 0x60
                while (lfs->free.i != lfs->free.size &&
 80248e0:	687b      	ldr	r3, [r7, #4]
 80248e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80248e4:	687b      	ldr	r3, [r7, #4]
 80248e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80248e8:	429a      	cmp	r2, r3
 80248ea:	d011      	beq.n	8024910 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80248ec:	687b      	ldr	r3, [r7, #4]
 80248ee:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80248f0:	687b      	ldr	r3, [r7, #4]
 80248f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80248f4:	095b      	lsrs	r3, r3, #5
 80248f6:	009b      	lsls	r3, r3, #2
 80248f8:	4413      	add	r3, r2
 80248fa:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80248fc:	687b      	ldr	r3, [r7, #4]
 80248fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024900:	f003 031f 	and.w	r3, r3, #31
 8024904:	2101      	movs	r1, #1
 8024906:	fa01 f303 	lsl.w	r3, r1, r3
 802490a:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 802490c:	2b00      	cmp	r3, #0
 802490e:	d1dd      	bne.n	80248cc <lfs_alloc+0x64>
                }

                return 0;
 8024910:	2300      	movs	r3, #0
 8024912:	e050      	b.n	80249b6 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8024918:	687b      	ldr	r3, [r7, #4]
 802491a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802491c:	429a      	cmp	r2, r3
 802491e:	d1a9      	bne.n	8024874 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8024920:	687b      	ldr	r3, [r7, #4]
 8024922:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024924:	2b00      	cmp	r3, #0
 8024926:	d10f      	bne.n	8024948 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024928:	687b      	ldr	r3, [r7, #4]
 802492a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8024930:	4413      	add	r3, r2
 8024932:	4a23      	ldr	r2, [pc, #140]	@ (80249c0 <lfs_alloc+0x158>)
 8024934:	9200      	str	r2, [sp, #0]
 8024936:	f240 2247 	movw	r2, #583	@ 0x247
 802493a:	4922      	ldr	r1, [pc, #136]	@ (80249c4 <lfs_alloc+0x15c>)
 802493c:	4822      	ldr	r0, [pc, #136]	@ (80249c8 <lfs_alloc+0x160>)
 802493e:	f008 ff93 	bl	802d868 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8024942:	f06f 031b 	mvn.w	r3, #27
 8024946:	e036      	b.n	80249b6 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024948:	687b      	ldr	r3, [r7, #4]
 802494a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802494c:	687b      	ldr	r3, [r7, #4]
 802494e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024950:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8024952:	687a      	ldr	r2, [r7, #4]
 8024954:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8024956:	6a12      	ldr	r2, [r2, #32]
 8024958:	fbb3 f1f2 	udiv	r1, r3, r2
 802495c:	fb01 f202 	mul.w	r2, r1, r2
 8024960:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024962:	687b      	ldr	r3, [r7, #4]
 8024964:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8024966:	687b      	ldr	r3, [r7, #4]
 8024968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802496c:	00da      	lsls	r2, r3, #3
 802496e:	687b      	ldr	r3, [r7, #4]
 8024970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8024972:	4619      	mov	r1, r3
 8024974:	4610      	mov	r0, r2
 8024976:	f7ff f810 	bl	802399a <lfs_min>
 802497a:	4602      	mov	r2, r0
 802497c:	687b      	ldr	r3, [r7, #4]
 802497e:	659a      	str	r2, [r3, #88]	@ 0x58
        lfs->free.i = 0;
 8024980:	687b      	ldr	r3, [r7, #4]
 8024982:	2200      	movs	r2, #0
 8024984:	65da      	str	r2, [r3, #92]	@ 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8024986:	687b      	ldr	r3, [r7, #4]
 8024988:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 802498a:	687b      	ldr	r3, [r7, #4]
 802498c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024990:	461a      	mov	r2, r3
 8024992:	2100      	movs	r1, #0
 8024994:	f009 f8fc 	bl	802db90 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8024998:	2301      	movs	r3, #1
 802499a:	687a      	ldr	r2, [r7, #4]
 802499c:	490b      	ldr	r1, [pc, #44]	@ (80249cc <lfs_alloc+0x164>)
 802499e:	6878      	ldr	r0, [r7, #4]
 80249a0:	f005 fb3e 	bl	802a020 <lfs_fs_rawtraverse>
 80249a4:	60f8      	str	r0, [r7, #12]
        if (err) {
 80249a6:	68fb      	ldr	r3, [r7, #12]
 80249a8:	2b00      	cmp	r3, #0
 80249aa:	f43f af62 	beq.w	8024872 <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 80249ae:	6878      	ldr	r0, [r7, #4]
 80249b0:	f7ff ff49 	bl	8024846 <lfs_alloc_drop>
            return err;
 80249b4:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80249b6:	4618      	mov	r0, r3
 80249b8:	3710      	adds	r7, #16
 80249ba:	46bd      	mov	sp, r7
 80249bc:	bd80      	pop	{r7, pc}
 80249be:	bf00      	nop
 80249c0:	0803392c 	.word	0x0803392c
 80249c4:	08033818 	.word	0x08033818
 80249c8:	08033904 	.word	0x08033904
 80249cc:	080247bb 	.word	0x080247bb

080249d0 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80249d0:	b590      	push	{r4, r7, lr}
 80249d2:	b08f      	sub	sp, #60	@ 0x3c
 80249d4:	af04      	add	r7, sp, #16
 80249d6:	60f8      	str	r0, [r7, #12]
 80249d8:	60b9      	str	r1, [r7, #8]
 80249da:	607a      	str	r2, [r7, #4]
 80249dc:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80249de:	68bb      	ldr	r3, [r7, #8]
 80249e0:	68db      	ldr	r3, [r3, #12]
 80249e2:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_tag_t ntag = dir->etag;
 80249e4:	68bb      	ldr	r3, [r7, #8]
 80249e6:	691b      	ldr	r3, [r3, #16]
 80249e8:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80249ea:	2300      	movs	r3, #0
 80249ec:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80249ee:	68fb      	ldr	r3, [r7, #12]
 80249f0:	333c      	adds	r3, #60	@ 0x3c
 80249f2:	68ba      	ldr	r2, [r7, #8]
 80249f4:	4611      	mov	r1, r2
 80249f6:	4618      	mov	r0, r3
 80249f8:	f7ff fd8e 	bl	8024518 <lfs_gstate_hasmovehere>
 80249fc:	4603      	mov	r3, r0
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	f000 80ba 	beq.w	8024b78 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8024a04:	6878      	ldr	r0, [r7, #4]
 8024a06:	f7ff fcdf 	bl	80243c8 <lfs_tag_id>
 8024a0a:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024a0c:	2b00      	cmp	r3, #0
 8024a0e:	f000 80b3 	beq.w	8024b78 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8024a12:	68fb      	ldr	r3, [r7, #12]
 8024a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024a16:	4618      	mov	r0, r3
 8024a18:	f7ff fcd6 	bl	80243c8 <lfs_tag_id>
 8024a1c:	4603      	mov	r3, r0
 8024a1e:	461c      	mov	r4, r3
 8024a20:	6838      	ldr	r0, [r7, #0]
 8024a22:	f7ff fcd1 	bl	80243c8 <lfs_tag_id>
 8024a26:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024a28:	429c      	cmp	r4, r3
 8024a2a:	f200 80a5 	bhi.w	8024b78 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024a2e:	6a3b      	ldr	r3, [r7, #32]
 8024a30:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8024a34:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8024a36:	e09f      	b.n	8024b78 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8024a38:	693b      	ldr	r3, [r7, #16]
 8024a3a:	4618      	mov	r0, r3
 8024a3c:	f7ff fce1 	bl	8024402 <lfs_tag_dsize>
 8024a40:	4602      	mov	r2, r0
 8024a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024a44:	1a9b      	subs	r3, r3, r2
 8024a46:	627b      	str	r3, [r7, #36]	@ 0x24
        lfs_tag_t tag = ntag;
 8024a48:	693b      	ldr	r3, [r7, #16]
 8024a4a:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8024a4c:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8024a4e:	68bb      	ldr	r3, [r7, #8]
 8024a50:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8024a52:	2204      	movs	r2, #4
 8024a54:	9203      	str	r2, [sp, #12]
 8024a56:	f107 0210 	add.w	r2, r7, #16
 8024a5a:	9202      	str	r2, [sp, #8]
 8024a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024a5e:	9201      	str	r2, [sp, #4]
 8024a60:	9300      	str	r3, [sp, #0]
 8024a62:	2304      	movs	r3, #4
 8024a64:	460a      	mov	r2, r1
 8024a66:	2100      	movs	r1, #0
 8024a68:	68f8      	ldr	r0, [r7, #12]
 8024a6a:	f7ff f871 	bl	8023b50 <lfs_bd_read>
 8024a6e:	61b8      	str	r0, [r7, #24]
        if (err) {
 8024a70:	69bb      	ldr	r3, [r7, #24]
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	d001      	beq.n	8024a7a <lfs_dir_getslice+0xaa>
            return err;
 8024a76:	69bb      	ldr	r3, [r7, #24]
 8024a78:	e08a      	b.n	8024b90 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8024a7a:	693b      	ldr	r3, [r7, #16]
 8024a7c:	4618      	mov	r0, r3
 8024a7e:	f7ff f813 	bl	8023aa8 <lfs_frombe32>
 8024a82:	4602      	mov	r2, r0
 8024a84:	69fb      	ldr	r3, [r7, #28]
 8024a86:	4053      	eors	r3, r2
 8024a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8024a8c:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8024a8e:	6878      	ldr	r0, [r7, #4]
 8024a90:	f7ff fc9a 	bl	80243c8 <lfs_tag_id>
 8024a94:	4603      	mov	r3, r0
 8024a96:	2b00      	cmp	r3, #0
 8024a98:	d02b      	beq.n	8024af2 <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024a9a:	69f8      	ldr	r0, [r7, #28]
 8024a9c:	f7ff fc5a 	bl	8024354 <lfs_tag_type1>
 8024aa0:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8024aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024aa6:	d124      	bne.n	8024af2 <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8024aa8:	69f8      	ldr	r0, [r7, #28]
 8024aaa:	f7ff fc8d 	bl	80243c8 <lfs_tag_id>
 8024aae:	4603      	mov	r3, r0
 8024ab0:	461c      	mov	r4, r3
 8024ab2:	6a3b      	ldr	r3, [r7, #32]
 8024ab4:	683a      	ldr	r2, [r7, #0]
 8024ab6:	1ad3      	subs	r3, r2, r3
 8024ab8:	4618      	mov	r0, r3
 8024aba:	f7ff fc85 	bl	80243c8 <lfs_tag_id>
 8024abe:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024ac0:	429c      	cmp	r4, r3
 8024ac2:	d816      	bhi.n	8024af2 <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8024ac4:	6a3b      	ldr	r3, [r7, #32]
 8024ac6:	683a      	ldr	r2, [r7, #0]
 8024ac8:	1ad2      	subs	r2, r2, r3
 8024aca:	4b33      	ldr	r3, [pc, #204]	@ (8024b98 <lfs_dir_getslice+0x1c8>)
 8024acc:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8024ace:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8024ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024ad6:	69fa      	ldr	r2, [r7, #28]
 8024ad8:	429a      	cmp	r2, r3
 8024ada:	d102      	bne.n	8024ae2 <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8024adc:	f06f 0301 	mvn.w	r3, #1
 8024ae0:	e056      	b.n	8024b90 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8024ae2:	69f8      	ldr	r0, [r7, #28]
 8024ae4:	f7ff fc63 	bl	80243ae <lfs_tag_splice>
 8024ae8:	4603      	mov	r3, r0
 8024aea:	029a      	lsls	r2, r3, #10
 8024aec:	6a3b      	ldr	r3, [r7, #32]
 8024aee:	4413      	add	r3, r2
 8024af0:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8024af2:	687a      	ldr	r2, [r7, #4]
 8024af4:	69fb      	ldr	r3, [r7, #28]
 8024af6:	401a      	ands	r2, r3
 8024af8:	6a3b      	ldr	r3, [r7, #32]
 8024afa:	6839      	ldr	r1, [r7, #0]
 8024afc:	1ac9      	subs	r1, r1, r3
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	400b      	ands	r3, r1
 8024b02:	429a      	cmp	r2, r3
 8024b04:	d138      	bne.n	8024b78 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8024b06:	69f8      	ldr	r0, [r7, #28]
 8024b08:	f7ff fc11 	bl	802432e <lfs_tag_isdelete>
 8024b0c:	4603      	mov	r3, r0
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	d002      	beq.n	8024b18 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8024b12:	f06f 0301 	mvn.w	r3, #1
 8024b16:	e03b      	b.n	8024b90 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8024b18:	69f8      	ldr	r0, [r7, #28]
 8024b1a:	f7ff fc65 	bl	80243e8 <lfs_tag_size>
 8024b1e:	4603      	mov	r3, r0
 8024b20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024b22:	4618      	mov	r0, r3
 8024b24:	f7fe ff39 	bl	802399a <lfs_min>
 8024b28:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024b2a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024b2c:	68bb      	ldr	r3, [r7, #8]
 8024b2e:	681b      	ldr	r3, [r3, #0]
 8024b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8024b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8024b34:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8024b36:	3204      	adds	r2, #4
 8024b38:	6979      	ldr	r1, [r7, #20]
 8024b3a:	9103      	str	r1, [sp, #12]
 8024b3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8024b3e:	9102      	str	r1, [sp, #8]
 8024b40:	9201      	str	r2, [sp, #4]
 8024b42:	9300      	str	r3, [sp, #0]
 8024b44:	697b      	ldr	r3, [r7, #20]
 8024b46:	4602      	mov	r2, r0
 8024b48:	2100      	movs	r1, #0
 8024b4a:	68f8      	ldr	r0, [r7, #12]
 8024b4c:	f7ff f800 	bl	8023b50 <lfs_bd_read>
 8024b50:	61b8      	str	r0, [r7, #24]
            if (err) {
 8024b52:	69bb      	ldr	r3, [r7, #24]
 8024b54:	2b00      	cmp	r3, #0
 8024b56:	d001      	beq.n	8024b5c <lfs_dir_getslice+0x18c>
                return err;
 8024b58:	69bb      	ldr	r3, [r7, #24]
 8024b5a:	e019      	b.n	8024b90 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8024b5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024b5e:	697b      	ldr	r3, [r7, #20]
 8024b60:	18d0      	adds	r0, r2, r3
 8024b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8024b64:	697b      	ldr	r3, [r7, #20]
 8024b66:	1ad3      	subs	r3, r2, r3
 8024b68:	461a      	mov	r2, r3
 8024b6a:	2100      	movs	r1, #0
 8024b6c:	f009 f810 	bl	802db90 <memset>

            return tag + gdiff;
 8024b70:	6a3a      	ldr	r2, [r7, #32]
 8024b72:	69fb      	ldr	r3, [r7, #28]
 8024b74:	4413      	add	r3, r2
 8024b76:	e00b      	b.n	8024b90 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8024b78:	693b      	ldr	r3, [r7, #16]
 8024b7a:	4618      	mov	r0, r3
 8024b7c:	f7ff fc41 	bl	8024402 <lfs_tag_dsize>
 8024b80:	4603      	mov	r3, r0
 8024b82:	3304      	adds	r3, #4
 8024b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8024b86:	429a      	cmp	r2, r3
 8024b88:	f4bf af56 	bcs.w	8024a38 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8024b8c:	f06f 0301 	mvn.w	r3, #1
}
 8024b90:	4618      	mov	r0, r3
 8024b92:	372c      	adds	r7, #44	@ 0x2c
 8024b94:	46bd      	mov	sp, r7
 8024b96:	bd90      	pop	{r4, r7, pc}
 8024b98:	000ffc00 	.word	0x000ffc00

08024b9c <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8024b9c:	b580      	push	{r7, lr}
 8024b9e:	b088      	sub	sp, #32
 8024ba0:	af04      	add	r7, sp, #16
 8024ba2:	60f8      	str	r0, [r7, #12]
 8024ba4:	60b9      	str	r1, [r7, #8]
 8024ba6:	607a      	str	r2, [r7, #4]
 8024ba8:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8024baa:	6838      	ldr	r0, [r7, #0]
 8024bac:	f7ff fc1c 	bl	80243e8 <lfs_tag_size>
 8024bb0:	4603      	mov	r3, r0
 8024bb2:	9302      	str	r3, [sp, #8]
 8024bb4:	69bb      	ldr	r3, [r7, #24]
 8024bb6:	9301      	str	r3, [sp, #4]
 8024bb8:	2300      	movs	r3, #0
 8024bba:	9300      	str	r3, [sp, #0]
 8024bbc:	683b      	ldr	r3, [r7, #0]
 8024bbe:	687a      	ldr	r2, [r7, #4]
 8024bc0:	68b9      	ldr	r1, [r7, #8]
 8024bc2:	68f8      	ldr	r0, [r7, #12]
 8024bc4:	f7ff ff04 	bl	80249d0 <lfs_dir_getslice>
 8024bc8:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8024bca:	4618      	mov	r0, r3
 8024bcc:	3710      	adds	r7, #16
 8024bce:	46bd      	mov	sp, r7
 8024bd0:	bd80      	pop	{r7, pc}

08024bd2 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8024bd2:	b580      	push	{r7, lr}
 8024bd4:	b08c      	sub	sp, #48	@ 0x30
 8024bd6:	af04      	add	r7, sp, #16
 8024bd8:	60f8      	str	r0, [r7, #12]
 8024bda:	60b9      	str	r1, [r7, #8]
 8024bdc:	607a      	str	r2, [r7, #4]
 8024bde:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8024be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024be2:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8024be4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024be8:	441a      	add	r2, r3
 8024bea:	68fb      	ldr	r3, [r7, #12]
 8024bec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024bee:	69db      	ldr	r3, [r3, #28]
 8024bf0:	429a      	cmp	r2, r3
 8024bf2:	f240 80c0 	bls.w	8024d76 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8024bf6:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8024bfa:	e0c1      	b.n	8024d80 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8024bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024bfe:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	2b00      	cmp	r3, #0
 8024c04:	d03f      	beq.n	8024c86 <lfs_dir_getread+0xb4>
 8024c06:	687b      	ldr	r3, [r7, #4]
 8024c08:	681b      	ldr	r3, [r3, #0]
 8024c0a:	f113 0f02 	cmn.w	r3, #2
 8024c0e:	d13a      	bne.n	8024c86 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	685a      	ldr	r2, [r3, #4]
 8024c14:	687b      	ldr	r3, [r7, #4]
 8024c16:	689b      	ldr	r3, [r3, #8]
 8024c18:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024c1c:	429a      	cmp	r2, r3
 8024c1e:	d232      	bcs.n	8024c86 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	685b      	ldr	r3, [r3, #4]
 8024c24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024c26:	429a      	cmp	r2, r3
 8024c28:	d324      	bcc.n	8024c74 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	689a      	ldr	r2, [r3, #8]
 8024c2e:	687b      	ldr	r3, [r7, #4]
 8024c30:	6859      	ldr	r1, [r3, #4]
 8024c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c34:	1acb      	subs	r3, r1, r3
 8024c36:	4413      	add	r3, r2
 8024c38:	4619      	mov	r1, r3
 8024c3a:	69b8      	ldr	r0, [r7, #24]
 8024c3c:	f7fe fead 	bl	802399a <lfs_min>
 8024c40:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8024c42:	687b      	ldr	r3, [r7, #4]
 8024c44:	68da      	ldr	r2, [r3, #12]
 8024c46:	687b      	ldr	r3, [r7, #4]
 8024c48:	685b      	ldr	r3, [r3, #4]
 8024c4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8024c4c:	1acb      	subs	r3, r1, r3
 8024c4e:	4413      	add	r3, r2
 8024c50:	69ba      	ldr	r2, [r7, #24]
 8024c52:	4619      	mov	r1, r3
 8024c54:	69f8      	ldr	r0, [r7, #28]
 8024c56:	f009 f970 	bl	802df3a <memcpy>

                data += diff;
 8024c5a:	69fa      	ldr	r2, [r7, #28]
 8024c5c:	69bb      	ldr	r3, [r7, #24]
 8024c5e:	4413      	add	r3, r2
 8024c60:	61fb      	str	r3, [r7, #28]
                off += diff;
 8024c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024c64:	69bb      	ldr	r3, [r7, #24]
 8024c66:	4413      	add	r3, r2
 8024c68:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8024c6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024c6c:	69bb      	ldr	r3, [r7, #24]
 8024c6e:	1ad3      	subs	r3, r2, r3
 8024c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8024c72:	e080      	b.n	8024d76 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	685a      	ldr	r2, [r3, #4]
 8024c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024c7a:	1ad3      	subs	r3, r2, r3
 8024c7c:	4619      	mov	r1, r3
 8024c7e:	69b8      	ldr	r0, [r7, #24]
 8024c80:	f7fe fe8b 	bl	802399a <lfs_min>
 8024c84:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8024c86:	683b      	ldr	r3, [r7, #0]
 8024c88:	681b      	ldr	r3, [r3, #0]
 8024c8a:	f113 0f02 	cmn.w	r3, #2
 8024c8e:	d13a      	bne.n	8024d06 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8024c90:	683b      	ldr	r3, [r7, #0]
 8024c92:	685a      	ldr	r2, [r3, #4]
 8024c94:	683b      	ldr	r3, [r7, #0]
 8024c96:	689b      	ldr	r3, [r3, #8]
 8024c98:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024c9c:	429a      	cmp	r2, r3
 8024c9e:	d232      	bcs.n	8024d06 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8024ca0:	683b      	ldr	r3, [r7, #0]
 8024ca2:	685b      	ldr	r3, [r3, #4]
 8024ca4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024ca6:	429a      	cmp	r2, r3
 8024ca8:	d324      	bcc.n	8024cf4 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8024caa:	683b      	ldr	r3, [r7, #0]
 8024cac:	689a      	ldr	r2, [r3, #8]
 8024cae:	683b      	ldr	r3, [r7, #0]
 8024cb0:	6859      	ldr	r1, [r3, #4]
 8024cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024cb4:	1acb      	subs	r3, r1, r3
 8024cb6:	4413      	add	r3, r2
 8024cb8:	4619      	mov	r1, r3
 8024cba:	69b8      	ldr	r0, [r7, #24]
 8024cbc:	f7fe fe6d 	bl	802399a <lfs_min>
 8024cc0:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8024cc2:	683b      	ldr	r3, [r7, #0]
 8024cc4:	68da      	ldr	r2, [r3, #12]
 8024cc6:	683b      	ldr	r3, [r7, #0]
 8024cc8:	685b      	ldr	r3, [r3, #4]
 8024cca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8024ccc:	1acb      	subs	r3, r1, r3
 8024cce:	4413      	add	r3, r2
 8024cd0:	69ba      	ldr	r2, [r7, #24]
 8024cd2:	4619      	mov	r1, r3
 8024cd4:	69f8      	ldr	r0, [r7, #28]
 8024cd6:	f009 f930 	bl	802df3a <memcpy>

                data += diff;
 8024cda:	69fa      	ldr	r2, [r7, #28]
 8024cdc:	69bb      	ldr	r3, [r7, #24]
 8024cde:	4413      	add	r3, r2
 8024ce0:	61fb      	str	r3, [r7, #28]
                off += diff;
 8024ce2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024ce4:	69bb      	ldr	r3, [r7, #24]
 8024ce6:	4413      	add	r3, r2
 8024ce8:	637b      	str	r3, [r7, #52]	@ 0x34
                size -= diff;
 8024cea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024cec:	69bb      	ldr	r3, [r7, #24]
 8024cee:	1ad3      	subs	r3, r2, r3
 8024cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                continue;
 8024cf2:	e040      	b.n	8024d76 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8024cf4:	683b      	ldr	r3, [r7, #0]
 8024cf6:	685a      	ldr	r2, [r3, #4]
 8024cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024cfa:	1ad3      	subs	r3, r2, r3
 8024cfc:	4619      	mov	r1, r3
 8024cfe:	69b8      	ldr	r0, [r7, #24]
 8024d00:	f7fe fe4b 	bl	802399a <lfs_min>
 8024d04:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8024d06:	683b      	ldr	r3, [r7, #0]
 8024d08:	f06f 0201 	mvn.w	r2, #1
 8024d0c:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8024d0e:	68fb      	ldr	r3, [r7, #12]
 8024d10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d12:	695b      	ldr	r3, [r3, #20]
 8024d14:	4619      	mov	r1, r3
 8024d16:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8024d18:	f7fe fe4f 	bl	80239ba <lfs_aligndown>
 8024d1c:	4602      	mov	r2, r0
 8024d1e:	683b      	ldr	r3, [r7, #0]
 8024d20:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024d22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8024d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024d26:	441a      	add	r2, r3
 8024d28:	68fb      	ldr	r3, [r7, #12]
 8024d2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d2c:	695b      	ldr	r3, [r3, #20]
 8024d2e:	4619      	mov	r1, r3
 8024d30:	4610      	mov	r0, r2
 8024d32:	f7fe fe57 	bl	80239e4 <lfs_alignup>
 8024d36:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024d38:	68fb      	ldr	r3, [r7, #12]
 8024d3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8024d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024d3e:	4619      	mov	r1, r3
 8024d40:	4610      	mov	r0, r2
 8024d42:	f7fe fe2a 	bl	802399a <lfs_min>
 8024d46:	4602      	mov	r2, r0
 8024d48:	683b      	ldr	r3, [r7, #0]
 8024d4a:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024d4c:	683b      	ldr	r3, [r7, #0]
 8024d4e:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024d50:	683a      	ldr	r2, [r7, #0]
 8024d52:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024d54:	6839      	ldr	r1, [r7, #0]
 8024d56:	6889      	ldr	r1, [r1, #8]
 8024d58:	9102      	str	r1, [sp, #8]
 8024d5a:	9201      	str	r2, [sp, #4]
 8024d5c:	9300      	str	r3, [sp, #0]
 8024d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024d60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8024d62:	68b9      	ldr	r1, [r7, #8]
 8024d64:	68f8      	ldr	r0, [r7, #12]
 8024d66:	f7ff fe33 	bl	80249d0 <lfs_dir_getslice>
 8024d6a:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8024d6c:	697b      	ldr	r3, [r7, #20]
 8024d6e:	2b00      	cmp	r3, #0
 8024d70:	da01      	bge.n	8024d76 <lfs_dir_getread+0x1a4>
            return err;
 8024d72:	697b      	ldr	r3, [r7, #20]
 8024d74:	e004      	b.n	8024d80 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8024d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024d78:	2b00      	cmp	r3, #0
 8024d7a:	f47f af3f 	bne.w	8024bfc <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8024d7e:	2300      	movs	r3, #0
}
 8024d80:	4618      	mov	r0, r3
 8024d82:	3720      	adds	r7, #32
 8024d84:	46bd      	mov	sp, r7
 8024d86:	bd80      	pop	{r7, pc}

08024d88 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8024d88:	b590      	push	{r4, r7, lr}
 8024d8a:	b087      	sub	sp, #28
 8024d8c:	af00      	add	r7, sp, #0
 8024d8e:	60f8      	str	r0, [r7, #12]
 8024d90:	60b9      	str	r1, [r7, #8]
 8024d92:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8024d94:	68fb      	ldr	r3, [r7, #12]
 8024d96:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024d98:	68bb      	ldr	r3, [r7, #8]
 8024d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8024d9e:	2b00      	cmp	r3, #0
 8024da0:	d001      	beq.n	8024da6 <lfs_dir_traverse_filter+0x1e>
 8024da2:	4b24      	ldr	r3, [pc, #144]	@ (8024e34 <lfs_dir_traverse_filter+0xac>)
 8024da4:	e000      	b.n	8024da8 <lfs_dir_traverse_filter+0x20>
 8024da6:	4b24      	ldr	r3, [pc, #144]	@ (8024e38 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024da8:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8024daa:	697b      	ldr	r3, [r7, #20]
 8024dac:	681a      	ldr	r2, [r3, #0]
 8024dae:	68bb      	ldr	r3, [r7, #8]
 8024db0:	405a      	eors	r2, r3
 8024db2:	693b      	ldr	r3, [r7, #16]
 8024db4:	4013      	ands	r3, r2
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	d014      	beq.n	8024de4 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8024dba:	697b      	ldr	r3, [r7, #20]
 8024dbc:	681b      	ldr	r3, [r3, #0]
 8024dbe:	4618      	mov	r0, r3
 8024dc0:	f7ff fab5 	bl	802432e <lfs_tag_isdelete>
 8024dc4:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8024dc6:	2b00      	cmp	r3, #0
 8024dc8:	d10c      	bne.n	8024de4 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8024dca:	68bb      	ldr	r3, [r7, #8]
 8024dcc:	4a19      	ldr	r2, [pc, #100]	@ (8024e34 <lfs_dir_traverse_filter+0xac>)
 8024dce:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8024dd0:	697b      	ldr	r3, [r7, #20]
 8024dd2:	6819      	ldr	r1, [r3, #0]
 8024dd4:	4b19      	ldr	r3, [pc, #100]	@ (8024e3c <lfs_dir_traverse_filter+0xb4>)
 8024dd6:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8024dd8:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8024ddc:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8024de0:	429a      	cmp	r2, r3
 8024de2:	d104      	bne.n	8024dee <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8024de4:	697b      	ldr	r3, [r7, #20]
 8024de6:	2200      	movs	r2, #0
 8024de8:	601a      	str	r2, [r3, #0]
        return true;
 8024dea:	2301      	movs	r3, #1
 8024dec:	e01e      	b.n	8024e2c <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024dee:	68b8      	ldr	r0, [r7, #8]
 8024df0:	f7ff fab0 	bl	8024354 <lfs_tag_type1>
 8024df4:	4603      	mov	r3, r0
 8024df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8024dfa:	d116      	bne.n	8024e2a <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8024dfc:	68b8      	ldr	r0, [r7, #8]
 8024dfe:	f7ff fae3 	bl	80243c8 <lfs_tag_id>
 8024e02:	4603      	mov	r3, r0
 8024e04:	461c      	mov	r4, r3
 8024e06:	697b      	ldr	r3, [r7, #20]
 8024e08:	681b      	ldr	r3, [r3, #0]
 8024e0a:	4618      	mov	r0, r3
 8024e0c:	f7ff fadc 	bl	80243c8 <lfs_tag_id>
 8024e10:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024e12:	429c      	cmp	r4, r3
 8024e14:	d809      	bhi.n	8024e2a <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8024e16:	68b8      	ldr	r0, [r7, #8]
 8024e18:	f7ff fac9 	bl	80243ae <lfs_tag_splice>
 8024e1c:	4603      	mov	r3, r0
 8024e1e:	029a      	lsls	r2, r3, #10
 8024e20:	697b      	ldr	r3, [r7, #20]
 8024e22:	681b      	ldr	r3, [r3, #0]
 8024e24:	441a      	add	r2, r3
 8024e26:	697b      	ldr	r3, [r7, #20]
 8024e28:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024e2a:	2300      	movs	r3, #0
}
 8024e2c:	4618      	mov	r0, r3
 8024e2e:	371c      	adds	r7, #28
 8024e30:	46bd      	mov	sp, r7
 8024e32:	bd90      	pop	{r4, r7, pc}
 8024e34:	7ffffc00 	.word	0x7ffffc00
 8024e38:	700ffc00 	.word	0x700ffc00
 8024e3c:	000ffc00 	.word	0x000ffc00

08024e40 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024e40:	b590      	push	{r4, r7, lr}
 8024e42:	b0c1      	sub	sp, #260	@ 0x104
 8024e44:	af04      	add	r7, sp, #16
 8024e46:	60f8      	str	r0, [r7, #12]
 8024e48:	60b9      	str	r1, [r7, #8]
 8024e4a:	607a      	str	r2, [r7, #4]
 8024e4c:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024e4e:	2300      	movs	r3, #0
 8024e50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8024e54:	6838      	ldr	r0, [r7, #0]
 8024e56:	f7ff fad4 	bl	8024402 <lfs_tag_dsize>
 8024e5a:	4602      	mov	r2, r0
 8024e5c:	687b      	ldr	r3, [r7, #4]
 8024e5e:	441a      	add	r2, r3
 8024e60:	68bb      	ldr	r3, [r7, #8]
 8024e62:	68db      	ldr	r3, [r3, #12]
 8024e64:	429a      	cmp	r2, r3
 8024e66:	d237      	bcs.n	8024ed8 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8024e68:	6838      	ldr	r0, [r7, #0]
 8024e6a:	f7ff faca 	bl	8024402 <lfs_tag_dsize>
 8024e6e:	4602      	mov	r2, r0
 8024e70:	687b      	ldr	r3, [r7, #4]
 8024e72:	4413      	add	r3, r2
 8024e74:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8024e76:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8024e78:	68bb      	ldr	r3, [r7, #8]
 8024e7a:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8024e7c:	2204      	movs	r2, #4
 8024e7e:	9203      	str	r2, [sp, #12]
 8024e80:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8024e84:	9202      	str	r2, [sp, #8]
 8024e86:	687a      	ldr	r2, [r7, #4]
 8024e88:	9201      	str	r2, [sp, #4]
 8024e8a:	9300      	str	r3, [sp, #0]
 8024e8c:	2304      	movs	r3, #4
 8024e8e:	460a      	mov	r2, r1
 8024e90:	2100      	movs	r1, #0
 8024e92:	68f8      	ldr	r0, [r7, #12]
 8024e94:	f7fe fe5c 	bl	8023b50 <lfs_bd_read>
 8024e98:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                if (err) {
 8024e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024ea0:	2b00      	cmp	r3, #0
 8024ea2:	d002      	beq.n	8024eaa <lfs_dir_traverse+0x6a>
                    return err;
 8024ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024ea8:	e3a6      	b.n	80255f8 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8024eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024eac:	4618      	mov	r0, r3
 8024eae:	f7fe fdfb 	bl	8023aa8 <lfs_frombe32>
 8024eb2:	4602      	mov	r2, r0
 8024eb4:	683b      	ldr	r3, [r7, #0]
 8024eb6:	4053      	eors	r3, r2
 8024eb8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8024ebc:	657b      	str	r3, [r7, #84]	@ 0x54
                disk.block = dir->pair[0];
 8024ebe:	68bb      	ldr	r3, [r7, #8]
 8024ec0:	681b      	ldr	r3, [r3, #0]
 8024ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	3304      	adds	r3, #4
 8024ec8:	653b      	str	r3, [r7, #80]	@ 0x50
                buffer = &disk;
 8024eca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8024ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                ptag = tag;
 8024ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8024ed4:	603b      	str	r3, [r7, #0]
 8024ed6:	e01b      	b.n	8024f10 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8024ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	dd13      	ble.n	8024f08 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8024ee0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8024ee4:	681b      	ldr	r3, [r3, #0]
 8024ee6:	657b      	str	r3, [r7, #84]	@ 0x54
                buffer = attrs[0].buffer;
 8024ee8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8024eec:	685b      	ldr	r3, [r3, #4]
 8024eee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                attrs += 1;
 8024ef2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8024ef6:	3308      	adds	r3, #8
 8024ef8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                attrcount -= 1;
 8024efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024f00:	3b01      	subs	r3, #1
 8024f02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8024f06:	e003      	b.n	8024f10 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8024f08:	2300      	movs	r3, #0
 8024f0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                break;
 8024f0e:	e2a2      	b.n	8025456 <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8024f10:	4b7e      	ldr	r3, [pc, #504]	@ (802510c <lfs_dir_traverse+0x2cc>)
 8024f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8024f16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8024f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8024f1c:	405a      	eors	r2, r3
 8024f1e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8024f22:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8024f26:	400b      	ands	r3, r1
 8024f28:	4013      	ands	r3, r2
 8024f2a:	2b00      	cmp	r3, #0
 8024f2c:	f040 8285 	bne.w	802543a <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024f30:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8024f34:	f7ff fa48 	bl	80243c8 <lfs_tag_id>
 8024f38:	4603      	mov	r3, r0
 8024f3a:	2b00      	cmp	r3, #0
 8024f3c:	f000 80f0 	beq.w	8025120 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024f40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8024f44:	2b02      	cmp	r3, #2
 8024f46:	d906      	bls.n	8024f56 <lfs_dir_traverse+0x116>
 8024f48:	4b71      	ldr	r3, [pc, #452]	@ (8025110 <lfs_dir_traverse+0x2d0>)
 8024f4a:	4a72      	ldr	r2, [pc, #456]	@ (8025114 <lfs_dir_traverse+0x2d4>)
 8024f4c:	f240 314e 	movw	r1, #846	@ 0x34e
 8024f50:	4871      	ldr	r0, [pc, #452]	@ (8025118 <lfs_dir_traverse+0x2d8>)
 8024f52:	f007 fc59 	bl	802c808 <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8024f56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8024f58:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024f5c:	4613      	mov	r3, r2
 8024f5e:	011b      	lsls	r3, r3, #4
 8024f60:	1a9b      	subs	r3, r3, r2
 8024f62:	009b      	lsls	r3, r3, #2
 8024f64:	33f0      	adds	r3, #240	@ 0xf0
 8024f66:	443b      	add	r3, r7
 8024f68:	3b98      	subs	r3, #152	@ 0x98
 8024f6a:	68ba      	ldr	r2, [r7, #8]
 8024f6c:	601a      	str	r2, [r3, #0]
 8024f6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024f72:	4613      	mov	r3, r2
 8024f74:	011b      	lsls	r3, r3, #4
 8024f76:	1a9b      	subs	r3, r3, r2
 8024f78:	009b      	lsls	r3, r3, #2
 8024f7a:	33f0      	adds	r3, #240	@ 0xf0
 8024f7c:	443b      	add	r3, r7
 8024f7e:	3b94      	subs	r3, #148	@ 0x94
 8024f80:	687a      	ldr	r2, [r7, #4]
 8024f82:	601a      	str	r2, [r3, #0]
 8024f84:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024f88:	4613      	mov	r3, r2
 8024f8a:	011b      	lsls	r3, r3, #4
 8024f8c:	1a9b      	subs	r3, r3, r2
 8024f8e:	009b      	lsls	r3, r3, #2
 8024f90:	33f0      	adds	r3, #240	@ 0xf0
 8024f92:	443b      	add	r3, r7
 8024f94:	3b90      	subs	r3, #144	@ 0x90
 8024f96:	683a      	ldr	r2, [r7, #0]
 8024f98:	601a      	str	r2, [r3, #0]
 8024f9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024f9e:	4613      	mov	r3, r2
 8024fa0:	011b      	lsls	r3, r3, #4
 8024fa2:	1a9b      	subs	r3, r3, r2
 8024fa4:	009b      	lsls	r3, r3, #2
 8024fa6:	33f0      	adds	r3, #240	@ 0xf0
 8024fa8:	443b      	add	r3, r7
 8024faa:	3b8c      	subs	r3, #140	@ 0x8c
 8024fac:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8024fb0:	601a      	str	r2, [r3, #0]
 8024fb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024fb6:	4613      	mov	r3, r2
 8024fb8:	011b      	lsls	r3, r3, #4
 8024fba:	1a9b      	subs	r3, r3, r2
 8024fbc:	009b      	lsls	r3, r3, #2
 8024fbe:	33f0      	adds	r3, #240	@ 0xf0
 8024fc0:	443b      	add	r3, r7
 8024fc2:	3b88      	subs	r3, #136	@ 0x88
 8024fc4:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8024fc8:	601a      	str	r2, [r3, #0]
 8024fca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024fce:	4613      	mov	r3, r2
 8024fd0:	011b      	lsls	r3, r3, #4
 8024fd2:	1a9b      	subs	r3, r3, r2
 8024fd4:	009b      	lsls	r3, r3, #2
 8024fd6:	33f0      	adds	r3, #240	@ 0xf0
 8024fd8:	443b      	add	r3, r7
 8024fda:	3b84      	subs	r3, #132	@ 0x84
 8024fdc:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8024fe0:	601a      	str	r2, [r3, #0]
 8024fe2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024fe6:	4613      	mov	r3, r2
 8024fe8:	011b      	lsls	r3, r3, #4
 8024fea:	1a9b      	subs	r3, r3, r2
 8024fec:	009b      	lsls	r3, r3, #2
 8024fee:	33f0      	adds	r3, #240	@ 0xf0
 8024ff0:	443b      	add	r3, r7
 8024ff2:	3b80      	subs	r3, #128	@ 0x80
 8024ff4:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8024ff8:	601a      	str	r2, [r3, #0]
 8024ffa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8024ffe:	4613      	mov	r3, r2
 8025000:	011b      	lsls	r3, r3, #4
 8025002:	1a9b      	subs	r3, r3, r2
 8025004:	009b      	lsls	r3, r3, #2
 8025006:	33f0      	adds	r3, #240	@ 0xf0
 8025008:	443b      	add	r3, r7
 802500a:	3b7c      	subs	r3, #124	@ 0x7c
 802500c:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8025010:	801a      	strh	r2, [r3, #0]
 8025012:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8025016:	4613      	mov	r3, r2
 8025018:	011b      	lsls	r3, r3, #4
 802501a:	1a9b      	subs	r3, r3, r2
 802501c:	009b      	lsls	r3, r3, #2
 802501e:	33f0      	adds	r3, #240	@ 0xf0
 8025020:	443b      	add	r3, r7
 8025022:	3b7a      	subs	r3, #122	@ 0x7a
 8025024:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 8025028:	801a      	strh	r2, [r3, #0]
 802502a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802502e:	4613      	mov	r3, r2
 8025030:	011b      	lsls	r3, r3, #4
 8025032:	1a9b      	subs	r3, r3, r2
 8025034:	009b      	lsls	r3, r3, #2
 8025036:	33f0      	adds	r3, #240	@ 0xf0
 8025038:	443b      	add	r3, r7
 802503a:	3b78      	subs	r3, #120	@ 0x78
 802503c:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8025040:	801a      	strh	r2, [r3, #0]
 8025042:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8025046:	4613      	mov	r3, r2
 8025048:	011b      	lsls	r3, r3, #4
 802504a:	1a9b      	subs	r3, r3, r2
 802504c:	009b      	lsls	r3, r3, #2
 802504e:	33f0      	adds	r3, #240	@ 0xf0
 8025050:	443b      	add	r3, r7
 8025052:	3b74      	subs	r3, #116	@ 0x74
 8025054:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8025058:	601a      	str	r2, [r3, #0]
 802505a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802505e:	4613      	mov	r3, r2
 8025060:	011b      	lsls	r3, r3, #4
 8025062:	1a9b      	subs	r3, r3, r2
 8025064:	009b      	lsls	r3, r3, #2
 8025066:	33f0      	adds	r3, #240	@ 0xf0
 8025068:	443b      	add	r3, r7
 802506a:	3b70      	subs	r3, #112	@ 0x70
 802506c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8025070:	601a      	str	r2, [r3, #0]
 8025072:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8025076:	4613      	mov	r3, r2
 8025078:	011b      	lsls	r3, r3, #4
 802507a:	1a9b      	subs	r3, r3, r2
 802507c:	009b      	lsls	r3, r3, #2
 802507e:	33f0      	adds	r3, #240	@ 0xf0
 8025080:	443b      	add	r3, r7
 8025082:	3b6c      	subs	r3, #108	@ 0x6c
 8025084:	6019      	str	r1, [r3, #0]
 8025086:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802508a:	4613      	mov	r3, r2
 802508c:	011b      	lsls	r3, r3, #4
 802508e:	1a9b      	subs	r3, r3, r2
 8025090:	009b      	lsls	r3, r3, #2
 8025092:	33f0      	adds	r3, #240	@ 0xf0
 8025094:	443b      	add	r3, r7
 8025096:	3b68      	subs	r3, #104	@ 0x68
 8025098:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 802509c:	601a      	str	r2, [r3, #0]
 802509e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80250a2:	4613      	mov	r3, r2
 80250a4:	011b      	lsls	r3, r3, #4
 80250a6:	1a9b      	subs	r3, r3, r2
 80250a8:	009b      	lsls	r3, r3, #2
 80250aa:	33f0      	adds	r3, #240	@ 0xf0
 80250ac:	443b      	add	r3, r7
 80250ae:	3b68      	subs	r3, #104	@ 0x68
 80250b0:	3304      	adds	r3, #4
 80250b2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80250b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80250ba:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 80250be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80250c2:	3301      	adds	r3, #1
 80250c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

                tmask = 0;
 80250c8:	2300      	movs	r3, #0
 80250ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                ttag = 0;
 80250ce:	2300      	movs	r3, #0
 80250d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
                begin = 0;
 80250d4:	2300      	movs	r3, #0
 80250d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
                end = 0;
 80250da:	2300      	movs	r3, #0
 80250dc:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
                diff = 0;
 80250e0:	2300      	movs	r3, #0
 80250e2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
                cb = lfs_dir_traverse_filter;
 80250e6:	4b0d      	ldr	r3, [pc, #52]	@ (802511c <lfs_dir_traverse+0x2dc>)
 80250e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                data = &stack[sp-1].tag;
 80250ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80250f0:	1e5a      	subs	r2, r3, #1
 80250f2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80250f6:	4613      	mov	r3, r2
 80250f8:	011b      	lsls	r3, r3, #4
 80250fa:	1a9b      	subs	r3, r3, r2
 80250fc:	009b      	lsls	r3, r3, #2
 80250fe:	3328      	adds	r3, #40	@ 0x28
 8025100:	440b      	add	r3, r1
 8025102:	3304      	adds	r3, #4
 8025104:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                continue;
 8025108:	e19e      	b.n	8025448 <lfs_dir_traverse+0x608>
 802510a:	bf00      	nop
 802510c:	7ff00000 	.word	0x7ff00000
 8025110:	08033930 	.word	0x08033930
 8025114:	08034b10 	.word	0x08034b10
 8025118:	08033818 	.word	0x08033818
 802511c:	08024d89 	.word	0x08024d89
            }
        }

popped:
 8025120:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8025122:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8025126:	f7ff f94f 	bl	80243c8 <lfs_tag_id>
 802512a:	4603      	mov	r3, r0
 802512c:	2b00      	cmp	r3, #0
 802512e:	d015      	beq.n	802515c <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8025130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025132:	4618      	mov	r0, r3
 8025134:	f7ff f948 	bl	80243c8 <lfs_tag_id>
 8025138:	4603      	mov	r3, r0
 802513a:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 802513c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8025140:	4293      	cmp	r3, r2
 8025142:	f200 817c 	bhi.w	802543e <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8025146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025148:	4618      	mov	r0, r3
 802514a:	f7ff f93d 	bl	80243c8 <lfs_tag_id>
 802514e:	4603      	mov	r3, r0
 8025150:	461a      	mov	r2, r3
 8025152:	f8b7 3114 	ldrh.w	r3, [r7, #276]	@ 0x114
 8025156:	4293      	cmp	r3, r2
 8025158:	f240 8171 	bls.w	802543e <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 802515c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802515e:	4618      	mov	r0, r3
 8025160:	f7ff f908 	bl	8024374 <lfs_tag_type3>
 8025164:	4603      	mov	r3, r0
 8025166:	2b00      	cmp	r3, #0
 8025168:	f43f ae74 	beq.w	8024e54 <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 802516c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802516e:	4618      	mov	r0, r3
 8025170:	f7ff f900 	bl	8024374 <lfs_tag_type3>
 8025174:	4603      	mov	r3, r0
 8025176:	461a      	mov	r2, r3
 8025178:	f240 1301 	movw	r3, #257	@ 0x101
 802517c:	429a      	cmp	r2, r3
 802517e:	f040 80e0 	bne.w	8025342 <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8025182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8025186:	4ab1      	ldr	r2, [pc, #708]	@ (802544c <lfs_dir_traverse+0x60c>)
 8025188:	4293      	cmp	r3, r2
 802518a:	f000 815a 	beq.w	8025442 <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 802518e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8025192:	4613      	mov	r3, r2
 8025194:	011b      	lsls	r3, r3, #4
 8025196:	1a9b      	subs	r3, r3, r2
 8025198:	009b      	lsls	r3, r3, #2
 802519a:	33f0      	adds	r3, #240	@ 0xf0
 802519c:	443b      	add	r3, r7
 802519e:	3b98      	subs	r3, #152	@ 0x98
 80251a0:	4618      	mov	r0, r3
 80251a2:	233c      	movs	r3, #60	@ 0x3c
 80251a4:	461a      	mov	r2, r3
 80251a6:	2100      	movs	r1, #0
 80251a8:	f008 fcf2 	bl	802db90 <memset>
 80251ac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80251b0:	4613      	mov	r3, r2
 80251b2:	011b      	lsls	r3, r3, #4
 80251b4:	1a9b      	subs	r3, r3, r2
 80251b6:	009b      	lsls	r3, r3, #2
 80251b8:	33f0      	adds	r3, #240	@ 0xf0
 80251ba:	443b      	add	r3, r7
 80251bc:	3b98      	subs	r3, #152	@ 0x98
 80251be:	68ba      	ldr	r2, [r7, #8]
 80251c0:	601a      	str	r2, [r3, #0]
 80251c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80251c6:	4613      	mov	r3, r2
 80251c8:	011b      	lsls	r3, r3, #4
 80251ca:	1a9b      	subs	r3, r3, r2
 80251cc:	009b      	lsls	r3, r3, #2
 80251ce:	33f0      	adds	r3, #240	@ 0xf0
 80251d0:	443b      	add	r3, r7
 80251d2:	3b94      	subs	r3, #148	@ 0x94
 80251d4:	687a      	ldr	r2, [r7, #4]
 80251d6:	601a      	str	r2, [r3, #0]
 80251d8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80251dc:	4613      	mov	r3, r2
 80251de:	011b      	lsls	r3, r3, #4
 80251e0:	1a9b      	subs	r3, r3, r2
 80251e2:	009b      	lsls	r3, r3, #2
 80251e4:	33f0      	adds	r3, #240	@ 0xf0
 80251e6:	443b      	add	r3, r7
 80251e8:	3b90      	subs	r3, #144	@ 0x90
 80251ea:	683a      	ldr	r2, [r7, #0]
 80251ec:	601a      	str	r2, [r3, #0]
 80251ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80251f2:	4613      	mov	r3, r2
 80251f4:	011b      	lsls	r3, r3, #4
 80251f6:	1a9b      	subs	r3, r3, r2
 80251f8:	009b      	lsls	r3, r3, #2
 80251fa:	33f0      	adds	r3, #240	@ 0xf0
 80251fc:	443b      	add	r3, r7
 80251fe:	3b8c      	subs	r3, #140	@ 0x8c
 8025200:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8025204:	601a      	str	r2, [r3, #0]
 8025206:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802520a:	4613      	mov	r3, r2
 802520c:	011b      	lsls	r3, r3, #4
 802520e:	1a9b      	subs	r3, r3, r2
 8025210:	009b      	lsls	r3, r3, #2
 8025212:	33f0      	adds	r3, #240	@ 0xf0
 8025214:	443b      	add	r3, r7
 8025216:	3b88      	subs	r3, #136	@ 0x88
 8025218:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 802521c:	601a      	str	r2, [r3, #0]
 802521e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8025222:	4613      	mov	r3, r2
 8025224:	011b      	lsls	r3, r3, #4
 8025226:	1a9b      	subs	r3, r3, r2
 8025228:	009b      	lsls	r3, r3, #2
 802522a:	33f0      	adds	r3, #240	@ 0xf0
 802522c:	443b      	add	r3, r7
 802522e:	3b84      	subs	r3, #132	@ 0x84
 8025230:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8025234:	601a      	str	r2, [r3, #0]
 8025236:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802523a:	4613      	mov	r3, r2
 802523c:	011b      	lsls	r3, r3, #4
 802523e:	1a9b      	subs	r3, r3, r2
 8025240:	009b      	lsls	r3, r3, #2
 8025242:	33f0      	adds	r3, #240	@ 0xf0
 8025244:	443b      	add	r3, r7
 8025246:	3b80      	subs	r3, #128	@ 0x80
 8025248:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 802524c:	601a      	str	r2, [r3, #0]
 802524e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8025252:	4613      	mov	r3, r2
 8025254:	011b      	lsls	r3, r3, #4
 8025256:	1a9b      	subs	r3, r3, r2
 8025258:	009b      	lsls	r3, r3, #2
 802525a:	33f0      	adds	r3, #240	@ 0xf0
 802525c:	443b      	add	r3, r7
 802525e:	3b7c      	subs	r3, #124	@ 0x7c
 8025260:	f8b7 2110 	ldrh.w	r2, [r7, #272]	@ 0x110
 8025264:	801a      	strh	r2, [r3, #0]
 8025266:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802526a:	4613      	mov	r3, r2
 802526c:	011b      	lsls	r3, r3, #4
 802526e:	1a9b      	subs	r3, r3, r2
 8025270:	009b      	lsls	r3, r3, #2
 8025272:	33f0      	adds	r3, #240	@ 0xf0
 8025274:	443b      	add	r3, r7
 8025276:	3b7a      	subs	r3, #122	@ 0x7a
 8025278:	f8b7 2114 	ldrh.w	r2, [r7, #276]	@ 0x114
 802527c:	801a      	strh	r2, [r3, #0]
 802527e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8025282:	4613      	mov	r3, r2
 8025284:	011b      	lsls	r3, r3, #4
 8025286:	1a9b      	subs	r3, r3, r2
 8025288:	009b      	lsls	r3, r3, #2
 802528a:	33f0      	adds	r3, #240	@ 0xf0
 802528c:	443b      	add	r3, r7
 802528e:	3b78      	subs	r3, #120	@ 0x78
 8025290:	f8b7 2118 	ldrh.w	r2, [r7, #280]	@ 0x118
 8025294:	801a      	strh	r2, [r3, #0]
 8025296:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 802529a:	4613      	mov	r3, r2
 802529c:	011b      	lsls	r3, r3, #4
 802529e:	1a9b      	subs	r3, r3, r2
 80252a0:	009b      	lsls	r3, r3, #2
 80252a2:	33f0      	adds	r3, #240	@ 0xf0
 80252a4:	443b      	add	r3, r7
 80252a6:	3b74      	subs	r3, #116	@ 0x74
 80252a8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80252ac:	601a      	str	r2, [r3, #0]
 80252ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80252b2:	4613      	mov	r3, r2
 80252b4:	011b      	lsls	r3, r3, #4
 80252b6:	1a9b      	subs	r3, r3, r2
 80252b8:	009b      	lsls	r3, r3, #2
 80252ba:	33f0      	adds	r3, #240	@ 0xf0
 80252bc:	443b      	add	r3, r7
 80252be:	3b70      	subs	r3, #112	@ 0x70
 80252c0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80252c4:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80252c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80252ca:	3301      	adds	r3, #1
 80252cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80252d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80252d2:	4618      	mov	r0, r3
 80252d4:	f7ff f888 	bl	80243e8 <lfs_tag_size>
 80252d8:	4603      	mov	r3, r0
 80252da:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80252de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80252e0:	4618      	mov	r0, r3
 80252e2:	f7ff f871 	bl	80243c8 <lfs_tag_id>
 80252e6:	4603      	mov	r3, r0
 80252e8:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
            dir = buffer;
 80252ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80252f0:	60bb      	str	r3, [r7, #8]
            off = 0;
 80252f2:	2300      	movs	r3, #0
 80252f4:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80252f6:	f04f 33ff 	mov.w	r3, #4294967295
 80252fa:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80252fc:	2300      	movs	r3, #0
 80252fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            attrcount = 0;
 8025302:	2300      	movs	r3, #0
 8025304:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8025308:	4b51      	ldr	r3, [pc, #324]	@ (8025450 <lfs_dir_traverse+0x610>)
 802530a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 802530e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8025312:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            begin = fromid;
 8025316:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 802531a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
            end = fromid+1;
 802531e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8025322:	3301      	adds	r3, #1
 8025324:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
            diff = toid-fromid+diff;
 8025328:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	@ 0xd0
 802532c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8025330:	1ad3      	subs	r3, r2, r3
 8025332:	b29a      	uxth	r2, r3
 8025334:	f8b7 3118 	ldrh.w	r3, [r7, #280]	@ 0x118
 8025338:	4413      	add	r3, r2
 802533a:	b29b      	uxth	r3, r3
 802533c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
 8025340:	e588      	b.n	8024e54 <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8025342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025344:	4618      	mov	r0, r3
 8025346:	f7ff f815 	bl	8024374 <lfs_tag_type3>
 802534a:	4603      	mov	r3, r0
 802534c:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8025350:	d159      	bne.n	8025406 <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8025352:	2300      	movs	r3, #0
 8025354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8025358:	e04b      	b.n	80253f2 <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 802535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802535e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8025362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8025366:	4613      	mov	r3, r2
 8025368:	005b      	lsls	r3, r3, #1
 802536a:	4413      	add	r3, r2
 802536c:	009b      	lsls	r3, r3, #2
 802536e:	461a      	mov	r2, r3
 8025370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8025374:	4413      	add	r3, r2
 8025376:	781b      	ldrb	r3, [r3, #0]
 8025378:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 802537c:	051c      	lsls	r4, r3, #20
 802537e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025380:	4618      	mov	r0, r3
 8025382:	f7ff f821 	bl	80243c8 <lfs_tag_id>
 8025386:	4603      	mov	r3, r0
 8025388:	461a      	mov	r2, r3
 802538a:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 802538e:	4413      	add	r3, r2
 8025390:	029b      	lsls	r3, r3, #10
 8025392:	ea44 0103 	orr.w	r1, r4, r3
 8025396:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 802539a:	4613      	mov	r3, r2
 802539c:	005b      	lsls	r3, r3, #1
 802539e:	4413      	add	r3, r2
 80253a0:	009b      	lsls	r3, r3, #2
 80253a2:	461a      	mov	r2, r3
 80253a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80253a8:	4413      	add	r3, r2
 80253aa:	689b      	ldr	r3, [r3, #8]
 80253ac:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80253ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80253b2:	4613      	mov	r3, r2
 80253b4:	005b      	lsls	r3, r3, #1
 80253b6:	4413      	add	r3, r2
 80253b8:	009b      	lsls	r3, r3, #2
 80253ba:	461a      	mov	r2, r3
 80253bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80253c0:	4413      	add	r3, r2
 80253c2:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80253c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80253c8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80253cc:	4798      	blx	r3
 80253ce:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                if (res < 0) {
 80253d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80253d6:	2b00      	cmp	r3, #0
 80253d8:	da02      	bge.n	80253e0 <lfs_dir_traverse+0x5a0>
                    return res;
 80253da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80253de:	e10b      	b.n	80255f8 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80253e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80253e4:	2b00      	cmp	r3, #0
 80253e6:	d12e      	bne.n	8025446 <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80253e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80253ec:	3301      	adds	r3, #1
 80253ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80253f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80253f4:	4618      	mov	r0, r3
 80253f6:	f7fe fff7 	bl	80243e8 <lfs_tag_size>
 80253fa:	4602      	mov	r2, r0
 80253fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8025400:	4293      	cmp	r3, r2
 8025402:	d3aa      	bcc.n	802535a <lfs_dir_traverse+0x51a>
 8025404:	e526      	b.n	8024e54 <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8025406:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	@ 0x118
 802540a:	029a      	lsls	r2, r3, #10
 802540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802540e:	18d1      	adds	r1, r2, r3
 8025410:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8025414:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8025418:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 802541c:	4798      	blx	r3
 802541e:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (res < 0) {
 8025422:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8025426:	2b00      	cmp	r3, #0
 8025428:	da02      	bge.n	8025430 <lfs_dir_traverse+0x5f0>
                return res;
 802542a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 802542e:	e0e3      	b.n	80255f8 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8025430:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8025434:	2b00      	cmp	r3, #0
 8025436:	d10d      	bne.n	8025454 <lfs_dir_traverse+0x614>
 8025438:	e50c      	b.n	8024e54 <lfs_dir_traverse+0x14>
                continue;
 802543a:	bf00      	nop
 802543c:	e50a      	b.n	8024e54 <lfs_dir_traverse+0x14>
            continue;
 802543e:	bf00      	nop
 8025440:	e508      	b.n	8024e54 <lfs_dir_traverse+0x14>
                continue;
 8025442:	bf00      	nop
 8025444:	e506      	b.n	8024e54 <lfs_dir_traverse+0x14>
                    break;
 8025446:	bf00      	nop
        {
 8025448:	e504      	b.n	8024e54 <lfs_dir_traverse+0x14>
 802544a:	bf00      	nop
 802544c:	08024d89 	.word	0x08024d89
 8025450:	600ffc00 	.word	0x600ffc00
                break;
 8025454:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8025456:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 802545a:	2b00      	cmp	r3, #0
 802545c:	f000 80ca 	beq.w	80255f4 <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8025460:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8025464:	1e5a      	subs	r2, r3, #1
 8025466:	4613      	mov	r3, r2
 8025468:	011b      	lsls	r3, r3, #4
 802546a:	1a9b      	subs	r3, r3, r2
 802546c:	009b      	lsls	r3, r3, #2
 802546e:	33f0      	adds	r3, #240	@ 0xf0
 8025470:	443b      	add	r3, r7
 8025472:	3b98      	subs	r3, #152	@ 0x98
 8025474:	681b      	ldr	r3, [r3, #0]
 8025476:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8025478:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 802547c:	1e5a      	subs	r2, r3, #1
 802547e:	4613      	mov	r3, r2
 8025480:	011b      	lsls	r3, r3, #4
 8025482:	1a9b      	subs	r3, r3, r2
 8025484:	009b      	lsls	r3, r3, #2
 8025486:	33f0      	adds	r3, #240	@ 0xf0
 8025488:	443b      	add	r3, r7
 802548a:	3b94      	subs	r3, #148	@ 0x94
 802548c:	681b      	ldr	r3, [r3, #0]
 802548e:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8025490:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8025494:	1e5a      	subs	r2, r3, #1
 8025496:	4613      	mov	r3, r2
 8025498:	011b      	lsls	r3, r3, #4
 802549a:	1a9b      	subs	r3, r3, r2
 802549c:	009b      	lsls	r3, r3, #2
 802549e:	33f0      	adds	r3, #240	@ 0xf0
 80254a0:	443b      	add	r3, r7
 80254a2:	3b90      	subs	r3, #144	@ 0x90
 80254a4:	681b      	ldr	r3, [r3, #0]
 80254a6:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80254a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80254ac:	1e5a      	subs	r2, r3, #1
 80254ae:	4613      	mov	r3, r2
 80254b0:	011b      	lsls	r3, r3, #4
 80254b2:	1a9b      	subs	r3, r3, r2
 80254b4:	009b      	lsls	r3, r3, #2
 80254b6:	33f0      	adds	r3, #240	@ 0xf0
 80254b8:	443b      	add	r3, r7
 80254ba:	3b8c      	subs	r3, #140	@ 0x8c
 80254bc:	681b      	ldr	r3, [r3, #0]
 80254be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
        attrcount   = stack[sp-1].attrcount;
 80254c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80254c6:	1e5a      	subs	r2, r3, #1
 80254c8:	4613      	mov	r3, r2
 80254ca:	011b      	lsls	r3, r3, #4
 80254cc:	1a9b      	subs	r3, r3, r2
 80254ce:	009b      	lsls	r3, r3, #2
 80254d0:	33f0      	adds	r3, #240	@ 0xf0
 80254d2:	443b      	add	r3, r7
 80254d4:	3b88      	subs	r3, #136	@ 0x88
 80254d6:	681b      	ldr	r3, [r3, #0]
 80254d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        tmask       = stack[sp-1].tmask;
 80254dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80254e0:	1e5a      	subs	r2, r3, #1
 80254e2:	4613      	mov	r3, r2
 80254e4:	011b      	lsls	r3, r3, #4
 80254e6:	1a9b      	subs	r3, r3, r2
 80254e8:	009b      	lsls	r3, r3, #2
 80254ea:	33f0      	adds	r3, #240	@ 0xf0
 80254ec:	443b      	add	r3, r7
 80254ee:	3b84      	subs	r3, #132	@ 0x84
 80254f0:	681b      	ldr	r3, [r3, #0]
 80254f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        ttag        = stack[sp-1].ttag;
 80254f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80254fa:	1e5a      	subs	r2, r3, #1
 80254fc:	4613      	mov	r3, r2
 80254fe:	011b      	lsls	r3, r3, #4
 8025500:	1a9b      	subs	r3, r3, r2
 8025502:	009b      	lsls	r3, r3, #2
 8025504:	33f0      	adds	r3, #240	@ 0xf0
 8025506:	443b      	add	r3, r7
 8025508:	3b80      	subs	r3, #128	@ 0x80
 802550a:	681b      	ldr	r3, [r3, #0]
 802550c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        begin       = stack[sp-1].begin;
 8025510:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8025514:	1e5a      	subs	r2, r3, #1
 8025516:	4613      	mov	r3, r2
 8025518:	011b      	lsls	r3, r3, #4
 802551a:	1a9b      	subs	r3, r3, r2
 802551c:	009b      	lsls	r3, r3, #2
 802551e:	33f0      	adds	r3, #240	@ 0xf0
 8025520:	443b      	add	r3, r7
 8025522:	3b7c      	subs	r3, #124	@ 0x7c
 8025524:	881b      	ldrh	r3, [r3, #0]
 8025526:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        end         = stack[sp-1].end;
 802552a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 802552e:	1e5a      	subs	r2, r3, #1
 8025530:	4613      	mov	r3, r2
 8025532:	011b      	lsls	r3, r3, #4
 8025534:	1a9b      	subs	r3, r3, r2
 8025536:	009b      	lsls	r3, r3, #2
 8025538:	33f0      	adds	r3, #240	@ 0xf0
 802553a:	443b      	add	r3, r7
 802553c:	3b7a      	subs	r3, #122	@ 0x7a
 802553e:	881b      	ldrh	r3, [r3, #0]
 8025540:	f8a7 3114 	strh.w	r3, [r7, #276]	@ 0x114
        diff        = stack[sp-1].diff;
 8025544:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8025548:	1e5a      	subs	r2, r3, #1
 802554a:	4613      	mov	r3, r2
 802554c:	011b      	lsls	r3, r3, #4
 802554e:	1a9b      	subs	r3, r3, r2
 8025550:	009b      	lsls	r3, r3, #2
 8025552:	33f0      	adds	r3, #240	@ 0xf0
 8025554:	443b      	add	r3, r7
 8025556:	3b78      	subs	r3, #120	@ 0x78
 8025558:	881b      	ldrh	r3, [r3, #0]
 802555a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
        cb          = stack[sp-1].cb;
 802555e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8025562:	1e5a      	subs	r2, r3, #1
 8025564:	4613      	mov	r3, r2
 8025566:	011b      	lsls	r3, r3, #4
 8025568:	1a9b      	subs	r3, r3, r2
 802556a:	009b      	lsls	r3, r3, #2
 802556c:	33f0      	adds	r3, #240	@ 0xf0
 802556e:	443b      	add	r3, r7
 8025570:	3b74      	subs	r3, #116	@ 0x74
 8025572:	681b      	ldr	r3, [r3, #0]
 8025574:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        data        = stack[sp-1].data;
 8025578:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 802557c:	1e5a      	subs	r2, r3, #1
 802557e:	4613      	mov	r3, r2
 8025580:	011b      	lsls	r3, r3, #4
 8025582:	1a9b      	subs	r3, r3, r2
 8025584:	009b      	lsls	r3, r3, #2
 8025586:	33f0      	adds	r3, #240	@ 0xf0
 8025588:	443b      	add	r3, r7
 802558a:	3b70      	subs	r3, #112	@ 0x70
 802558c:	681b      	ldr	r3, [r3, #0]
 802558e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        tag         = stack[sp-1].tag;
 8025592:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8025596:	1e5a      	subs	r2, r3, #1
 8025598:	4613      	mov	r3, r2
 802559a:	011b      	lsls	r3, r3, #4
 802559c:	1a9b      	subs	r3, r3, r2
 802559e:	009b      	lsls	r3, r3, #2
 80255a0:	33f0      	adds	r3, #240	@ 0xf0
 80255a2:	443b      	add	r3, r7
 80255a4:	3b6c      	subs	r3, #108	@ 0x6c
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	657b      	str	r3, [r7, #84]	@ 0x54
        buffer      = stack[sp-1].buffer;
 80255aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80255ae:	1e5a      	subs	r2, r3, #1
 80255b0:	4613      	mov	r3, r2
 80255b2:	011b      	lsls	r3, r3, #4
 80255b4:	1a9b      	subs	r3, r3, r2
 80255b6:	009b      	lsls	r3, r3, #2
 80255b8:	33f0      	adds	r3, #240	@ 0xf0
 80255ba:	443b      	add	r3, r7
 80255bc:	3b68      	subs	r3, #104	@ 0x68
 80255be:	681b      	ldr	r3, [r3, #0]
 80255c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        disk        = stack[sp-1].disk;
 80255c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80255c8:	1e5a      	subs	r2, r3, #1
 80255ca:	4613      	mov	r3, r2
 80255cc:	011b      	lsls	r3, r3, #4
 80255ce:	1a9b      	subs	r3, r3, r2
 80255d0:	009b      	lsls	r3, r3, #2
 80255d2:	33f0      	adds	r3, #240	@ 0xf0
 80255d4:	443b      	add	r3, r7
 80255d6:	f1a3 0268 	sub.w	r2, r3, #104	@ 0x68
 80255da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80255de:	3204      	adds	r2, #4
 80255e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80255e4:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80255e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80255ec:	3b01      	subs	r3, #1
 80255ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        goto popped;
 80255f2:	e596      	b.n	8025122 <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80255f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
    }
}
 80255f8:	4618      	mov	r0, r3
 80255fa:	37f4      	adds	r7, #244	@ 0xf4
 80255fc:	46bd      	mov	sp, r7
 80255fe:	bd90      	pop	{r4, r7, pc}

08025600 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8025600:	b590      	push	{r4, r7, lr}
 8025602:	b09f      	sub	sp, #124	@ 0x7c
 8025604:	af04      	add	r7, sp, #16
 8025606:	60f8      	str	r0, [r7, #12]
 8025608:	60b9      	str	r1, [r7, #8]
 802560a:	607a      	str	r2, [r7, #4]
 802560c:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 802560e:	f04f 33ff 	mov.w	r3, #4294967295
 8025612:	667b      	str	r3, [r7, #100]	@ 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	681a      	ldr	r2, [r3, #0]
 8025618:	68fb      	ldr	r3, [r7, #12]
 802561a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802561c:	6a1b      	ldr	r3, [r3, #32]
 802561e:	429a      	cmp	r2, r3
 8025620:	d207      	bcs.n	8025632 <lfs_dir_fetchmatch+0x32>
 8025622:	687b      	ldr	r3, [r7, #4]
 8025624:	3304      	adds	r3, #4
 8025626:	681a      	ldr	r2, [r3, #0]
 8025628:	68fb      	ldr	r3, [r7, #12]
 802562a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802562c:	6a1b      	ldr	r3, [r3, #32]
 802562e:	429a      	cmp	r2, r3
 8025630:	d302      	bcc.n	8025638 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 8025632:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8025636:	e342      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8025638:	2300      	movs	r3, #0
 802563a:	633b      	str	r3, [r7, #48]	@ 0x30
 802563c:	2300      	movs	r3, #0
 802563e:	637b      	str	r3, [r7, #52]	@ 0x34
    int r = 0;
 8025640:	2300      	movs	r3, #0
 8025642:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; i < 2; i++) {
 8025644:	2300      	movs	r3, #0
 8025646:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8025648:	e052      	b.n	80256f0 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 802564a:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 802564c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802564e:	009b      	lsls	r3, r3, #2
 8025650:	687a      	ldr	r2, [r7, #4]
 8025652:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8025654:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8025656:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802565a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 802565c:	0092      	lsls	r2, r2, #2
 802565e:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8025660:	2104      	movs	r1, #4
 8025662:	9103      	str	r1, [sp, #12]
 8025664:	9202      	str	r2, [sp, #8]
 8025666:	2200      	movs	r2, #0
 8025668:	9201      	str	r2, [sp, #4]
 802566a:	9300      	str	r3, [sp, #0]
 802566c:	2304      	movs	r3, #4
 802566e:	4602      	mov	r2, r0
 8025670:	2100      	movs	r1, #0
 8025672:	68f8      	ldr	r0, [r7, #12]
 8025674:	f7fe fa6c 	bl	8023b50 <lfs_bd_read>
 8025678:	63b8      	str	r0, [r7, #56]	@ 0x38
        revs[i] = lfs_fromle32(revs[i]);
 802567a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802567c:	009b      	lsls	r3, r3, #2
 802567e:	3368      	adds	r3, #104	@ 0x68
 8025680:	443b      	add	r3, r7
 8025682:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8025686:	4618      	mov	r0, r3
 8025688:	f7fe f9f7 	bl	8023a7a <lfs_fromle32>
 802568c:	4602      	mov	r2, r0
 802568e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8025690:	009b      	lsls	r3, r3, #2
 8025692:	3368      	adds	r3, #104	@ 0x68
 8025694:	443b      	add	r3, r7
 8025696:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 802569a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802569c:	2b00      	cmp	r3, #0
 802569e:	d005      	beq.n	80256ac <lfs_dir_fetchmatch+0xac>
 80256a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80256a2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80256a6:	d001      	beq.n	80256ac <lfs_dir_fetchmatch+0xac>
            return err;
 80256a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80256aa:	e308      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 80256ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80256ae:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80256b2:	d01a      	beq.n	80256ea <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80256b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80256b6:	009b      	lsls	r3, r3, #2
 80256b8:	3368      	adds	r3, #104	@ 0x68
 80256ba:	443b      	add	r3, r7
 80256bc:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80256c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80256c2:	3301      	adds	r3, #1
 80256c4:	2b00      	cmp	r3, #0
 80256c6:	f003 0301 	and.w	r3, r3, #1
 80256ca:	bfb8      	it	lt
 80256cc:	425b      	neglt	r3, r3
 80256ce:	009b      	lsls	r3, r3, #2
 80256d0:	3368      	adds	r3, #104	@ 0x68
 80256d2:	443b      	add	r3, r7
 80256d4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80256d8:	4619      	mov	r1, r3
 80256da:	4610      	mov	r0, r2
 80256dc:	f7fe f9bf 	bl	8023a5e <lfs_scmp>
 80256e0:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	dd01      	ble.n	80256ea <lfs_dir_fetchmatch+0xea>
            r = i;
 80256e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80256e8:	663b      	str	r3, [r7, #96]	@ 0x60
    for (int i = 0; i < 2; i++) {
 80256ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80256ec:	3301      	adds	r3, #1
 80256ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80256f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80256f2:	2b01      	cmp	r3, #1
 80256f4:	dda9      	ble.n	802564a <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80256f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80256f8:	2b00      	cmp	r3, #0
 80256fa:	f003 0301 	and.w	r3, r3, #1
 80256fe:	bfb8      	it	lt
 8025700:	425b      	neglt	r3, r3
 8025702:	009b      	lsls	r3, r3, #2
 8025704:	687a      	ldr	r2, [r7, #4]
 8025706:	4413      	add	r3, r2
 8025708:	681a      	ldr	r2, [r3, #0]
 802570a:	68bb      	ldr	r3, [r7, #8]
 802570c:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 802570e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8025710:	3301      	adds	r3, #1
 8025712:	2b00      	cmp	r3, #0
 8025714:	f003 0301 	and.w	r3, r3, #1
 8025718:	bfb8      	it	lt
 802571a:	425b      	neglt	r3, r3
 802571c:	009b      	lsls	r3, r3, #2
 802571e:	687a      	ldr	r2, [r7, #4]
 8025720:	4413      	add	r3, r2
 8025722:	681a      	ldr	r2, [r3, #0]
 8025724:	68bb      	ldr	r3, [r7, #8]
 8025726:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8025728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802572a:	2b00      	cmp	r3, #0
 802572c:	f003 0301 	and.w	r3, r3, #1
 8025730:	bfb8      	it	lt
 8025732:	425b      	neglt	r3, r3
 8025734:	009b      	lsls	r3, r3, #2
 8025736:	3368      	adds	r3, #104	@ 0x68
 8025738:	443b      	add	r3, r7
 802573a:	f853 2c38 	ldr.w	r2, [r3, #-56]
 802573e:	68bb      	ldr	r3, [r7, #8]
 8025740:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8025742:	68bb      	ldr	r3, [r7, #8]
 8025744:	2200      	movs	r2, #0
 8025746:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8025748:	2300      	movs	r3, #0
 802574a:	65bb      	str	r3, [r7, #88]	@ 0x58
 802574c:	e2a3      	b.n	8025c96 <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 802574e:	2300      	movs	r3, #0
 8025750:	657b      	str	r3, [r7, #84]	@ 0x54
        lfs_tag_t ptag = 0xffffffff;
 8025752:	f04f 33ff 	mov.w	r3, #4294967295
 8025756:	653b      	str	r3, [r7, #80]	@ 0x50

        uint16_t tempcount = 0;
 8025758:	2300      	movs	r3, #0
 802575a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 802575e:	4a96      	ldr	r2, [pc, #600]	@ (80259b8 <lfs_dir_fetchmatch+0x3b8>)
 8025760:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8025764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025768:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 802576c:	2300      	movs	r3, #0
 802576e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
        lfs_stag_t tempbesttag = besttag;
 8025772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025774:	64bb      	str	r3, [r7, #72]	@ 0x48

        dir->rev = lfs_tole32(dir->rev);
 8025776:	68bb      	ldr	r3, [r7, #8]
 8025778:	689b      	ldr	r3, [r3, #8]
 802577a:	4618      	mov	r0, r3
 802577c:	f7fe f988 	bl	8023a90 <lfs_tole32>
 8025780:	4602      	mov	r2, r0
 8025782:	68bb      	ldr	r3, [r7, #8]
 8025784:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 8025786:	68bb      	ldr	r3, [r7, #8]
 8025788:	3308      	adds	r3, #8
 802578a:	2204      	movs	r2, #4
 802578c:	4619      	mov	r1, r3
 802578e:	f04f 30ff 	mov.w	r0, #4294967295
 8025792:	f005 fbb9 	bl	802af08 <lfs_crc>
 8025796:	4603      	mov	r3, r0
 8025798:	627b      	str	r3, [r7, #36]	@ 0x24
        dir->rev = lfs_fromle32(dir->rev);
 802579a:	68bb      	ldr	r3, [r7, #8]
 802579c:	689b      	ldr	r3, [r3, #8]
 802579e:	4618      	mov	r0, r3
 80257a0:	f7fe f96b 	bl	8023a7a <lfs_fromle32>
 80257a4:	4602      	mov	r2, r0
 80257a6:	68bb      	ldr	r3, [r7, #8]
 80257a8:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80257aa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80257ac:	f7fe fe29 	bl	8024402 <lfs_tag_dsize>
 80257b0:	4602      	mov	r2, r0
 80257b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80257b4:	4413      	add	r3, r2
 80257b6:	657b      	str	r3, [r7, #84]	@ 0x54
            int err = lfs_bd_read(lfs,
 80257b8:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80257ba:	68fb      	ldr	r3, [r7, #12]
 80257bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80257be:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80257c0:	68bb      	ldr	r3, [r7, #8]
 80257c2:	681b      	ldr	r3, [r3, #0]
 80257c4:	2204      	movs	r2, #4
 80257c6:	9203      	str	r2, [sp, #12]
 80257c8:	f107 0220 	add.w	r2, r7, #32
 80257cc:	9202      	str	r2, [sp, #8]
 80257ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80257d0:	9201      	str	r2, [sp, #4]
 80257d2:	9300      	str	r3, [sp, #0]
 80257d4:	4603      	mov	r3, r0
 80257d6:	460a      	mov	r2, r1
 80257d8:	2100      	movs	r1, #0
 80257da:	68f8      	ldr	r0, [r7, #12]
 80257dc:	f7fe f9b8 	bl	8023b50 <lfs_bd_read>
 80257e0:	6438      	str	r0, [r7, #64]	@ 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80257e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80257e4:	2b00      	cmp	r3, #0
 80257e6:	d009      	beq.n	80257fc <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80257e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80257ea:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80257ee:	d103      	bne.n	80257f8 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80257f0:	68bb      	ldr	r3, [r7, #8]
 80257f2:	2200      	movs	r2, #0
 80257f4:	759a      	strb	r2, [r3, #22]
                    break;
 80257f6:	e1d6      	b.n	8025ba6 <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80257f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80257fa:	e260      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80257fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80257fe:	f107 0120 	add.w	r1, r7, #32
 8025802:	2204      	movs	r2, #4
 8025804:	4618      	mov	r0, r3
 8025806:	f005 fb7f 	bl	802af08 <lfs_crc>
 802580a:	4603      	mov	r3, r0
 802580c:	627b      	str	r3, [r7, #36]	@ 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 802580e:	6a3b      	ldr	r3, [r7, #32]
 8025810:	4618      	mov	r0, r3
 8025812:	f7fe f949 	bl	8023aa8 <lfs_frombe32>
 8025816:	4602      	mov	r2, r0
 8025818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802581a:	4053      	eors	r3, r2
 802581c:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 802581e:	6a3b      	ldr	r3, [r7, #32]
 8025820:	4618      	mov	r0, r3
 8025822:	f7fe fd76 	bl	8024312 <lfs_tag_isvalid>
 8025826:	4603      	mov	r3, r0
 8025828:	f083 0301 	eor.w	r3, r3, #1
 802582c:	b2db      	uxtb	r3, r3
 802582e:	2b00      	cmp	r3, #0
 8025830:	d01b      	beq.n	802586a <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8025832:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8025834:	f7fe fd8e 	bl	8024354 <lfs_tag_type1>
 8025838:	4603      	mov	r3, r0
 802583a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 802583e:	d10d      	bne.n	802585c <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8025840:	68bb      	ldr	r3, [r7, #8]
 8025842:	68db      	ldr	r3, [r3, #12]
 8025844:	68fa      	ldr	r2, [r7, #12]
 8025846:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8025848:	6992      	ldr	r2, [r2, #24]
 802584a:	fbb3 f1f2 	udiv	r1, r3, r2
 802584e:	fb01 f202 	mul.w	r2, r1, r2
 8025852:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 8025854:	2b00      	cmp	r3, #0
 8025856:	d101      	bne.n	802585c <lfs_dir_fetchmatch+0x25c>
 8025858:	2301      	movs	r3, #1
 802585a:	e000      	b.n	802585e <lfs_dir_fetchmatch+0x25e>
 802585c:	2300      	movs	r3, #0
 802585e:	f003 0301 	and.w	r3, r3, #1
 8025862:	b2da      	uxtb	r2, r3
 8025864:	68bb      	ldr	r3, [r7, #8]
 8025866:	759a      	strb	r2, [r3, #22]
                break;
 8025868:	e19d      	b.n	8025ba6 <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 802586a:	6a3b      	ldr	r3, [r7, #32]
 802586c:	4618      	mov	r0, r3
 802586e:	f7fe fdc8 	bl	8024402 <lfs_tag_dsize>
 8025872:	4602      	mov	r2, r0
 8025874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025876:	441a      	add	r2, r3
 8025878:	68fb      	ldr	r3, [r7, #12]
 802587a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802587c:	69db      	ldr	r3, [r3, #28]
 802587e:	429a      	cmp	r2, r3
 8025880:	d903      	bls.n	802588a <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 8025882:	68bb      	ldr	r3, [r7, #8]
 8025884:	2200      	movs	r2, #0
 8025886:	759a      	strb	r2, [r3, #22]
                break;
 8025888:	e18d      	b.n	8025ba6 <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 802588a:	6a3b      	ldr	r3, [r7, #32]
 802588c:	653b      	str	r3, [r7, #80]	@ 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 802588e:	6a3b      	ldr	r3, [r7, #32]
 8025890:	4618      	mov	r0, r3
 8025892:	f7fe fd5f 	bl	8024354 <lfs_tag_type1>
 8025896:	4603      	mov	r3, r0
 8025898:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 802589c:	d164      	bne.n	8025968 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 802589e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80258a0:	68fb      	ldr	r3, [r7, #12]
 80258a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80258a4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80258a6:	68bb      	ldr	r3, [r7, #8]
 80258a8:	681b      	ldr	r3, [r3, #0]
 80258aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80258ac:	3204      	adds	r2, #4
 80258ae:	2104      	movs	r1, #4
 80258b0:	9103      	str	r1, [sp, #12]
 80258b2:	f107 011c 	add.w	r1, r7, #28
 80258b6:	9102      	str	r1, [sp, #8]
 80258b8:	9201      	str	r2, [sp, #4]
 80258ba:	9300      	str	r3, [sp, #0]
 80258bc:	4623      	mov	r3, r4
 80258be:	4602      	mov	r2, r0
 80258c0:	2100      	movs	r1, #0
 80258c2:	68f8      	ldr	r0, [r7, #12]
 80258c4:	f7fe f944 	bl	8023b50 <lfs_bd_read>
 80258c8:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80258ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80258cc:	2b00      	cmp	r3, #0
 80258ce:	d009      	beq.n	80258e4 <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80258d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80258d2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80258d6:	d103      	bne.n	80258e0 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80258d8:	68bb      	ldr	r3, [r7, #8]
 80258da:	2200      	movs	r2, #0
 80258dc:	759a      	strb	r2, [r3, #22]
                        break;
 80258de:	e162      	b.n	8025ba6 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80258e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                return err;
 80258e2:	e1ec      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80258e4:	69fb      	ldr	r3, [r7, #28]
 80258e6:	4618      	mov	r0, r3
 80258e8:	f7fe f8c7 	bl	8023a7a <lfs_fromle32>
 80258ec:	4603      	mov	r3, r0
 80258ee:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80258f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80258f2:	69fb      	ldr	r3, [r7, #28]
 80258f4:	429a      	cmp	r2, r3
 80258f6:	d003      	beq.n	8025900 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80258f8:	68bb      	ldr	r3, [r7, #8]
 80258fa:	2200      	movs	r2, #0
 80258fc:	759a      	strb	r2, [r3, #22]
                    break;
 80258fe:	e152      	b.n	8025ba6 <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8025900:	6a3b      	ldr	r3, [r7, #32]
 8025902:	4618      	mov	r0, r3
 8025904:	f7fe fd46 	bl	8024394 <lfs_tag_chunk>
 8025908:	4603      	mov	r3, r0
 802590a:	07db      	lsls	r3, r3, #31
 802590c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802590e:	4053      	eors	r3, r2
 8025910:	653b      	str	r3, [r7, #80]	@ 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 8025912:	68fb      	ldr	r3, [r7, #12]
 8025914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025916:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 802591a:	2204      	movs	r2, #4
 802591c:	4618      	mov	r0, r3
 802591e:	f005 faf3 	bl	802af08 <lfs_crc>
 8025922:	4602      	mov	r2, r0
 8025924:	68fb      	ldr	r3, [r7, #12]
 8025926:	62da      	str	r2, [r3, #44]	@ 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802592a:	667b      	str	r3, [r7, #100]	@ 0x64
                dir->off = off + lfs_tag_dsize(tag);
 802592c:	6a3b      	ldr	r3, [r7, #32]
 802592e:	4618      	mov	r0, r3
 8025930:	f7fe fd67 	bl	8024402 <lfs_tag_dsize>
 8025934:	4602      	mov	r2, r0
 8025936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025938:	441a      	add	r2, r3
 802593a:	68bb      	ldr	r3, [r7, #8]
 802593c:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 802593e:	68bb      	ldr	r3, [r7, #8]
 8025940:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8025942:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8025944:	68bb      	ldr	r3, [r7, #8]
 8025946:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 802594a:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 802594c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802594e:	68bb      	ldr	r3, [r7, #8]
 8025950:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8025952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025954:	68bb      	ldr	r3, [r7, #8]
 8025956:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8025958:	68bb      	ldr	r3, [r7, #8]
 802595a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 802595e:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8025960:	f04f 33ff 	mov.w	r3, #4294967295
 8025964:	627b      	str	r3, [r7, #36]	@ 0x24
 8025966:	e720      	b.n	80257aa <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025968:	2304      	movs	r3, #4
 802596a:	647b      	str	r3, [r7, #68]	@ 0x44
 802596c:	e032      	b.n	80259d4 <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 802596e:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025970:	68fb      	ldr	r3, [r7, #12]
 8025972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8025974:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8025976:	68bb      	ldr	r3, [r7, #8]
 8025978:	681b      	ldr	r3, [r3, #0]
 802597a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 802597c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802597e:	440a      	add	r2, r1
 8025980:	2101      	movs	r1, #1
 8025982:	9103      	str	r1, [sp, #12]
 8025984:	f107 011b 	add.w	r1, r7, #27
 8025988:	9102      	str	r1, [sp, #8]
 802598a:	9201      	str	r2, [sp, #4]
 802598c:	9300      	str	r3, [sp, #0]
 802598e:	4623      	mov	r3, r4
 8025990:	4602      	mov	r2, r0
 8025992:	2100      	movs	r1, #0
 8025994:	68f8      	ldr	r0, [r7, #12]
 8025996:	f7fe f8db 	bl	8023b50 <lfs_bd_read>
 802599a:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 802599c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802599e:	2b00      	cmp	r3, #0
 80259a0:	d00c      	beq.n	80259bc <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 80259a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80259a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80259a8:	d103      	bne.n	80259b2 <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 80259aa:	68bb      	ldr	r3, [r7, #8]
 80259ac:	2200      	movs	r2, #0
 80259ae:	759a      	strb	r2, [r3, #22]
 80259b0:	e018      	b.n	80259e4 <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 80259b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                return err;
 80259b4:	e183      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
 80259b6:	bf00      	nop
 80259b8:	08033970 	.word	0x08033970
                }

                crc = lfs_crc(crc, &dat, 1);
 80259bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80259be:	f107 011b 	add.w	r1, r7, #27
 80259c2:	2201      	movs	r2, #1
 80259c4:	4618      	mov	r0, r3
 80259c6:	f005 fa9f 	bl	802af08 <lfs_crc>
 80259ca:	4603      	mov	r3, r0
 80259cc:	627b      	str	r3, [r7, #36]	@ 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80259ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80259d0:	3301      	adds	r3, #1
 80259d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80259d4:	6a3b      	ldr	r3, [r7, #32]
 80259d6:	4618      	mov	r0, r3
 80259d8:	f7fe fd13 	bl	8024402 <lfs_tag_dsize>
 80259dc:	4602      	mov	r2, r0
 80259de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80259e0:	4293      	cmp	r3, r2
 80259e2:	d3c4      	bcc.n	802596e <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80259e4:	6a3b      	ldr	r3, [r7, #32]
 80259e6:	4618      	mov	r0, r3
 80259e8:	f7fe fcb4 	bl	8024354 <lfs_tag_type1>
 80259ec:	4603      	mov	r3, r0
 80259ee:	2b00      	cmp	r3, #0
 80259f0:	d113      	bne.n	8025a1a <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80259f2:	6a3b      	ldr	r3, [r7, #32]
 80259f4:	4618      	mov	r0, r3
 80259f6:	f7fe fce7 	bl	80243c8 <lfs_tag_id>
 80259fa:	4603      	mov	r3, r0
 80259fc:	461a      	mov	r2, r3
 80259fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8025a02:	4293      	cmp	r3, r2
 8025a04:	f200 8083 	bhi.w	8025b0e <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8025a08:	6a3b      	ldr	r3, [r7, #32]
 8025a0a:	4618      	mov	r0, r3
 8025a0c:	f7fe fcdc 	bl	80243c8 <lfs_tag_id>
 8025a10:	4603      	mov	r3, r0
 8025a12:	3301      	adds	r3, #1
 8025a14:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8025a18:	e079      	b.n	8025b0e <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8025a1a:	6a3b      	ldr	r3, [r7, #32]
 8025a1c:	4618      	mov	r0, r3
 8025a1e:	f7fe fc99 	bl	8024354 <lfs_tag_type1>
 8025a22:	4603      	mov	r3, r0
 8025a24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8025a28:	d134      	bne.n	8025a94 <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025a2a:	6a3b      	ldr	r3, [r7, #32]
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	f7fe fcbe 	bl	80243ae <lfs_tag_splice>
 8025a32:	4603      	mov	r3, r0
 8025a34:	b29a      	uxth	r2, r3
 8025a36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8025a3a:	4413      	add	r3, r2
 8025a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8025a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8025a42:	4ba1      	ldr	r3, [pc, #644]	@ (8025cc8 <lfs_dir_fetchmatch+0x6c8>)
 8025a44:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8025a46:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8025a4a:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8025a4e:	6a3a      	ldr	r2, [r7, #32]
 8025a50:	4293      	cmp	r3, r2
 8025a52:	d104      	bne.n	8025a5e <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 8025a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8025a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8025a5c:	e057      	b.n	8025b0e <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8025a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025a64:	d053      	beq.n	8025b0e <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8025a66:	6a3b      	ldr	r3, [r7, #32]
 8025a68:	4618      	mov	r0, r3
 8025a6a:	f7fe fcad 	bl	80243c8 <lfs_tag_id>
 8025a6e:	4603      	mov	r3, r0
 8025a70:	461c      	mov	r4, r3
 8025a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025a74:	4618      	mov	r0, r3
 8025a76:	f7fe fca7 	bl	80243c8 <lfs_tag_id>
 8025a7a:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8025a7c:	429c      	cmp	r4, r3
 8025a7e:	d846      	bhi.n	8025b0e <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8025a80:	6a3b      	ldr	r3, [r7, #32]
 8025a82:	4618      	mov	r0, r3
 8025a84:	f7fe fc93 	bl	80243ae <lfs_tag_splice>
 8025a88:	4603      	mov	r3, r0
 8025a8a:	029a      	lsls	r2, r3, #10
 8025a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025a8e:	4413      	add	r3, r2
 8025a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8025a92:	e03c      	b.n	8025b0e <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8025a94:	6a3b      	ldr	r3, [r7, #32]
 8025a96:	4618      	mov	r0, r3
 8025a98:	f7fe fc5c 	bl	8024354 <lfs_tag_type1>
 8025a9c:	4603      	mov	r3, r0
 8025a9e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8025aa2:	d134      	bne.n	8025b0e <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8025aa4:	6a3b      	ldr	r3, [r7, #32]
 8025aa6:	4618      	mov	r0, r3
 8025aa8:	f7fe fc74 	bl	8024394 <lfs_tag_chunk>
 8025aac:	4603      	mov	r3, r0
 8025aae:	f003 0301 	and.w	r3, r3, #1
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	bf14      	ite	ne
 8025ab6:	2301      	movne	r3, #1
 8025ab8:	2300      	moveq	r3, #0
 8025aba:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

                err = lfs_bd_read(lfs,
 8025abe:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025ac0:	68fb      	ldr	r3, [r7, #12]
 8025ac2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8025ac4:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 8025ac6:	68bb      	ldr	r3, [r7, #8]
 8025ac8:	681b      	ldr	r3, [r3, #0]
 8025aca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8025acc:	3204      	adds	r2, #4
 8025ace:	2108      	movs	r1, #8
 8025ad0:	9103      	str	r1, [sp, #12]
 8025ad2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8025ad6:	9102      	str	r1, [sp, #8]
 8025ad8:	9201      	str	r2, [sp, #4]
 8025ada:	9300      	str	r3, [sp, #0]
 8025adc:	4623      	mov	r3, r4
 8025ade:	4602      	mov	r2, r0
 8025ae0:	2100      	movs	r1, #0
 8025ae2:	68f8      	ldr	r0, [r7, #12]
 8025ae4:	f7fe f834 	bl	8023b50 <lfs_bd_read>
 8025ae8:	6438      	str	r0, [r7, #64]	@ 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8025aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025aec:	2b00      	cmp	r3, #0
 8025aee:	d009      	beq.n	8025b04 <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8025af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025af2:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8025af6:	d103      	bne.n	8025b00 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8025af8:	68bb      	ldr	r3, [r7, #8]
 8025afa:	2200      	movs	r2, #0
 8025afc:	759a      	strb	r2, [r3, #22]
                        break;
 8025afe:	e052      	b.n	8025ba6 <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8025b02:	e0dc      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8025b04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8025b08:	4618      	mov	r0, r3
 8025b0a:	f7fe fbce 	bl	80242aa <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8025b0e:	6a3a      	ldr	r2, [r7, #32]
 8025b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8025b12:	405a      	eors	r2, r3
 8025b14:	683b      	ldr	r3, [r7, #0]
 8025b16:	4013      	ands	r3, r2
 8025b18:	2b00      	cmp	r3, #0
 8025b1a:	f47f ae46 	bne.w	80257aa <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025b1e:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8025b20:	68bb      	ldr	r3, [r7, #8]
 8025b22:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025b24:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8025b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8025b28:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025b2a:	617b      	str	r3, [r7, #20]
 8025b2c:	f107 0210 	add.w	r2, r7, #16
 8025b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8025b34:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8025b38:	4798      	blx	r3
 8025b3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
                if (res < 0) {
 8025b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025b3e:	2b00      	cmp	r3, #0
 8025b40:	da09      	bge.n	8025b56 <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8025b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025b44:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8025b48:	d103      	bne.n	8025b52 <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8025b4a:	68bb      	ldr	r3, [r7, #8]
 8025b4c:	2200      	movs	r2, #0
 8025b4e:	759a      	strb	r2, [r3, #22]
 8025b50:	e029      	b.n	8025ba6 <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8025b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                return err;
 8025b54:	e0b3      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8025b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025b58:	2b00      	cmp	r3, #0
 8025b5a:	d102      	bne.n	8025b62 <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8025b5c:	6a3b      	ldr	r3, [r7, #32]
 8025b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8025b60:	e623      	b.n	80257aa <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8025b62:	6a3a      	ldr	r2, [r7, #32]
 8025b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025b66:	405a      	eors	r2, r3
 8025b68:	4b58      	ldr	r3, [pc, #352]	@ (8025ccc <lfs_dir_fetchmatch+0x6cc>)
 8025b6a:	4013      	ands	r3, r2
 8025b6c:	2b00      	cmp	r3, #0
 8025b6e:	d103      	bne.n	8025b78 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8025b70:	f04f 33ff 	mov.w	r3, #4294967295
 8025b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8025b76:	e618      	b.n	80257aa <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8025b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025b7a:	2b02      	cmp	r3, #2
 8025b7c:	f47f ae15 	bne.w	80257aa <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8025b80:	6a3b      	ldr	r3, [r7, #32]
 8025b82:	4618      	mov	r0, r3
 8025b84:	f7fe fc20 	bl	80243c8 <lfs_tag_id>
 8025b88:	4603      	mov	r3, r0
 8025b8a:	461c      	mov	r4, r3
 8025b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8025b8e:	4618      	mov	r0, r3
 8025b90:	f7fe fc1a 	bl	80243c8 <lfs_tag_id>
 8025b94:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8025b96:	429c      	cmp	r4, r3
 8025b98:	f63f ae07 	bhi.w	80257aa <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8025b9c:	6a3b      	ldr	r3, [r7, #32]
 8025b9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8025ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8025ba4:	e601      	b.n	80257aa <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8025ba6:	68bb      	ldr	r3, [r7, #8]
 8025ba8:	68db      	ldr	r3, [r3, #12]
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	d100      	bne.n	8025bb0 <lfs_dir_fetchmatch+0x5b0>
 8025bae:	e05d      	b.n	8025c6c <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8025bb0:	68fb      	ldr	r3, [r7, #12]
 8025bb2:	333c      	adds	r3, #60	@ 0x3c
 8025bb4:	68ba      	ldr	r2, [r7, #8]
 8025bb6:	4611      	mov	r1, r2
 8025bb8:	4618      	mov	r0, r3
 8025bba:	f7fe fcad 	bl	8024518 <lfs_gstate_hasmovehere>
 8025bbe:	4603      	mov	r3, r0
 8025bc0:	2b00      	cmp	r3, #0
 8025bc2:	d028      	beq.n	8025c16 <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8025bc4:	68fb      	ldr	r3, [r7, #12]
 8025bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025bc8:	4618      	mov	r0, r3
 8025bca:	f7fe fbfd 	bl	80243c8 <lfs_tag_id>
 8025bce:	4603      	mov	r3, r0
 8025bd0:	461c      	mov	r4, r3
 8025bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025bd4:	4618      	mov	r0, r3
 8025bd6:	f7fe fbf7 	bl	80243c8 <lfs_tag_id>
 8025bda:	4603      	mov	r3, r0
 8025bdc:	429c      	cmp	r4, r3
 8025bde:	d104      	bne.n	8025bea <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8025be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8025be6:	667b      	str	r3, [r7, #100]	@ 0x64
 8025be8:	e015      	b.n	8025c16 <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8025bea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025bf0:	d011      	beq.n	8025c16 <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025bf6:	4618      	mov	r0, r3
 8025bf8:	f7fe fbe6 	bl	80243c8 <lfs_tag_id>
 8025bfc:	4603      	mov	r3, r0
 8025bfe:	461c      	mov	r4, r3
 8025c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025c02:	4618      	mov	r0, r3
 8025c04:	f7fe fbe0 	bl	80243c8 <lfs_tag_id>
 8025c08:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8025c0a:	429c      	cmp	r4, r3
 8025c0c:	d203      	bcs.n	8025c16 <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8025c0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025c10:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8025c14:	667b      	str	r3, [r7, #100]	@ 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8025c16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8025c18:	2b00      	cmp	r3, #0
 8025c1a:	d00f      	beq.n	8025c3c <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8025c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025c1e:	4618      	mov	r0, r3
 8025c20:	f7fe fbd2 	bl	80243c8 <lfs_tag_id>
 8025c24:	4603      	mov	r3, r0
 8025c26:	461a      	mov	r2, r3
 8025c28:	68bb      	ldr	r3, [r7, #8]
 8025c2a:	8a9b      	ldrh	r3, [r3, #20]
 8025c2c:	4619      	mov	r1, r3
 8025c2e:	4610      	mov	r0, r2
 8025c30:	f7fd feb3 	bl	802399a <lfs_min>
 8025c34:	4603      	mov	r3, r0
 8025c36:	b29a      	uxth	r2, r3
 8025c38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8025c3a:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8025c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025c3e:	4618      	mov	r0, r3
 8025c40:	f7fe fb67 	bl	8024312 <lfs_tag_isvalid>
 8025c44:	4603      	mov	r3, r0
 8025c46:	2b00      	cmp	r3, #0
 8025c48:	d001      	beq.n	8025c4e <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8025c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025c4c:	e037      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8025c4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025c50:	4618      	mov	r0, r3
 8025c52:	f7fe fbb9 	bl	80243c8 <lfs_tag_id>
 8025c56:	4603      	mov	r3, r0
 8025c58:	461a      	mov	r2, r3
 8025c5a:	68bb      	ldr	r3, [r7, #8]
 8025c5c:	8a9b      	ldrh	r3, [r3, #20]
 8025c5e:	429a      	cmp	r2, r3
 8025c60:	d202      	bcs.n	8025c68 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8025c62:	f06f 0301 	mvn.w	r3, #1
 8025c66:	e02a      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8025c68:	2300      	movs	r3, #0
 8025c6a:	e028      	b.n	8025cbe <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8025c6c:	68bb      	ldr	r3, [r7, #8]
 8025c6e:	4618      	mov	r0, r3
 8025c70:	f7fe fa94 	bl	802419c <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8025c74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8025c76:	3301      	adds	r3, #1
 8025c78:	2b00      	cmp	r3, #0
 8025c7a:	f003 0301 	and.w	r3, r3, #1
 8025c7e:	bfb8      	it	lt
 8025c80:	425b      	neglt	r3, r3
 8025c82:	009b      	lsls	r3, r3, #2
 8025c84:	3368      	adds	r3, #104	@ 0x68
 8025c86:	443b      	add	r3, r7
 8025c88:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025c8c:	68bb      	ldr	r3, [r7, #8]
 8025c8e:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8025c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8025c92:	3301      	adds	r3, #1
 8025c94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8025c96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8025c98:	2b01      	cmp	r3, #1
 8025c9a:	f77f ad58 	ble.w	802574e <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8025c9e:	68bb      	ldr	r3, [r7, #8]
 8025ca0:	681a      	ldr	r2, [r3, #0]
 8025ca2:	68bb      	ldr	r3, [r7, #8]
 8025ca4:	685b      	ldr	r3, [r3, #4]
 8025ca6:	490a      	ldr	r1, [pc, #40]	@ (8025cd0 <lfs_dir_fetchmatch+0x6d0>)
 8025ca8:	9101      	str	r1, [sp, #4]
 8025caa:	9300      	str	r3, [sp, #0]
 8025cac:	4613      	mov	r3, r2
 8025cae:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8025cb2:	4908      	ldr	r1, [pc, #32]	@ (8025cd4 <lfs_dir_fetchmatch+0x6d4>)
 8025cb4:	4808      	ldr	r0, [pc, #32]	@ (8025cd8 <lfs_dir_fetchmatch+0x6d8>)
 8025cb6:	f007 fdd7 	bl	802d868 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8025cba:	f06f 0353 	mvn.w	r3, #83	@ 0x53
}
 8025cbe:	4618      	mov	r0, r3
 8025cc0:	376c      	adds	r7, #108	@ 0x6c
 8025cc2:	46bd      	mov	sp, r7
 8025cc4:	bd90      	pop	{r4, r7, pc}
 8025cc6:	bf00      	nop
 8025cc8:	000ffc00 	.word	0x000ffc00
 8025ccc:	7ffffc00 	.word	0x7ffffc00
 8025cd0:	0803392c 	.word	0x0803392c
 8025cd4:	08033818 	.word	0x08033818
 8025cd8:	08033938 	.word	0x08033938

08025cdc <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8025cdc:	b580      	push	{r7, lr}
 8025cde:	b088      	sub	sp, #32
 8025ce0:	af04      	add	r7, sp, #16
 8025ce2:	60f8      	str	r0, [r7, #12]
 8025ce4:	60b9      	str	r1, [r7, #8]
 8025ce6:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8025ce8:	2300      	movs	r3, #0
 8025cea:	9303      	str	r3, [sp, #12]
 8025cec:	2300      	movs	r3, #0
 8025cee:	9302      	str	r3, [sp, #8]
 8025cf0:	2300      	movs	r3, #0
 8025cf2:	9301      	str	r3, [sp, #4]
 8025cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8025cf8:	9300      	str	r3, [sp, #0]
 8025cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8025cfe:	687a      	ldr	r2, [r7, #4]
 8025d00:	68b9      	ldr	r1, [r7, #8]
 8025d02:	68f8      	ldr	r0, [r7, #12]
 8025d04:	f7ff fc7c 	bl	8025600 <lfs_dir_fetchmatch>
 8025d08:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8025d0a:	4618      	mov	r0, r3
 8025d0c:	3710      	adds	r7, #16
 8025d0e:	46bd      	mov	sp, r7
 8025d10:	bd80      	pop	{r7, pc}
	...

08025d14 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8025d14:	b580      	push	{r7, lr}
 8025d16:	b08a      	sub	sp, #40	@ 0x28
 8025d18:	af02      	add	r7, sp, #8
 8025d1a:	60f8      	str	r0, [r7, #12]
 8025d1c:	60b9      	str	r1, [r7, #8]
 8025d1e:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8025d20:	f107 0310 	add.w	r3, r7, #16
 8025d24:	9300      	str	r3, [sp, #0]
 8025d26:	4b12      	ldr	r3, [pc, #72]	@ (8025d70 <lfs_dir_getgstate+0x5c>)
 8025d28:	4a12      	ldr	r2, [pc, #72]	@ (8025d74 <lfs_dir_getgstate+0x60>)
 8025d2a:	68b9      	ldr	r1, [r7, #8]
 8025d2c:	68f8      	ldr	r0, [r7, #12]
 8025d2e:	f7fe ff35 	bl	8024b9c <lfs_dir_get>
 8025d32:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8025d34:	69fb      	ldr	r3, [r7, #28]
 8025d36:	2b00      	cmp	r3, #0
 8025d38:	da05      	bge.n	8025d46 <lfs_dir_getgstate+0x32>
 8025d3a:	69fb      	ldr	r3, [r7, #28]
 8025d3c:	f113 0f02 	cmn.w	r3, #2
 8025d40:	d001      	beq.n	8025d46 <lfs_dir_getgstate+0x32>
        return res;
 8025d42:	69fb      	ldr	r3, [r7, #28]
 8025d44:	e00f      	b.n	8025d66 <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8025d46:	69fb      	ldr	r3, [r7, #28]
 8025d48:	f113 0f02 	cmn.w	r3, #2
 8025d4c:	d00a      	beq.n	8025d64 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025d4e:	f107 0310 	add.w	r3, r7, #16
 8025d52:	4618      	mov	r0, r3
 8025d54:	f7fe fc00 	bl	8024558 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025d58:	f107 0310 	add.w	r3, r7, #16
 8025d5c:	4619      	mov	r1, r3
 8025d5e:	6878      	ldr	r0, [r7, #4]
 8025d60:	f7fe fb63 	bl	802442a <lfs_gstate_xor>
    }

    return 0;
 8025d64:	2300      	movs	r3, #0
}
 8025d66:	4618      	mov	r0, r3
 8025d68:	3720      	adds	r7, #32
 8025d6a:	46bd      	mov	sp, r7
 8025d6c:	bd80      	pop	{r7, pc}
 8025d6e:	bf00      	nop
 8025d70:	7ff0000c 	.word	0x7ff0000c
 8025d74:	7ff00000 	.word	0x7ff00000

08025d78 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8025d78:	b580      	push	{r7, lr}
 8025d7a:	b08a      	sub	sp, #40	@ 0x28
 8025d7c:	af02      	add	r7, sp, #8
 8025d7e:	60f8      	str	r0, [r7, #12]
 8025d80:	60b9      	str	r1, [r7, #8]
 8025d82:	603b      	str	r3, [r7, #0]
 8025d84:	4613      	mov	r3, r2
 8025d86:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8025d88:	88fb      	ldrh	r3, [r7, #6]
 8025d8a:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8025d8e:	4293      	cmp	r3, r2
 8025d90:	d10b      	bne.n	8025daa <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8025d92:	683b      	ldr	r3, [r7, #0]
 8025d94:	3308      	adds	r3, #8
 8025d96:	4932      	ldr	r1, [pc, #200]	@ (8025e60 <lfs_dir_getinfo+0xe8>)
 8025d98:	461a      	mov	r2, r3
 8025d9a:	460b      	mov	r3, r1
 8025d9c:	881b      	ldrh	r3, [r3, #0]
 8025d9e:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8025da0:	683b      	ldr	r3, [r7, #0]
 8025da2:	2202      	movs	r2, #2
 8025da4:	701a      	strb	r2, [r3, #0]
        return 0;
 8025da6:	2300      	movs	r3, #0
 8025da8:	e055      	b.n	8025e56 <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025daa:	88fb      	ldrh	r3, [r7, #6]
 8025dac:	029a      	lsls	r2, r3, #10
 8025dae:	68fb      	ldr	r3, [r7, #12]
 8025db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8025db2:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025db4:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025db6:	683b      	ldr	r3, [r7, #0]
 8025db8:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025dba:	9300      	str	r3, [sp, #0]
 8025dbc:	4613      	mov	r3, r2
 8025dbe:	4a29      	ldr	r2, [pc, #164]	@ (8025e64 <lfs_dir_getinfo+0xec>)
 8025dc0:	68b9      	ldr	r1, [r7, #8]
 8025dc2:	68f8      	ldr	r0, [r7, #12]
 8025dc4:	f7fe feea 	bl	8024b9c <lfs_dir_get>
 8025dc8:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025dca:	69fb      	ldr	r3, [r7, #28]
 8025dcc:	2b00      	cmp	r3, #0
 8025dce:	da01      	bge.n	8025dd4 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8025dd0:	69fb      	ldr	r3, [r7, #28]
 8025dd2:	e040      	b.n	8025e56 <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8025dd4:	69fb      	ldr	r3, [r7, #28]
 8025dd6:	4618      	mov	r0, r3
 8025dd8:	f7fe facc 	bl	8024374 <lfs_tag_type3>
 8025ddc:	4603      	mov	r3, r0
 8025dde:	b2da      	uxtb	r2, r3
 8025de0:	683b      	ldr	r3, [r7, #0]
 8025de2:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8025de4:	88fb      	ldrh	r3, [r7, #6]
 8025de6:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8025dec:	f043 0308 	orr.w	r3, r3, #8
 8025df0:	f107 0214 	add.w	r2, r7, #20
 8025df4:	9200      	str	r2, [sp, #0]
 8025df6:	4a1c      	ldr	r2, [pc, #112]	@ (8025e68 <lfs_dir_getinfo+0xf0>)
 8025df8:	68b9      	ldr	r1, [r7, #8]
 8025dfa:	68f8      	ldr	r0, [r7, #12]
 8025dfc:	f7fe fece 	bl	8024b9c <lfs_dir_get>
 8025e00:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025e02:	69fb      	ldr	r3, [r7, #28]
 8025e04:	2b00      	cmp	r3, #0
 8025e06:	da01      	bge.n	8025e0c <lfs_dir_getinfo+0x94>
        return (int)tag;
 8025e08:	69fb      	ldr	r3, [r7, #28]
 8025e0a:	e024      	b.n	8025e56 <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8025e0c:	f107 0314 	add.w	r3, r7, #20
 8025e10:	4618      	mov	r0, r3
 8025e12:	f7fe fbe1 	bl	80245d8 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8025e16:	69fb      	ldr	r3, [r7, #28]
 8025e18:	4618      	mov	r0, r3
 8025e1a:	f7fe faab 	bl	8024374 <lfs_tag_type3>
 8025e1e:	4603      	mov	r3, r0
 8025e20:	461a      	mov	r2, r3
 8025e22:	f240 2302 	movw	r3, #514	@ 0x202
 8025e26:	429a      	cmp	r2, r3
 8025e28:	d103      	bne.n	8025e32 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025e2a:	69ba      	ldr	r2, [r7, #24]
 8025e2c:	683b      	ldr	r3, [r7, #0]
 8025e2e:	605a      	str	r2, [r3, #4]
 8025e30:	e010      	b.n	8025e54 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8025e32:	69fb      	ldr	r3, [r7, #28]
 8025e34:	4618      	mov	r0, r3
 8025e36:	f7fe fa9d 	bl	8024374 <lfs_tag_type3>
 8025e3a:	4603      	mov	r3, r0
 8025e3c:	461a      	mov	r2, r3
 8025e3e:	f240 2301 	movw	r3, #513	@ 0x201
 8025e42:	429a      	cmp	r2, r3
 8025e44:	d106      	bne.n	8025e54 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8025e46:	69fb      	ldr	r3, [r7, #28]
 8025e48:	4618      	mov	r0, r3
 8025e4a:	f7fe facd 	bl	80243e8 <lfs_tag_size>
 8025e4e:	4602      	mov	r2, r0
 8025e50:	683b      	ldr	r3, [r7, #0]
 8025e52:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8025e54:	2300      	movs	r3, #0
}
 8025e56:	4618      	mov	r0, r3
 8025e58:	3720      	adds	r7, #32
 8025e5a:	46bd      	mov	sp, r7
 8025e5c:	bd80      	pop	{r7, pc}
 8025e5e:	bf00      	nop
 8025e60:	08033978 	.word	0x08033978
 8025e64:	780ffc00 	.word	0x780ffc00
 8025e68:	700ffc00 	.word	0x700ffc00

08025e6c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8025e6c:	b590      	push	{r4, r7, lr}
 8025e6e:	b08f      	sub	sp, #60	@ 0x3c
 8025e70:	af04      	add	r7, sp, #16
 8025e72:	60f8      	str	r0, [r7, #12]
 8025e74:	60b9      	str	r1, [r7, #8]
 8025e76:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8025e78:	68fb      	ldr	r3, [r7, #12]
 8025e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = name->lfs;
 8025e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e7e:	681b      	ldr	r3, [r3, #0]
 8025e80:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8025e82:	687b      	ldr	r3, [r7, #4]
 8025e84:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8025e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025e88:	689c      	ldr	r4, [r3, #8]
 8025e8a:	68b8      	ldr	r0, [r7, #8]
 8025e8c:	f7fe faac 	bl	80243e8 <lfs_tag_size>
 8025e90:	4603      	mov	r3, r0
 8025e92:	4619      	mov	r1, r3
 8025e94:	4620      	mov	r0, r4
 8025e96:	f7fd fd80 	bl	802399a <lfs_min>
 8025e9a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8025e9c:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8025e9e:	69fb      	ldr	r3, [r7, #28]
 8025ea0:	681b      	ldr	r3, [r3, #0]
 8025ea2:	69fa      	ldr	r2, [r7, #28]
 8025ea4:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8025ea6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8025ea8:	6849      	ldr	r1, [r1, #4]
 8025eaa:	69b8      	ldr	r0, [r7, #24]
 8025eac:	9003      	str	r0, [sp, #12]
 8025eae:	9102      	str	r1, [sp, #8]
 8025eb0:	9201      	str	r2, [sp, #4]
 8025eb2:	9300      	str	r3, [sp, #0]
 8025eb4:	69bb      	ldr	r3, [r7, #24]
 8025eb6:	4622      	mov	r2, r4
 8025eb8:	2100      	movs	r1, #0
 8025eba:	6a38      	ldr	r0, [r7, #32]
 8025ebc:	f7fd ff8c 	bl	8023dd8 <lfs_bd_cmp>
 8025ec0:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8025ec2:	697b      	ldr	r3, [r7, #20]
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	d001      	beq.n	8025ecc <lfs_dir_find_match+0x60>
        return res;
 8025ec8:	697b      	ldr	r3, [r7, #20]
 8025eca:	e014      	b.n	8025ef6 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8025ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025ece:	689c      	ldr	r4, [r3, #8]
 8025ed0:	68b8      	ldr	r0, [r7, #8]
 8025ed2:	f7fe fa89 	bl	80243e8 <lfs_tag_size>
 8025ed6:	4603      	mov	r3, r0
 8025ed8:	429c      	cmp	r4, r3
 8025eda:	d00b      	beq.n	8025ef4 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8025edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025ede:	689c      	ldr	r4, [r3, #8]
 8025ee0:	68b8      	ldr	r0, [r7, #8]
 8025ee2:	f7fe fa81 	bl	80243e8 <lfs_tag_size>
 8025ee6:	4603      	mov	r3, r0
 8025ee8:	429c      	cmp	r4, r3
 8025eea:	d201      	bcs.n	8025ef0 <lfs_dir_find_match+0x84>
 8025eec:	2301      	movs	r3, #1
 8025eee:	e002      	b.n	8025ef6 <lfs_dir_find_match+0x8a>
 8025ef0:	2302      	movs	r3, #2
 8025ef2:	e000      	b.n	8025ef6 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8025ef4:	2300      	movs	r3, #0
}
 8025ef6:	4618      	mov	r0, r3
 8025ef8:	372c      	adds	r7, #44	@ 0x2c
 8025efa:	46bd      	mov	sp, r7
 8025efc:	bd90      	pop	{r4, r7, pc}
	...

08025f00 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8025f00:	b590      	push	{r4, r7, lr}
 8025f02:	b093      	sub	sp, #76	@ 0x4c
 8025f04:	af04      	add	r7, sp, #16
 8025f06:	60f8      	str	r0, [r7, #12]
 8025f08:	60b9      	str	r1, [r7, #8]
 8025f0a:	607a      	str	r2, [r7, #4]
 8025f0c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8025f0e:	687b      	ldr	r3, [r7, #4]
 8025f10:	681b      	ldr	r3, [r3, #0]
 8025f12:	637b      	str	r3, [r7, #52]	@ 0x34
    if (id) {
 8025f14:	683b      	ldr	r3, [r7, #0]
 8025f16:	2b00      	cmp	r3, #0
 8025f18:	d003      	beq.n	8025f22 <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025f1a:	683b      	ldr	r3, [r7, #0]
 8025f1c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8025f20:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8025f22:	4b6e      	ldr	r3, [pc, #440]	@ (80260dc <lfs_dir_find+0x1dc>)
 8025f24:	633b      	str	r3, [r7, #48]	@ 0x30
    dir->tail[0] = lfs->root[0];
 8025f26:	68fb      	ldr	r3, [r7, #12]
 8025f28:	6a1a      	ldr	r2, [r3, #32]
 8025f2a:	68bb      	ldr	r3, [r7, #8]
 8025f2c:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025f2e:	68fb      	ldr	r3, [r7, #12]
 8025f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8025f32:	68bb      	ldr	r3, [r7, #8]
 8025f34:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8025f36:	496a      	ldr	r1, [pc, #424]	@ (80260e0 <lfs_dir_find+0x1e0>)
 8025f38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8025f3a:	f007 fe96 	bl	802dc6a <strspn>
 8025f3e:	4602      	mov	r2, r0
 8025f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025f42:	4413      	add	r3, r2
 8025f44:	637b      	str	r3, [r7, #52]	@ 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8025f46:	4966      	ldr	r1, [pc, #408]	@ (80260e0 <lfs_dir_find+0x1e0>)
 8025f48:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8025f4a:	f007 fe45 	bl	802dbd8 <strcspn>
 8025f4e:	6278      	str	r0, [r7, #36]	@ 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025f52:	2b01      	cmp	r3, #1
 8025f54:	d105      	bne.n	8025f62 <lfs_dir_find+0x62>
 8025f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025f58:	781a      	ldrb	r2, [r3, #0]
 8025f5a:	4b62      	ldr	r3, [pc, #392]	@ (80260e4 <lfs_dir_find+0x1e4>)
 8025f5c:	781b      	ldrb	r3, [r3, #0]
 8025f5e:	429a      	cmp	r2, r3
 8025f60:	d00a      	beq.n	8025f78 <lfs_dir_find+0x78>
 8025f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025f64:	2b02      	cmp	r3, #2
 8025f66:	d10c      	bne.n	8025f82 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025f68:	2202      	movs	r2, #2
 8025f6a:	495f      	ldr	r1, [pc, #380]	@ (80260e8 <lfs_dir_find+0x1e8>)
 8025f6c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8025f6e:	f007 fde5 	bl	802db3c <memcmp>
 8025f72:	4603      	mov	r3, r0
 8025f74:	2b00      	cmp	r3, #0
 8025f76:	d104      	bne.n	8025f82 <lfs_dir_find+0x82>
            name += namelen;
 8025f78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025f7c:	4413      	add	r3, r2
 8025f7e:	637b      	str	r3, [r7, #52]	@ 0x34
            goto nextname;
 8025f80:	e7d9      	b.n	8025f36 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8025f82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8025f86:	4413      	add	r3, r2
 8025f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025f8a:	2301      	movs	r3, #1
 8025f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025f8e:	4954      	ldr	r1, [pc, #336]	@ (80260e0 <lfs_dir_find+0x1e0>)
 8025f90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8025f92:	f007 fe6a 	bl	802dc6a <strspn>
 8025f96:	4602      	mov	r2, r0
 8025f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8025f9a:	4413      	add	r3, r2
 8025f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            sufflen = strcspn(suffix, "/");
 8025f9e:	4950      	ldr	r1, [pc, #320]	@ (80260e0 <lfs_dir_find+0x1e0>)
 8025fa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8025fa2:	f007 fe19 	bl	802dbd8 <strcspn>
 8025fa6:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025fa8:	6a3b      	ldr	r3, [r7, #32]
 8025faa:	2b00      	cmp	r3, #0
 8025fac:	d01d      	beq.n	8025fea <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025fae:	6a3b      	ldr	r3, [r7, #32]
 8025fb0:	2b02      	cmp	r3, #2
 8025fb2:	d112      	bne.n	8025fda <lfs_dir_find+0xda>
 8025fb4:	2202      	movs	r2, #2
 8025fb6:	494c      	ldr	r1, [pc, #304]	@ (80260e8 <lfs_dir_find+0x1e8>)
 8025fb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8025fba:	f007 fdbf 	bl	802db3c <memcmp>
 8025fbe:	4603      	mov	r3, r0
 8025fc0:	2b00      	cmp	r3, #0
 8025fc2:	d10a      	bne.n	8025fda <lfs_dir_find+0xda>
                depth -= 1;
 8025fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025fc6:	3b01      	subs	r3, #1
 8025fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (depth == 0) {
 8025fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025fcc:	2b00      	cmp	r3, #0
 8025fce:	d107      	bne.n	8025fe0 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8025fd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025fd2:	6a3b      	ldr	r3, [r7, #32]
 8025fd4:	4413      	add	r3, r2
 8025fd6:	637b      	str	r3, [r7, #52]	@ 0x34
                    goto nextname;
 8025fd8:	e7ad      	b.n	8025f36 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8025fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025fdc:	3301      	adds	r3, #1
 8025fde:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            suffix += sufflen;
 8025fe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8025fe2:	6a3b      	ldr	r3, [r7, #32]
 8025fe4:	4413      	add	r3, r2
 8025fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            suffix += strspn(suffix, "/");
 8025fe8:	e7d1      	b.n	8025f8e <lfs_dir_find+0x8e>
                break;
 8025fea:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8025fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8025fee:	781b      	ldrb	r3, [r3, #0]
 8025ff0:	2b00      	cmp	r3, #0
 8025ff2:	d101      	bne.n	8025ff8 <lfs_dir_find+0xf8>
            return tag;
 8025ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8025ff6:	e06c      	b.n	80260d2 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8025ff8:	687b      	ldr	r3, [r7, #4]
 8025ffa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8025ffc:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8025ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026000:	4618      	mov	r0, r3
 8026002:	f7fe f9b7 	bl	8024374 <lfs_tag_type3>
 8026006:	4603      	mov	r3, r0
 8026008:	2b02      	cmp	r3, #2
 802600a:	d002      	beq.n	8026012 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 802600c:	f06f 0313 	mvn.w	r3, #19
 8026010:	e05f      	b.n	80260d2 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8026012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026014:	4618      	mov	r0, r3
 8026016:	f7fe f9d7 	bl	80243c8 <lfs_tag_id>
 802601a:	4603      	mov	r3, r0
 802601c:	461a      	mov	r2, r3
 802601e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8026022:	429a      	cmp	r2, r3
 8026024:	d01c      	beq.n	8026060 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8026026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026028:	4618      	mov	r0, r3
 802602a:	f7fe f9cd 	bl	80243c8 <lfs_tag_id>
 802602e:	4603      	mov	r3, r0
 8026030:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8026032:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8026036:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 802603a:	68ba      	ldr	r2, [r7, #8]
 802603c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 802603e:	9200      	str	r2, [sp, #0]
 8026040:	4a2a      	ldr	r2, [pc, #168]	@ (80260ec <lfs_dir_find+0x1ec>)
 8026042:	68b9      	ldr	r1, [r7, #8]
 8026044:	68f8      	ldr	r0, [r7, #12]
 8026046:	f7fe fda9 	bl	8024b9c <lfs_dir_get>
 802604a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 802604c:	69fb      	ldr	r3, [r7, #28]
 802604e:	2b00      	cmp	r3, #0
 8026050:	da01      	bge.n	8026056 <lfs_dir_find+0x156>
                return res;
 8026052:	69fb      	ldr	r3, [r7, #28]
 8026054:	e03d      	b.n	80260d2 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8026056:	68bb      	ldr	r3, [r7, #8]
 8026058:	3318      	adds	r3, #24
 802605a:	4618      	mov	r0, r3
 802605c:	f7fe f925 	bl	80242aa <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8026060:	68bb      	ldr	r3, [r7, #8]
 8026062:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8026066:	212f      	movs	r1, #47	@ 0x2f
 8026068:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 802606a:	f007 fda8 	bl	802dbbe <strchr>
 802606e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8026070:	2b00      	cmp	r3, #0
 8026072:	d101      	bne.n	8026078 <lfs_dir_find+0x178>
 8026074:	683b      	ldr	r3, [r7, #0]
 8026076:	e000      	b.n	802607a <lfs_dir_find+0x17a>
 8026078:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 802607a:	68fa      	ldr	r2, [r7, #12]
 802607c:	613a      	str	r2, [r7, #16]
 802607e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8026080:	617a      	str	r2, [r7, #20]
 8026082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026084:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8026086:	f107 0210 	add.w	r2, r7, #16
 802608a:	9203      	str	r2, [sp, #12]
 802608c:	4a18      	ldr	r2, [pc, #96]	@ (80260f0 <lfs_dir_find+0x1f0>)
 802608e:	9202      	str	r2, [sp, #8]
 8026090:	9301      	str	r3, [sp, #4]
 8026092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026094:	9300      	str	r3, [sp, #0]
 8026096:	f04f 43f0 	mov.w	r3, #2013265920	@ 0x78000000
 802609a:	4622      	mov	r2, r4
 802609c:	68b9      	ldr	r1, [r7, #8]
 802609e:	68f8      	ldr	r0, [r7, #12]
 80260a0:	f7ff faae 	bl	8025600 <lfs_dir_fetchmatch>
 80260a4:	6338      	str	r0, [r7, #48]	@ 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 80260a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80260a8:	2b00      	cmp	r3, #0
 80260aa:	da01      	bge.n	80260b0 <lfs_dir_find+0x1b0>
                return tag;
 80260ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80260ae:	e010      	b.n	80260d2 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 80260b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80260b2:	2b00      	cmp	r3, #0
 80260b4:	d004      	beq.n	80260c0 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 80260b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80260b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80260ba:	4413      	add	r3, r2
 80260bc:	637b      	str	r3, [r7, #52]	@ 0x34
    while (true) {
 80260be:	e73a      	b.n	8025f36 <lfs_dir_find+0x36>
            if (!dir->split) {
 80260c0:	68bb      	ldr	r3, [r7, #8]
 80260c2:	7ddb      	ldrb	r3, [r3, #23]
 80260c4:	f083 0301 	eor.w	r3, r3, #1
 80260c8:	b2db      	uxtb	r3, r3
 80260ca:	2b00      	cmp	r3, #0
 80260cc:	d0c8      	beq.n	8026060 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 80260ce:	f06f 0301 	mvn.w	r3, #1
    }
}
 80260d2:	4618      	mov	r0, r3
 80260d4:	373c      	adds	r7, #60	@ 0x3c
 80260d6:	46bd      	mov	sp, r7
 80260d8:	bd90      	pop	{r4, r7, pc}
 80260da:	bf00      	nop
 80260dc:	002ffc00 	.word	0x002ffc00
 80260e0:	08033978 	.word	0x08033978
 80260e4:	0803397c 	.word	0x0803397c
 80260e8:	08033980 	.word	0x08033980
 80260ec:	700ffc00 	.word	0x700ffc00
 80260f0:	08025e6d 	.word	0x08025e6d

080260f4 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 80260f4:	b590      	push	{r4, r7, lr}
 80260f6:	b08b      	sub	sp, #44	@ 0x2c
 80260f8:	af04      	add	r7, sp, #16
 80260fa:	60f8      	str	r0, [r7, #12]
 80260fc:	60b9      	str	r1, [r7, #8]
 80260fe:	607a      	str	r2, [r7, #4]
 8026100:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8026102:	68fb      	ldr	r3, [r7, #12]
 8026104:	f103 0010 	add.w	r0, r3, #16
 8026108:	68fc      	ldr	r4, [r7, #12]
 802610a:	68bb      	ldr	r3, [r7, #8]
 802610c:	681b      	ldr	r3, [r3, #0]
 802610e:	68ba      	ldr	r2, [r7, #8]
 8026110:	6852      	ldr	r2, [r2, #4]
 8026112:	6839      	ldr	r1, [r7, #0]
 8026114:	9103      	str	r1, [sp, #12]
 8026116:	6879      	ldr	r1, [r7, #4]
 8026118:	9102      	str	r1, [sp, #8]
 802611a:	9201      	str	r2, [sp, #4]
 802611c:	9300      	str	r3, [sp, #0]
 802611e:	2300      	movs	r3, #0
 8026120:	4622      	mov	r2, r4
 8026122:	4601      	mov	r1, r0
 8026124:	68f8      	ldr	r0, [r7, #12]
 8026126:	f7fd ff59 	bl	8023fdc <lfs_bd_prog>
 802612a:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 802612c:	697b      	ldr	r3, [r7, #20]
 802612e:	2b00      	cmp	r3, #0
 8026130:	d001      	beq.n	8026136 <lfs_dir_commitprog+0x42>
        return err;
 8026132:	697b      	ldr	r3, [r7, #20]
 8026134:	e010      	b.n	8026158 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8026136:	68bb      	ldr	r3, [r7, #8]
 8026138:	68db      	ldr	r3, [r3, #12]
 802613a:	683a      	ldr	r2, [r7, #0]
 802613c:	6879      	ldr	r1, [r7, #4]
 802613e:	4618      	mov	r0, r3
 8026140:	f004 fee2 	bl	802af08 <lfs_crc>
 8026144:	4602      	mov	r2, r0
 8026146:	68bb      	ldr	r3, [r7, #8]
 8026148:	60da      	str	r2, [r3, #12]
    commit->off += size;
 802614a:	68bb      	ldr	r3, [r7, #8]
 802614c:	685a      	ldr	r2, [r3, #4]
 802614e:	683b      	ldr	r3, [r7, #0]
 8026150:	441a      	add	r2, r3
 8026152:	68bb      	ldr	r3, [r7, #8]
 8026154:	605a      	str	r2, [r3, #4]
    return 0;
 8026156:	2300      	movs	r3, #0
}
 8026158:	4618      	mov	r0, r3
 802615a:	371c      	adds	r7, #28
 802615c:	46bd      	mov	sp, r7
 802615e:	bd90      	pop	{r4, r7, pc}

08026160 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8026160:	b590      	push	{r4, r7, lr}
 8026162:	b08f      	sub	sp, #60	@ 0x3c
 8026164:	af04      	add	r7, sp, #16
 8026166:	60f8      	str	r0, [r7, #12]
 8026168:	60b9      	str	r1, [r7, #8]
 802616a:	607a      	str	r2, [r7, #4]
 802616c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 802616e:	6878      	ldr	r0, [r7, #4]
 8026170:	f7fe f947 	bl	8024402 <lfs_tag_dsize>
 8026174:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8026176:	68bb      	ldr	r3, [r7, #8]
 8026178:	685a      	ldr	r2, [r3, #4]
 802617a:	6a3b      	ldr	r3, [r7, #32]
 802617c:	441a      	add	r2, r3
 802617e:	68bb      	ldr	r3, [r7, #8]
 8026180:	695b      	ldr	r3, [r3, #20]
 8026182:	429a      	cmp	r2, r3
 8026184:	d902      	bls.n	802618c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8026186:	f06f 031b 	mvn.w	r3, #27
 802618a:	e065      	b.n	8026258 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 802618c:	687b      	ldr	r3, [r7, #4]
 802618e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8026192:	68bb      	ldr	r3, [r7, #8]
 8026194:	689b      	ldr	r3, [r3, #8]
 8026196:	4053      	eors	r3, r2
 8026198:	4618      	mov	r0, r3
 802619a:	f7fd fc91 	bl	8023ac0 <lfs_tobe32>
 802619e:	4603      	mov	r3, r0
 80261a0:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80261a2:	f107 0214 	add.w	r2, r7, #20
 80261a6:	2304      	movs	r3, #4
 80261a8:	68b9      	ldr	r1, [r7, #8]
 80261aa:	68f8      	ldr	r0, [r7, #12]
 80261ac:	f7ff ffa2 	bl	80260f4 <lfs_dir_commitprog>
 80261b0:	61f8      	str	r0, [r7, #28]
    if (err) {
 80261b2:	69fb      	ldr	r3, [r7, #28]
 80261b4:	2b00      	cmp	r3, #0
 80261b6:	d001      	beq.n	80261bc <lfs_dir_commitattr+0x5c>
        return err;
 80261b8:	69fb      	ldr	r3, [r7, #28]
 80261ba:	e04d      	b.n	8026258 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80261bc:	687b      	ldr	r3, [r7, #4]
 80261be:	2b00      	cmp	r3, #0
 80261c0:	db0c      	blt.n	80261dc <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80261c2:	6a3b      	ldr	r3, [r7, #32]
 80261c4:	3b04      	subs	r3, #4
 80261c6:	683a      	ldr	r2, [r7, #0]
 80261c8:	68b9      	ldr	r1, [r7, #8]
 80261ca:	68f8      	ldr	r0, [r7, #12]
 80261cc:	f7ff ff92 	bl	80260f4 <lfs_dir_commitprog>
 80261d0:	61f8      	str	r0, [r7, #28]
        if (err) {
 80261d2:	69fb      	ldr	r3, [r7, #28]
 80261d4:	2b00      	cmp	r3, #0
 80261d6:	d039      	beq.n	802624c <lfs_dir_commitattr+0xec>
            return err;
 80261d8:	69fb      	ldr	r3, [r7, #28]
 80261da:	e03d      	b.n	8026258 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80261dc:	683b      	ldr	r3, [r7, #0]
 80261de:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80261e0:	2300      	movs	r3, #0
 80261e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80261e4:	e02d      	b.n	8026242 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80261e6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80261e8:	6a3a      	ldr	r2, [r7, #32]
 80261ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80261ec:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80261ee:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80261f0:	69bb      	ldr	r3, [r7, #24]
 80261f2:	681b      	ldr	r3, [r3, #0]
 80261f4:	69ba      	ldr	r2, [r7, #24]
 80261f6:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80261f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80261fa:	440a      	add	r2, r1
 80261fc:	2101      	movs	r1, #1
 80261fe:	9103      	str	r1, [sp, #12]
 8026200:	f107 0113 	add.w	r1, r7, #19
 8026204:	9102      	str	r1, [sp, #8]
 8026206:	9201      	str	r2, [sp, #4]
 8026208:	9300      	str	r3, [sp, #0]
 802620a:	4623      	mov	r3, r4
 802620c:	4602      	mov	r2, r0
 802620e:	2100      	movs	r1, #0
 8026210:	68f8      	ldr	r0, [r7, #12]
 8026212:	f7fd fc9d 	bl	8023b50 <lfs_bd_read>
 8026216:	61f8      	str	r0, [r7, #28]
            if (err) {
 8026218:	69fb      	ldr	r3, [r7, #28]
 802621a:	2b00      	cmp	r3, #0
 802621c:	d001      	beq.n	8026222 <lfs_dir_commitattr+0xc2>
                return err;
 802621e:	69fb      	ldr	r3, [r7, #28]
 8026220:	e01a      	b.n	8026258 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8026222:	f107 0213 	add.w	r2, r7, #19
 8026226:	2301      	movs	r3, #1
 8026228:	68b9      	ldr	r1, [r7, #8]
 802622a:	68f8      	ldr	r0, [r7, #12]
 802622c:	f7ff ff62 	bl	80260f4 <lfs_dir_commitprog>
 8026230:	61f8      	str	r0, [r7, #28]
            if (err) {
 8026232:	69fb      	ldr	r3, [r7, #28]
 8026234:	2b00      	cmp	r3, #0
 8026236:	d001      	beq.n	802623c <lfs_dir_commitattr+0xdc>
                return err;
 8026238:	69fb      	ldr	r3, [r7, #28]
 802623a:	e00d      	b.n	8026258 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 802623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802623e:	3301      	adds	r3, #1
 8026240:	627b      	str	r3, [r7, #36]	@ 0x24
 8026242:	6a3b      	ldr	r3, [r7, #32]
 8026244:	3b04      	subs	r3, #4
 8026246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8026248:	429a      	cmp	r2, r3
 802624a:	d3cc      	bcc.n	80261e6 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 802624c:	687b      	ldr	r3, [r7, #4]
 802624e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8026252:	68bb      	ldr	r3, [r7, #8]
 8026254:	609a      	str	r2, [r3, #8]
    return 0;
 8026256:	2300      	movs	r3, #0
}
 8026258:	4618      	mov	r0, r3
 802625a:	372c      	adds	r7, #44	@ 0x2c
 802625c:	46bd      	mov	sp, r7
 802625e:	bd90      	pop	{r4, r7, pc}

08026260 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8026260:	b590      	push	{r4, r7, lr}
 8026262:	b097      	sub	sp, #92	@ 0x5c
 8026264:	af04      	add	r7, sp, #16
 8026266:	6078      	str	r0, [r7, #4]
 8026268:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 802626a:	683b      	ldr	r3, [r7, #0]
 802626c:	685b      	ldr	r3, [r3, #4]
 802626e:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026276:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8026278:	4619      	mov	r1, r3
 802627a:	4610      	mov	r0, r2
 802627c:	f7fd fbb2 	bl	80239e4 <lfs_alignup>
 8026280:	62b8      	str	r0, [r7, #40]	@ 0x28

    lfs_off_t off1 = 0;
 8026282:	2300      	movs	r3, #0
 8026284:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t crc1 = 0;
 8026286:	2300      	movs	r3, #0
 8026288:	643b      	str	r3, [r7, #64]	@ 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 802628a:	e0a6      	b.n	80263da <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 802628c:	683b      	ldr	r3, [r7, #0]
 802628e:	685b      	ldr	r3, [r3, #4]
 8026290:	3304      	adds	r3, #4
 8026292:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8026294:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8026296:	6a3b      	ldr	r3, [r7, #32]
 8026298:	1ad3      	subs	r3, r2, r3
 802629a:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 802629e:	4618      	mov	r0, r3
 80262a0:	f7fd fb7b 	bl	802399a <lfs_min>
 80262a4:	4602      	mov	r2, r0
 80262a6:	6a3b      	ldr	r3, [r7, #32]
 80262a8:	4413      	add	r3, r2
 80262aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (noff < end) {
 80262ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80262ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80262b0:	429a      	cmp	r2, r3
 80262b2:	d206      	bcs.n	80262c2 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80262b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80262b6:	3b08      	subs	r3, #8
 80262b8:	4619      	mov	r1, r3
 80262ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80262bc:	f7fd fb6d 	bl	802399a <lfs_min>
 80262c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80262c2:	f04f 33ff 	mov.w	r3, #4294967295
 80262c6:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80262c8:	6879      	ldr	r1, [r7, #4]
 80262ca:	683b      	ldr	r3, [r7, #0]
 80262cc:	681b      	ldr	r3, [r3, #0]
 80262ce:	2204      	movs	r2, #4
 80262d0:	9203      	str	r2, [sp, #12]
 80262d2:	f107 0214 	add.w	r2, r7, #20
 80262d6:	9202      	str	r2, [sp, #8]
 80262d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80262da:	9201      	str	r2, [sp, #4]
 80262dc:	9300      	str	r3, [sp, #0]
 80262de:	2304      	movs	r3, #4
 80262e0:	460a      	mov	r2, r1
 80262e2:	2100      	movs	r1, #0
 80262e4:	6878      	ldr	r0, [r7, #4]
 80262e6:	f7fd fc33 	bl	8023b50 <lfs_bd_read>
 80262ea:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 80262ec:	69fb      	ldr	r3, [r7, #28]
 80262ee:	2b00      	cmp	r3, #0
 80262f0:	d005      	beq.n	80262fe <lfs_dir_commitcrc+0x9e>
 80262f2:	69fb      	ldr	r3, [r7, #28]
 80262f4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80262f8:	d001      	beq.n	80262fe <lfs_dir_commitcrc+0x9e>
            return err;
 80262fa:	69fb      	ldr	r3, [r7, #28]
 80262fc:	e0e8      	b.n	80264d0 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 80262fe:	697b      	ldr	r3, [r7, #20]
 8026300:	4618      	mov	r0, r3
 8026302:	f7fd fbd1 	bl	8023aa8 <lfs_frombe32>
 8026306:	4603      	mov	r3, r0
 8026308:	43db      	mvns	r3, r3
 802630a:	0fdb      	lsrs	r3, r3, #31
 802630c:	2b00      	cmp	r3, #0
 802630e:	bf14      	ite	ne
 8026310:	2301      	movne	r3, #1
 8026312:	2300      	moveq	r3, #0
 8026314:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8026316:	7efb      	ldrb	r3, [r7, #27]
 8026318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802631c:	051a      	lsls	r2, r3, #20
 802631e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8026320:	6a3b      	ldr	r3, [r7, #32]
 8026322:	1acb      	subs	r3, r1, r3
 8026324:	4313      	orrs	r3, r2
 8026326:	f443 237f 	orr.w	r3, r3, #1044480	@ 0xff000
 802632a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 802632e:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8026330:	683b      	ldr	r3, [r7, #0]
 8026332:	689a      	ldr	r2, [r3, #8]
 8026334:	697b      	ldr	r3, [r7, #20]
 8026336:	4053      	eors	r3, r2
 8026338:	4618      	mov	r0, r3
 802633a:	f7fd fbc1 	bl	8023ac0 <lfs_tobe32>
 802633e:	4603      	mov	r3, r0
 8026340:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8026342:	683b      	ldr	r3, [r7, #0]
 8026344:	68db      	ldr	r3, [r3, #12]
 8026346:	f107 010c 	add.w	r1, r7, #12
 802634a:	2204      	movs	r2, #4
 802634c:	4618      	mov	r0, r3
 802634e:	f004 fddb 	bl	802af08 <lfs_crc>
 8026352:	4602      	mov	r2, r0
 8026354:	683b      	ldr	r3, [r7, #0]
 8026356:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8026358:	683b      	ldr	r3, [r7, #0]
 802635a:	68db      	ldr	r3, [r3, #12]
 802635c:	4618      	mov	r0, r3
 802635e:	f7fd fb97 	bl	8023a90 <lfs_tole32>
 8026362:	4603      	mov	r3, r0
 8026364:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8026366:	687b      	ldr	r3, [r7, #4]
 8026368:	f103 0010 	add.w	r0, r3, #16
 802636c:	687c      	ldr	r4, [r7, #4]
 802636e:	683b      	ldr	r3, [r7, #0]
 8026370:	681b      	ldr	r3, [r3, #0]
 8026372:	683a      	ldr	r2, [r7, #0]
 8026374:	6852      	ldr	r2, [r2, #4]
 8026376:	2108      	movs	r1, #8
 8026378:	9103      	str	r1, [sp, #12]
 802637a:	f107 010c 	add.w	r1, r7, #12
 802637e:	9102      	str	r1, [sp, #8]
 8026380:	9201      	str	r2, [sp, #4]
 8026382:	9300      	str	r3, [sp, #0]
 8026384:	2300      	movs	r3, #0
 8026386:	4622      	mov	r2, r4
 8026388:	4601      	mov	r1, r0
 802638a:	6878      	ldr	r0, [r7, #4]
 802638c:	f7fd fe26 	bl	8023fdc <lfs_bd_prog>
 8026390:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8026392:	69fb      	ldr	r3, [r7, #28]
 8026394:	2b00      	cmp	r3, #0
 8026396:	d001      	beq.n	802639c <lfs_dir_commitcrc+0x13c>
            return err;
 8026398:	69fb      	ldr	r3, [r7, #28]
 802639a:	e099      	b.n	80264d0 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 802639c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802639e:	2b00      	cmp	r3, #0
 80263a0:	d106      	bne.n	80263b0 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 80263a2:	683b      	ldr	r3, [r7, #0]
 80263a4:	685b      	ldr	r3, [r3, #4]
 80263a6:	3304      	adds	r3, #4
 80263a8:	647b      	str	r3, [r7, #68]	@ 0x44
            crc1 = commit->crc;
 80263aa:	683b      	ldr	r3, [r7, #0]
 80263ac:	68db      	ldr	r3, [r3, #12]
 80263ae:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80263b0:	697b      	ldr	r3, [r7, #20]
 80263b2:	4618      	mov	r0, r3
 80263b4:	f7fe f818 	bl	80243e8 <lfs_tag_size>
 80263b8:	4603      	mov	r3, r0
 80263ba:	1d1a      	adds	r2, r3, #4
 80263bc:	683b      	ldr	r3, [r7, #0]
 80263be:	685b      	ldr	r3, [r3, #4]
 80263c0:	441a      	add	r2, r3
 80263c2:	683b      	ldr	r3, [r7, #0]
 80263c4:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80263c6:	7efb      	ldrb	r3, [r7, #27]
 80263c8:	07da      	lsls	r2, r3, #31
 80263ca:	697b      	ldr	r3, [r7, #20]
 80263cc:	405a      	eors	r2, r3
 80263ce:	683b      	ldr	r3, [r7, #0]
 80263d0:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80263d2:	683b      	ldr	r3, [r7, #0]
 80263d4:	f04f 32ff 	mov.w	r2, #4294967295
 80263d8:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80263da:	683b      	ldr	r3, [r7, #0]
 80263dc:	685b      	ldr	r3, [r3, #4]
 80263de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80263e0:	429a      	cmp	r2, r3
 80263e2:	f63f af53 	bhi.w	802628c <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80263e6:	687b      	ldr	r3, [r7, #4]
 80263e8:	f103 0110 	add.w	r1, r3, #16
 80263ec:	687a      	ldr	r2, [r7, #4]
 80263ee:	2300      	movs	r3, #0
 80263f0:	6878      	ldr	r0, [r7, #4]
 80263f2:	f7fd fdbf 	bl	8023f74 <lfs_bd_sync>
 80263f6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 80263f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80263fa:	2b00      	cmp	r3, #0
 80263fc:	d001      	beq.n	8026402 <lfs_dir_commitcrc+0x1a2>
        return err;
 80263fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026400:	e066      	b.n	80264d0 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8026402:	683b      	ldr	r3, [r7, #0]
 8026404:	691b      	ldr	r3, [r3, #16]
 8026406:	63bb      	str	r3, [r7, #56]	@ 0x38
    lfs_off_t noff = off1;
 8026408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802640a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (off < end) {
 802640c:	e05b      	b.n	80264c6 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 802640e:	f04f 33ff 	mov.w	r3, #4294967295
 8026412:	633b      	str	r3, [r7, #48]	@ 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8026414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8026418:	e030      	b.n	802647c <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 802641a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802641c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802641e:	429a      	cmp	r2, r3
 8026420:	d106      	bne.n	8026430 <lfs_dir_commitcrc+0x1d0>
 8026422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8026424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026426:	429a      	cmp	r2, r3
 8026428:	d002      	beq.n	8026430 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 802642a:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 802642e:	e04f      	b.n	80264d0 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8026430:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8026432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8026434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026436:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8026438:	1d18      	adds	r0, r3, #4
 802643a:	683b      	ldr	r3, [r7, #0]
 802643c:	681b      	ldr	r3, [r3, #0]
 802643e:	2201      	movs	r2, #1
 8026440:	9203      	str	r2, [sp, #12]
 8026442:	f107 020b 	add.w	r2, r7, #11
 8026446:	9202      	str	r2, [sp, #8]
 8026448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802644a:	9201      	str	r2, [sp, #4]
 802644c:	9300      	str	r3, [sp, #0]
 802644e:	4603      	mov	r3, r0
 8026450:	460a      	mov	r2, r1
 8026452:	2100      	movs	r1, #0
 8026454:	6878      	ldr	r0, [r7, #4]
 8026456:	f7fd fb7b 	bl	8023b50 <lfs_bd_read>
 802645a:	6278      	str	r0, [r7, #36]	@ 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 802645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802645e:	2b00      	cmp	r3, #0
 8026460:	d001      	beq.n	8026466 <lfs_dir_commitcrc+0x206>
                return err;
 8026462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026464:	e034      	b.n	80264d0 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8026466:	f107 030b 	add.w	r3, r7, #11
 802646a:	2201      	movs	r2, #1
 802646c:	4619      	mov	r1, r3
 802646e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8026470:	f004 fd4a 	bl	802af08 <lfs_crc>
 8026474:	6338      	str	r0, [r7, #48]	@ 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8026476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026478:	3301      	adds	r3, #1
 802647a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802647c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802647e:	3304      	adds	r3, #4
 8026480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026482:	429a      	cmp	r2, r3
 8026484:	d3c9      	bcc.n	802641a <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8026486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8026488:	2b00      	cmp	r3, #0
 802648a:	d002      	beq.n	8026492 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 802648c:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8026490:	e01e      	b.n	80264d0 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8026492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8026494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026496:	1ad3      	subs	r3, r2, r3
 8026498:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 802649c:	4618      	mov	r0, r3
 802649e:	f7fd fa7c 	bl	802399a <lfs_min>
 80264a2:	4602      	mov	r2, r0
 80264a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80264a6:	4413      	add	r3, r2
 80264a8:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (off < end) {
 80264aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80264ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80264ae:	429a      	cmp	r2, r3
 80264b0:	d206      	bcs.n	80264c0 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80264b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80264b4:	3b08      	subs	r3, #8
 80264b6:	4619      	mov	r1, r3
 80264b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80264ba:	f7fd fa6e 	bl	802399a <lfs_min>
 80264be:	63b8      	str	r0, [r7, #56]	@ 0x38
        }
        noff = off + sizeof(uint32_t);
 80264c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80264c2:	3304      	adds	r3, #4
 80264c4:	637b      	str	r3, [r7, #52]	@ 0x34
    while (off < end) {
 80264c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80264c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80264ca:	429a      	cmp	r2, r3
 80264cc:	d39f      	bcc.n	802640e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80264ce:	2300      	movs	r3, #0
}
 80264d0:	4618      	mov	r0, r3
 80264d2:	374c      	adds	r7, #76	@ 0x4c
 80264d4:	46bd      	mov	sp, r7
 80264d6:	bd90      	pop	{r4, r7, pc}

080264d8 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80264d8:	b580      	push	{r7, lr}
 80264da:	b08a      	sub	sp, #40	@ 0x28
 80264dc:	af04      	add	r7, sp, #16
 80264de:	6078      	str	r0, [r7, #4]
 80264e0:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80264e2:	2300      	movs	r3, #0
 80264e4:	617b      	str	r3, [r7, #20]
 80264e6:	e016      	b.n	8026516 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80264e8:	697b      	ldr	r3, [r7, #20]
 80264ea:	3301      	adds	r3, #1
 80264ec:	2b00      	cmp	r3, #0
 80264ee:	f003 0301 	and.w	r3, r3, #1
 80264f2:	bfb8      	it	lt
 80264f4:	425b      	neglt	r3, r3
 80264f6:	009b      	lsls	r3, r3, #2
 80264f8:	683a      	ldr	r2, [r7, #0]
 80264fa:	4413      	add	r3, r2
 80264fc:	4619      	mov	r1, r3
 80264fe:	6878      	ldr	r0, [r7, #4]
 8026500:	f7fe f9b2 	bl	8024868 <lfs_alloc>
 8026504:	60f8      	str	r0, [r7, #12]
        if (err) {
 8026506:	68fb      	ldr	r3, [r7, #12]
 8026508:	2b00      	cmp	r3, #0
 802650a:	d001      	beq.n	8026510 <lfs_dir_alloc+0x38>
            return err;
 802650c:	68fb      	ldr	r3, [r7, #12]
 802650e:	e058      	b.n	80265c2 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8026510:	697b      	ldr	r3, [r7, #20]
 8026512:	3301      	adds	r3, #1
 8026514:	617b      	str	r3, [r7, #20]
 8026516:	697b      	ldr	r3, [r7, #20]
 8026518:	2b01      	cmp	r3, #1
 802651a:	dde5      	ble.n	80264e8 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 802651c:	683b      	ldr	r3, [r7, #0]
 802651e:	2200      	movs	r2, #0
 8026520:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 8026522:	6879      	ldr	r1, [r7, #4]
 8026524:	683b      	ldr	r3, [r7, #0]
 8026526:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8026528:	683a      	ldr	r2, [r7, #0]
 802652a:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 802652c:	2004      	movs	r0, #4
 802652e:	9003      	str	r0, [sp, #12]
 8026530:	9202      	str	r2, [sp, #8]
 8026532:	2200      	movs	r2, #0
 8026534:	9201      	str	r2, [sp, #4]
 8026536:	9300      	str	r3, [sp, #0]
 8026538:	2304      	movs	r3, #4
 802653a:	460a      	mov	r2, r1
 802653c:	2100      	movs	r1, #0
 802653e:	6878      	ldr	r0, [r7, #4]
 8026540:	f7fd fb06 	bl	8023b50 <lfs_bd_read>
 8026544:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 8026546:	683b      	ldr	r3, [r7, #0]
 8026548:	689b      	ldr	r3, [r3, #8]
 802654a:	4618      	mov	r0, r3
 802654c:	f7fd fa95 	bl	8023a7a <lfs_fromle32>
 8026550:	4602      	mov	r2, r0
 8026552:	683b      	ldr	r3, [r7, #0]
 8026554:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 8026556:	693b      	ldr	r3, [r7, #16]
 8026558:	2b00      	cmp	r3, #0
 802655a:	d005      	beq.n	8026568 <lfs_dir_alloc+0x90>
 802655c:	693b      	ldr	r3, [r7, #16]
 802655e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8026562:	d001      	beq.n	8026568 <lfs_dir_alloc+0x90>
        return err;
 8026564:	693b      	ldr	r3, [r7, #16]
 8026566:	e02c      	b.n	80265c2 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8026568:	687b      	ldr	r3, [r7, #4]
 802656a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802656c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802656e:	2b00      	cmp	r3, #0
 8026570:	dd0e      	ble.n	8026590 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 8026572:	683b      	ldr	r3, [r7, #0]
 8026574:	689a      	ldr	r2, [r3, #8]
 8026576:	687b      	ldr	r3, [r7, #4]
 8026578:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802657c:	3301      	adds	r3, #1
 802657e:	f043 0301 	orr.w	r3, r3, #1
 8026582:	4619      	mov	r1, r3
 8026584:	4610      	mov	r0, r2
 8026586:	f7fd fa2d 	bl	80239e4 <lfs_alignup>
 802658a:	4602      	mov	r2, r0
 802658c:	683b      	ldr	r3, [r7, #0]
 802658e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8026590:	683b      	ldr	r3, [r7, #0]
 8026592:	2204      	movs	r2, #4
 8026594:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 8026596:	683b      	ldr	r3, [r7, #0]
 8026598:	f04f 32ff 	mov.w	r2, #4294967295
 802659c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 802659e:	683b      	ldr	r3, [r7, #0]
 80265a0:	2200      	movs	r2, #0
 80265a2:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80265a4:	683b      	ldr	r3, [r7, #0]
 80265a6:	f04f 32ff 	mov.w	r2, #4294967295
 80265aa:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80265ac:	683b      	ldr	r3, [r7, #0]
 80265ae:	f04f 32ff 	mov.w	r2, #4294967295
 80265b2:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80265b4:	683b      	ldr	r3, [r7, #0]
 80265b6:	2200      	movs	r2, #0
 80265b8:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80265ba:	683b      	ldr	r3, [r7, #0]
 80265bc:	2200      	movs	r2, #0
 80265be:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80265c0:	2300      	movs	r3, #0
}
 80265c2:	4618      	mov	r0, r3
 80265c4:	3718      	adds	r7, #24
 80265c6:	46bd      	mov	sp, r7
 80265c8:	bd80      	pop	{r7, pc}
	...

080265cc <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80265cc:	b580      	push	{r7, lr}
 80265ce:	b08a      	sub	sp, #40	@ 0x28
 80265d0:	af00      	add	r7, sp, #0
 80265d2:	60f8      	str	r0, [r7, #12]
 80265d4:	60b9      	str	r1, [r7, #8]
 80265d6:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80265d8:	68fb      	ldr	r3, [r7, #12]
 80265da:	3348      	adds	r3, #72	@ 0x48
 80265dc:	461a      	mov	r2, r3
 80265de:	6879      	ldr	r1, [r7, #4]
 80265e0:	68f8      	ldr	r0, [r7, #12]
 80265e2:	f7ff fb97 	bl	8025d14 <lfs_dir_getgstate>
 80265e6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (err) {
 80265e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80265ea:	2b00      	cmp	r3, #0
 80265ec:	d001      	beq.n	80265f2 <lfs_dir_drop+0x26>
        return err;
 80265ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80265f0:	e022      	b.n	8026638 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 80265f2:	687b      	ldr	r3, [r7, #4]
 80265f4:	3318      	adds	r3, #24
 80265f6:	4618      	mov	r0, r3
 80265f8:	f7fd fe71 	bl	80242de <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80265fc:	687b      	ldr	r3, [r7, #4]
 80265fe:	7ddb      	ldrb	r3, [r3, #23]
 8026600:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8026604:	051a      	lsls	r2, r3, #20
 8026606:	4b0e      	ldr	r3, [pc, #56]	@ (8026640 <lfs_dir_drop+0x74>)
 8026608:	4313      	orrs	r3, r2
 802660a:	61fb      	str	r3, [r7, #28]
 802660c:	687b      	ldr	r3, [r7, #4]
 802660e:	3318      	adds	r3, #24
 8026610:	623b      	str	r3, [r7, #32]
 8026612:	f107 021c 	add.w	r2, r7, #28
 8026616:	2301      	movs	r3, #1
 8026618:	68b9      	ldr	r1, [r7, #8]
 802661a:	68f8      	ldr	r0, [r7, #12]
 802661c:	f001 f978 	bl	8027910 <lfs_dir_commit>
 8026620:	6278      	str	r0, [r7, #36]	@ 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 8026622:	687b      	ldr	r3, [r7, #4]
 8026624:	3318      	adds	r3, #24
 8026626:	4618      	mov	r0, r3
 8026628:	f7fd fe3f 	bl	80242aa <lfs_pair_fromle32>
    if (err) {
 802662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802662e:	2b00      	cmp	r3, #0
 8026630:	d001      	beq.n	8026636 <lfs_dir_drop+0x6a>
        return err;
 8026632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026634:	e000      	b.n	8026638 <lfs_dir_drop+0x6c>
    }

    return 0;
 8026636:	2300      	movs	r3, #0
}
 8026638:	4618      	mov	r0, r3
 802663a:	3728      	adds	r7, #40	@ 0x28
 802663c:	46bd      	mov	sp, r7
 802663e:	bd80      	pop	{r7, pc}
 8026640:	000ffc08 	.word	0x000ffc08

08026644 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 8026644:	b580      	push	{r7, lr}
 8026646:	b092      	sub	sp, #72	@ 0x48
 8026648:	af04      	add	r7, sp, #16
 802664a:	60f8      	str	r0, [r7, #12]
 802664c:	60b9      	str	r1, [r7, #8]
 802664e:	607a      	str	r2, [r7, #4]
 8026650:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 8026652:	f107 0310 	add.w	r3, r7, #16
 8026656:	4619      	mov	r1, r3
 8026658:	68f8      	ldr	r0, [r7, #12]
 802665a:	f7ff ff3d 	bl	80264d8 <lfs_dir_alloc>
 802665e:	6378      	str	r0, [r7, #52]	@ 0x34
    if (err) {
 8026660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026662:	2b00      	cmp	r3, #0
 8026664:	d001      	beq.n	802666a <lfs_dir_split+0x26>
        return err;
 8026666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8026668:	e03c      	b.n	80266e4 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 802666a:	68bb      	ldr	r3, [r7, #8]
 802666c:	7ddb      	ldrb	r3, [r3, #23]
 802666e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    tail.tail[0] = dir->tail[0];
 8026672:	68bb      	ldr	r3, [r7, #8]
 8026674:	699b      	ldr	r3, [r3, #24]
 8026676:	62bb      	str	r3, [r7, #40]	@ 0x28
    tail.tail[1] = dir->tail[1];
 8026678:	68bb      	ldr	r3, [r7, #8]
 802667a:	69db      	ldr	r3, [r3, #28]
 802667c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 802667e:	f107 0110 	add.w	r1, r7, #16
 8026682:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8026686:	9302      	str	r3, [sp, #8]
 8026688:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 802668c:	9301      	str	r3, [sp, #4]
 802668e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026690:	9300      	str	r3, [sp, #0]
 8026692:	683b      	ldr	r3, [r7, #0]
 8026694:	687a      	ldr	r2, [r7, #4]
 8026696:	68f8      	ldr	r0, [r7, #12]
 8026698:	f000 f87a 	bl	8026790 <lfs_dir_compact>
 802669c:	6338      	str	r0, [r7, #48]	@ 0x30
    if (res < 0) {
 802669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80266a0:	2b00      	cmp	r3, #0
 80266a2:	da01      	bge.n	80266a8 <lfs_dir_split+0x64>
        return res;
 80266a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80266a6:	e01d      	b.n	80266e4 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80266a8:	693a      	ldr	r2, [r7, #16]
 80266aa:	68bb      	ldr	r3, [r7, #8]
 80266ac:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80266ae:	697a      	ldr	r2, [r7, #20]
 80266b0:	68bb      	ldr	r3, [r7, #8]
 80266b2:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80266b4:	68bb      	ldr	r3, [r7, #8]
 80266b6:	2201      	movs	r2, #1
 80266b8:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80266ba:	68ba      	ldr	r2, [r7, #8]
 80266bc:	68fb      	ldr	r3, [r7, #12]
 80266be:	3320      	adds	r3, #32
 80266c0:	4619      	mov	r1, r3
 80266c2:	4610      	mov	r0, r2
 80266c4:	f7fd fd9a 	bl	80241fc <lfs_pair_cmp>
 80266c8:	4603      	mov	r3, r0
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	d109      	bne.n	80266e2 <lfs_dir_split+0x9e>
 80266ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80266d2:	2b00      	cmp	r3, #0
 80266d4:	d105      	bne.n	80266e2 <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80266d6:	693a      	ldr	r2, [r7, #16]
 80266d8:	68fb      	ldr	r3, [r7, #12]
 80266da:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80266dc:	697a      	ldr	r2, [r7, #20]
 80266de:	68fb      	ldr	r3, [r7, #12]
 80266e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    return 0;
 80266e2:	2300      	movs	r3, #0
}
 80266e4:	4618      	mov	r0, r3
 80266e6:	3738      	adds	r7, #56	@ 0x38
 80266e8:	46bd      	mov	sp, r7
 80266ea:	bd80      	pop	{r7, pc}

080266ec <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80266ec:	b580      	push	{r7, lr}
 80266ee:	b086      	sub	sp, #24
 80266f0:	af00      	add	r7, sp, #0
 80266f2:	60f8      	str	r0, [r7, #12]
 80266f4:	60b9      	str	r1, [r7, #8]
 80266f6:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80266f8:	68fb      	ldr	r3, [r7, #12]
 80266fa:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80266fc:	68b8      	ldr	r0, [r7, #8]
 80266fe:	f7fd fe80 	bl	8024402 <lfs_tag_dsize>
 8026702:	4602      	mov	r2, r0
 8026704:	697b      	ldr	r3, [r7, #20]
 8026706:	681b      	ldr	r3, [r3, #0]
 8026708:	441a      	add	r2, r3
 802670a:	697b      	ldr	r3, [r7, #20]
 802670c:	601a      	str	r2, [r3, #0]
    return 0;
 802670e:	2300      	movs	r3, #0
}
 8026710:	4618      	mov	r0, r3
 8026712:	3718      	adds	r7, #24
 8026714:	46bd      	mov	sp, r7
 8026716:	bd80      	pop	{r7, pc}

08026718 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8026718:	b580      	push	{r7, lr}
 802671a:	b086      	sub	sp, #24
 802671c:	af00      	add	r7, sp, #0
 802671e:	60f8      	str	r0, [r7, #12]
 8026720:	60b9      	str	r1, [r7, #8]
 8026722:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 8026724:	68fb      	ldr	r3, [r7, #12]
 8026726:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8026728:	697b      	ldr	r3, [r7, #20]
 802672a:	6818      	ldr	r0, [r3, #0]
 802672c:	697b      	ldr	r3, [r7, #20]
 802672e:	6859      	ldr	r1, [r3, #4]
 8026730:	687b      	ldr	r3, [r7, #4]
 8026732:	68ba      	ldr	r2, [r7, #8]
 8026734:	f7ff fd14 	bl	8026160 <lfs_dir_commitattr>
 8026738:	4603      	mov	r3, r0
}
 802673a:	4618      	mov	r0, r3
 802673c:	3718      	adds	r7, #24
 802673e:	46bd      	mov	sp, r7
 8026740:	bd80      	pop	{r7, pc}

08026742 <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 8026742:	b480      	push	{r7}
 8026744:	b083      	sub	sp, #12
 8026746:	af00      	add	r7, sp, #0
 8026748:	6078      	str	r0, [r7, #4]
 802674a:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 8026752:	2b00      	cmp	r3, #0
 8026754:	dd11      	ble.n	802677a <lfs_dir_needsrelocation+0x38>
 8026756:	683b      	ldr	r3, [r7, #0]
 8026758:	689b      	ldr	r3, [r3, #8]
 802675a:	3301      	adds	r3, #1
 802675c:	687a      	ldr	r2, [r7, #4]
 802675e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8026760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8026762:	3201      	adds	r2, #1
 8026764:	f042 0201 	orr.w	r2, r2, #1
 8026768:	fbb3 f1f2 	udiv	r1, r3, r2
 802676c:	fb01 f202 	mul.w	r2, r1, r2
 8026770:	1a9b      	subs	r3, r3, r2
 8026772:	2b00      	cmp	r3, #0
 8026774:	d101      	bne.n	802677a <lfs_dir_needsrelocation+0x38>
 8026776:	2301      	movs	r3, #1
 8026778:	e000      	b.n	802677c <lfs_dir_needsrelocation+0x3a>
 802677a:	2300      	movs	r3, #0
 802677c:	f003 0301 	and.w	r3, r3, #1
 8026780:	b2db      	uxtb	r3, r3
}
 8026782:	4618      	mov	r0, r3
 8026784:	370c      	adds	r7, #12
 8026786:	46bd      	mov	sp, r7
 8026788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802678c:	4770      	bx	lr
	...

08026790 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026790:	b580      	push	{r7, lr}
 8026792:	b0a4      	sub	sp, #144	@ 0x90
 8026794:	af0a      	add	r7, sp, #40	@ 0x28
 8026796:	60f8      	str	r0, [r7, #12]
 8026798:	60b9      	str	r1, [r7, #8]
 802679a:	607a      	str	r2, [r7, #4]
 802679c:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 802679e:	2300      	movs	r3, #0
 80267a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80267a4:	68b9      	ldr	r1, [r7, #8]
 80267a6:	68f8      	ldr	r0, [r7, #12]
 80267a8:	f7ff ffcb 	bl	8026742 <lfs_dir_needsrelocation>
 80267ac:	4603      	mov	r3, r0
 80267ae:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    // increment revision count
    dir->rev += 1;
 80267b2:	68bb      	ldr	r3, [r7, #8]
 80267b4:	689b      	ldr	r3, [r3, #8]
 80267b6:	1c5a      	adds	r2, r3, #1
 80267b8:	68bb      	ldr	r3, [r7, #8]
 80267ba:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80267bc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80267c0:	2b00      	cmp	r3, #0
 80267c2:	d00e      	beq.n	80267e2 <lfs_dir_compact+0x52>
 80267c4:	68bb      	ldr	r3, [r7, #8]
 80267c6:	2200      	movs	r2, #0
 80267c8:	657a      	str	r2, [r7, #84]	@ 0x54
 80267ca:	2201      	movs	r2, #1
 80267cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80267ce:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80267d2:	4611      	mov	r1, r2
 80267d4:	4618      	mov	r0, r3
 80267d6:	f7fd fd11 	bl	80241fc <lfs_pair_cmp>
 80267da:	4603      	mov	r3, r0
 80267dc:	2b00      	cmp	r3, #0
 80267de:	f040 8155 	bne.w	8026a8c <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80267e2:	68bb      	ldr	r3, [r7, #8]
 80267e4:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80267e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80267e8:	2300      	movs	r3, #0
 80267ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80267ec:	f04f 33ff 	mov.w	r3, #4294967295
 80267f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80267f2:	f04f 33ff 	mov.w	r3, #4294967295
 80267f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80267f8:	2300      	movs	r3, #0
 80267fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80267fc:	68fb      	ldr	r3, [r7, #12]
 80267fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026802:	2b00      	cmp	r3, #0
 8026804:	d004      	beq.n	8026810 <lfs_dir_compact+0x80>
 8026806:	68fb      	ldr	r3, [r7, #12]
 8026808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802680a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802680c:	3b08      	subs	r3, #8
 802680e:	e003      	b.n	8026818 <lfs_dir_compact+0x88>
 8026810:	68fb      	ldr	r3, [r7, #12]
 8026812:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026814:	69db      	ldr	r3, [r3, #28]
 8026816:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8026818:	653b      	str	r3, [r7, #80]	@ 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 802681a:	68bb      	ldr	r3, [r7, #8]
 802681c:	685b      	ldr	r3, [r3, #4]
 802681e:	4619      	mov	r1, r3
 8026820:	68f8      	ldr	r0, [r7, #12]
 8026822:	f7fd fc89 	bl	8024138 <lfs_bd_erase>
 8026826:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8026828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802682a:	2b00      	cmp	r3, #0
 802682c:	d006      	beq.n	802683c <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 802682e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026830:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8026834:	f000 812c 	beq.w	8026a90 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8026838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802683a:	e188      	b.n	8026b4e <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 802683c:	68bb      	ldr	r3, [r7, #8]
 802683e:	689b      	ldr	r3, [r3, #8]
 8026840:	4618      	mov	r0, r3
 8026842:	f7fd f925 	bl	8023a90 <lfs_tole32>
 8026846:	4602      	mov	r2, r0
 8026848:	68bb      	ldr	r3, [r7, #8]
 802684a:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 802684c:	68bb      	ldr	r3, [r7, #8]
 802684e:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8026852:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8026856:	2304      	movs	r3, #4
 8026858:	68f8      	ldr	r0, [r7, #12]
 802685a:	f7ff fc4b 	bl	80260f4 <lfs_dir_commitprog>
 802685e:	65f8      	str	r0, [r7, #92]	@ 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8026860:	68bb      	ldr	r3, [r7, #8]
 8026862:	689b      	ldr	r3, [r3, #8]
 8026864:	4618      	mov	r0, r3
 8026866:	f7fd f908 	bl	8023a7a <lfs_fromle32>
 802686a:	4602      	mov	r2, r0
 802686c:	68bb      	ldr	r3, [r7, #8]
 802686e:	609a      	str	r2, [r3, #8]
            if (err) {
 8026870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026872:	2b00      	cmp	r3, #0
 8026874:	d006      	beq.n	8026884 <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 8026876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026878:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 802687c:	f000 810a 	beq.w	8026a94 <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8026880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026882:	e164      	b.n	8026b4e <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8026884:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8026888:	425b      	negs	r3, r3
 802688a:	b29b      	uxth	r3, r3
 802688c:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 802688e:	68fa      	ldr	r2, [r7, #12]
 8026890:	637a      	str	r2, [r7, #52]	@ 0x34
 8026892:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8026896:	63ba      	str	r2, [r7, #56]	@ 0x38
            err = lfs_dir_traverse(lfs,
 8026898:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 802689c:	9208      	str	r2, [sp, #32]
 802689e:	4aae      	ldr	r2, [pc, #696]	@ (8026b58 <lfs_dir_compact+0x3c8>)
 80268a0:	9207      	str	r2, [sp, #28]
 80268a2:	9306      	str	r3, [sp, #24]
 80268a4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80268a8:	9305      	str	r3, [sp, #20]
 80268aa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80268ae:	9304      	str	r3, [sp, #16]
 80268b0:	2300      	movs	r3, #0
 80268b2:	9303      	str	r3, [sp, #12]
 80268b4:	4ba9      	ldr	r3, [pc, #676]	@ (8026b5c <lfs_dir_compact+0x3cc>)
 80268b6:	9302      	str	r3, [sp, #8]
 80268b8:	683b      	ldr	r3, [r7, #0]
 80268ba:	9301      	str	r3, [sp, #4]
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	9300      	str	r3, [sp, #0]
 80268c0:	f04f 33ff 	mov.w	r3, #4294967295
 80268c4:	2200      	movs	r2, #0
 80268c6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80268c8:	68f8      	ldr	r0, [r7, #12]
 80268ca:	f7fe fab9 	bl	8024e40 <lfs_dir_traverse>
 80268ce:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        lfs, &commit});
            if (err) {
 80268d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80268d2:	2b00      	cmp	r3, #0
 80268d4:	d006      	beq.n	80268e4 <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80268d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80268d8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80268dc:	f000 80dc 	beq.w	8026a98 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80268e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80268e2:	e134      	b.n	8026b4e <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80268e4:	68bb      	ldr	r3, [r7, #8]
 80268e6:	3318      	adds	r3, #24
 80268e8:	4618      	mov	r0, r3
 80268ea:	f7fd fc6c 	bl	80241c6 <lfs_pair_isnull>
 80268ee:	4603      	mov	r3, r0
 80268f0:	f083 0301 	eor.w	r3, r3, #1
 80268f4:	b2db      	uxtb	r3, r3
 80268f6:	2b00      	cmp	r3, #0
 80268f8:	d022      	beq.n	8026940 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80268fa:	68bb      	ldr	r3, [r7, #8]
 80268fc:	3318      	adds	r3, #24
 80268fe:	4618      	mov	r0, r3
 8026900:	f7fd fced 	bl	80242de <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8026904:	68bb      	ldr	r3, [r7, #8]
 8026906:	7ddb      	ldrb	r3, [r3, #23]
 8026908:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 802690c:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 802690e:	4a94      	ldr	r2, [pc, #592]	@ (8026b60 <lfs_dir_compact+0x3d0>)
 8026910:	431a      	orrs	r2, r3
                        dir->tail);
 8026912:	68bb      	ldr	r3, [r7, #8]
 8026914:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8026916:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 802691a:	68f8      	ldr	r0, [r7, #12]
 802691c:	f7ff fc20 	bl	8026160 <lfs_dir_commitattr>
 8026920:	65f8      	str	r0, [r7, #92]	@ 0x5c
                lfs_pair_fromle32(dir->tail);
 8026922:	68bb      	ldr	r3, [r7, #8]
 8026924:	3318      	adds	r3, #24
 8026926:	4618      	mov	r0, r3
 8026928:	f7fd fcbf 	bl	80242aa <lfs_pair_fromle32>
                if (err) {
 802692c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802692e:	2b00      	cmp	r3, #0
 8026930:	d006      	beq.n	8026940 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 8026932:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026934:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8026938:	f000 80b0 	beq.w	8026a9c <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 802693c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802693e:	e106      	b.n	8026b4e <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8026940:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026944:	2200      	movs	r2, #0
 8026946:	601a      	str	r2, [r3, #0]
 8026948:	605a      	str	r2, [r3, #4]
 802694a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 802694c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8026950:	f083 0301 	eor.w	r3, r3, #1
 8026954:	b2db      	uxtb	r3, r3
 8026956:	2b00      	cmp	r3, #0
 8026958:	d011      	beq.n	802697e <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 802695a:	68fb      	ldr	r3, [r7, #12]
 802695c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8026960:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026964:	4611      	mov	r1, r2
 8026966:	4618      	mov	r0, r3
 8026968:	f7fd fd5f 	bl	802442a <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 802696c:	68fb      	ldr	r3, [r7, #12]
 802696e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026972:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026976:	4611      	mov	r1, r2
 8026978:	4618      	mov	r0, r3
 802697a:	f7fd fd56 	bl	802442a <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 802697e:	68fb      	ldr	r3, [r7, #12]
 8026980:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8026984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026988:	4611      	mov	r1, r2
 802698a:	4618      	mov	r0, r3
 802698c:	f7fd fd4d 	bl	802442a <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026992:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8026996:	f023 0303 	bic.w	r3, r3, #3
 802699a:	62bb      	str	r3, [r7, #40]	@ 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 802699c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80269a0:	461a      	mov	r2, r3
 80269a2:	68b9      	ldr	r1, [r7, #8]
 80269a4:	68f8      	ldr	r0, [r7, #12]
 80269a6:	f7ff f9b5 	bl	8025d14 <lfs_dir_getgstate>
 80269aa:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 80269ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80269ae:	2b00      	cmp	r3, #0
 80269b0:	d001      	beq.n	80269b6 <lfs_dir_compact+0x226>
                return err;
 80269b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80269b4:	e0cb      	b.n	8026b4e <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80269b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80269ba:	4618      	mov	r0, r3
 80269bc:	f7fd fd5a 	bl	8024474 <lfs_gstate_iszero>
 80269c0:	4603      	mov	r3, r0
 80269c2:	f083 0301 	eor.w	r3, r3, #1
 80269c6:	b2db      	uxtb	r3, r3
 80269c8:	2b00      	cmp	r3, #0
 80269ca:	d016      	beq.n	80269fa <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80269cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80269d0:	4618      	mov	r0, r3
 80269d2:	f7fd fde1 	bl	8024598 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80269d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80269da:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80269de:	4a61      	ldr	r2, [pc, #388]	@ (8026b64 <lfs_dir_compact+0x3d4>)
 80269e0:	68f8      	ldr	r0, [r7, #12]
 80269e2:	f7ff fbbd 	bl	8026160 <lfs_dir_commitattr>
 80269e6:	65f8      	str	r0, [r7, #92]	@ 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80269e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	d005      	beq.n	80269fa <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80269ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80269f0:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80269f4:	d054      	beq.n	8026aa0 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80269f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80269f8:	e0a9      	b.n	8026b4e <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80269fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80269fe:	4619      	mov	r1, r3
 8026a00:	68f8      	ldr	r0, [r7, #12]
 8026a02:	f7ff fc2d 	bl	8026260 <lfs_dir_commitcrc>
 8026a06:	65f8      	str	r0, [r7, #92]	@ 0x5c
            if (err) {
 8026a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026a0a:	2b00      	cmp	r3, #0
 8026a0c:	d005      	beq.n	8026a1a <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8026a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026a10:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8026a14:	d046      	beq.n	8026aa4 <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 8026a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8026a18:	e099      	b.n	8026b4e <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026a1c:	68fa      	ldr	r2, [r7, #12]
 8026a1e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8026a20:	6992      	ldr	r2, [r2, #24]
 8026a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8026a26:	fb01 f202 	mul.w	r2, r1, r2
 8026a2a:	1a9b      	subs	r3, r3, r2
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	d006      	beq.n	8026a3e <lfs_dir_compact+0x2ae>
 8026a30:	4b4d      	ldr	r3, [pc, #308]	@ (8026b68 <lfs_dir_compact+0x3d8>)
 8026a32:	4a4e      	ldr	r2, [pc, #312]	@ (8026b6c <lfs_dir_compact+0x3dc>)
 8026a34:	f44f 61e9 	mov.w	r1, #1864	@ 0x748
 8026a38:	484d      	ldr	r0, [pc, #308]	@ (8026b70 <lfs_dir_compact+0x3e0>)
 8026a3a:	f005 fee5 	bl	802c808 <__assert_func>
            lfs_pair_swap(dir->pair);
 8026a3e:	68bb      	ldr	r3, [r7, #8]
 8026a40:	4618      	mov	r0, r3
 8026a42:	f7fd fbab 	bl	802419c <lfs_pair_swap>
            dir->count = end - begin;
 8026a46:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8026a4a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8026a4e:	1ad3      	subs	r3, r2, r3
 8026a50:	b29a      	uxth	r2, r3
 8026a52:	68bb      	ldr	r3, [r7, #8]
 8026a54:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8026a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8026a58:	68bb      	ldr	r3, [r7, #8]
 8026a5a:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8026a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8026a5e:	68bb      	ldr	r3, [r7, #8]
 8026a60:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8026a62:	68fb      	ldr	r3, [r7, #12]
 8026a64:	3348      	adds	r3, #72	@ 0x48
 8026a66:	2200      	movs	r2, #0
 8026a68:	601a      	str	r2, [r3, #0]
 8026a6a:	605a      	str	r2, [r3, #4]
 8026a6c:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8026a72:	f083 0301 	eor.w	r3, r3, #1
 8026a76:	b2db      	uxtb	r3, r3
 8026a78:	2b00      	cmp	r3, #0
 8026a7a:	d065      	beq.n	8026b48 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8026a7c:	68fb      	ldr	r3, [r7, #12]
 8026a7e:	68fa      	ldr	r2, [r7, #12]
 8026a80:	333c      	adds	r3, #60	@ 0x3c
 8026a82:	3230      	adds	r2, #48	@ 0x30
 8026a84:	ca07      	ldmia	r2, {r0, r1, r2}
 8026a86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8026a8a:	e05d      	b.n	8026b48 <lfs_dir_compact+0x3b8>
        goto relocate;
 8026a8c:	bf00      	nop
 8026a8e:	e00a      	b.n	8026aa6 <lfs_dir_compact+0x316>
                    goto relocate;
 8026a90:	bf00      	nop
 8026a92:	e008      	b.n	8026aa6 <lfs_dir_compact+0x316>
                    goto relocate;
 8026a94:	bf00      	nop
 8026a96:	e006      	b.n	8026aa6 <lfs_dir_compact+0x316>
                    goto relocate;
 8026a98:	bf00      	nop
 8026a9a:	e004      	b.n	8026aa6 <lfs_dir_compact+0x316>
                        goto relocate;
 8026a9c:	bf00      	nop
 8026a9e:	e002      	b.n	8026aa6 <lfs_dir_compact+0x316>
                        goto relocate;
 8026aa0:	bf00      	nop
 8026aa2:	e000      	b.n	8026aa6 <lfs_dir_compact+0x316>
                    goto relocate;
 8026aa4:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8026aa6:	2301      	movs	r3, #1
 8026aa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8026aac:	68fb      	ldr	r3, [r7, #12]
 8026aae:	3310      	adds	r3, #16
 8026ab0:	4619      	mov	r1, r3
 8026ab2:	68f8      	ldr	r0, [r7, #12]
 8026ab4:	f7fd f827 	bl	8023b06 <lfs_cache_drop>
        if (!tired) {
 8026ab8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8026abc:	f083 0301 	eor.w	r3, r3, #1
 8026ac0:	b2db      	uxtb	r3, r3
 8026ac2:	2b00      	cmp	r3, #0
 8026ac4:	d009      	beq.n	8026ada <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8026ac6:	68bb      	ldr	r3, [r7, #8]
 8026ac8:	685b      	ldr	r3, [r3, #4]
 8026aca:	4a2a      	ldr	r2, [pc, #168]	@ (8026b74 <lfs_dir_compact+0x3e4>)
 8026acc:	9200      	str	r2, [sp, #0]
 8026ace:	f240 725a 	movw	r2, #1882	@ 0x75a
 8026ad2:	4927      	ldr	r1, [pc, #156]	@ (8026b70 <lfs_dir_compact+0x3e0>)
 8026ad4:	4828      	ldr	r0, [pc, #160]	@ (8026b78 <lfs_dir_compact+0x3e8>)
 8026ad6:	f006 fec7 	bl	802d868 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026ada:	68bb      	ldr	r3, [r7, #8]
 8026adc:	2200      	movs	r2, #0
 8026ade:	617a      	str	r2, [r7, #20]
 8026ae0:	2201      	movs	r2, #1
 8026ae2:	61ba      	str	r2, [r7, #24]
 8026ae4:	f107 0214 	add.w	r2, r7, #20
 8026ae8:	4611      	mov	r1, r2
 8026aea:	4618      	mov	r0, r3
 8026aec:	f7fd fb86 	bl	80241fc <lfs_pair_cmp>
 8026af0:	4603      	mov	r3, r0
 8026af2:	2b00      	cmp	r3, #0
 8026af4:	d10c      	bne.n	8026b10 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8026af6:	68bb      	ldr	r3, [r7, #8]
 8026af8:	685b      	ldr	r3, [r3, #4]
 8026afa:	4a1e      	ldr	r2, [pc, #120]	@ (8026b74 <lfs_dir_compact+0x3e4>)
 8026afc:	9200      	str	r2, [sp, #0]
 8026afe:	f240 725f 	movw	r2, #1887	@ 0x75f
 8026b02:	491b      	ldr	r1, [pc, #108]	@ (8026b70 <lfs_dir_compact+0x3e0>)
 8026b04:	481d      	ldr	r0, [pc, #116]	@ (8026b7c <lfs_dir_compact+0x3ec>)
 8026b06:	f006 feaf 	bl	802d868 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8026b0a:	f06f 031b 	mvn.w	r3, #27
 8026b0e:	e01e      	b.n	8026b4e <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8026b10:	68bb      	ldr	r3, [r7, #8]
 8026b12:	3304      	adds	r3, #4
 8026b14:	4619      	mov	r1, r3
 8026b16:	68f8      	ldr	r0, [r7, #12]
 8026b18:	f7fd fea6 	bl	8024868 <lfs_alloc>
 8026b1c:	6638      	str	r0, [r7, #96]	@ 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8026b1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026b20:	2b00      	cmp	r3, #0
 8026b22:	d00c      	beq.n	8026b3e <lfs_dir_compact+0x3ae>
 8026b24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026b26:	f113 0f1c 	cmn.w	r3, #28
 8026b2a:	d106      	bne.n	8026b3a <lfs_dir_compact+0x3aa>
 8026b2c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8026b30:	f083 0301 	eor.w	r3, r3, #1
 8026b34:	b2db      	uxtb	r3, r3
 8026b36:	2b00      	cmp	r3, #0
 8026b38:	d001      	beq.n	8026b3e <lfs_dir_compact+0x3ae>
            return err;
 8026b3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8026b3c:	e007      	b.n	8026b4e <lfs_dir_compact+0x3be>
        }

        tired = false;
 8026b3e:	2300      	movs	r3, #0
 8026b40:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        continue;
 8026b44:	bf00      	nop
    while (true) {
 8026b46:	e64c      	b.n	80267e2 <lfs_dir_compact+0x52>
        break;
 8026b48:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8026b4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8026b4e:	4618      	mov	r0, r3
 8026b50:	3768      	adds	r7, #104	@ 0x68
 8026b52:	46bd      	mov	sp, r7
 8026b54:	bd80      	pop	{r7, pc}
 8026b56:	bf00      	nop
 8026b58:	08026719 	.word	0x08026719
 8026b5c:	400ffc00 	.word	0x400ffc00
 8026b60:	000ffc08 	.word	0x000ffc08
 8026b64:	7ffffc0c 	.word	0x7ffffc0c
 8026b68:	08033984 	.word	0x08033984
 8026b6c:	08034b24 	.word	0x08034b24
 8026b70:	08033818 	.word	0x08033818
 8026b74:	0803392c 	.word	0x0803392c
 8026b78:	080339ac 	.word	0x080339ac
 8026b7c:	080339d0 	.word	0x080339d0

08026b80 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026b80:	b590      	push	{r4, r7, lr}
 8026b82:	b097      	sub	sp, #92	@ 0x5c
 8026b84:	af0a      	add	r7, sp, #40	@ 0x28
 8026b86:	60f8      	str	r0, [r7, #12]
 8026b88:	60b9      	str	r1, [r7, #8]
 8026b8a:	607a      	str	r2, [r7, #4]
 8026b8c:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8026b8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8026b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8026b94:	e058      	b.n	8026c48 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8026b96:	2300      	movs	r3, #0
 8026b98:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8026b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026b9c:	b29b      	uxth	r3, r3
 8026b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026ba0:	b292      	uxth	r2, r2
 8026ba2:	4252      	negs	r2, r2
 8026ba4:	b292      	uxth	r2, r2
 8026ba6:	b212      	sxth	r2, r2
 8026ba8:	f107 0118 	add.w	r1, r7, #24
 8026bac:	9108      	str	r1, [sp, #32]
 8026bae:	4979      	ldr	r1, [pc, #484]	@ (8026d94 <lfs_dir_splittingcompact+0x214>)
 8026bb0:	9107      	str	r1, [sp, #28]
 8026bb2:	9206      	str	r2, [sp, #24]
 8026bb4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8026bb8:	9205      	str	r2, [sp, #20]
 8026bba:	9304      	str	r3, [sp, #16]
 8026bbc:	2300      	movs	r3, #0
 8026bbe:	9303      	str	r3, [sp, #12]
 8026bc0:	4b75      	ldr	r3, [pc, #468]	@ (8026d98 <lfs_dir_splittingcompact+0x218>)
 8026bc2:	9302      	str	r3, [sp, #8]
 8026bc4:	683b      	ldr	r3, [r7, #0]
 8026bc6:	9301      	str	r3, [sp, #4]
 8026bc8:	687b      	ldr	r3, [r7, #4]
 8026bca:	9300      	str	r3, [sp, #0]
 8026bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8026bd0:	2200      	movs	r2, #0
 8026bd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8026bd4:	68f8      	ldr	r0, [r7, #12]
 8026bd6:	f7fe f933 	bl	8024e40 <lfs_dir_traverse>
 8026bda:	62b8      	str	r0, [r7, #40]	@ 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8026bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026bde:	2b00      	cmp	r3, #0
 8026be0:	d001      	beq.n	8026be6 <lfs_dir_splittingcompact+0x66>
                return err;
 8026be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026be4:	e0d1      	b.n	8026d8a <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8026be6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8026bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026bec:	1ad3      	subs	r3, r2, r3
 8026bee:	2bfe      	cmp	r3, #254	@ 0xfe
 8026bf0:	d822      	bhi.n	8026c38 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026bf2:	68fb      	ldr	r3, [r7, #12]
 8026bf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026bf6:	69db      	ldr	r3, [r3, #28]
 8026bf8:	f1a3 0424 	sub.w	r4, r3, #36	@ 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8026bfc:	68fb      	ldr	r3, [r7, #12]
 8026bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026c02:	2b00      	cmp	r3, #0
 8026c04:	d004      	beq.n	8026c10 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8026c06:	68fb      	ldr	r3, [r7, #12]
 8026c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026c0c:	085b      	lsrs	r3, r3, #1
 8026c0e:	e003      	b.n	8026c18 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8026c10:	68fb      	ldr	r3, [r7, #12]
 8026c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026c14:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026c16:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8026c18:	68fa      	ldr	r2, [r7, #12]
 8026c1a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8026c1c:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026c1e:	4611      	mov	r1, r2
 8026c20:	4618      	mov	r0, r3
 8026c22:	f7fc fedf 	bl	80239e4 <lfs_alignup>
 8026c26:	4603      	mov	r3, r0
 8026c28:	4619      	mov	r1, r3
 8026c2a:	4620      	mov	r0, r4
 8026c2c:	f7fc feb5 	bl	802399a <lfs_min>
 8026c30:	4602      	mov	r2, r0
 8026c32:	69bb      	ldr	r3, [r7, #24]
 8026c34:	429a      	cmp	r2, r3
 8026c36:	d20e      	bcs.n	8026c56 <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8026c38:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8026c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026c3e:	1ad3      	subs	r3, r2, r3
 8026c40:	085b      	lsrs	r3, r3, #1
 8026c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026c44:	4413      	add	r3, r2
 8026c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (end - split > 1) {
 8026c48:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8026c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026c4e:	1ad3      	subs	r3, r2, r3
 8026c50:	2b01      	cmp	r3, #1
 8026c52:	d8a0      	bhi.n	8026b96 <lfs_dir_splittingcompact+0x16>
 8026c54:	e000      	b.n	8026c58 <lfs_dir_splittingcompact+0xd8>
                break;
 8026c56:	bf00      	nop
        }

        if (split == begin) {
 8026c58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8026c5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8026c5e:	429a      	cmp	r2, r3
 8026c60:	d02d      	beq.n	8026cbe <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026c64:	b29b      	uxth	r3, r3
 8026c66:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8026c6a:	9202      	str	r2, [sp, #8]
 8026c6c:	9301      	str	r3, [sp, #4]
 8026c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026c70:	9300      	str	r3, [sp, #0]
 8026c72:	683b      	ldr	r3, [r7, #0]
 8026c74:	687a      	ldr	r2, [r7, #4]
 8026c76:	68b9      	ldr	r1, [r7, #8]
 8026c78:	68f8      	ldr	r0, [r7, #12]
 8026c7a:	f7ff fce3 	bl	8026644 <lfs_dir_split>
 8026c7e:	6278      	str	r0, [r7, #36]	@ 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8026c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026c82:	2b00      	cmp	r3, #0
 8026c84:	d005      	beq.n	8026c92 <lfs_dir_splittingcompact+0x112>
 8026c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026c88:	f113 0f1c 	cmn.w	r3, #28
 8026c8c:	d001      	beq.n	8026c92 <lfs_dir_splittingcompact+0x112>
            return err;
 8026c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026c90:	e07b      	b.n	8026d8a <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8026c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026c94:	2b00      	cmp	r3, #0
 8026c96:	d00e      	beq.n	8026cb6 <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8026c98:	68bb      	ldr	r3, [r7, #8]
 8026c9a:	681a      	ldr	r2, [r3, #0]
 8026c9c:	68bb      	ldr	r3, [r7, #8]
 8026c9e:	685b      	ldr	r3, [r3, #4]
 8026ca0:	493e      	ldr	r1, [pc, #248]	@ (8026d9c <lfs_dir_splittingcompact+0x21c>)
 8026ca2:	9101      	str	r1, [sp, #4]
 8026ca4:	9300      	str	r3, [sp, #0]
 8026ca6:	4613      	mov	r3, r2
 8026ca8:	f240 72a9 	movw	r2, #1961	@ 0x7a9
 8026cac:	493c      	ldr	r1, [pc, #240]	@ (8026da0 <lfs_dir_splittingcompact+0x220>)
 8026cae:	483d      	ldr	r0, [pc, #244]	@ (8026da4 <lfs_dir_splittingcompact+0x224>)
 8026cb0:	f006 fdda 	bl	802d868 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8026cb4:	e004      	b.n	8026cc0 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8026cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8026cb8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    while (true) {
 8026cbc:	e767      	b.n	8026b8e <lfs_dir_splittingcompact+0xe>
            break;
 8026cbe:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8026cc0:	68b9      	ldr	r1, [r7, #8]
 8026cc2:	68f8      	ldr	r0, [r7, #12]
 8026cc4:	f7ff fd3d 	bl	8026742 <lfs_dir_needsrelocation>
 8026cc8:	4603      	mov	r3, r0
 8026cca:	2b00      	cmp	r3, #0
 8026ccc:	d04e      	beq.n	8026d6c <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026cce:	68bb      	ldr	r3, [r7, #8]
 8026cd0:	2200      	movs	r2, #0
 8026cd2:	613a      	str	r2, [r7, #16]
 8026cd4:	2201      	movs	r2, #1
 8026cd6:	617a      	str	r2, [r7, #20]
 8026cd8:	f107 0210 	add.w	r2, r7, #16
 8026cdc:	4611      	mov	r1, r2
 8026cde:	4618      	mov	r0, r3
 8026ce0:	f7fd fa8c 	bl	80241fc <lfs_pair_cmp>
 8026ce4:	4603      	mov	r3, r0
 8026ce6:	2b00      	cmp	r3, #0
 8026ce8:	d140      	bne.n	8026d6c <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8026cea:	68f8      	ldr	r0, [r7, #12]
 8026cec:	f003 fe4c 	bl	802a988 <lfs_fs_rawsize>
 8026cf0:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8026cf2:	6a3b      	ldr	r3, [r7, #32]
 8026cf4:	2b00      	cmp	r3, #0
 8026cf6:	da01      	bge.n	8026cfc <lfs_dir_splittingcompact+0x17c>
            return size;
 8026cf8:	6a3b      	ldr	r3, [r7, #32]
 8026cfa:	e046      	b.n	8026d8a <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8026cfc:	68fb      	ldr	r3, [r7, #12]
 8026cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026d00:	6a1b      	ldr	r3, [r3, #32]
 8026d02:	085a      	lsrs	r2, r3, #1
 8026d04:	6a3b      	ldr	r3, [r7, #32]
 8026d06:	429a      	cmp	r2, r3
 8026d08:	d930      	bls.n	8026d6c <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8026d0a:	68bb      	ldr	r3, [r7, #8]
 8026d0c:	689b      	ldr	r3, [r3, #8]
 8026d0e:	4a23      	ldr	r2, [pc, #140]	@ (8026d9c <lfs_dir_splittingcompact+0x21c>)
 8026d10:	9200      	str	r2, [sp, #0]
 8026d12:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8026d16:	4922      	ldr	r1, [pc, #136]	@ (8026da0 <lfs_dir_splittingcompact+0x220>)
 8026d18:	4823      	ldr	r0, [pc, #140]	@ (8026da8 <lfs_dir_splittingcompact+0x228>)
 8026d1a:	f006 fda5 	bl	802d868 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026d1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8026d22:	9302      	str	r3, [sp, #8]
 8026d24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8026d28:	9301      	str	r3, [sp, #4]
 8026d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026d2c:	9300      	str	r3, [sp, #0]
 8026d2e:	683b      	ldr	r3, [r7, #0]
 8026d30:	687a      	ldr	r2, [r7, #4]
 8026d32:	68b9      	ldr	r1, [r7, #8]
 8026d34:	68f8      	ldr	r0, [r7, #12]
 8026d36:	f7ff fc85 	bl	8026644 <lfs_dir_split>
 8026d3a:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026d3c:	69fb      	ldr	r3, [r7, #28]
 8026d3e:	2b00      	cmp	r3, #0
 8026d40:	d005      	beq.n	8026d4e <lfs_dir_splittingcompact+0x1ce>
 8026d42:	69fb      	ldr	r3, [r7, #28]
 8026d44:	f113 0f1c 	cmn.w	r3, #28
 8026d48:	d001      	beq.n	8026d4e <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026d4a:	69fb      	ldr	r3, [r7, #28]
 8026d4c:	e01d      	b.n	8026d8a <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026d4e:	69fb      	ldr	r3, [r7, #28]
 8026d50:	2b00      	cmp	r3, #0
 8026d52:	d007      	beq.n	8026d64 <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8026d54:	4b11      	ldr	r3, [pc, #68]	@ (8026d9c <lfs_dir_splittingcompact+0x21c>)
 8026d56:	f240 72c7 	movw	r2, #1991	@ 0x7c7
 8026d5a:	4911      	ldr	r1, [pc, #68]	@ (8026da0 <lfs_dir_splittingcompact+0x220>)
 8026d5c:	4813      	ldr	r0, [pc, #76]	@ (8026dac <lfs_dir_splittingcompact+0x22c>)
 8026d5e:	f006 fd83 	bl	802d868 <iprintf>
 8026d62:	e003      	b.n	8026d6c <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8026d64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8026d68:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8026d6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8026d70:	9302      	str	r3, [sp, #8]
 8026d72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8026d76:	9301      	str	r3, [sp, #4]
 8026d78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8026d7a:	9300      	str	r3, [sp, #0]
 8026d7c:	683b      	ldr	r3, [r7, #0]
 8026d7e:	687a      	ldr	r2, [r7, #4]
 8026d80:	68b9      	ldr	r1, [r7, #8]
 8026d82:	68f8      	ldr	r0, [r7, #12]
 8026d84:	f7ff fd04 	bl	8026790 <lfs_dir_compact>
 8026d88:	4603      	mov	r3, r0
}
 8026d8a:	4618      	mov	r0, r3
 8026d8c:	3734      	adds	r7, #52	@ 0x34
 8026d8e:	46bd      	mov	sp, r7
 8026d90:	bd90      	pop	{r4, r7, pc}
 8026d92:	bf00      	nop
 8026d94:	080266ed 	.word	0x080266ed
 8026d98:	400ffc00 	.word	0x400ffc00
 8026d9c:	0803392c 	.word	0x0803392c
 8026da0:	08033818 	.word	0x08033818
 8026da4:	08033a08 	.word	0x08033a08
 8026da8:	08033a38 	.word	0x08033a38
 8026dac:	08033a68 	.word	0x08033a68

08026db0 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8026db0:	b5b0      	push	{r4, r5, r7, lr}
 8026db2:	b0a6      	sub	sp, #152	@ 0x98
 8026db4:	af0a      	add	r7, sp, #40	@ 0x28
 8026db6:	60f8      	str	r0, [r7, #12]
 8026db8:	60b9      	str	r1, [r7, #8]
 8026dba:	607a      	str	r2, [r7, #4]
 8026dbc:	603b      	str	r3, [r7, #0]
    int state = 0;
 8026dbe:	2300      	movs	r3, #0
 8026dc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8026dc2:	2300      	movs	r3, #0
 8026dc4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    for (int i = 0; i < attrcount; i++) {
 8026dc8:	2300      	movs	r3, #0
 8026dca:	667b      	str	r3, [r7, #100]	@ 0x64
 8026dcc:	e06d      	b.n	8026eaa <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8026dce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026dd0:	00db      	lsls	r3, r3, #3
 8026dd2:	683a      	ldr	r2, [r7, #0]
 8026dd4:	4413      	add	r3, r2
 8026dd6:	681b      	ldr	r3, [r3, #0]
 8026dd8:	4618      	mov	r0, r3
 8026dda:	f7fd facb 	bl	8024374 <lfs_tag_type3>
 8026dde:	4603      	mov	r3, r0
 8026de0:	461a      	mov	r2, r3
 8026de2:	f240 4301 	movw	r3, #1025	@ 0x401
 8026de6:	429a      	cmp	r2, r3
 8026de8:	d106      	bne.n	8026df8 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8026dea:	68bb      	ldr	r3, [r7, #8]
 8026dec:	8a9b      	ldrh	r3, [r3, #20]
 8026dee:	3301      	adds	r3, #1
 8026df0:	b29a      	uxth	r2, r3
 8026df2:	68bb      	ldr	r3, [r7, #8]
 8026df4:	829a      	strh	r2, [r3, #20]
 8026df6:	e055      	b.n	8026ea4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8026df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026dfa:	00db      	lsls	r3, r3, #3
 8026dfc:	683a      	ldr	r2, [r7, #0]
 8026dfe:	4413      	add	r3, r2
 8026e00:	681b      	ldr	r3, [r3, #0]
 8026e02:	4618      	mov	r0, r3
 8026e04:	f7fd fab6 	bl	8024374 <lfs_tag_type3>
 8026e08:	4603      	mov	r3, r0
 8026e0a:	461a      	mov	r2, r3
 8026e0c:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 8026e10:	429a      	cmp	r2, r3
 8026e12:	d114      	bne.n	8026e3e <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8026e14:	68bb      	ldr	r3, [r7, #8]
 8026e16:	8a9b      	ldrh	r3, [r3, #20]
 8026e18:	2b00      	cmp	r3, #0
 8026e1a:	d106      	bne.n	8026e2a <lfs_dir_relocatingcommit+0x7a>
 8026e1c:	4ba4      	ldr	r3, [pc, #656]	@ (80270b0 <lfs_dir_relocatingcommit+0x300>)
 8026e1e:	4aa5      	ldr	r2, [pc, #660]	@ (80270b4 <lfs_dir_relocatingcommit+0x304>)
 8026e20:	f240 71df 	movw	r1, #2015	@ 0x7df
 8026e24:	48a4      	ldr	r0, [pc, #656]	@ (80270b8 <lfs_dir_relocatingcommit+0x308>)
 8026e26:	f005 fcef 	bl	802c808 <__assert_func>
            dir->count -= 1;
 8026e2a:	68bb      	ldr	r3, [r7, #8]
 8026e2c:	8a9b      	ldrh	r3, [r3, #20]
 8026e2e:	3b01      	subs	r3, #1
 8026e30:	b29a      	uxth	r2, r3
 8026e32:	68bb      	ldr	r3, [r7, #8]
 8026e34:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8026e36:	2301      	movs	r3, #1
 8026e38:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8026e3c:	e032      	b.n	8026ea4 <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026e40:	00db      	lsls	r3, r3, #3
 8026e42:	683a      	ldr	r2, [r7, #0]
 8026e44:	4413      	add	r3, r2
 8026e46:	681b      	ldr	r3, [r3, #0]
 8026e48:	4618      	mov	r0, r3
 8026e4a:	f7fd fa83 	bl	8024354 <lfs_tag_type1>
 8026e4e:	4603      	mov	r3, r0
 8026e50:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8026e54:	d126      	bne.n	8026ea4 <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8026e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026e58:	00db      	lsls	r3, r3, #3
 8026e5a:	683a      	ldr	r2, [r7, #0]
 8026e5c:	4413      	add	r3, r2
 8026e5e:	685b      	ldr	r3, [r3, #4]
 8026e60:	681a      	ldr	r2, [r3, #0]
 8026e62:	68bb      	ldr	r3, [r7, #8]
 8026e64:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8026e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026e68:	00db      	lsls	r3, r3, #3
 8026e6a:	683a      	ldr	r2, [r7, #0]
 8026e6c:	4413      	add	r3, r2
 8026e6e:	685b      	ldr	r3, [r3, #4]
 8026e70:	685a      	ldr	r2, [r3, #4]
 8026e72:	68bb      	ldr	r3, [r7, #8]
 8026e74:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8026e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026e78:	00db      	lsls	r3, r3, #3
 8026e7a:	683a      	ldr	r2, [r7, #0]
 8026e7c:	4413      	add	r3, r2
 8026e7e:	681b      	ldr	r3, [r3, #0]
 8026e80:	4618      	mov	r0, r3
 8026e82:	f7fd fa87 	bl	8024394 <lfs_tag_chunk>
 8026e86:	4603      	mov	r3, r0
 8026e88:	f003 0301 	and.w	r3, r3, #1
 8026e8c:	2b00      	cmp	r3, #0
 8026e8e:	bf14      	ite	ne
 8026e90:	2301      	movne	r3, #1
 8026e92:	2300      	moveq	r3, #0
 8026e94:	b2da      	uxtb	r2, r3
 8026e96:	68bb      	ldr	r3, [r7, #8]
 8026e98:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8026e9a:	68bb      	ldr	r3, [r7, #8]
 8026e9c:	3318      	adds	r3, #24
 8026e9e:	4618      	mov	r0, r3
 8026ea0:	f7fd fa03 	bl	80242aa <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8026ea4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8026ea6:	3301      	adds	r3, #1
 8026ea8:	667b      	str	r3, [r7, #100]	@ 0x64
 8026eaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8026eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026eb0:	429a      	cmp	r2, r3
 8026eb2:	db8c      	blt.n	8026dce <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8026eb4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8026eb8:	2b00      	cmp	r3, #0
 8026eba:	d02b      	beq.n	8026f14 <lfs_dir_relocatingcommit+0x164>
 8026ebc:	68bb      	ldr	r3, [r7, #8]
 8026ebe:	8a9b      	ldrh	r3, [r3, #20]
 8026ec0:	2b00      	cmp	r3, #0
 8026ec2:	d127      	bne.n	8026f14 <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8026ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026ec8:	2b00      	cmp	r3, #0
 8026eca:	d106      	bne.n	8026eda <lfs_dir_relocatingcommit+0x12a>
 8026ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80270bc <lfs_dir_relocatingcommit+0x30c>)
 8026ece:	4a79      	ldr	r2, [pc, #484]	@ (80270b4 <lfs_dir_relocatingcommit+0x304>)
 8026ed0:	f240 71ec 	movw	r1, #2028	@ 0x7ec
 8026ed4:	4878      	ldr	r0, [pc, #480]	@ (80270b8 <lfs_dir_relocatingcommit+0x308>)
 8026ed6:	f005 fc97 	bl	802c808 <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8026eda:	68bb      	ldr	r3, [r7, #8]
 8026edc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8026ee0:	4619      	mov	r1, r3
 8026ee2:	68f8      	ldr	r0, [r7, #12]
 8026ee4:	f003 f9c2 	bl	802a26c <lfs_fs_pred>
 8026ee8:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (err && err != LFS_ERR_NOENT) {
 8026eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026eec:	2b00      	cmp	r3, #0
 8026eee:	d005      	beq.n	8026efc <lfs_dir_relocatingcommit+0x14c>
 8026ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026ef2:	f113 0f02 	cmn.w	r3, #2
 8026ef6:	d001      	beq.n	8026efc <lfs_dir_relocatingcommit+0x14c>
            return err;
 8026ef8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026efa:	e204      	b.n	8027306 <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8026efc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026efe:	f113 0f02 	cmn.w	r3, #2
 8026f02:	d007      	beq.n	8026f14 <lfs_dir_relocatingcommit+0x164>
 8026f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8026f08:	7ddb      	ldrb	r3, [r3, #23]
 8026f0a:	2b00      	cmp	r3, #0
 8026f0c:	d002      	beq.n	8026f14 <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8026f0e:	2302      	movs	r3, #2
 8026f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
            goto fixmlist;
 8026f12:	e121      	b.n	8027158 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8026f14:	68bb      	ldr	r3, [r7, #8]
 8026f16:	7d9b      	ldrb	r3, [r3, #22]
 8026f18:	2b00      	cmp	r3, #0
 8026f1a:	f000 80fb 	beq.w	8027114 <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026f1e:	68bb      	ldr	r3, [r7, #8]
 8026f20:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8026f22:	633b      	str	r3, [r7, #48]	@ 0x30
            .off = dir->off,
 8026f24:	68bb      	ldr	r3, [r7, #8]
 8026f26:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026f28:	637b      	str	r3, [r7, #52]	@ 0x34
            .ptag = dir->etag,
 8026f2a:	68bb      	ldr	r3, [r7, #8]
 8026f2c:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8026f30:	f04f 33ff 	mov.w	r3, #4294967295
 8026f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8026f36:	68bb      	ldr	r3, [r7, #8]
 8026f38:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026f3a:	643b      	str	r3, [r7, #64]	@ 0x40
            .end = (lfs->cfg->metadata_max ?
 8026f3c:	68fb      	ldr	r3, [r7, #12]
 8026f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	d004      	beq.n	8026f50 <lfs_dir_relocatingcommit+0x1a0>
 8026f46:	68fb      	ldr	r3, [r7, #12]
 8026f48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8026f4c:	3b08      	subs	r3, #8
 8026f4e:	e003      	b.n	8026f58 <lfs_dir_relocatingcommit+0x1a8>
 8026f50:	68fb      	ldr	r3, [r7, #12]
 8026f52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8026f54:	69db      	ldr	r3, [r3, #28]
 8026f56:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026f58:	647b      	str	r3, [r7, #68]	@ 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026f5a:	68bb      	ldr	r3, [r7, #8]
 8026f5c:	3318      	adds	r3, #24
 8026f5e:	4618      	mov	r0, r3
 8026f60:	f7fd f9bd 	bl	80242de <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8026f64:	68bb      	ldr	r3, [r7, #8]
 8026f66:	68da      	ldr	r2, [r3, #12]
 8026f68:	68bb      	ldr	r3, [r7, #8]
 8026f6a:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026f6c:	68fb      	ldr	r3, [r7, #12]
 8026f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8026f70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8026f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int err = lfs_dir_traverse(lfs,
 8026f76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8026f7a:	9308      	str	r3, [sp, #32]
 8026f7c:	4b50      	ldr	r3, [pc, #320]	@ (80270c0 <lfs_dir_relocatingcommit+0x310>)
 8026f7e:	9307      	str	r3, [sp, #28]
 8026f80:	2300      	movs	r3, #0
 8026f82:	9306      	str	r3, [sp, #24]
 8026f84:	2300      	movs	r3, #0
 8026f86:	9305      	str	r3, [sp, #20]
 8026f88:	2300      	movs	r3, #0
 8026f8a:	9304      	str	r3, [sp, #16]
 8026f8c:	2300      	movs	r3, #0
 8026f8e:	9303      	str	r3, [sp, #12]
 8026f90:	2300      	movs	r3, #0
 8026f92:	9302      	str	r3, [sp, #8]
 8026f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8026f98:	9301      	str	r3, [sp, #4]
 8026f9a:	683b      	ldr	r3, [r7, #0]
 8026f9c:	9300      	str	r3, [sp, #0]
 8026f9e:	460b      	mov	r3, r1
 8026fa0:	68b9      	ldr	r1, [r7, #8]
 8026fa2:	68f8      	ldr	r0, [r7, #12]
 8026fa4:	f7fd ff4c 	bl	8024e40 <lfs_dir_traverse>
 8026fa8:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026faa:	68bb      	ldr	r3, [r7, #8]
 8026fac:	3318      	adds	r3, #24
 8026fae:	4618      	mov	r0, r3
 8026fb0:	f7fd f97b 	bl	80242aa <lfs_pair_fromle32>
        if (err) {
 8026fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026fb6:	2b00      	cmp	r3, #0
 8026fb8:	d00b      	beq.n	8026fd2 <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026fbc:	f113 0f1c 	cmn.w	r3, #28
 8026fc0:	f000 80aa 	beq.w	8027118 <lfs_dir_relocatingcommit+0x368>
 8026fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026fc6:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8026fca:	f000 80a5 	beq.w	8027118 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8026fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026fd0:	e199      	b.n	8027306 <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8026fd2:	f107 031c 	add.w	r3, r7, #28
 8026fd6:	2200      	movs	r2, #0
 8026fd8:	601a      	str	r2, [r3, #0]
 8026fda:	605a      	str	r2, [r3, #4]
 8026fdc:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026fde:	68fb      	ldr	r3, [r7, #12]
 8026fe0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8026fe4:	f107 031c 	add.w	r3, r7, #28
 8026fe8:	4611      	mov	r1, r2
 8026fea:	4618      	mov	r0, r3
 8026fec:	f7fd fa1d 	bl	802442a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026ff0:	68fb      	ldr	r3, [r7, #12]
 8026ff2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8026ff6:	f107 031c 	add.w	r3, r7, #28
 8026ffa:	4611      	mov	r1, r2
 8026ffc:	4618      	mov	r0, r3
 8026ffe:	f7fd fa14 	bl	802442a <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8027002:	68fb      	ldr	r3, [r7, #12]
 8027004:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8027008:	f107 031c 	add.w	r3, r7, #28
 802700c:	4611      	mov	r1, r2
 802700e:	4618      	mov	r0, r3
 8027010:	f7fd fa0b 	bl	802442a <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8027014:	69fb      	ldr	r3, [r7, #28]
 8027016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 802701a:	f023 0303 	bic.w	r3, r3, #3
 802701e:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8027020:	f107 031c 	add.w	r3, r7, #28
 8027024:	4618      	mov	r0, r3
 8027026:	f7fd fa25 	bl	8024474 <lfs_gstate_iszero>
 802702a:	4603      	mov	r3, r0
 802702c:	f083 0301 	eor.w	r3, r3, #1
 8027030:	b2db      	uxtb	r3, r3
 8027032:	2b00      	cmp	r3, #0
 8027034:	d027      	beq.n	8027086 <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8027036:	f107 031c 	add.w	r3, r7, #28
 802703a:	461a      	mov	r2, r3
 802703c:	68b9      	ldr	r1, [r7, #8]
 802703e:	68f8      	ldr	r0, [r7, #12]
 8027040:	f7fe fe68 	bl	8025d14 <lfs_dir_getgstate>
 8027044:	6578      	str	r0, [r7, #84]	@ 0x54
            if (err) {
 8027046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8027048:	2b00      	cmp	r3, #0
 802704a:	d001      	beq.n	8027050 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 802704c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802704e:	e15a      	b.n	8027306 <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8027050:	f107 031c 	add.w	r3, r7, #28
 8027054:	4618      	mov	r0, r3
 8027056:	f7fd fa9f 	bl	8024598 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 802705a:	f107 031c 	add.w	r3, r7, #28
 802705e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8027062:	4a18      	ldr	r2, [pc, #96]	@ (80270c4 <lfs_dir_relocatingcommit+0x314>)
 8027064:	68f8      	ldr	r0, [r7, #12]
 8027066:	f7ff f87b 	bl	8026160 <lfs_dir_commitattr>
 802706a:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 802706c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802706e:	2b00      	cmp	r3, #0
 8027070:	d009      	beq.n	8027086 <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8027072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8027074:	f113 0f1c 	cmn.w	r3, #28
 8027078:	d050      	beq.n	802711c <lfs_dir_relocatingcommit+0x36c>
 802707a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802707c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8027080:	d04c      	beq.n	802711c <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8027082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8027084:	e13f      	b.n	8027306 <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8027086:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 802708a:	4619      	mov	r1, r3
 802708c:	68f8      	ldr	r0, [r7, #12]
 802708e:	f7ff f8e7 	bl	8026260 <lfs_dir_commitcrc>
 8027092:	6578      	str	r0, [r7, #84]	@ 0x54
        if (err) {
 8027094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8027096:	2b00      	cmp	r3, #0
 8027098:	d016      	beq.n	80270c8 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 802709a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802709c:	f113 0f1c 	cmn.w	r3, #28
 80270a0:	d03e      	beq.n	8027120 <lfs_dir_relocatingcommit+0x370>
 80270a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80270a4:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80270a8:	d03a      	beq.n	8027120 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 80270aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80270ac:	e12b      	b.n	8027306 <lfs_dir_relocatingcommit+0x556>
 80270ae:	bf00      	nop
 80270b0:	08033a94 	.word	0x08033a94
 80270b4:	08034b34 	.word	0x08034b34
 80270b8:	08033818 	.word	0x08033818
 80270bc:	08033aa4 	.word	0x08033aa4
 80270c0:	08026719 	.word	0x08026719
 80270c4:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80270c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80270ca:	68fa      	ldr	r2, [r7, #12]
 80270cc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80270ce:	6992      	ldr	r2, [r2, #24]
 80270d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80270d4:	fb01 f202 	mul.w	r2, r1, r2
 80270d8:	1a9b      	subs	r3, r3, r2
 80270da:	2b00      	cmp	r3, #0
 80270dc:	d006      	beq.n	80270ec <lfs_dir_relocatingcommit+0x33c>
 80270de:	4b8c      	ldr	r3, [pc, #560]	@ (8027310 <lfs_dir_relocatingcommit+0x560>)
 80270e0:	4a8c      	ldr	r2, [pc, #560]	@ (8027314 <lfs_dir_relocatingcommit+0x564>)
 80270e2:	f640 0136 	movw	r1, #2102	@ 0x836
 80270e6:	488c      	ldr	r0, [pc, #560]	@ (8027318 <lfs_dir_relocatingcommit+0x568>)
 80270e8:	f005 fb8e 	bl	802c808 <__assert_func>
        dir->off = commit.off;
 80270ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80270ee:	68bb      	ldr	r3, [r7, #8]
 80270f0:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 80270f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80270f4:	68bb      	ldr	r3, [r7, #8]
 80270f6:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 80270f8:	68fb      	ldr	r3, [r7, #12]
 80270fa:	68fa      	ldr	r2, [r7, #12]
 80270fc:	333c      	adds	r3, #60	@ 0x3c
 80270fe:	3230      	adds	r2, #48	@ 0x30
 8027100:	ca07      	ldmia	r2, {r0, r1, r2}
 8027102:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8027106:	68fb      	ldr	r3, [r7, #12]
 8027108:	3348      	adds	r3, #72	@ 0x48
 802710a:	2200      	movs	r2, #0
 802710c:	601a      	str	r2, [r3, #0]
 802710e:	605a      	str	r2, [r3, #4]
 8027110:	609a      	str	r2, [r3, #8]
 8027112:	e021      	b.n	8027158 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8027114:	bf00      	nop
 8027116:	e004      	b.n	8027122 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8027118:	bf00      	nop
 802711a:	e002      	b.n	8027122 <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 802711c:	bf00      	nop
 802711e:	e000      	b.n	8027122 <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8027120:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8027122:	68fb      	ldr	r3, [r7, #12]
 8027124:	3310      	adds	r3, #16
 8027126:	4619      	mov	r1, r3
 8027128:	68f8      	ldr	r0, [r7, #12]
 802712a:	f7fc fcec 	bl	8023b06 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 802712e:	68bb      	ldr	r3, [r7, #8]
 8027130:	8a9b      	ldrh	r3, [r3, #20]
 8027132:	9302      	str	r3, [sp, #8]
 8027134:	2300      	movs	r3, #0
 8027136:	9301      	str	r3, [sp, #4]
 8027138:	68bb      	ldr	r3, [r7, #8]
 802713a:	9300      	str	r3, [sp, #0]
 802713c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8027140:	683a      	ldr	r2, [r7, #0]
 8027142:	68b9      	ldr	r1, [r7, #8]
 8027144:	68f8      	ldr	r0, [r7, #12]
 8027146:	f7ff fd1b 	bl	8026b80 <lfs_dir_splittingcompact>
 802714a:	66f8      	str	r0, [r7, #108]	@ 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 802714c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802714e:	2b00      	cmp	r3, #0
 8027150:	da01      	bge.n	8027156 <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8027152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8027154:	e0d7      	b.n	8027306 <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8027156:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8027158:	687b      	ldr	r3, [r7, #4]
 802715a:	681b      	ldr	r3, [r3, #0]
 802715c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802715e:	687b      	ldr	r3, [r7, #4]
 8027160:	3304      	adds	r3, #4
 8027162:	681b      	ldr	r3, [r3, #0]
 8027164:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027166:	68fb      	ldr	r3, [r7, #12]
 8027168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802716a:	663b      	str	r3, [r7, #96]	@ 0x60
 802716c:	e0c6      	b.n	80272fc <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 802716e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027170:	3308      	adds	r3, #8
 8027172:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8027176:	4611      	mov	r1, r2
 8027178:	4618      	mov	r0, r3
 802717a:	f7fd f83f 	bl	80241fc <lfs_pair_cmp>
 802717e:	4603      	mov	r3, r0
 8027180:	2b00      	cmp	r3, #0
 8027182:	f040 80b8 	bne.w	80272f6 <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 8027186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027188:	68ba      	ldr	r2, [r7, #8]
 802718a:	f103 0408 	add.w	r4, r3, #8
 802718e:	4615      	mov	r5, r2
 8027190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027194:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 802719c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802719e:	3308      	adds	r3, #8
 80271a0:	687a      	ldr	r2, [r7, #4]
 80271a2:	429a      	cmp	r2, r3
 80271a4:	f000 809d 	beq.w	80272e2 <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 80271a8:	2300      	movs	r3, #0
 80271aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80271ac:	e07b      	b.n	80272a6 <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80271ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80271b0:	00db      	lsls	r3, r3, #3
 80271b2:	683a      	ldr	r2, [r7, #0]
 80271b4:	4413      	add	r3, r2
 80271b6:	681b      	ldr	r3, [r3, #0]
 80271b8:	4618      	mov	r0, r3
 80271ba:	f7fd f8db 	bl	8024374 <lfs_tag_type3>
 80271be:	4603      	mov	r3, r0
 80271c0:	461a      	mov	r2, r3
 80271c2:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 80271c6:	429a      	cmp	r2, r3
 80271c8:	d115      	bne.n	80271f6 <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80271ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80271cc:	889c      	ldrh	r4, [r3, #4]
 80271ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80271d0:	00db      	lsls	r3, r3, #3
 80271d2:	683a      	ldr	r2, [r7, #0]
 80271d4:	4413      	add	r3, r2
 80271d6:	681b      	ldr	r3, [r3, #0]
 80271d8:	4618      	mov	r0, r3
 80271da:	f7fd f8f5 	bl	80243c8 <lfs_tag_id>
 80271de:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80271e0:	429c      	cmp	r4, r3
 80271e2:	d108      	bne.n	80271f6 <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80271e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80271e6:	f04f 32ff 	mov.w	r2, #4294967295
 80271ea:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80271ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80271ee:	f04f 32ff 	mov.w	r2, #4294967295
 80271f2:	60da      	str	r2, [r3, #12]
 80271f4:	e054      	b.n	80272a0 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80271f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80271f8:	00db      	lsls	r3, r3, #3
 80271fa:	683a      	ldr	r2, [r7, #0]
 80271fc:	4413      	add	r3, r2
 80271fe:	681b      	ldr	r3, [r3, #0]
 8027200:	4618      	mov	r0, r3
 8027202:	f7fd f8b7 	bl	8024374 <lfs_tag_type3>
 8027206:	4603      	mov	r3, r0
 8027208:	461a      	mov	r2, r3
 802720a:	f240 43ff 	movw	r3, #1279	@ 0x4ff
 802720e:	429a      	cmp	r2, r3
 8027210:	d11c      	bne.n	802724c <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8027212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027214:	889c      	ldrh	r4, [r3, #4]
 8027216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8027218:	00db      	lsls	r3, r3, #3
 802721a:	683a      	ldr	r2, [r7, #0]
 802721c:	4413      	add	r3, r2
 802721e:	681b      	ldr	r3, [r3, #0]
 8027220:	4618      	mov	r0, r3
 8027222:	f7fd f8d1 	bl	80243c8 <lfs_tag_id>
 8027226:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8027228:	429c      	cmp	r4, r3
 802722a:	d90f      	bls.n	802724c <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 802722c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802722e:	889b      	ldrh	r3, [r3, #4]
 8027230:	3b01      	subs	r3, #1
 8027232:	b29a      	uxth	r2, r3
 8027234:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027236:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8027238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802723a:	799b      	ldrb	r3, [r3, #6]
 802723c:	2b02      	cmp	r3, #2
 802723e:	d12f      	bne.n	80272a0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8027240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027244:	1e5a      	subs	r2, r3, #1
 8027246:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027248:	629a      	str	r2, [r3, #40]	@ 0x28
                        if (d->type == LFS_TYPE_DIR) {
 802724a:	e029      	b.n	80272a0 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 802724c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802724e:	00db      	lsls	r3, r3, #3
 8027250:	683a      	ldr	r2, [r7, #0]
 8027252:	4413      	add	r3, r2
 8027254:	681b      	ldr	r3, [r3, #0]
 8027256:	4618      	mov	r0, r3
 8027258:	f7fd f88c 	bl	8024374 <lfs_tag_type3>
 802725c:	4603      	mov	r3, r0
 802725e:	461a      	mov	r2, r3
 8027260:	f240 4301 	movw	r3, #1025	@ 0x401
 8027264:	429a      	cmp	r2, r3
 8027266:	d11b      	bne.n	80272a0 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8027268:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802726a:	889c      	ldrh	r4, [r3, #4]
 802726c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802726e:	00db      	lsls	r3, r3, #3
 8027270:	683a      	ldr	r2, [r7, #0]
 8027272:	4413      	add	r3, r2
 8027274:	681b      	ldr	r3, [r3, #0]
 8027276:	4618      	mov	r0, r3
 8027278:	f7fd f8a6 	bl	80243c8 <lfs_tag_id>
 802727c:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 802727e:	429c      	cmp	r4, r3
 8027280:	d30e      	bcc.n	80272a0 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8027282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027284:	889b      	ldrh	r3, [r3, #4]
 8027286:	3301      	adds	r3, #1
 8027288:	b29a      	uxth	r2, r3
 802728a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802728c:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 802728e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027290:	799b      	ldrb	r3, [r3, #6]
 8027292:	2b02      	cmp	r3, #2
 8027294:	d104      	bne.n	80272a0 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8027296:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8027298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802729a:	1c5a      	adds	r2, r3, #1
 802729c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802729e:	629a      	str	r2, [r3, #40]	@ 0x28
                for (int i = 0; i < attrcount; i++) {
 80272a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80272a2:	3301      	adds	r3, #1
 80272a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80272a6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80272a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80272ac:	429a      	cmp	r2, r3
 80272ae:	f6ff af7e 	blt.w	80271ae <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80272b2:	e016      	b.n	80272e2 <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 80272b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272b6:	889a      	ldrh	r2, [r3, #4]
 80272b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272ba:	8b9b      	ldrh	r3, [r3, #28]
 80272bc:	1ad3      	subs	r3, r2, r3
 80272be:	b29a      	uxth	r2, r3
 80272c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272c2:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80272c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272c6:	f103 0108 	add.w	r1, r3, #8
 80272ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272cc:	3320      	adds	r3, #32
 80272ce:	461a      	mov	r2, r3
 80272d0:	68f8      	ldr	r0, [r7, #12]
 80272d2:	f7fe fd03 	bl	8025cdc <lfs_dir_fetch>
 80272d6:	6538      	str	r0, [r7, #80]	@ 0x50
                if (err) {
 80272d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80272da:	2b00      	cmp	r3, #0
 80272dc:	d001      	beq.n	80272e2 <lfs_dir_relocatingcommit+0x532>
                    return err;
 80272de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80272e0:	e011      	b.n	8027306 <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 80272e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272e4:	889a      	ldrh	r2, [r3, #4]
 80272e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272e8:	8b9b      	ldrh	r3, [r3, #28]
 80272ea:	429a      	cmp	r2, r3
 80272ec:	d303      	bcc.n	80272f6 <lfs_dir_relocatingcommit+0x546>
 80272ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272f0:	7fdb      	ldrb	r3, [r3, #31]
 80272f2:	2b00      	cmp	r3, #0
 80272f4:	d1de      	bne.n	80272b4 <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80272f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272f8:	681b      	ldr	r3, [r3, #0]
 80272fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80272fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80272fe:	2b00      	cmp	r3, #0
 8027300:	f47f af35 	bne.w	802716e <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8027304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8027306:	4618      	mov	r0, r3
 8027308:	3770      	adds	r7, #112	@ 0x70
 802730a:	46bd      	mov	sp, r7
 802730c:	bdb0      	pop	{r4, r5, r7, pc}
 802730e:	bf00      	nop
 8027310:	08033984 	.word	0x08033984
 8027314:	08034b34 	.word	0x08034b34
 8027318:	08033818 	.word	0x08033818

0802731c <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 802731c:	b5b0      	push	{r4, r5, r7, lr}
 802731e:	b0bc      	sub	sp, #240	@ 0xf0
 8027320:	af04      	add	r7, sp, #16
 8027322:	60f8      	str	r0, [r7, #12]
 8027324:	60b9      	str	r1, [r7, #8]
 8027326:	607a      	str	r2, [r7, #4]
 8027328:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802732a:	68fb      	ldr	r3, [r7, #12]
 802732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802732e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8027332:	e045      	b.n	80273c0 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8027334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027338:	3308      	adds	r3, #8
 802733a:	68ba      	ldr	r2, [r7, #8]
 802733c:	429a      	cmp	r2, r3
 802733e:	d03a      	beq.n	80273b6 <lfs_dir_orphaningcommit+0x9a>
 8027340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027344:	3308      	adds	r3, #8
 8027346:	68ba      	ldr	r2, [r7, #8]
 8027348:	4611      	mov	r1, r2
 802734a:	4618      	mov	r0, r3
 802734c:	f7fc ff56 	bl	80241fc <lfs_pair_cmp>
 8027350:	4603      	mov	r3, r0
 8027352:	2b00      	cmp	r3, #0
 8027354:	d12f      	bne.n	80273b6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8027356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802735a:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 802735c:	2b01      	cmp	r3, #1
 802735e:	d12a      	bne.n	80273b6 <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8027360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802736a:	2b00      	cmp	r3, #0
 802736c:	d023      	beq.n	80273b6 <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 802736e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8027374:	68fb      	ldr	r3, [r7, #12]
 8027376:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8027378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 802737a:	429a      	cmp	r2, r3
 802737c:	d91b      	bls.n	80273b6 <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 802737e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8027382:	68f8      	ldr	r0, [r7, #12]
 8027384:	f001 fa26 	bl	80287d4 <lfs_file_outline>
 8027388:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 802738c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8027390:	2b00      	cmp	r3, #0
 8027392:	d002      	beq.n	802739a <lfs_dir_orphaningcommit+0x7e>
                return err;
 8027394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8027398:	e2ad      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 802739a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 802739e:	68f8      	ldr	r0, [r7, #12]
 80273a0:	f001 fa3a 	bl	8028818 <lfs_file_flush>
 80273a4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
            if (err) {
 80273a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80273ac:	2b00      	cmp	r3, #0
 80273ae:	d002      	beq.n	80273b6 <lfs_dir_orphaningcommit+0x9a>
                return err;
 80273b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80273b4:	e29f      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80273b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80273ba:	681b      	ldr	r3, [r3, #0]
 80273bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80273c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80273c4:	2b00      	cmp	r3, #0
 80273c6:	d1b5      	bne.n	8027334 <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80273c8:	68bb      	ldr	r3, [r7, #8]
 80273ca:	681b      	ldr	r3, [r3, #0]
 80273cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80273d0:	68bb      	ldr	r3, [r7, #8]
 80273d2:	685b      	ldr	r3, [r3, #4]
 80273d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    lfs_mdir_t ldir = *dir;
 80273d8:	68bb      	ldr	r3, [r7, #8]
 80273da:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80273de:	461d      	mov	r5, r3
 80273e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80273e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80273e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80273e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80273ec:	68ba      	ldr	r2, [r7, #8]
 80273ee:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80273f2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80273f6:	9301      	str	r3, [sp, #4]
 80273f8:	683b      	ldr	r3, [r7, #0]
 80273fa:	9300      	str	r3, [sp, #0]
 80273fc:	687b      	ldr	r3, [r7, #4]
 80273fe:	68f8      	ldr	r0, [r7, #12]
 8027400:	f7ff fcd6 	bl	8026db0 <lfs_dir_relocatingcommit>
 8027404:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8027408:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802740c:	2b00      	cmp	r3, #0
 802740e:	da02      	bge.n	8027416 <lfs_dir_orphaningcommit+0xfa>
        return state;
 8027410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8027414:	e26f      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8027416:	68bb      	ldr	r3, [r7, #8]
 8027418:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 802741c:	4611      	mov	r1, r2
 802741e:	4618      	mov	r0, r3
 8027420:	f7fc feec 	bl	80241fc <lfs_pair_cmp>
 8027424:	4603      	mov	r3, r0
 8027426:	2b00      	cmp	r3, #0
 8027428:	d109      	bne.n	802743e <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 802742a:	68bb      	ldr	r3, [r7, #8]
 802742c:	461d      	mov	r5, r3
 802742e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8027432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8027434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8027436:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 802743a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 802743e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8027442:	2b02      	cmp	r3, #2
 8027444:	d14a      	bne.n	80274dc <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8027446:	68fb      	ldr	r3, [r7, #12]
 8027448:	3348      	adds	r3, #72	@ 0x48
 802744a:	461a      	mov	r2, r3
 802744c:	68b9      	ldr	r1, [r7, #8]
 802744e:	68f8      	ldr	r0, [r7, #12]
 8027450:	f7fe fc60 	bl	8025d14 <lfs_dir_getgstate>
 8027454:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
        if (err) {
 8027458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 802745c:	2b00      	cmp	r3, #0
 802745e:	d002      	beq.n	8027466 <lfs_dir_orphaningcommit+0x14a>
            return err;
 8027460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8027464:	e247      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8027466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8027468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        lpair[1] = pdir.pair[1];
 802746c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802746e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
        lfs_pair_tole32(dir->tail);
 8027472:	68bb      	ldr	r3, [r7, #8]
 8027474:	3318      	adds	r3, #24
 8027476:	4618      	mov	r0, r3
 8027478:	f7fc ff31 	bl	80242de <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 802747c:	68bb      	ldr	r3, [r7, #8]
 802747e:	7ddb      	ldrb	r3, [r3, #23]
 8027480:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8027484:	051a      	lsls	r2, r3, #20
 8027486:	4bc2      	ldr	r3, [pc, #776]	@ (8027790 <lfs_dir_orphaningcommit+0x474>)
 8027488:	4313      	orrs	r3, r2
 802748a:	667b      	str	r3, [r7, #100]	@ 0x64
 802748c:	68bb      	ldr	r3, [r7, #8]
 802748e:	3318      	adds	r3, #24
 8027490:	66bb      	str	r3, [r7, #104]	@ 0x68
 8027492:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8027496:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 802749a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 802749e:	2000      	movs	r0, #0
 80274a0:	9001      	str	r0, [sp, #4]
 80274a2:	2001      	movs	r0, #1
 80274a4:	9000      	str	r0, [sp, #0]
 80274a6:	68f8      	ldr	r0, [r7, #12]
 80274a8:	f7ff fc82 	bl	8026db0 <lfs_dir_relocatingcommit>
 80274ac:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80274b0:	68bb      	ldr	r3, [r7, #8]
 80274b2:	3318      	adds	r3, #24
 80274b4:	4618      	mov	r0, r3
 80274b6:	f7fc fef8 	bl	80242aa <lfs_pair_fromle32>
        if (state < 0) {
 80274ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80274be:	2b00      	cmp	r3, #0
 80274c0:	da02      	bge.n	80274c8 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80274c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80274c6:	e216      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80274c8:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80274cc:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80274d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80274d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80274d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80274d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80274dc:	2300      	movs	r3, #0
 80274de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
    while (state == LFS_OK_RELOCATED) {
 80274e2:	e1fc      	b.n	80278de <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80274e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80274e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80274ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80274f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80274f4:	4ca7      	ldr	r4, [pc, #668]	@ (8027794 <lfs_dir_orphaningcommit+0x478>)
 80274f6:	9403      	str	r4, [sp, #12]
 80274f8:	9102      	str	r1, [sp, #8]
 80274fa:	9201      	str	r2, [sp, #4]
 80274fc:	9300      	str	r3, [sp, #0]
 80274fe:	4603      	mov	r3, r0
 8027500:	f44f 620c 	mov.w	r2, #2240	@ 0x8c0
 8027504:	49a4      	ldr	r1, [pc, #656]	@ (8027798 <lfs_dir_orphaningcommit+0x47c>)
 8027506:	48a5      	ldr	r0, [pc, #660]	@ (802779c <lfs_dir_orphaningcommit+0x480>)
 8027508:	f006 f9ae 	bl	802d868 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 802750c:	2300      	movs	r3, #0
 802750e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 8027512:	68fb      	ldr	r3, [r7, #12]
 8027514:	f103 0220 	add.w	r2, r3, #32
 8027518:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 802751c:	4611      	mov	r1, r2
 802751e:	4618      	mov	r0, r3
 8027520:	f7fc fe6c 	bl	80241fc <lfs_pair_cmp>
 8027524:	4603      	mov	r3, r0
 8027526:	2b00      	cmp	r3, #0
 8027528:	d107      	bne.n	802753a <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 802752a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802752e:	68fb      	ldr	r3, [r7, #12]
 8027530:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 8027532:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8027536:	68fb      	ldr	r3, [r7, #12]
 8027538:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802753a:	68fb      	ldr	r3, [r7, #12]
 802753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802753e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8027542:	e037      	b.n	80275b4 <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 8027544:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8027548:	f103 0208 	add.w	r2, r3, #8
 802754c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8027550:	4611      	mov	r1, r2
 8027552:	4618      	mov	r0, r3
 8027554:	f7fc fe52 	bl	80241fc <lfs_pair_cmp>
 8027558:	4603      	mov	r3, r0
 802755a:	2b00      	cmp	r3, #0
 802755c:	d109      	bne.n	8027572 <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 802755e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8027562:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8027566:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8027568:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 802756c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8027570:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 8027572:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8027576:	799b      	ldrb	r3, [r3, #6]
 8027578:	2b02      	cmp	r3, #2
 802757a:	d116      	bne.n	80275aa <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 802757c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8027580:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8027584:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8027588:	4611      	mov	r1, r2
 802758a:	4618      	mov	r0, r3
 802758c:	f7fc fe36 	bl	80241fc <lfs_pair_cmp>
 8027590:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 8027592:	2b00      	cmp	r3, #0
 8027594:	d109      	bne.n	80275aa <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 8027596:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802759a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 802759e:	62da      	str	r2, [r3, #44]	@ 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80275a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80275a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80275a8:	631a      	str	r2, [r3, #48]	@ 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80275aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80275ae:	681b      	ldr	r3, [r3, #0]
 80275b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80275b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80275b8:	2b00      	cmp	r3, #0
 80275ba:	d1c3      	bne.n	8027544 <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80275bc:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80275c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80275c4:	4619      	mov	r1, r3
 80275c6:	68f8      	ldr	r0, [r7, #12]
 80275c8:	f002 fed8 	bl	802a37c <lfs_fs_parent>
 80275cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80275d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80275d4:	2b00      	cmp	r3, #0
 80275d6:	da07      	bge.n	80275e8 <lfs_dir_orphaningcommit+0x2cc>
 80275d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80275dc:	f113 0f02 	cmn.w	r3, #2
 80275e0:	d002      	beq.n	80275e8 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80275e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80275e6:	e186      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80275e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80275ec:	f113 0f02 	cmn.w	r3, #2
 80275f0:	bf14      	ite	ne
 80275f2:	2301      	movne	r3, #1
 80275f4:	2300      	moveq	r3, #0
 80275f6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        if (tag != LFS_ERR_NOENT) {
 80275fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80275fe:	f113 0f02 	cmn.w	r3, #2
 8027602:	f000 809e 	beq.w	8027742 <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 8027606:	2101      	movs	r1, #1
 8027608:	68f8      	ldr	r0, [r7, #12]
 802760a:	f002 ff0f 	bl	802a42c <lfs_fs_preporphans>
 802760e:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
            if (err) {
 8027612:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8027616:	2b00      	cmp	r3, #0
 8027618:	d002      	beq.n	8027620 <lfs_dir_orphaningcommit+0x304>
                return err;
 802761a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 802761e:	e16a      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027620:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8027624:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8027628:	68fb      	ldr	r3, [r7, #12]
 802762a:	3330      	adds	r3, #48	@ 0x30
 802762c:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8027630:	4611      	mov	r1, r2
 8027632:	4618      	mov	r0, r3
 8027634:	f7fc ff70 	bl	8024518 <lfs_gstate_hasmovehere>
 8027638:	4603      	mov	r3, r0
 802763a:	2b00      	cmp	r3, #0
 802763c:	d02d      	beq.n	802769a <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 802763e:	68fb      	ldr	r3, [r7, #12]
 8027640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8027642:	4618      	mov	r0, r3
 8027644:	f7fc fec0 	bl	80243c8 <lfs_tag_id>
 8027648:	4603      	mov	r3, r0
 802764a:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
                LFS_DEBUG("Fixing move while relocating "
 802764e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8027650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8027652:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8027656:	484f      	ldr	r0, [pc, #316]	@ (8027794 <lfs_dir_orphaningcommit+0x478>)
 8027658:	9002      	str	r0, [sp, #8]
 802765a:	9201      	str	r2, [sp, #4]
 802765c:	9300      	str	r3, [sp, #0]
 802765e:	460b      	mov	r3, r1
 8027660:	f640 02ed 	movw	r2, #2285	@ 0x8ed
 8027664:	494c      	ldr	r1, [pc, #304]	@ (8027798 <lfs_dir_orphaningcommit+0x47c>)
 8027666:	484e      	ldr	r0, [pc, #312]	@ (80277a0 <lfs_dir_orphaningcommit+0x484>)
 8027668:	f006 f8fe 	bl	802d868 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802766c:	2200      	movs	r2, #0
 802766e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8027672:	68f8      	ldr	r0, [r7, #12]
 8027674:	f002 ff14 	bl	802a4a0 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8027678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 802767c:	4618      	mov	r0, r3
 802767e:	f7fc fea3 	bl	80243c8 <lfs_tag_id>
 8027682:	4603      	mov	r3, r0
 8027684:	461a      	mov	r2, r3
 8027686:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 802768a:	4293      	cmp	r3, r2
 802768c:	d205      	bcs.n	802769a <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 802768e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8027692:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8027696:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 802769a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802769c:	657b      	str	r3, [r7, #84]	@ 0x54
 802769e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80276a0:	65bb      	str	r3, [r7, #88]	@ 0x58
            lfs_pair_tole32(ldir.pair);
 80276a2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80276a6:	4618      	mov	r0, r3
 80276a8:	f7fc fe19 	bl	80242de <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80276ac:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80276b0:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80276b4:	4293      	cmp	r3, r2
 80276b6:	d007      	beq.n	80276c8 <lfs_dir_orphaningcommit+0x3ac>
 80276b8:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80276bc:	029b      	lsls	r3, r3, #10
 80276be:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80276c2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80276c6:	e000      	b.n	80276ca <lfs_dir_orphaningcommit+0x3ae>
 80276c8:	2300      	movs	r3, #0
 80276ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80276cc:	2300      	movs	r3, #0
 80276ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80276d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80276d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80276d6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80276da:	653b      	str	r3, [r7, #80]	@ 0x50
 80276dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80276e0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80276e4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80276e8:	2000      	movs	r0, #0
 80276ea:	9001      	str	r0, [sp, #4]
 80276ec:	2002      	movs	r0, #2
 80276ee:	9000      	str	r0, [sp, #0]
 80276f0:	68f8      	ldr	r0, [r7, #12]
 80276f2:	f7ff fb5d 	bl	8026db0 <lfs_dir_relocatingcommit>
 80276f6:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80276fa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80276fe:	4618      	mov	r0, r3
 8027700:	f7fc fdd3 	bl	80242aa <lfs_pair_fromle32>
            if (state < 0) {
 8027704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8027708:	2b00      	cmp	r3, #0
 802770a:	da02      	bge.n	8027712 <lfs_dir_orphaningcommit+0x3f6>
                return state;
 802770c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8027710:	e0f1      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 8027712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8027716:	2b01      	cmp	r3, #1
 8027718:	d113      	bne.n	8027742 <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 802771a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802771c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                lpair[1] = ppair[1];
 8027720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8027722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                ldir = pdir;
 8027726:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 802772a:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 802772e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027732:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 802773a:	2301      	movs	r3, #1
 802773c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8027740:	e0cd      	b.n	80278de <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 8027742:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8027746:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 802774a:	4619      	mov	r1, r3
 802774c:	68f8      	ldr	r0, [r7, #12]
 802774e:	f002 fd8d 	bl	802a26c <lfs_fs_pred>
 8027752:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
        if (err && err != LFS_ERR_NOENT) {
 8027756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802775a:	2b00      	cmp	r3, #0
 802775c:	d007      	beq.n	802776e <lfs_dir_orphaningcommit+0x452>
 802775e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8027762:	f113 0f02 	cmn.w	r3, #2
 8027766:	d002      	beq.n	802776e <lfs_dir_orphaningcommit+0x452>
            return err;
 8027768:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802776c:	e0c3      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 802776e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8027772:	2b00      	cmp	r3, #0
 8027774:	d01a      	beq.n	80277ac <lfs_dir_orphaningcommit+0x490>
 8027776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802777a:	f113 0f02 	cmn.w	r3, #2
 802777e:	d115      	bne.n	80277ac <lfs_dir_orphaningcommit+0x490>
 8027780:	4b08      	ldr	r3, [pc, #32]	@ (80277a4 <lfs_dir_orphaningcommit+0x488>)
 8027782:	4a09      	ldr	r2, [pc, #36]	@ (80277a8 <lfs_dir_orphaningcommit+0x48c>)
 8027784:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8027788:	4803      	ldr	r0, [pc, #12]	@ (8027798 <lfs_dir_orphaningcommit+0x47c>)
 802778a:	f005 f83d 	bl	802c808 <__assert_func>
 802778e:	bf00      	nop
 8027790:	000ffc08 	.word	0x000ffc08
 8027794:	0803392c 	.word	0x0803392c
 8027798:	08033818 	.word	0x08033818
 802779c:	08033aac 	.word	0x08033aac
 80277a0:	08033ae8 	.word	0x08033ae8
 80277a4:	08033b2c 	.word	0x08033b2c
 80277a8:	08034b50 	.word	0x08034b50

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80277ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80277b0:	f113 0f02 	cmn.w	r3, #2
 80277b4:	f000 8093 	beq.w	80278de <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80277b8:	68fb      	ldr	r3, [r7, #12]
 80277ba:	3330      	adds	r3, #48	@ 0x30
 80277bc:	4618      	mov	r0, r3
 80277be:	f7fc fe76 	bl	80244ae <lfs_gstate_hasorphans>
 80277c2:	4603      	mov	r3, r0
 80277c4:	2b00      	cmp	r3, #0
 80277c6:	d011      	beq.n	80277ec <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80277c8:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80277cc:	425b      	negs	r3, r3
 80277ce:	b2db      	uxtb	r3, r3
 80277d0:	b25b      	sxtb	r3, r3
 80277d2:	4619      	mov	r1, r3
 80277d4:	68f8      	ldr	r0, [r7, #12]
 80277d6:	f002 fe29 	bl	802a42c <lfs_fs_preporphans>
 80277da:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                if (err) {
 80277de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80277e2:	2b00      	cmp	r3, #0
 80277e4:	d002      	beq.n	80277ec <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80277e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80277ea:	e084      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80277ec:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80277f0:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80277f4:	68fb      	ldr	r3, [r7, #12]
 80277f6:	3330      	adds	r3, #48	@ 0x30
 80277f8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80277fc:	4611      	mov	r1, r2
 80277fe:	4618      	mov	r0, r3
 8027800:	f7fc fe8a 	bl	8024518 <lfs_gstate_hasmovehere>
 8027804:	4603      	mov	r3, r0
 8027806:	2b00      	cmp	r3, #0
 8027808:	d01c      	beq.n	8027844 <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 802780a:	68fb      	ldr	r3, [r7, #12]
 802780c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802780e:	4618      	mov	r0, r3
 8027810:	f7fc fdda 	bl	80243c8 <lfs_tag_id>
 8027814:	4603      	mov	r3, r0
 8027816:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
                LFS_DEBUG("Fixing move while relocating "
 802781a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 802781c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802781e:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	@ 0xc8
 8027822:	4837      	ldr	r0, [pc, #220]	@ (8027900 <lfs_dir_orphaningcommit+0x5e4>)
 8027824:	9002      	str	r0, [sp, #8]
 8027826:	9201      	str	r2, [sp, #4]
 8027828:	9300      	str	r3, [sp, #0]
 802782a:	460b      	mov	r3, r1
 802782c:	f640 1221 	movw	r2, #2337	@ 0x921
 8027830:	4934      	ldr	r1, [pc, #208]	@ (8027904 <lfs_dir_orphaningcommit+0x5e8>)
 8027832:	4835      	ldr	r0, [pc, #212]	@ (8027908 <lfs_dir_orphaningcommit+0x5ec>)
 8027834:	f006 f818 	bl	802d868 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027838:	2200      	movs	r2, #0
 802783a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 802783e:	68f8      	ldr	r0, [r7, #12]
 8027840:	f002 fe2e 	bl	802a4a0 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 8027844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8027846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            lpair[1] = pdir.pair[1];
 802784a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802784c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            lfs_pair_tole32(ldir.pair);
 8027850:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027854:	4618      	mov	r0, r3
 8027856:	f7fc fd42 	bl	80242de <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 802785a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 802785e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8027862:	4293      	cmp	r3, r2
 8027864:	d007      	beq.n	8027876 <lfs_dir_orphaningcommit+0x55a>
 8027866:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 802786a:	029b      	lsls	r3, r3, #10
 802786c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8027870:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8027874:	e000      	b.n	8027878 <lfs_dir_orphaningcommit+0x55c>
 8027876:	2300      	movs	r3, #0
 8027878:	627b      	str	r3, [r7, #36]	@ 0x24
 802787a:	2300      	movs	r3, #0
 802787c:	62bb      	str	r3, [r7, #40]	@ 0x28
 802787e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8027882:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8027886:	051a      	lsls	r2, r3, #20
 8027888:	4b20      	ldr	r3, [pc, #128]	@ (802790c <lfs_dir_orphaningcommit+0x5f0>)
 802788a:	4313      	orrs	r3, r2
 802788c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802788e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027892:	633b      	str	r3, [r7, #48]	@ 0x30
 8027894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8027898:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 802789c:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80278a0:	2000      	movs	r0, #0
 80278a2:	9001      	str	r0, [sp, #4]
 80278a4:	2002      	movs	r0, #2
 80278a6:	9000      	str	r0, [sp, #0]
 80278a8:	68f8      	ldr	r0, [r7, #12]
 80278aa:	f7ff fa81 	bl	8026db0 <lfs_dir_relocatingcommit>
 80278ae:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80278b2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80278b6:	4618      	mov	r0, r3
 80278b8:	f7fc fcf7 	bl	80242aa <lfs_pair_fromle32>
            if (state < 0) {
 80278bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80278c0:	2b00      	cmp	r3, #0
 80278c2:	da02      	bge.n	80278ca <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80278c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80278c8:	e015      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80278ca:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80278ce:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
 80278d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80278d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80278d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80278da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80278de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80278e2:	2b01      	cmp	r3, #1
 80278e4:	f43f adfe 	beq.w	80274e4 <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80278e8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 80278ec:	2b00      	cmp	r3, #0
 80278ee:	d001      	beq.n	80278f4 <lfs_dir_orphaningcommit+0x5d8>
 80278f0:	2303      	movs	r3, #3
 80278f2:	e000      	b.n	80278f6 <lfs_dir_orphaningcommit+0x5da>
 80278f4:	2300      	movs	r3, #0
}
 80278f6:	4618      	mov	r0, r3
 80278f8:	37e0      	adds	r7, #224	@ 0xe0
 80278fa:	46bd      	mov	sp, r7
 80278fc:	bdb0      	pop	{r4, r5, r7, pc}
 80278fe:	bf00      	nop
 8027900:	0803392c 	.word	0x0803392c
 8027904:	08033818 	.word	0x08033818
 8027908:	08033ae8 	.word	0x08033ae8
 802790c:	000ffc08 	.word	0x000ffc08

08027910 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027910:	b580      	push	{r7, lr}
 8027912:	b086      	sub	sp, #24
 8027914:	af00      	add	r7, sp, #0
 8027916:	60f8      	str	r0, [r7, #12]
 8027918:	60b9      	str	r1, [r7, #8]
 802791a:	607a      	str	r2, [r7, #4]
 802791c:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 802791e:	683b      	ldr	r3, [r7, #0]
 8027920:	687a      	ldr	r2, [r7, #4]
 8027922:	68b9      	ldr	r1, [r7, #8]
 8027924:	68f8      	ldr	r0, [r7, #12]
 8027926:	f7ff fcf9 	bl	802731c <lfs_dir_orphaningcommit>
 802792a:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 802792c:	697b      	ldr	r3, [r7, #20]
 802792e:	2b00      	cmp	r3, #0
 8027930:	da01      	bge.n	8027936 <lfs_dir_commit+0x26>
        return orphans;
 8027932:	697b      	ldr	r3, [r7, #20]
 8027934:	e00d      	b.n	8027952 <lfs_dir_commit+0x42>
    }

    if (orphans) {
 8027936:	697b      	ldr	r3, [r7, #20]
 8027938:	2b00      	cmp	r3, #0
 802793a:	d009      	beq.n	8027950 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 802793c:	2100      	movs	r1, #0
 802793e:	68f8      	ldr	r0, [r7, #12]
 8027940:	f002 fe4e 	bl	802a5e0 <lfs_fs_deorphan>
 8027944:	6138      	str	r0, [r7, #16]
        if (err) {
 8027946:	693b      	ldr	r3, [r7, #16]
 8027948:	2b00      	cmp	r3, #0
 802794a:	d001      	beq.n	8027950 <lfs_dir_commit+0x40>
            return err;
 802794c:	693b      	ldr	r3, [r7, #16]
 802794e:	e000      	b.n	8027952 <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8027950:	2300      	movs	r3, #0
}
 8027952:	4618      	mov	r0, r3
 8027954:	3718      	adds	r7, #24
 8027956:	46bd      	mov	sp, r7
 8027958:	bd80      	pop	{r7, pc}
	...

0802795c <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 802795c:	b5b0      	push	{r4, r5, r7, lr}
 802795e:	b0b8      	sub	sp, #224	@ 0xe0
 8027960:	af00      	add	r7, sp, #0
 8027962:	6078      	str	r0, [r7, #4]
 8027964:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8027966:	6878      	ldr	r0, [r7, #4]
 8027968:	f002 ffde 	bl	802a928 <lfs_fs_forceconsistency>
 802796c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 8027970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027974:	2b00      	cmp	r3, #0
 8027976:	d002      	beq.n	802797e <lfs_rawmkdir+0x22>
        return err;
 8027978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802797c:	e128      	b.n	8027bd0 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 802797e:	687b      	ldr	r3, [r7, #4]
 8027980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027982:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8027986:	f107 00ae 	add.w	r0, r7, #174	@ 0xae
 802798a:	463a      	mov	r2, r7
 802798c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8027990:	f103 0108 	add.w	r1, r3, #8
 8027994:	4603      	mov	r3, r0
 8027996:	6878      	ldr	r0, [r7, #4]
 8027998:	f7fe fab2 	bl	8025f00 <lfs_dir_find>
 802799c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 80279a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80279a4:	f113 0f02 	cmn.w	r3, #2
 80279a8:	d105      	bne.n	80279b6 <lfs_rawmkdir+0x5a>
 80279aa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 80279ae:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80279b2:	4293      	cmp	r3, r2
 80279b4:	d109      	bne.n	80279ca <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 80279b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80279ba:	2b00      	cmp	r3, #0
 80279bc:	da02      	bge.n	80279c4 <lfs_rawmkdir+0x68>
 80279be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80279c2:	e105      	b.n	8027bd0 <lfs_rawmkdir+0x274>
 80279c4:	f06f 0310 	mvn.w	r3, #16
 80279c8:	e102      	b.n	8027bd0 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80279ca:	683b      	ldr	r3, [r7, #0]
 80279cc:	4618      	mov	r0, r3
 80279ce:	f7e8 fc67 	bl	80102a0 <strlen>
 80279d2:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
    if (nlen > lfs->name_max) {
 80279d6:	687b      	ldr	r3, [r7, #4]
 80279d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80279da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80279de:	429a      	cmp	r2, r3
 80279e0:	d902      	bls.n	80279e8 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80279e2:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80279e6:	e0f3      	b.n	8027bd0 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 80279e8:	6878      	ldr	r0, [r7, #4]
 80279ea:	f7fc ff1d 	bl	8024828 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80279ee:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80279f2:	4619      	mov	r1, r3
 80279f4:	6878      	ldr	r0, [r7, #4]
 80279f6:	f7fe fd6f 	bl	80264d8 <lfs_dir_alloc>
 80279fa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
    if (err) {
 80279fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027a02:	2b00      	cmp	r3, #0
 8027a04:	d002      	beq.n	8027a0c <lfs_rawmkdir+0xb0>
        return err;
 8027a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027a0a:	e0e1      	b.n	8027bd0 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8027a0c:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8027a10:	f107 05b8 	add.w	r5, r7, #184	@ 0xb8
 8027a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8027a20:	e012      	b.n	8027a48 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8027a22:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8027a26:	f103 0218 	add.w	r2, r3, #24
 8027a2a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8027a2e:	4619      	mov	r1, r3
 8027a30:	6878      	ldr	r0, [r7, #4]
 8027a32:	f7fe f953 	bl	8025cdc <lfs_dir_fetch>
 8027a36:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 8027a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027a3e:	2b00      	cmp	r3, #0
 8027a40:	d002      	beq.n	8027a48 <lfs_rawmkdir+0xec>
            return err;
 8027a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027a46:	e0c3      	b.n	8027bd0 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8027a48:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8027a4c:	2b00      	cmp	r3, #0
 8027a4e:	d1e8      	bne.n	8027a22 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8027a50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8027a54:	3318      	adds	r3, #24
 8027a56:	4618      	mov	r0, r3
 8027a58:	f7fc fc41 	bl	80242de <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8027a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8027bd8 <lfs_rawmkdir+0x27c>)
 8027a5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8027a60:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8027a64:	3318      	adds	r3, #24
 8027a66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8027a68:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8027a6c:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8027a70:	2301      	movs	r3, #1
 8027a72:	6878      	ldr	r0, [r7, #4]
 8027a74:	f7ff ff4c 	bl	8027910 <lfs_dir_commit>
 8027a78:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8027a7c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8027a80:	3318      	adds	r3, #24
 8027a82:	4618      	mov	r0, r3
 8027a84:	f7fc fc11 	bl	80242aa <lfs_pair_fromle32>
    if (err) {
 8027a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027a8c:	2b00      	cmp	r3, #0
 8027a8e:	d002      	beq.n	8027a96 <lfs_rawmkdir+0x13a>
        return err;
 8027a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027a94:	e09c      	b.n	8027bd0 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 8027a96:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8027a9a:	2b00      	cmp	r3, #0
 8027a9c:	d04c      	beq.n	8027b38 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8027a9e:	2101      	movs	r1, #1
 8027aa0:	6878      	ldr	r0, [r7, #4]
 8027aa2:	f002 fcc3 	bl	802a42c <lfs_fs_preporphans>
 8027aa6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 8027aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027aae:	2b00      	cmp	r3, #0
 8027ab0:	d002      	beq.n	8027ab8 <lfs_rawmkdir+0x15c>
            return err;
 8027ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027ab6:	e08b      	b.n	8027bd0 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8027ab8:	2300      	movs	r3, #0
 8027aba:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
        cwd.id = 0;
 8027abe:	2300      	movs	r3, #0
 8027ac0:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
        lfs->mlist = &cwd;
 8027ac4:	687b      	ldr	r3, [r7, #4]
 8027ac6:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8027aca:	629a      	str	r2, [r3, #40]	@ 0x28

        lfs_pair_tole32(dir.pair);
 8027acc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027ad0:	4618      	mov	r0, r3
 8027ad2:	f7fc fc04 	bl	80242de <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8027ad6:	4b40      	ldr	r3, [pc, #256]	@ (8027bd8 <lfs_rawmkdir+0x27c>)
 8027ad8:	617b      	str	r3, [r7, #20]
 8027ada:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027ade:	61bb      	str	r3, [r7, #24]
 8027ae0:	f107 0214 	add.w	r2, r7, #20
 8027ae4:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8027ae8:	2301      	movs	r3, #1
 8027aea:	6878      	ldr	r0, [r7, #4]
 8027aec:	f7ff ff10 	bl	8027910 <lfs_dir_commit>
 8027af0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8027af4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027af8:	4618      	mov	r0, r3
 8027afa:	f7fc fbd6 	bl	80242aa <lfs_pair_fromle32>
        if (err) {
 8027afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027b02:	2b00      	cmp	r3, #0
 8027b04:	d006      	beq.n	8027b14 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 8027b06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8027b0a:	687b      	ldr	r3, [r7, #4]
 8027b0c:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 8027b0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027b12:	e05d      	b.n	8027bd0 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 8027b14:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8027b18:	687b      	ldr	r3, [r7, #4]
 8027b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8027b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8027b20:	6878      	ldr	r0, [r7, #4]
 8027b22:	f002 fc83 	bl	802a42c <lfs_fs_preporphans>
 8027b26:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (err) {
 8027b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027b2e:	2b00      	cmp	r3, #0
 8027b30:	d002      	beq.n	8027b38 <lfs_rawmkdir+0x1dc>
            return err;
 8027b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027b36:	e04b      	b.n	8027bd0 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8027b38:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027b3c:	4618      	mov	r0, r3
 8027b3e:	f7fc fbce 	bl	80242de <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8027b42:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027b46:	029b      	lsls	r3, r3, #10
 8027b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8027b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8027b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8027b52:	2300      	movs	r3, #0
 8027b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8027b56:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027b5a:	029a      	lsls	r2, r3, #10
 8027b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8027b60:	4313      	orrs	r3, r2
 8027b62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8027b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8027b68:	683b      	ldr	r3, [r7, #0]
 8027b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8027b6c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8027b70:	029b      	lsls	r3, r3, #10
 8027b72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8027b76:	f043 0308 	orr.w	r3, r3, #8
 8027b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8027b7c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8027b82:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8027b86:	f083 0301 	eor.w	r3, r3, #1
 8027b8a:	b2db      	uxtb	r3, r3
 8027b8c:	2b00      	cmp	r3, #0
 8027b8e:	d001      	beq.n	8027b94 <lfs_rawmkdir+0x238>
 8027b90:	4b11      	ldr	r3, [pc, #68]	@ (8027bd8 <lfs_rawmkdir+0x27c>)
 8027b92:	e000      	b.n	8027b96 <lfs_rawmkdir+0x23a>
 8027b94:	2300      	movs	r3, #0
 8027b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8027b98:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8027b9e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8027ba2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8027ba6:	f103 0108 	add.w	r1, r3, #8
 8027baa:	2304      	movs	r3, #4
 8027bac:	6878      	ldr	r0, [r7, #4]
 8027bae:	f7ff feaf 	bl	8027910 <lfs_dir_commit>
 8027bb2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8027bb6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8027bba:	4618      	mov	r0, r3
 8027bbc:	f7fc fb75 	bl	80242aa <lfs_pair_fromle32>
    if (err) {
 8027bc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027bc4:	2b00      	cmp	r3, #0
 8027bc6:	d002      	beq.n	8027bce <lfs_rawmkdir+0x272>
        return err;
 8027bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8027bcc:	e000      	b.n	8027bd0 <lfs_rawmkdir+0x274>
    }

    return 0;
 8027bce:	2300      	movs	r3, #0
}
 8027bd0:	4618      	mov	r0, r3
 8027bd2:	37e0      	adds	r7, #224	@ 0xe0
 8027bd4:	46bd      	mov	sp, r7
 8027bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8027bd8:	600ffc08 	.word	0x600ffc08

08027bdc <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8027bdc:	b590      	push	{r4, r7, lr}
 8027bde:	b08d      	sub	sp, #52	@ 0x34
 8027be0:	af02      	add	r7, sp, #8
 8027be2:	60f8      	str	r0, [r7, #12]
 8027be4:	60b9      	str	r1, [r7, #8]
 8027be6:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8027be8:	68bb      	ldr	r3, [r7, #8]
 8027bea:	f103 0108 	add.w	r1, r3, #8
 8027bee:	1d3a      	adds	r2, r7, #4
 8027bf0:	2300      	movs	r3, #0
 8027bf2:	68f8      	ldr	r0, [r7, #12]
 8027bf4:	f7fe f984 	bl	8025f00 <lfs_dir_find>
 8027bf8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (tag < 0) {
 8027bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027bfc:	2b00      	cmp	r3, #0
 8027bfe:	da01      	bge.n	8027c04 <lfs_dir_rawopen+0x28>
        return tag;
 8027c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c02:	e05e      	b.n	8027cc2 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8027c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c06:	4618      	mov	r0, r3
 8027c08:	f7fc fbb4 	bl	8024374 <lfs_tag_type3>
 8027c0c:	4603      	mov	r3, r0
 8027c0e:	2b02      	cmp	r3, #2
 8027c10:	d002      	beq.n	8027c18 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8027c12:	f06f 0313 	mvn.w	r3, #19
 8027c16:	e054      	b.n	8027cc2 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8027c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c1a:	4618      	mov	r0, r3
 8027c1c:	f7fc fbd4 	bl	80243c8 <lfs_tag_id>
 8027c20:	4603      	mov	r3, r0
 8027c22:	461a      	mov	r2, r3
 8027c24:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8027c28:	429a      	cmp	r2, r3
 8027c2a:	d106      	bne.n	8027c3a <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027c2c:	68fb      	ldr	r3, [r7, #12]
 8027c2e:	6a1b      	ldr	r3, [r3, #32]
 8027c30:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8027c32:	68fb      	ldr	r3, [r7, #12]
 8027c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8027c36:	61bb      	str	r3, [r7, #24]
 8027c38:	e01f      	b.n	8027c7a <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027c3a:	68bb      	ldr	r3, [r7, #8]
 8027c3c:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8027c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027c42:	4618      	mov	r0, r3
 8027c44:	f7fc fbc0 	bl	80243c8 <lfs_tag_id>
 8027c48:	4603      	mov	r3, r0
 8027c4a:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027c4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8027c50:	f043 0308 	orr.w	r3, r3, #8
 8027c54:	f107 0214 	add.w	r2, r7, #20
 8027c58:	9200      	str	r2, [sp, #0]
 8027c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8027ccc <lfs_dir_rawopen+0xf0>)
 8027c5c:	4621      	mov	r1, r4
 8027c5e:	68f8      	ldr	r0, [r7, #12]
 8027c60:	f7fc ff9c 	bl	8024b9c <lfs_dir_get>
 8027c64:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8027c66:	6a3b      	ldr	r3, [r7, #32]
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	da01      	bge.n	8027c70 <lfs_dir_rawopen+0x94>
            return res;
 8027c6c:	6a3b      	ldr	r3, [r7, #32]
 8027c6e:	e028      	b.n	8027cc2 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8027c70:	f107 0314 	add.w	r3, r7, #20
 8027c74:	4618      	mov	r0, r3
 8027c76:	f7fc fb18 	bl	80242aa <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8027c7a:	68bb      	ldr	r3, [r7, #8]
 8027c7c:	3308      	adds	r3, #8
 8027c7e:	f107 0214 	add.w	r2, r7, #20
 8027c82:	4619      	mov	r1, r3
 8027c84:	68f8      	ldr	r0, [r7, #12]
 8027c86:	f7fe f829 	bl	8025cdc <lfs_dir_fetch>
 8027c8a:	61f8      	str	r0, [r7, #28]
    if (err) {
 8027c8c:	69fb      	ldr	r3, [r7, #28]
 8027c8e:	2b00      	cmp	r3, #0
 8027c90:	d001      	beq.n	8027c96 <lfs_dir_rawopen+0xba>
        return err;
 8027c92:	69fb      	ldr	r3, [r7, #28]
 8027c94:	e015      	b.n	8027cc2 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8027c96:	68bb      	ldr	r3, [r7, #8]
 8027c98:	689a      	ldr	r2, [r3, #8]
 8027c9a:	68bb      	ldr	r3, [r7, #8]
 8027c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dir->head[1] = dir->m.pair[1];
 8027c9e:	68bb      	ldr	r3, [r7, #8]
 8027ca0:	68da      	ldr	r2, [r3, #12]
 8027ca2:	68bb      	ldr	r3, [r7, #8]
 8027ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    dir->id = 0;
 8027ca6:	68bb      	ldr	r3, [r7, #8]
 8027ca8:	2200      	movs	r2, #0
 8027caa:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8027cac:	68bb      	ldr	r3, [r7, #8]
 8027cae:	2200      	movs	r2, #0
 8027cb0:	629a      	str	r2, [r3, #40]	@ 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8027cb2:	68bb      	ldr	r3, [r7, #8]
 8027cb4:	2202      	movs	r2, #2
 8027cb6:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8027cb8:	68b9      	ldr	r1, [r7, #8]
 8027cba:	68f8      	ldr	r0, [r7, #12]
 8027cbc:	f7fc fd6b 	bl	8024796 <lfs_mlist_append>

    return 0;
 8027cc0:	2300      	movs	r3, #0
}
 8027cc2:	4618      	mov	r0, r3
 8027cc4:	372c      	adds	r7, #44	@ 0x2c
 8027cc6:	46bd      	mov	sp, r7
 8027cc8:	bd90      	pop	{r4, r7, pc}
 8027cca:	bf00      	nop
 8027ccc:	700ffc00 	.word	0x700ffc00

08027cd0 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8027cd0:	b580      	push	{r7, lr}
 8027cd2:	b082      	sub	sp, #8
 8027cd4:	af00      	add	r7, sp, #0
 8027cd6:	6078      	str	r0, [r7, #4]
 8027cd8:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8027cda:	6839      	ldr	r1, [r7, #0]
 8027cdc:	6878      	ldr	r0, [r7, #4]
 8027cde:	f7fc fd38 	bl	8024752 <lfs_mlist_remove>

    return 0;
 8027ce2:	2300      	movs	r3, #0
}
 8027ce4:	4618      	mov	r0, r3
 8027ce6:	3708      	adds	r7, #8
 8027ce8:	46bd      	mov	sp, r7
 8027cea:	bd80      	pop	{r7, pc}

08027cec <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8027cec:	b580      	push	{r7, lr}
 8027cee:	b086      	sub	sp, #24
 8027cf0:	af00      	add	r7, sp, #0
 8027cf2:	60f8      	str	r0, [r7, #12]
 8027cf4:	60b9      	str	r1, [r7, #8]
 8027cf6:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8027cf8:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8027cfc:	2100      	movs	r1, #0
 8027cfe:	6878      	ldr	r0, [r7, #4]
 8027d00:	f005 ff46 	bl	802db90 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8027d04:	68bb      	ldr	r3, [r7, #8]
 8027d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027d08:	2b00      	cmp	r3, #0
 8027d0a:	d110      	bne.n	8027d2e <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8027d0c:	687b      	ldr	r3, [r7, #4]
 8027d0e:	2202      	movs	r2, #2
 8027d10:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	3308      	adds	r3, #8
 8027d16:	4935      	ldr	r1, [pc, #212]	@ (8027dec <lfs_dir_rawread+0x100>)
 8027d18:	461a      	mov	r2, r3
 8027d1a:	460b      	mov	r3, r1
 8027d1c:	881b      	ldrh	r3, [r3, #0]
 8027d1e:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8027d20:	68bb      	ldr	r3, [r7, #8]
 8027d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027d24:	1c5a      	adds	r2, r3, #1
 8027d26:	68bb      	ldr	r3, [r7, #8]
 8027d28:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 8027d2a:	2301      	movs	r3, #1
 8027d2c:	e05a      	b.n	8027de4 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027d2e:	68bb      	ldr	r3, [r7, #8]
 8027d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027d32:	2b01      	cmp	r3, #1
 8027d34:	d110      	bne.n	8027d58 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8027d36:	687b      	ldr	r3, [r7, #4]
 8027d38:	2202      	movs	r2, #2
 8027d3a:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027d3c:	687b      	ldr	r3, [r7, #4]
 8027d3e:	3308      	adds	r3, #8
 8027d40:	4a2b      	ldr	r2, [pc, #172]	@ (8027df0 <lfs_dir_rawread+0x104>)
 8027d42:	8811      	ldrh	r1, [r2, #0]
 8027d44:	7892      	ldrb	r2, [r2, #2]
 8027d46:	8019      	strh	r1, [r3, #0]
 8027d48:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027d4a:	68bb      	ldr	r3, [r7, #8]
 8027d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027d4e:	1c5a      	adds	r2, r3, #1
 8027d50:	68bb      	ldr	r3, [r7, #8]
 8027d52:	629a      	str	r2, [r3, #40]	@ 0x28
        return true;
 8027d54:	2301      	movs	r3, #1
 8027d56:	e045      	b.n	8027de4 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027d58:	68bb      	ldr	r3, [r7, #8]
 8027d5a:	889a      	ldrh	r2, [r3, #4]
 8027d5c:	68bb      	ldr	r3, [r7, #8]
 8027d5e:	8b9b      	ldrh	r3, [r3, #28]
 8027d60:	429a      	cmp	r2, r3
 8027d62:	d11a      	bne.n	8027d9a <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8027d64:	68bb      	ldr	r3, [r7, #8]
 8027d66:	7fdb      	ldrb	r3, [r3, #31]
 8027d68:	f083 0301 	eor.w	r3, r3, #1
 8027d6c:	b2db      	uxtb	r3, r3
 8027d6e:	2b00      	cmp	r3, #0
 8027d70:	d001      	beq.n	8027d76 <lfs_dir_rawread+0x8a>
                return false;
 8027d72:	2300      	movs	r3, #0
 8027d74:	e036      	b.n	8027de4 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8027d76:	68bb      	ldr	r3, [r7, #8]
 8027d78:	f103 0108 	add.w	r1, r3, #8
 8027d7c:	68bb      	ldr	r3, [r7, #8]
 8027d7e:	3320      	adds	r3, #32
 8027d80:	461a      	mov	r2, r3
 8027d82:	68f8      	ldr	r0, [r7, #12]
 8027d84:	f7fd ffaa 	bl	8025cdc <lfs_dir_fetch>
 8027d88:	6178      	str	r0, [r7, #20]
            if (err) {
 8027d8a:	697b      	ldr	r3, [r7, #20]
 8027d8c:	2b00      	cmp	r3, #0
 8027d8e:	d001      	beq.n	8027d94 <lfs_dir_rawread+0xa8>
                return err;
 8027d90:	697b      	ldr	r3, [r7, #20]
 8027d92:	e027      	b.n	8027de4 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8027d94:	68bb      	ldr	r3, [r7, #8]
 8027d96:	2200      	movs	r2, #0
 8027d98:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8027d9a:	68bb      	ldr	r3, [r7, #8]
 8027d9c:	f103 0108 	add.w	r1, r3, #8
 8027da0:	68bb      	ldr	r3, [r7, #8]
 8027da2:	889a      	ldrh	r2, [r3, #4]
 8027da4:	687b      	ldr	r3, [r7, #4]
 8027da6:	68f8      	ldr	r0, [r7, #12]
 8027da8:	f7fd ffe6 	bl	8025d78 <lfs_dir_getinfo>
 8027dac:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8027dae:	693b      	ldr	r3, [r7, #16]
 8027db0:	2b00      	cmp	r3, #0
 8027db2:	d005      	beq.n	8027dc0 <lfs_dir_rawread+0xd4>
 8027db4:	693b      	ldr	r3, [r7, #16]
 8027db6:	f113 0f02 	cmn.w	r3, #2
 8027dba:	d001      	beq.n	8027dc0 <lfs_dir_rawread+0xd4>
            return err;
 8027dbc:	693b      	ldr	r3, [r7, #16]
 8027dbe:	e011      	b.n	8027de4 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8027dc0:	68bb      	ldr	r3, [r7, #8]
 8027dc2:	889b      	ldrh	r3, [r3, #4]
 8027dc4:	3301      	adds	r3, #1
 8027dc6:	b29a      	uxth	r2, r3
 8027dc8:	68bb      	ldr	r3, [r7, #8]
 8027dca:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8027dcc:	693b      	ldr	r3, [r7, #16]
 8027dce:	f113 0f02 	cmn.w	r3, #2
 8027dd2:	d100      	bne.n	8027dd6 <lfs_dir_rawread+0xea>
    while (true) {
 8027dd4:	e7c0      	b.n	8027d58 <lfs_dir_rawread+0x6c>
            break;
 8027dd6:	bf00      	nop
        }
    }

    dir->pos += 1;
 8027dd8:	68bb      	ldr	r3, [r7, #8]
 8027dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8027ddc:	1c5a      	adds	r2, r3, #1
 8027dde:	68bb      	ldr	r3, [r7, #8]
 8027de0:	629a      	str	r2, [r3, #40]	@ 0x28
    return true;
 8027de2:	2301      	movs	r3, #1
}
 8027de4:	4618      	mov	r0, r3
 8027de6:	3718      	adds	r7, #24
 8027de8:	46bd      	mov	sp, r7
 8027dea:	bd80      	pop	{r7, pc}
 8027dec:	0803397c 	.word	0x0803397c
 8027df0:	08033980 	.word	0x08033980

08027df4 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8027df4:	b590      	push	{r4, r7, lr}
 8027df6:	b087      	sub	sp, #28
 8027df8:	af00      	add	r7, sp, #0
 8027dfa:	6078      	str	r0, [r7, #4]
 8027dfc:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8027dfe:	683b      	ldr	r3, [r7, #0]
 8027e00:	681b      	ldr	r3, [r3, #0]
 8027e02:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8027e04:	687b      	ldr	r3, [r7, #4]
 8027e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8027e08:	69db      	ldr	r3, [r3, #28]
 8027e0a:	3b08      	subs	r3, #8
 8027e0c:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8027e0e:	697a      	ldr	r2, [r7, #20]
 8027e10:	693b      	ldr	r3, [r7, #16]
 8027e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8027e16:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8027e18:	68fb      	ldr	r3, [r7, #12]
 8027e1a:	2b00      	cmp	r3, #0
 8027e1c:	d101      	bne.n	8027e22 <lfs_ctz_index+0x2e>
        return 0;
 8027e1e:	2300      	movs	r3, #0
 8027e20:	e01c      	b.n	8027e5c <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8027e22:	68fb      	ldr	r3, [r7, #12]
 8027e24:	3b01      	subs	r3, #1
 8027e26:	4618      	mov	r0, r3
 8027e28:	f7fb fe0d 	bl	8023a46 <lfs_popc>
 8027e2c:	4603      	mov	r3, r0
 8027e2e:	3302      	adds	r3, #2
 8027e30:	009b      	lsls	r3, r3, #2
 8027e32:	697a      	ldr	r2, [r7, #20]
 8027e34:	1ad2      	subs	r2, r2, r3
 8027e36:	693b      	ldr	r3, [r7, #16]
 8027e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8027e3c:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027e3e:	693b      	ldr	r3, [r7, #16]
 8027e40:	68fa      	ldr	r2, [r7, #12]
 8027e42:	fb02 f303 	mul.w	r3, r2, r3
 8027e46:	697a      	ldr	r2, [r7, #20]
 8027e48:	1ad4      	subs	r4, r2, r3
 8027e4a:	68f8      	ldr	r0, [r7, #12]
 8027e4c:	f7fb fdfb 	bl	8023a46 <lfs_popc>
 8027e50:	4603      	mov	r3, r0
 8027e52:	009b      	lsls	r3, r3, #2
 8027e54:	1ae2      	subs	r2, r4, r3
 8027e56:	683b      	ldr	r3, [r7, #0]
 8027e58:	601a      	str	r2, [r3, #0]
    return i;
 8027e5a:	68fb      	ldr	r3, [r7, #12]
}
 8027e5c:	4618      	mov	r0, r3
 8027e5e:	371c      	adds	r7, #28
 8027e60:	46bd      	mov	sp, r7
 8027e62:	bd90      	pop	{r4, r7, pc}

08027e64 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8027e64:	b590      	push	{r4, r7, lr}
 8027e66:	b08f      	sub	sp, #60	@ 0x3c
 8027e68:	af04      	add	r7, sp, #16
 8027e6a:	60f8      	str	r0, [r7, #12]
 8027e6c:	60b9      	str	r1, [r7, #8]
 8027e6e:	607a      	str	r2, [r7, #4]
 8027e70:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027e74:	2b00      	cmp	r3, #0
 8027e76:	d108      	bne.n	8027e8a <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8027e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8027e7e:	601a      	str	r2, [r3, #0]
        *off = 0;
 8027e80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027e82:	2200      	movs	r2, #0
 8027e84:	601a      	str	r2, [r3, #0]
        return 0;
 8027e86:	2300      	movs	r3, #0
 8027e88:	e053      	b.n	8027f32 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8027e8c:	3b01      	subs	r3, #1
 8027e8e:	617b      	str	r3, [r7, #20]
 8027e90:	f107 0314 	add.w	r3, r7, #20
 8027e94:	4619      	mov	r1, r3
 8027e96:	68f8      	ldr	r0, [r7, #12]
 8027e98:	f7ff ffac 	bl	8027df4 <lfs_ctz_index>
 8027e9c:	4603      	mov	r3, r0
 8027e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8027ea0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8027ea4:	4619      	mov	r1, r3
 8027ea6:	68f8      	ldr	r0, [r7, #12]
 8027ea8:	f7ff ffa4 	bl	8027df4 <lfs_ctz_index>
 8027eac:	4603      	mov	r3, r0
 8027eae:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8027eb0:	e034      	b.n	8027f1c <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8027eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027eb4:	6a3b      	ldr	r3, [r7, #32]
 8027eb6:	1ad3      	subs	r3, r2, r3
 8027eb8:	3301      	adds	r3, #1
 8027eba:	4618      	mov	r0, r3
 8027ebc:	f7fb fda4 	bl	8023a08 <lfs_npw2>
 8027ec0:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8027ec2:	1e5c      	subs	r4, r3, #1
 8027ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8027ec6:	f7fb fdaf 	bl	8023a28 <lfs_ctz>
 8027eca:	4603      	mov	r3, r0
 8027ecc:	4619      	mov	r1, r3
 8027ece:	4620      	mov	r0, r4
 8027ed0:	f7fb fd63 	bl	802399a <lfs_min>
 8027ed4:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8027ed6:	683b      	ldr	r3, [r7, #0]
 8027ed8:	69fa      	ldr	r2, [r7, #28]
 8027eda:	0092      	lsls	r2, r2, #2
 8027edc:	2104      	movs	r1, #4
 8027ede:	9103      	str	r1, [sp, #12]
 8027ee0:	4639      	mov	r1, r7
 8027ee2:	9102      	str	r1, [sp, #8]
 8027ee4:	9201      	str	r2, [sp, #4]
 8027ee6:	9300      	str	r3, [sp, #0]
 8027ee8:	2304      	movs	r3, #4
 8027eea:	687a      	ldr	r2, [r7, #4]
 8027eec:	68b9      	ldr	r1, [r7, #8]
 8027eee:	68f8      	ldr	r0, [r7, #12]
 8027ef0:	f7fb fe2e 	bl	8023b50 <lfs_bd_read>
 8027ef4:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8027ef6:	683b      	ldr	r3, [r7, #0]
 8027ef8:	4618      	mov	r0, r3
 8027efa:	f7fb fdbe 	bl	8023a7a <lfs_fromle32>
 8027efe:	4603      	mov	r3, r0
 8027f00:	603b      	str	r3, [r7, #0]
        if (err) {
 8027f02:	69bb      	ldr	r3, [r7, #24]
 8027f04:	2b00      	cmp	r3, #0
 8027f06:	d001      	beq.n	8027f0c <lfs_ctz_find+0xa8>
            return err;
 8027f08:	69bb      	ldr	r3, [r7, #24]
 8027f0a:	e012      	b.n	8027f32 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8027f0c:	2201      	movs	r2, #1
 8027f0e:	69fb      	ldr	r3, [r7, #28]
 8027f10:	fa02 f303 	lsl.w	r3, r2, r3
 8027f14:	461a      	mov	r2, r3
 8027f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8027f18:	1a9b      	subs	r3, r3, r2
 8027f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (current > target) {
 8027f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8027f1e:	6a3b      	ldr	r3, [r7, #32]
 8027f20:	429a      	cmp	r2, r3
 8027f22:	d8c6      	bhi.n	8027eb2 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8027f24:	683a      	ldr	r2, [r7, #0]
 8027f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027f28:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027f2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8027f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027f2e:	601a      	str	r2, [r3, #0]
    return 0;
 8027f30:	2300      	movs	r3, #0
}
 8027f32:	4618      	mov	r0, r3
 8027f34:	372c      	adds	r7, #44	@ 0x2c
 8027f36:	46bd      	mov	sp, r7
 8027f38:	bd90      	pop	{r4, r7, pc}
	...

08027f3c <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027f3c:	b580      	push	{r7, lr}
 8027f3e:	b092      	sub	sp, #72	@ 0x48
 8027f40:	af04      	add	r7, sp, #16
 8027f42:	60f8      	str	r0, [r7, #12]
 8027f44:	60b9      	str	r1, [r7, #8]
 8027f46:	607a      	str	r2, [r7, #4]
 8027f48:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027f4a:	f107 0320 	add.w	r3, r7, #32
 8027f4e:	4619      	mov	r1, r3
 8027f50:	68f8      	ldr	r0, [r7, #12]
 8027f52:	f7fc fc89 	bl	8024868 <lfs_alloc>
 8027f56:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (err) {
 8027f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027f5a:	2b00      	cmp	r3, #0
 8027f5c:	d001      	beq.n	8027f62 <lfs_ctz_extend+0x26>
            return err;
 8027f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027f60:	e0e9      	b.n	8028136 <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8027f62:	6a3b      	ldr	r3, [r7, #32]
 8027f64:	4619      	mov	r1, r3
 8027f66:	68f8      	ldr	r0, [r7, #12]
 8027f68:	f7fc f8e6 	bl	8024138 <lfs_bd_erase>
 8027f6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            if (err) {
 8027f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027f70:	2b00      	cmp	r3, #0
 8027f72:	d006      	beq.n	8027f82 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8027f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027f76:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8027f7a:	f000 80cb 	beq.w	8028114 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027f80:	e0d9      	b.n	8028136 <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8027f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027f84:	2b00      	cmp	r3, #0
 8027f86:	d107      	bne.n	8027f98 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027f88:	6a3a      	ldr	r2, [r7, #32]
 8027f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8027f8c:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8027f90:	2200      	movs	r2, #0
 8027f92:	601a      	str	r2, [r3, #0]
                return 0;
 8027f94:	2300      	movs	r3, #0
 8027f96:	e0ce      	b.n	8028136 <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8027f9a:	3b01      	subs	r3, #1
 8027f9c:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027f9e:	f107 031c 	add.w	r3, r7, #28
 8027fa2:	4619      	mov	r1, r3
 8027fa4:	68f8      	ldr	r0, [r7, #12]
 8027fa6:	f7ff ff25 	bl	8027df4 <lfs_ctz_index>
 8027faa:	4603      	mov	r3, r0
 8027fac:	62bb      	str	r3, [r7, #40]	@ 0x28
            noff = noff + 1;
 8027fae:	69fb      	ldr	r3, [r7, #28]
 8027fb0:	3301      	adds	r3, #1
 8027fb2:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8027fb4:	68fb      	ldr	r3, [r7, #12]
 8027fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8027fb8:	69da      	ldr	r2, [r3, #28]
 8027fba:	69fb      	ldr	r3, [r7, #28]
 8027fbc:	429a      	cmp	r2, r3
 8027fbe:	d044      	beq.n	802804a <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027fc0:	2300      	movs	r3, #0
 8027fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8027fc4:	e035      	b.n	8028032 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8027fc6:	69fa      	ldr	r2, [r7, #28]
 8027fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027fca:	1ad2      	subs	r2, r2, r3
 8027fcc:	2301      	movs	r3, #1
 8027fce:	9303      	str	r3, [sp, #12]
 8027fd0:	f107 0317 	add.w	r3, r7, #23
 8027fd4:	9302      	str	r3, [sp, #8]
 8027fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8027fd8:	9301      	str	r3, [sp, #4]
 8027fda:	683b      	ldr	r3, [r7, #0]
 8027fdc:	9300      	str	r3, [sp, #0]
 8027fde:	4613      	mov	r3, r2
 8027fe0:	687a      	ldr	r2, [r7, #4]
 8027fe2:	2100      	movs	r1, #0
 8027fe4:	68f8      	ldr	r0, [r7, #12]
 8027fe6:	f7fb fdb3 	bl	8023b50 <lfs_bd_read>
 8027fea:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8027fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027fee:	2b00      	cmp	r3, #0
 8027ff0:	d001      	beq.n	8027ff6 <lfs_ctz_extend+0xba>
                        return err;
 8027ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8027ff4:	e09f      	b.n	8028136 <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8027ff6:	6a3b      	ldr	r3, [r7, #32]
 8027ff8:	2201      	movs	r2, #1
 8027ffa:	9203      	str	r2, [sp, #12]
 8027ffc:	f107 0217 	add.w	r2, r7, #23
 8028000:	9202      	str	r2, [sp, #8]
 8028002:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8028004:	9201      	str	r2, [sp, #4]
 8028006:	9300      	str	r3, [sp, #0]
 8028008:	2301      	movs	r3, #1
 802800a:	687a      	ldr	r2, [r7, #4]
 802800c:	68b9      	ldr	r1, [r7, #8]
 802800e:	68f8      	ldr	r0, [r7, #12]
 8028010:	f7fb ffe4 	bl	8023fdc <lfs_bd_prog>
 8028014:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8028016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028018:	2b00      	cmp	r3, #0
 802801a:	d007      	beq.n	802802c <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 802801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802801e:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8028022:	d101      	bne.n	8028028 <lfs_ctz_extend+0xec>
                            goto relocate;
 8028024:	bf00      	nop
                    goto relocate;
 8028026:	e075      	b.n	8028114 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8028028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                return err;
 802802a:	e084      	b.n	8028136 <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 802802c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802802e:	3301      	adds	r3, #1
 8028030:	637b      	str	r3, [r7, #52]	@ 0x34
 8028032:	69fb      	ldr	r3, [r7, #28]
 8028034:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8028036:	429a      	cmp	r2, r3
 8028038:	d3c5      	bcc.n	8027fc6 <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 802803a:	6a3a      	ldr	r2, [r7, #32]
 802803c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802803e:	601a      	str	r2, [r3, #0]
                *off = noff;
 8028040:	69fa      	ldr	r2, [r7, #28]
 8028042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8028044:	601a      	str	r2, [r3, #0]
                return 0;
 8028046:	2300      	movs	r3, #0
 8028048:	e075      	b.n	8028136 <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 802804a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802804c:	3301      	adds	r3, #1
 802804e:	62bb      	str	r3, [r7, #40]	@ 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8028050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8028052:	f7fb fce9 	bl	8023a28 <lfs_ctz>
 8028056:	4603      	mov	r3, r0
 8028058:	3301      	adds	r3, #1
 802805a:	627b      	str	r3, [r7, #36]	@ 0x24
            lfs_block_t nhead = head;
 802805c:	683b      	ldr	r3, [r7, #0]
 802805e:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8028060:	2300      	movs	r3, #0
 8028062:	633b      	str	r3, [r7, #48]	@ 0x30
 8028064:	e049      	b.n	80280fa <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8028066:	69bb      	ldr	r3, [r7, #24]
 8028068:	4618      	mov	r0, r3
 802806a:	f7fb fd11 	bl	8023a90 <lfs_tole32>
 802806e:	4603      	mov	r3, r0
 8028070:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8028072:	6a3b      	ldr	r3, [r7, #32]
 8028074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8028076:	0092      	lsls	r2, r2, #2
 8028078:	2104      	movs	r1, #4
 802807a:	9103      	str	r1, [sp, #12]
 802807c:	f107 0118 	add.w	r1, r7, #24
 8028080:	9102      	str	r1, [sp, #8]
 8028082:	9201      	str	r2, [sp, #4]
 8028084:	9300      	str	r3, [sp, #0]
 8028086:	2301      	movs	r3, #1
 8028088:	687a      	ldr	r2, [r7, #4]
 802808a:	68b9      	ldr	r1, [r7, #8]
 802808c:	68f8      	ldr	r0, [r7, #12]
 802808e:	f7fb ffa5 	bl	8023fdc <lfs_bd_prog>
 8028092:	62f8      	str	r0, [r7, #44]	@ 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8028094:	69bb      	ldr	r3, [r7, #24]
 8028096:	4618      	mov	r0, r3
 8028098:	f7fb fcef 	bl	8023a7a <lfs_fromle32>
 802809c:	4603      	mov	r3, r0
 802809e:	61bb      	str	r3, [r7, #24]
                if (err) {
 80280a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80280a2:	2b00      	cmp	r3, #0
 80280a4:	d005      	beq.n	80280b2 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80280a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80280a8:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 80280ac:	d034      	beq.n	8028118 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 80280ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80280b0:	e041      	b.n	8028136 <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 80280b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80280b4:	3b01      	subs	r3, #1
 80280b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80280b8:	429a      	cmp	r2, r3
 80280ba:	d01b      	beq.n	80280f4 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 80280bc:	69bb      	ldr	r3, [r7, #24]
 80280be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80280c0:	0092      	lsls	r2, r2, #2
 80280c2:	2104      	movs	r1, #4
 80280c4:	9103      	str	r1, [sp, #12]
 80280c6:	f107 0118 	add.w	r1, r7, #24
 80280ca:	9102      	str	r1, [sp, #8]
 80280cc:	9201      	str	r2, [sp, #4]
 80280ce:	9300      	str	r3, [sp, #0]
 80280d0:	2304      	movs	r3, #4
 80280d2:	687a      	ldr	r2, [r7, #4]
 80280d4:	2100      	movs	r1, #0
 80280d6:	68f8      	ldr	r0, [r7, #12]
 80280d8:	f7fb fd3a 	bl	8023b50 <lfs_bd_read>
 80280dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 80280de:	69bb      	ldr	r3, [r7, #24]
 80280e0:	4618      	mov	r0, r3
 80280e2:	f7fb fcca 	bl	8023a7a <lfs_fromle32>
 80280e6:	4603      	mov	r3, r0
 80280e8:	61bb      	str	r3, [r7, #24]
                    if (err) {
 80280ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80280ec:	2b00      	cmp	r3, #0
 80280ee:	d001      	beq.n	80280f4 <lfs_ctz_extend+0x1b8>
                        return err;
 80280f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80280f2:	e020      	b.n	8028136 <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 80280f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80280f6:	3301      	adds	r3, #1
 80280f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80280fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80280fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80280fe:	429a      	cmp	r2, r3
 8028100:	d3b1      	bcc.n	8028066 <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8028102:	6a3a      	ldr	r2, [r7, #32]
 8028104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028106:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8028108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802810a:	009a      	lsls	r2, r3, #2
 802810c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802810e:	601a      	str	r2, [r3, #0]
            return 0;
 8028110:	2300      	movs	r3, #0
 8028112:	e010      	b.n	8028136 <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8028114:	bf00      	nop
 8028116:	e000      	b.n	802811a <lfs_ctz_extend+0x1de>
                        goto relocate;
 8028118:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 802811a:	6a3b      	ldr	r3, [r7, #32]
 802811c:	4a08      	ldr	r2, [pc, #32]	@ (8028140 <lfs_ctz_extend+0x204>)
 802811e:	9200      	str	r2, [sp, #0]
 8028120:	f640 22da 	movw	r2, #2778	@ 0xada
 8028124:	4907      	ldr	r1, [pc, #28]	@ (8028144 <lfs_ctz_extend+0x208>)
 8028126:	4808      	ldr	r0, [pc, #32]	@ (8028148 <lfs_ctz_extend+0x20c>)
 8028128:	f005 fb9e 	bl	802d868 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 802812c:	68b9      	ldr	r1, [r7, #8]
 802812e:	68f8      	ldr	r0, [r7, #12]
 8028130:	f7fb fce9 	bl	8023b06 <lfs_cache_drop>
    while (true) {
 8028134:	e709      	b.n	8027f4a <lfs_ctz_extend+0xe>
    }
}
 8028136:	4618      	mov	r0, r3
 8028138:	3738      	adds	r7, #56	@ 0x38
 802813a:	46bd      	mov	sp, r7
 802813c:	bd80      	pop	{r7, pc}
 802813e:	bf00      	nop
 8028140:	0803392c 	.word	0x0803392c
 8028144:	08033818 	.word	0x08033818
 8028148:	080339ac 	.word	0x080339ac

0802814c <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 802814c:	b580      	push	{r7, lr}
 802814e:	b090      	sub	sp, #64	@ 0x40
 8028150:	af04      	add	r7, sp, #16
 8028152:	60f8      	str	r0, [r7, #12]
 8028154:	60b9      	str	r1, [r7, #8]
 8028156:	607a      	str	r2, [r7, #4]
 8028158:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 802815a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802815c:	2b00      	cmp	r3, #0
 802815e:	d101      	bne.n	8028164 <lfs_ctz_traverse+0x18>
        return 0;
 8028160:	2300      	movs	r3, #0
 8028162:	e06b      	b.n	802823c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8028164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028166:	3b01      	subs	r3, #1
 8028168:	61fb      	str	r3, [r7, #28]
 802816a:	f107 031c 	add.w	r3, r7, #28
 802816e:	4619      	mov	r1, r3
 8028170:	68f8      	ldr	r0, [r7, #12]
 8028172:	f7ff fe3f 	bl	8027df4 <lfs_ctz_index>
 8028176:	4603      	mov	r3, r0
 8028178:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        int err = cb(data, head);
 802817a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802817c:	6839      	ldr	r1, [r7, #0]
 802817e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8028180:	4798      	blx	r3
 8028182:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8028184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028186:	2b00      	cmp	r3, #0
 8028188:	d001      	beq.n	802818e <lfs_ctz_traverse+0x42>
            return err;
 802818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802818c:	e056      	b.n	802823c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 802818e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8028190:	2b00      	cmp	r3, #0
 8028192:	d101      	bne.n	8028198 <lfs_ctz_traverse+0x4c>
            return 0;
 8028194:	2300      	movs	r3, #0
 8028196:	e051      	b.n	802823c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8028198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802819a:	f003 0301 	and.w	r3, r3, #1
 802819e:	f1c3 0302 	rsb	r3, r3, #2
 80281a2:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80281a4:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80281a6:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80281a8:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80281aa:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80281ac:	9303      	str	r3, [sp, #12]
 80281ae:	f107 0314 	add.w	r3, r7, #20
 80281b2:	9302      	str	r3, [sp, #8]
 80281b4:	2300      	movs	r3, #0
 80281b6:	9301      	str	r3, [sp, #4]
 80281b8:	683b      	ldr	r3, [r7, #0]
 80281ba:	9300      	str	r3, [sp, #0]
 80281bc:	4613      	mov	r3, r2
 80281be:	687a      	ldr	r2, [r7, #4]
 80281c0:	68b9      	ldr	r1, [r7, #8]
 80281c2:	68f8      	ldr	r0, [r7, #12]
 80281c4:	f7fb fcc4 	bl	8023b50 <lfs_bd_read>
 80281c8:	6278      	str	r0, [r7, #36]	@ 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80281ca:	697b      	ldr	r3, [r7, #20]
 80281cc:	4618      	mov	r0, r3
 80281ce:	f7fb fc54 	bl	8023a7a <lfs_fromle32>
 80281d2:	4603      	mov	r3, r0
 80281d4:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80281d6:	69bb      	ldr	r3, [r7, #24]
 80281d8:	4618      	mov	r0, r3
 80281da:	f7fb fc4e 	bl	8023a7a <lfs_fromle32>
 80281de:	4603      	mov	r3, r0
 80281e0:	61bb      	str	r3, [r7, #24]
        if (err) {
 80281e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80281e4:	2b00      	cmp	r3, #0
 80281e6:	d001      	beq.n	80281ec <lfs_ctz_traverse+0xa0>
            return err;
 80281e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80281ea:	e027      	b.n	802823c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80281ec:	2300      	movs	r3, #0
 80281ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80281f0:	e012      	b.n	8028218 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80281f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80281f4:	009b      	lsls	r3, r3, #2
 80281f6:	3330      	adds	r3, #48	@ 0x30
 80281f8:	443b      	add	r3, r7
 80281fa:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80281fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8028200:	4611      	mov	r1, r2
 8028202:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8028204:	4798      	blx	r3
 8028206:	6278      	str	r0, [r7, #36]	@ 0x24
            if (err) {
 8028208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802820a:	2b00      	cmp	r3, #0
 802820c:	d001      	beq.n	8028212 <lfs_ctz_traverse+0xc6>
                return err;
 802820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028210:	e014      	b.n	802823c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8028212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028214:	3301      	adds	r3, #1
 8028216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8028218:	6a3b      	ldr	r3, [r7, #32]
 802821a:	3b01      	subs	r3, #1
 802821c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 802821e:	429a      	cmp	r2, r3
 8028220:	dbe7      	blt.n	80281f2 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8028222:	6a3b      	ldr	r3, [r7, #32]
 8028224:	3b01      	subs	r3, #1
 8028226:	009b      	lsls	r3, r3, #2
 8028228:	3330      	adds	r3, #48	@ 0x30
 802822a:	443b      	add	r3, r7
 802822c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8028230:	603b      	str	r3, [r7, #0]
        index -= count;
 8028232:	6a3b      	ldr	r3, [r7, #32]
 8028234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8028236:	1ad3      	subs	r3, r2, r3
 8028238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (true) {
 802823a:	e79e      	b.n	802817a <lfs_ctz_traverse+0x2e>
    }
}
 802823c:	4618      	mov	r0, r3
 802823e:	3730      	adds	r7, #48	@ 0x30
 8028240:	46bd      	mov	sp, r7
 8028242:	bd80      	pop	{r7, pc}

08028244 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8028244:	b5b0      	push	{r4, r5, r7, lr}
 8028246:	b09a      	sub	sp, #104	@ 0x68
 8028248:	af02      	add	r7, sp, #8
 802824a:	60f8      	str	r0, [r7, #12]
 802824c:	60b9      	str	r1, [r7, #8]
 802824e:	607a      	str	r2, [r7, #4]
 8028250:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8028252:	683b      	ldr	r3, [r7, #0]
 8028254:	f003 0302 	and.w	r3, r3, #2
 8028258:	2b00      	cmp	r3, #0
 802825a:	d008      	beq.n	802826e <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 802825c:	68f8      	ldr	r0, [r7, #12]
 802825e:	f002 fb63 	bl	802a928 <lfs_fs_forceconsistency>
 8028262:	6538      	str	r0, [r7, #80]	@ 0x50
        if (err) {
 8028264:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8028266:	2b00      	cmp	r3, #0
 8028268:	d001      	beq.n	802826e <lfs_file_rawopencfg+0x2a>
            return err;
 802826a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802826c:	e1b0      	b.n	80285d0 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 802826e:	68bb      	ldr	r3, [r7, #8]
 8028270:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8028272:	651a      	str	r2, [r3, #80]	@ 0x50
    file->flags = flags;
 8028274:	683a      	ldr	r2, [r7, #0]
 8028276:	68bb      	ldr	r3, [r7, #8]
 8028278:	631a      	str	r2, [r3, #48]	@ 0x30
    file->pos = 0;
 802827a:	68bb      	ldr	r3, [r7, #8]
 802827c:	2200      	movs	r2, #0
 802827e:	635a      	str	r2, [r3, #52]	@ 0x34
    file->off = 0;
 8028280:	68bb      	ldr	r3, [r7, #8]
 8028282:	2200      	movs	r2, #0
 8028284:	63da      	str	r2, [r3, #60]	@ 0x3c
    file->cache.buffer = NULL;
 8028286:	68bb      	ldr	r3, [r7, #8]
 8028288:	2200      	movs	r2, #0
 802828a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 802828c:	68bb      	ldr	r3, [r7, #8]
 802828e:	f103 0108 	add.w	r1, r3, #8
 8028292:	68bb      	ldr	r3, [r7, #8]
 8028294:	3304      	adds	r3, #4
 8028296:	1d3a      	adds	r2, r7, #4
 8028298:	68f8      	ldr	r0, [r7, #12]
 802829a:	f7fd fe31 	bl	8025f00 <lfs_dir_find>
 802829e:	65b8      	str	r0, [r7, #88]	@ 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80282a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	da0c      	bge.n	80282c0 <lfs_file_rawopencfg+0x7c>
 80282a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80282a8:	f113 0f02 	cmn.w	r3, #2
 80282ac:	d105      	bne.n	80282ba <lfs_file_rawopencfg+0x76>
 80282ae:	68bb      	ldr	r3, [r7, #8]
 80282b0:	889b      	ldrh	r3, [r3, #4]
 80282b2:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80282b6:	4293      	cmp	r3, r2
 80282b8:	d102      	bne.n	80282c0 <lfs_file_rawopencfg+0x7c>
        err = tag;
 80282ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80282bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 80282be:	e17c      	b.n	80285ba <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80282c0:	68bb      	ldr	r3, [r7, #8]
 80282c2:	2201      	movs	r2, #1
 80282c4:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80282c6:	68b9      	ldr	r1, [r7, #8]
 80282c8:	68f8      	ldr	r0, [r7, #12]
 80282ca:	f7fc fa64 	bl	8024796 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80282ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80282d0:	f113 0f02 	cmn.w	r3, #2
 80282d4:	d14e      	bne.n	8028374 <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80282d6:	683b      	ldr	r3, [r7, #0]
 80282d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80282dc:	2b00      	cmp	r3, #0
 80282de:	d103      	bne.n	80282e8 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 80282e0:	f06f 0301 	mvn.w	r3, #1
 80282e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80282e6:	e168      	b.n	80285ba <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80282e8:	687b      	ldr	r3, [r7, #4]
 80282ea:	4618      	mov	r0, r3
 80282ec:	f7e7 ffd8 	bl	80102a0 <strlen>
 80282f0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (nlen > lfs->name_max) {
 80282f2:	68fb      	ldr	r3, [r7, #12]
 80282f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80282f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80282f8:	429a      	cmp	r2, r3
 80282fa:	d903      	bls.n	8028304 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80282fc:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8028300:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8028302:	e15a      	b.n	80285ba <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8028304:	68bb      	ldr	r3, [r7, #8]
 8028306:	f103 0108 	add.w	r1, r3, #8
 802830a:	68bb      	ldr	r3, [r7, #8]
 802830c:	889b      	ldrh	r3, [r3, #4]
 802830e:	029b      	lsls	r3, r3, #10
 8028310:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8028314:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8028318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802831a:	2300      	movs	r3, #0
 802831c:	633b      	str	r3, [r7, #48]	@ 0x30
 802831e:	68bb      	ldr	r3, [r7, #8]
 8028320:	889b      	ldrh	r3, [r3, #4]
 8028322:	029a      	lsls	r2, r3, #10
 8028324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8028326:	4313      	orrs	r3, r2
 8028328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802832c:	637b      	str	r3, [r7, #52]	@ 0x34
 802832e:	687b      	ldr	r3, [r7, #4]
 8028330:	63bb      	str	r3, [r7, #56]	@ 0x38
 8028332:	68bb      	ldr	r3, [r7, #8]
 8028334:	889b      	ldrh	r3, [r3, #4]
 8028336:	029b      	lsls	r3, r3, #10
 8028338:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 802833c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8028340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8028342:	2300      	movs	r3, #0
 8028344:	643b      	str	r3, [r7, #64]	@ 0x40
 8028346:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 802834a:	2303      	movs	r3, #3
 802834c:	68f8      	ldr	r0, [r7, #12]
 802834e:	f7ff fadf 	bl	8027910 <lfs_dir_commit>
 8028352:	65f8      	str	r0, [r7, #92]	@ 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8028354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8028356:	f113 0f1c 	cmn.w	r3, #28
 802835a:	d001      	beq.n	8028360 <lfs_file_rawopencfg+0x11c>
 802835c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802835e:	e001      	b.n	8028364 <lfs_file_rawopencfg+0x120>
 8028360:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8028364:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (err) {
 8028366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8028368:	2b00      	cmp	r3, #0
 802836a:	f040 8125 	bne.w	80285b8 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 802836e:	4b9a      	ldr	r3, [pc, #616]	@ (80285d8 <lfs_file_rawopencfg+0x394>)
 8028370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8028372:	e044      	b.n	80283fe <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8028374:	683b      	ldr	r3, [r7, #0]
 8028376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802837a:	2b00      	cmp	r3, #0
 802837c:	d003      	beq.n	8028386 <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 802837e:	f06f 0310 	mvn.w	r3, #16
 8028382:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8028384:	e119      	b.n	80285ba <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8028386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8028388:	4618      	mov	r0, r3
 802838a:	f7fb fff3 	bl	8024374 <lfs_tag_type3>
 802838e:	4603      	mov	r3, r0
 8028390:	2b01      	cmp	r3, #1
 8028392:	d003      	beq.n	802839c <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8028394:	f06f 0314 	mvn.w	r3, #20
 8028398:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 802839a:	e10e      	b.n	80285ba <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 802839c:	683b      	ldr	r3, [r7, #0]
 802839e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80283a2:	2b00      	cmp	r3, #0
 80283a4:	d00e      	beq.n	80283c4 <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80283a6:	68bb      	ldr	r3, [r7, #8]
 80283a8:	889b      	ldrh	r3, [r3, #4]
 80283aa:	029b      	lsls	r3, r3, #10
 80283ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80283b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80283b4:	65bb      	str	r3, [r7, #88]	@ 0x58
        file->flags |= LFS_F_DIRTY;
 80283b6:	68bb      	ldr	r3, [r7, #8]
 80283b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80283ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80283be:	68bb      	ldr	r3, [r7, #8]
 80283c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80283c2:	e01c      	b.n	80283fe <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80283c4:	68bb      	ldr	r3, [r7, #8]
 80283c6:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80283ca:	68bb      	ldr	r3, [r7, #8]
 80283cc:	889b      	ldrh	r3, [r3, #4]
 80283ce:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80283d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80283d4:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80283d8:	68ba      	ldr	r2, [r7, #8]
 80283da:	3228      	adds	r2, #40	@ 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80283dc:	9200      	str	r2, [sp, #0]
 80283de:	4a7f      	ldr	r2, [pc, #508]	@ (80285dc <lfs_file_rawopencfg+0x398>)
 80283e0:	68f8      	ldr	r0, [r7, #12]
 80283e2:	f7fc fbdb 	bl	8024b9c <lfs_dir_get>
 80283e6:	65b8      	str	r0, [r7, #88]	@ 0x58
        if (tag < 0) {
 80283e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80283ea:	2b00      	cmp	r3, #0
 80283ec:	da02      	bge.n	80283f4 <lfs_file_rawopencfg+0x1b0>
            err = tag;
 80283ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80283f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 80283f2:	e0e2      	b.n	80285ba <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80283f4:	68bb      	ldr	r3, [r7, #8]
 80283f6:	3328      	adds	r3, #40	@ 0x28
 80283f8:	4618      	mov	r0, r3
 80283fa:	f7fc f8ed 	bl	80245d8 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80283fe:	2300      	movs	r3, #0
 8028400:	657b      	str	r3, [r7, #84]	@ 0x54
 8028402:	e063      	b.n	80284cc <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8028404:	68bb      	ldr	r3, [r7, #8]
 8028406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028408:	f003 0301 	and.w	r3, r3, #1
 802840c:	2b00      	cmp	r3, #0
 802840e:	d03c      	beq.n	802848a <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028410:	68bb      	ldr	r3, [r7, #8]
 8028412:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8028416:	68bb      	ldr	r3, [r7, #8]
 8028418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802841a:	6859      	ldr	r1, [r3, #4]
 802841c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802841e:	4613      	mov	r3, r2
 8028420:	005b      	lsls	r3, r3, #1
 8028422:	4413      	add	r3, r2
 8028424:	009b      	lsls	r3, r3, #2
 8028426:	440b      	add	r3, r1
 8028428:	781b      	ldrb	r3, [r3, #0]
 802842a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 802842e:	051a      	lsls	r2, r3, #20
 8028430:	68bb      	ldr	r3, [r7, #8]
 8028432:	889b      	ldrh	r3, [r3, #4]
 8028434:	029b      	lsls	r3, r3, #10
 8028436:	ea42 0103 	orr.w	r1, r2, r3
 802843a:	68bb      	ldr	r3, [r7, #8]
 802843c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802843e:	6858      	ldr	r0, [r3, #4]
 8028440:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8028442:	4613      	mov	r3, r2
 8028444:	005b      	lsls	r3, r3, #1
 8028446:	4413      	add	r3, r2
 8028448:	009b      	lsls	r3, r3, #2
 802844a:	4403      	add	r3, r0
 802844c:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802844e:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8028452:	68bb      	ldr	r3, [r7, #8]
 8028454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028456:	6859      	ldr	r1, [r3, #4]
 8028458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802845a:	4613      	mov	r3, r2
 802845c:	005b      	lsls	r3, r3, #1
 802845e:	4413      	add	r3, r2
 8028460:	009b      	lsls	r3, r3, #2
 8028462:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028464:	685b      	ldr	r3, [r3, #4]
 8028466:	9300      	str	r3, [sp, #0]
 8028468:	4603      	mov	r3, r0
 802846a:	4a5d      	ldr	r2, [pc, #372]	@ (80285e0 <lfs_file_rawopencfg+0x39c>)
 802846c:	4621      	mov	r1, r4
 802846e:	68f8      	ldr	r0, [r7, #12]
 8028470:	f7fc fb94 	bl	8024b9c <lfs_dir_get>
 8028474:	6478      	str	r0, [r7, #68]	@ 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8028476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028478:	2b00      	cmp	r3, #0
 802847a:	da06      	bge.n	802848a <lfs_file_rawopencfg+0x246>
 802847c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802847e:	f113 0f02 	cmn.w	r3, #2
 8028482:	d002      	beq.n	802848a <lfs_file_rawopencfg+0x246>
                err = res;
 8028484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8028486:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8028488:	e097      	b.n	80285ba <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 802848a:	68bb      	ldr	r3, [r7, #8]
 802848c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802848e:	f003 0302 	and.w	r3, r3, #2
 8028492:	2b00      	cmp	r3, #0
 8028494:	d017      	beq.n	80284c6 <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8028496:	68bb      	ldr	r3, [r7, #8]
 8028498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802849a:	6859      	ldr	r1, [r3, #4]
 802849c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802849e:	4613      	mov	r3, r2
 80284a0:	005b      	lsls	r3, r3, #1
 80284a2:	4413      	add	r3, r2
 80284a4:	009b      	lsls	r3, r3, #2
 80284a6:	440b      	add	r3, r1
 80284a8:	689a      	ldr	r2, [r3, #8]
 80284aa:	68fb      	ldr	r3, [r7, #12]
 80284ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80284ae:	429a      	cmp	r2, r3
 80284b0:	d903      	bls.n	80284ba <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 80284b2:	f06f 031b 	mvn.w	r3, #27
 80284b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80284b8:	e07f      	b.n	80285ba <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80284ba:	68bb      	ldr	r3, [r7, #8]
 80284bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80284be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80284c2:	68bb      	ldr	r3, [r7, #8]
 80284c4:	631a      	str	r2, [r3, #48]	@ 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80284c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80284c8:	3301      	adds	r3, #1
 80284ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80284cc:	68bb      	ldr	r3, [r7, #8]
 80284ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80284d0:	689b      	ldr	r3, [r3, #8]
 80284d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80284d4:	429a      	cmp	r2, r3
 80284d6:	d395      	bcc.n	8028404 <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80284d8:	68bb      	ldr	r3, [r7, #8]
 80284da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80284dc:	681b      	ldr	r3, [r3, #0]
 80284de:	2b00      	cmp	r3, #0
 80284e0:	d005      	beq.n	80284ee <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80284e2:	68bb      	ldr	r3, [r7, #8]
 80284e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80284e6:	681a      	ldr	r2, [r3, #0]
 80284e8:	68bb      	ldr	r3, [r7, #8]
 80284ea:	64da      	str	r2, [r3, #76]	@ 0x4c
 80284ec:	e010      	b.n	8028510 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80284ee:	68fb      	ldr	r3, [r7, #12]
 80284f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80284f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80284f4:	4618      	mov	r0, r3
 80284f6:	f7fb faef 	bl	8023ad8 <lfs_malloc>
 80284fa:	4602      	mov	r2, r0
 80284fc:	68bb      	ldr	r3, [r7, #8]
 80284fe:	64da      	str	r2, [r3, #76]	@ 0x4c
        if (!file->cache.buffer) {
 8028500:	68bb      	ldr	r3, [r7, #8]
 8028502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028504:	2b00      	cmp	r3, #0
 8028506:	d103      	bne.n	8028510 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8028508:	f06f 030b 	mvn.w	r3, #11
 802850c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 802850e:	e054      	b.n	80285ba <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8028510:	68bb      	ldr	r3, [r7, #8]
 8028512:	3340      	adds	r3, #64	@ 0x40
 8028514:	4619      	mov	r1, r3
 8028516:	68f8      	ldr	r0, [r7, #12]
 8028518:	f7fb fb04 	bl	8023b24 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 802851c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802851e:	4618      	mov	r0, r3
 8028520:	f7fb ff28 	bl	8024374 <lfs_tag_type3>
 8028524:	4603      	mov	r3, r0
 8028526:	461a      	mov	r2, r3
 8028528:	f240 2301 	movw	r3, #513	@ 0x201
 802852c:	429a      	cmp	r2, r3
 802852e:	d141      	bne.n	80285b4 <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8028530:	68bb      	ldr	r3, [r7, #8]
 8028532:	f06f 0201 	mvn.w	r2, #1
 8028536:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = lfs_tag_size(tag);
 8028538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802853a:	4618      	mov	r0, r3
 802853c:	f7fb ff54 	bl	80243e8 <lfs_tag_size>
 8028540:	4602      	mov	r2, r0
 8028542:	68bb      	ldr	r3, [r7, #8]
 8028544:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags |= LFS_F_INLINE;
 8028546:	68bb      	ldr	r3, [r7, #8]
 8028548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802854a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 802854e:	68bb      	ldr	r3, [r7, #8]
 8028550:	631a      	str	r2, [r3, #48]	@ 0x30
        file->cache.block = file->ctz.head;
 8028552:	68bb      	ldr	r3, [r7, #8]
 8028554:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8028556:	68bb      	ldr	r3, [r7, #8]
 8028558:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = 0;
 802855a:	68bb      	ldr	r3, [r7, #8]
 802855c:	2200      	movs	r2, #0
 802855e:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->cfg->cache_size;
 8028560:	68fb      	ldr	r3, [r7, #12]
 8028562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8028566:	68bb      	ldr	r3, [r7, #8]
 8028568:	649a      	str	r2, [r3, #72]	@ 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 802856a:	68bb      	ldr	r3, [r7, #8]
 802856c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802856e:	2b00      	cmp	r3, #0
 8028570:	d020      	beq.n	80285b4 <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028572:	68bb      	ldr	r3, [r7, #8]
 8028574:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8028578:	68bb      	ldr	r3, [r7, #8]
 802857a:	889b      	ldrh	r3, [r3, #4]
 802857c:	029c      	lsls	r4, r3, #10
 802857e:	68bb      	ldr	r3, [r7, #8]
 8028580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8028582:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 8028586:	4618      	mov	r0, r3
 8028588:	f7fb fa07 	bl	802399a <lfs_min>
 802858c:	4603      	mov	r3, r0
 802858e:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028590:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8028594:	68bb      	ldr	r3, [r7, #8]
 8028596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028598:	9300      	str	r3, [sp, #0]
 802859a:	4613      	mov	r3, r2
 802859c:	4a0f      	ldr	r2, [pc, #60]	@ (80285dc <lfs_file_rawopencfg+0x398>)
 802859e:	4629      	mov	r1, r5
 80285a0:	68f8      	ldr	r0, [r7, #12]
 80285a2:	f7fc fafb 	bl	8024b9c <lfs_dir_get>
 80285a6:	64b8      	str	r0, [r7, #72]	@ 0x48
            if (res < 0) {
 80285a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80285aa:	2b00      	cmp	r3, #0
 80285ac:	da02      	bge.n	80285b4 <lfs_file_rawopencfg+0x370>
                err = res;
 80285ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80285b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 80285b2:	e002      	b.n	80285ba <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80285b4:	2300      	movs	r3, #0
 80285b6:	e00b      	b.n	80285d0 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80285b8:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80285ba:	68bb      	ldr	r3, [r7, #8]
 80285bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80285be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80285c2:	68bb      	ldr	r3, [r7, #8]
 80285c4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80285c6:	68b9      	ldr	r1, [r7, #8]
 80285c8:	68f8      	ldr	r0, [r7, #12]
 80285ca:	f000 f80b 	bl	80285e4 <lfs_file_rawclose>
    return err;
 80285ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80285d0:	4618      	mov	r0, r3
 80285d2:	3760      	adds	r7, #96	@ 0x60
 80285d4:	46bd      	mov	sp, r7
 80285d6:	bdb0      	pop	{r4, r5, r7, pc}
 80285d8:	20100000 	.word	0x20100000
 80285dc:	700ffc00 	.word	0x700ffc00
 80285e0:	7ffffc00 	.word	0x7ffffc00

080285e4 <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80285e4:	b580      	push	{r7, lr}
 80285e6:	b084      	sub	sp, #16
 80285e8:	af00      	add	r7, sp, #0
 80285ea:	6078      	str	r0, [r7, #4]
 80285ec:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80285ee:	6839      	ldr	r1, [r7, #0]
 80285f0:	6878      	ldr	r0, [r7, #4]
 80285f2:	f000 f9e5 	bl	80289c0 <lfs_file_rawsync>
 80285f6:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80285f8:	6839      	ldr	r1, [r7, #0]
 80285fa:	6878      	ldr	r0, [r7, #4]
 80285fc:	f7fc f8a9 	bl	8024752 <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8028600:	683b      	ldr	r3, [r7, #0]
 8028602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028604:	681b      	ldr	r3, [r3, #0]
 8028606:	2b00      	cmp	r3, #0
 8028608:	d104      	bne.n	8028614 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 802860a:	683b      	ldr	r3, [r7, #0]
 802860c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802860e:	4618      	mov	r0, r3
 8028610:	f7fb fa6e 	bl	8023af0 <lfs_free>
    }

    return err;
 8028614:	68fb      	ldr	r3, [r7, #12]
}
 8028616:	4618      	mov	r0, r3
 8028618:	3710      	adds	r7, #16
 802861a:	46bd      	mov	sp, r7
 802861c:	bd80      	pop	{r7, pc}
	...

08028620 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8028620:	b590      	push	{r4, r7, lr}
 8028622:	b08d      	sub	sp, #52	@ 0x34
 8028624:	af06      	add	r7, sp, #24
 8028626:	6078      	str	r0, [r7, #4]
 8028628:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 802862a:	f107 030c 	add.w	r3, r7, #12
 802862e:	4619      	mov	r1, r3
 8028630:	6878      	ldr	r0, [r7, #4]
 8028632:	f7fc f919 	bl	8024868 <lfs_alloc>
 8028636:	6138      	str	r0, [r7, #16]
        if (err) {
 8028638:	693b      	ldr	r3, [r7, #16]
 802863a:	2b00      	cmp	r3, #0
 802863c:	d001      	beq.n	8028642 <lfs_file_relocate+0x22>
            return err;
 802863e:	693b      	ldr	r3, [r7, #16]
 8028640:	e0bb      	b.n	80287ba <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8028642:	68fb      	ldr	r3, [r7, #12]
 8028644:	4619      	mov	r1, r3
 8028646:	6878      	ldr	r0, [r7, #4]
 8028648:	f7fb fd76 	bl	8024138 <lfs_bd_erase>
 802864c:	6138      	str	r0, [r7, #16]
        if (err) {
 802864e:	693b      	ldr	r3, [r7, #16]
 8028650:	2b00      	cmp	r3, #0
 8028652:	d006      	beq.n	8028662 <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8028654:	693b      	ldr	r3, [r7, #16]
 8028656:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 802865a:	f000 809b 	beq.w	8028794 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 802865e:	693b      	ldr	r3, [r7, #16]
 8028660:	e0ab      	b.n	80287ba <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8028662:	2300      	movs	r3, #0
 8028664:	617b      	str	r3, [r7, #20]
 8028666:	e069      	b.n	802873c <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8028668:	683b      	ldr	r3, [r7, #0]
 802866a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802866c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8028670:	2b00      	cmp	r3, #0
 8028672:	d027      	beq.n	80286c4 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8028674:	683b      	ldr	r3, [r7, #0]
 8028676:	f103 0008 	add.w	r0, r3, #8
 802867a:	683b      	ldr	r3, [r7, #0]
 802867c:	f103 0440 	add.w	r4, r3, #64	@ 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8028680:	683b      	ldr	r3, [r7, #0]
 8028682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8028684:	697b      	ldr	r3, [r7, #20]
 8028686:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028688:	683b      	ldr	r3, [r7, #0]
 802868a:	889b      	ldrh	r3, [r3, #4]
 802868c:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 802868e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8028692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8028696:	2101      	movs	r1, #1
 8028698:	9105      	str	r1, [sp, #20]
 802869a:	f107 010b 	add.w	r1, r7, #11
 802869e:	9104      	str	r1, [sp, #16]
 80286a0:	6979      	ldr	r1, [r7, #20]
 80286a2:	9103      	str	r1, [sp, #12]
 80286a4:	9302      	str	r3, [sp, #8]
 80286a6:	4b47      	ldr	r3, [pc, #284]	@ (80287c4 <lfs_file_relocate+0x1a4>)
 80286a8:	9301      	str	r3, [sp, #4]
 80286aa:	9200      	str	r2, [sp, #0]
 80286ac:	4623      	mov	r3, r4
 80286ae:	2200      	movs	r2, #0
 80286b0:	4601      	mov	r1, r0
 80286b2:	6878      	ldr	r0, [r7, #4]
 80286b4:	f7fc fa8d 	bl	8024bd2 <lfs_dir_getread>
 80286b8:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80286ba:	693b      	ldr	r3, [r7, #16]
 80286bc:	2b00      	cmp	r3, #0
 80286be:	d01e      	beq.n	80286fe <lfs_file_relocate+0xde>
                    return err;
 80286c0:	693b      	ldr	r3, [r7, #16]
 80286c2:	e07a      	b.n	80287ba <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80286c4:	683b      	ldr	r3, [r7, #0]
 80286c6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
                err = lfs_bd_read(lfs,
 80286ca:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80286cc:	683b      	ldr	r3, [r7, #0]
 80286ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                err = lfs_bd_read(lfs,
 80286d0:	697b      	ldr	r3, [r7, #20]
 80286d2:	1ad4      	subs	r4, r2, r3
 80286d4:	683b      	ldr	r3, [r7, #0]
 80286d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80286d8:	2201      	movs	r2, #1
 80286da:	9203      	str	r2, [sp, #12]
 80286dc:	f107 020b 	add.w	r2, r7, #11
 80286e0:	9202      	str	r2, [sp, #8]
 80286e2:	697a      	ldr	r2, [r7, #20]
 80286e4:	9201      	str	r2, [sp, #4]
 80286e6:	9300      	str	r3, [sp, #0]
 80286e8:	4623      	mov	r3, r4
 80286ea:	4602      	mov	r2, r0
 80286ec:	6878      	ldr	r0, [r7, #4]
 80286ee:	f7fb fa2f 	bl	8023b50 <lfs_bd_read>
 80286f2:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80286f4:	693b      	ldr	r3, [r7, #16]
 80286f6:	2b00      	cmp	r3, #0
 80286f8:	d001      	beq.n	80286fe <lfs_file_relocate+0xde>
                    return err;
 80286fa:	693b      	ldr	r3, [r7, #16]
 80286fc:	e05d      	b.n	80287ba <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80286fe:	687b      	ldr	r3, [r7, #4]
 8028700:	f103 0110 	add.w	r1, r3, #16
 8028704:	6878      	ldr	r0, [r7, #4]
 8028706:	68fb      	ldr	r3, [r7, #12]
 8028708:	2201      	movs	r2, #1
 802870a:	9203      	str	r2, [sp, #12]
 802870c:	f107 020b 	add.w	r2, r7, #11
 8028710:	9202      	str	r2, [sp, #8]
 8028712:	697a      	ldr	r2, [r7, #20]
 8028714:	9201      	str	r2, [sp, #4]
 8028716:	9300      	str	r3, [sp, #0]
 8028718:	2301      	movs	r3, #1
 802871a:	4602      	mov	r2, r0
 802871c:	6878      	ldr	r0, [r7, #4]
 802871e:	f7fb fc5d 	bl	8023fdc <lfs_bd_prog>
 8028722:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8028724:	693b      	ldr	r3, [r7, #16]
 8028726:	2b00      	cmp	r3, #0
 8028728:	d005      	beq.n	8028736 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 802872a:	693b      	ldr	r3, [r7, #16]
 802872c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8028730:	d032      	beq.n	8028798 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8028732:	693b      	ldr	r3, [r7, #16]
 8028734:	e041      	b.n	80287ba <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8028736:	697b      	ldr	r3, [r7, #20]
 8028738:	3301      	adds	r3, #1
 802873a:	617b      	str	r3, [r7, #20]
 802873c:	683b      	ldr	r3, [r7, #0]
 802873e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028740:	697a      	ldr	r2, [r7, #20]
 8028742:	429a      	cmp	r2, r3
 8028744:	d390      	bcc.n	8028668 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8028746:	683b      	ldr	r3, [r7, #0]
 8028748:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 802874a:	687b      	ldr	r3, [r7, #4]
 802874c:	69d9      	ldr	r1, [r3, #28]
 802874e:	687b      	ldr	r3, [r7, #4]
 8028750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8028754:	461a      	mov	r2, r3
 8028756:	f005 fbf0 	bl	802df3a <memcpy>
        file->cache.block = lfs->pcache.block;
 802875a:	687b      	ldr	r3, [r7, #4]
 802875c:	691a      	ldr	r2, [r3, #16]
 802875e:	683b      	ldr	r3, [r7, #0]
 8028760:	641a      	str	r2, [r3, #64]	@ 0x40
        file->cache.off = lfs->pcache.off;
 8028762:	687b      	ldr	r3, [r7, #4]
 8028764:	695a      	ldr	r2, [r3, #20]
 8028766:	683b      	ldr	r3, [r7, #0]
 8028768:	645a      	str	r2, [r3, #68]	@ 0x44
        file->cache.size = lfs->pcache.size;
 802876a:	687b      	ldr	r3, [r7, #4]
 802876c:	699a      	ldr	r2, [r3, #24]
 802876e:	683b      	ldr	r3, [r7, #0]
 8028770:	649a      	str	r2, [r3, #72]	@ 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8028772:	687b      	ldr	r3, [r7, #4]
 8028774:	3310      	adds	r3, #16
 8028776:	4619      	mov	r1, r3
 8028778:	6878      	ldr	r0, [r7, #4]
 802877a:	f7fb f9d3 	bl	8023b24 <lfs_cache_zero>

        file->block = nblock;
 802877e:	68fa      	ldr	r2, [r7, #12]
 8028780:	683b      	ldr	r3, [r7, #0]
 8028782:	639a      	str	r2, [r3, #56]	@ 0x38
        file->flags |= LFS_F_WRITING;
 8028784:	683b      	ldr	r3, [r7, #0]
 8028786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028788:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 802878c:	683b      	ldr	r3, [r7, #0]
 802878e:	631a      	str	r2, [r3, #48]	@ 0x30
        return 0;
 8028790:	2300      	movs	r3, #0
 8028792:	e012      	b.n	80287ba <lfs_file_relocate+0x19a>
                goto relocate;
 8028794:	bf00      	nop
 8028796:	e000      	b.n	802879a <lfs_file_relocate+0x17a>
                    goto relocate;
 8028798:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 802879a:	68fb      	ldr	r3, [r7, #12]
 802879c:	4a0a      	ldr	r2, [pc, #40]	@ (80287c8 <lfs_file_relocate+0x1a8>)
 802879e:	9200      	str	r2, [sp, #0]
 80287a0:	f44f 6241 	mov.w	r2, #3088	@ 0xc10
 80287a4:	4909      	ldr	r1, [pc, #36]	@ (80287cc <lfs_file_relocate+0x1ac>)
 80287a6:	480a      	ldr	r0, [pc, #40]	@ (80287d0 <lfs_file_relocate+0x1b0>)
 80287a8:	f005 f85e 	bl	802d868 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80287ac:	687b      	ldr	r3, [r7, #4]
 80287ae:	3310      	adds	r3, #16
 80287b0:	4619      	mov	r1, r3
 80287b2:	6878      	ldr	r0, [r7, #4]
 80287b4:	f7fb f9a7 	bl	8023b06 <lfs_cache_drop>
    while (true) {
 80287b8:	e737      	b.n	802862a <lfs_file_relocate+0xa>
    }
}
 80287ba:	4618      	mov	r0, r3
 80287bc:	371c      	adds	r7, #28
 80287be:	46bd      	mov	sp, r7
 80287c0:	bd90      	pop	{r4, r7, pc}
 80287c2:	bf00      	nop
 80287c4:	fff7fc00 	.word	0xfff7fc00
 80287c8:	0803392c 	.word	0x0803392c
 80287cc:	08033818 	.word	0x08033818
 80287d0:	080339ac 	.word	0x080339ac

080287d4 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80287d4:	b580      	push	{r7, lr}
 80287d6:	b084      	sub	sp, #16
 80287d8:	af00      	add	r7, sp, #0
 80287da:	6078      	str	r0, [r7, #4]
 80287dc:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80287de:	683b      	ldr	r3, [r7, #0]
 80287e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80287e2:	683b      	ldr	r3, [r7, #0]
 80287e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    lfs_alloc_ack(lfs);
 80287e6:	6878      	ldr	r0, [r7, #4]
 80287e8:	f7fc f81e 	bl	8024828 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80287ec:	6839      	ldr	r1, [r7, #0]
 80287ee:	6878      	ldr	r0, [r7, #4]
 80287f0:	f7ff ff16 	bl	8028620 <lfs_file_relocate>
 80287f4:	60f8      	str	r0, [r7, #12]
    if (err) {
 80287f6:	68fb      	ldr	r3, [r7, #12]
 80287f8:	2b00      	cmp	r3, #0
 80287fa:	d001      	beq.n	8028800 <lfs_file_outline+0x2c>
        return err;
 80287fc:	68fb      	ldr	r3, [r7, #12]
 80287fe:	e006      	b.n	802880e <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8028800:	683b      	ldr	r3, [r7, #0]
 8028802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028804:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8028808:	683b      	ldr	r3, [r7, #0]
 802880a:	631a      	str	r2, [r3, #48]	@ 0x30
    return 0;
 802880c:	2300      	movs	r3, #0
}
 802880e:	4618      	mov	r0, r3
 8028810:	3710      	adds	r7, #16
 8028812:	46bd      	mov	sp, r7
 8028814:	bd80      	pop	{r7, pc}
	...

08028818 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8028818:	b590      	push	{r4, r7, lr}
 802881a:	b09f      	sub	sp, #124	@ 0x7c
 802881c:	af02      	add	r7, sp, #8
 802881e:	6078      	str	r0, [r7, #4]
 8028820:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8028822:	683b      	ldr	r3, [r7, #0]
 8028824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 802882a:	2b00      	cmp	r3, #0
 802882c:	d011      	beq.n	8028852 <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 802882e:	683b      	ldr	r3, [r7, #0]
 8028830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8028836:	2b00      	cmp	r3, #0
 8028838:	d105      	bne.n	8028846 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 802883a:	683b      	ldr	r3, [r7, #0]
 802883c:	3340      	adds	r3, #64	@ 0x40
 802883e:	4619      	mov	r1, r3
 8028840:	6878      	ldr	r0, [r7, #4]
 8028842:	f7fb f960 	bl	8023b06 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8028846:	683b      	ldr	r3, [r7, #0]
 8028848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802884a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 802884e:	683b      	ldr	r3, [r7, #0]
 8028850:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028852:	683b      	ldr	r3, [r7, #0]
 8028854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802885a:	2b00      	cmp	r3, #0
 802885c:	f000 80a4 	beq.w	80289a8 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8028860:	683b      	ldr	r3, [r7, #0]
 8028862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028864:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8028866:	683b      	ldr	r3, [r7, #0]
 8028868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802886a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802886e:	2b00      	cmp	r3, #0
 8028870:	d176      	bne.n	8028960 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8028872:	f107 030c 	add.w	r3, r7, #12
 8028876:	2254      	movs	r2, #84	@ 0x54
 8028878:	2100      	movs	r1, #0
 802887a:	4618      	mov	r0, r3
 802887c:	f005 f988 	bl	802db90 <memset>
                .ctz.head = file->ctz.head,
 8028880:	683b      	ldr	r3, [r7, #0]
 8028882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
            lfs_file_t orig = {
 8028884:	637b      	str	r3, [r7, #52]	@ 0x34
                .ctz.size = file->ctz.size,
 8028886:	683b      	ldr	r3, [r7, #0]
 8028888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            lfs_file_t orig = {
 802888a:	63bb      	str	r3, [r7, #56]	@ 0x38
 802888c:	2301      	movs	r3, #1
 802888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8028890:	683b      	ldr	r3, [r7, #0]
 8028892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            lfs_file_t orig = {
 8028894:	643b      	str	r3, [r7, #64]	@ 0x40
 8028896:	687b      	ldr	r3, [r7, #4]
 8028898:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 802889c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802889e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80288a2:	687b      	ldr	r3, [r7, #4]
 80288a4:	4619      	mov	r1, r3
 80288a6:	6878      	ldr	r0, [r7, #4]
 80288a8:	f7fb f92d 	bl	8023b06 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80288ac:	e02b      	b.n	8028906 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80288ae:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80288b2:	f107 010c 	add.w	r1, r7, #12
 80288b6:	2301      	movs	r3, #1
 80288b8:	6878      	ldr	r0, [r7, #4]
 80288ba:	f000 f90d 	bl	8028ad8 <lfs_file_flushedread>
 80288be:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80288c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	da01      	bge.n	80288ca <lfs_file_flush+0xb2>
                    return res;
 80288c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80288c8:	e06f      	b.n	80289aa <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80288ca:	f107 0263 	add.w	r2, r7, #99	@ 0x63
 80288ce:	2301      	movs	r3, #1
 80288d0:	6839      	ldr	r1, [r7, #0]
 80288d2:	6878      	ldr	r0, [r7, #4]
 80288d4:	f000 fa08 	bl	8028ce8 <lfs_file_flushedwrite>
 80288d8:	6678      	str	r0, [r7, #100]	@ 0x64
                if (res < 0) {
 80288da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80288dc:	2b00      	cmp	r3, #0
 80288de:	da01      	bge.n	80288e4 <lfs_file_flush+0xcc>
                    return res;
 80288e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80288e2:	e062      	b.n	80289aa <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80288e4:	687b      	ldr	r3, [r7, #4]
 80288e6:	681b      	ldr	r3, [r3, #0]
 80288e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80288ec:	d00b      	beq.n	8028906 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80288ee:	f107 030c 	add.w	r3, r7, #12
 80288f2:	3340      	adds	r3, #64	@ 0x40
 80288f4:	4619      	mov	r1, r3
 80288f6:	6878      	ldr	r0, [r7, #4]
 80288f8:	f7fb f905 	bl	8023b06 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80288fc:	687b      	ldr	r3, [r7, #4]
 80288fe:	4619      	mov	r1, r3
 8028900:	6878      	ldr	r0, [r7, #4]
 8028902:	f7fb f900 	bl	8023b06 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8028906:	683b      	ldr	r3, [r7, #0]
 8028908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802890a:	683b      	ldr	r3, [r7, #0]
 802890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802890e:	429a      	cmp	r2, r3
 8028910:	d3cd      	bcc.n	80288ae <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8028912:	683b      	ldr	r3, [r7, #0]
 8028914:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8028918:	687a      	ldr	r2, [r7, #4]
 802891a:	2301      	movs	r3, #1
 802891c:	6878      	ldr	r0, [r7, #4]
 802891e:	f7fb faad 	bl	8023e7c <lfs_bd_flush>
 8028922:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8028924:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8028926:	2b00      	cmp	r3, #0
 8028928:	d026      	beq.n	8028978 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 802892a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802892c:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8028930:	d001      	beq.n	8028936 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8028932:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8028934:	e039      	b.n	80289aa <lfs_file_flush+0x192>
                        goto relocate;
 8028936:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8028938:	683b      	ldr	r3, [r7, #0]
 802893a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802893c:	4a1d      	ldr	r2, [pc, #116]	@ (80289b4 <lfs_file_flush+0x19c>)
 802893e:	9200      	str	r2, [sp, #0]
 8028940:	f640 425f 	movw	r2, #3167	@ 0xc5f
 8028944:	491c      	ldr	r1, [pc, #112]	@ (80289b8 <lfs_file_flush+0x1a0>)
 8028946:	481d      	ldr	r0, [pc, #116]	@ (80289bc <lfs_file_flush+0x1a4>)
 8028948:	f004 ff8e 	bl	802d868 <iprintf>
                err = lfs_file_relocate(lfs, file);
 802894c:	6839      	ldr	r1, [r7, #0]
 802894e:	6878      	ldr	r0, [r7, #4]
 8028950:	f7ff fe66 	bl	8028620 <lfs_file_relocate>
 8028954:	66b8      	str	r0, [r7, #104]	@ 0x68
                if (err) {
 8028956:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8028958:	2b00      	cmp	r3, #0
 802895a:	d0da      	beq.n	8028912 <lfs_file_flush+0xfa>
                    return err;
 802895c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802895e:	e024      	b.n	80289aa <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8028960:	683b      	ldr	r3, [r7, #0]
 8028962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028964:	683b      	ldr	r3, [r7, #0]
 8028966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028968:	4619      	mov	r1, r3
 802896a:	4610      	mov	r0, r2
 802896c:	f7fb f805 	bl	802397a <lfs_max>
 8028970:	4602      	mov	r2, r0
 8028972:	683b      	ldr	r3, [r7, #0]
 8028974:	635a      	str	r2, [r3, #52]	@ 0x34
 8028976:	e000      	b.n	802897a <lfs_file_flush+0x162>
                break;
 8028978:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 802897a:	683b      	ldr	r3, [r7, #0]
 802897c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802897e:	683b      	ldr	r3, [r7, #0]
 8028980:	629a      	str	r2, [r3, #40]	@ 0x28
        file->ctz.size = file->pos;
 8028982:	683b      	ldr	r3, [r7, #0]
 8028984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028986:	683b      	ldr	r3, [r7, #0]
 8028988:	62da      	str	r2, [r3, #44]	@ 0x2c
        file->flags &= ~LFS_F_WRITING;
 802898a:	683b      	ldr	r3, [r7, #0]
 802898c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802898e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8028992:	683b      	ldr	r3, [r7, #0]
 8028994:	631a      	str	r2, [r3, #48]	@ 0x30
        file->flags |= LFS_F_DIRTY;
 8028996:	683b      	ldr	r3, [r7, #0]
 8028998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802899a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 802899e:	683b      	ldr	r3, [r7, #0]
 80289a0:	631a      	str	r2, [r3, #48]	@ 0x30

        file->pos = pos;
 80289a2:	683b      	ldr	r3, [r7, #0]
 80289a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80289a6:	635a      	str	r2, [r3, #52]	@ 0x34
    }
#endif

    return 0;
 80289a8:	2300      	movs	r3, #0
}
 80289aa:	4618      	mov	r0, r3
 80289ac:	3774      	adds	r7, #116	@ 0x74
 80289ae:	46bd      	mov	sp, r7
 80289b0:	bd90      	pop	{r4, r7, pc}
 80289b2:	bf00      	nop
 80289b4:	0803392c 	.word	0x0803392c
 80289b8:	08033818 	.word	0x08033818
 80289bc:	080339ac 	.word	0x080339ac

080289c0 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80289c0:	b580      	push	{r7, lr}
 80289c2:	b090      	sub	sp, #64	@ 0x40
 80289c4:	af00      	add	r7, sp, #0
 80289c6:	6078      	str	r0, [r7, #4]
 80289c8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80289ca:	683b      	ldr	r3, [r7, #0]
 80289cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80289ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80289d2:	2b00      	cmp	r3, #0
 80289d4:	d001      	beq.n	80289da <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80289d6:	2300      	movs	r3, #0
 80289d8:	e07a      	b.n	8028ad0 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80289da:	6839      	ldr	r1, [r7, #0]
 80289dc:	6878      	ldr	r0, [r7, #4]
 80289de:	f7ff ff1b 	bl	8028818 <lfs_file_flush>
 80289e2:	6338      	str	r0, [r7, #48]	@ 0x30
    if (err) {
 80289e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	d007      	beq.n	80289fa <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80289ea:	683b      	ldr	r3, [r7, #0]
 80289ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80289ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80289f2:	683b      	ldr	r3, [r7, #0]
 80289f4:	631a      	str	r2, [r3, #48]	@ 0x30
        return err;
 80289f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80289f8:	e06a      	b.n	8028ad0 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80289fa:	683b      	ldr	r3, [r7, #0]
 80289fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80289fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8028a02:	2b00      	cmp	r3, #0
 8028a04:	d063      	beq.n	8028ace <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8028a06:	683b      	ldr	r3, [r7, #0]
 8028a08:	3308      	adds	r3, #8
 8028a0a:	4618      	mov	r0, r3
 8028a0c:	f7fb fbdb 	bl	80241c6 <lfs_pair_isnull>
 8028a10:	4603      	mov	r3, r0
 8028a12:	f083 0301 	eor.w	r3, r3, #1
 8028a16:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8028a18:	2b00      	cmp	r3, #0
 8028a1a:	d058      	beq.n	8028ace <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8028a1c:	683b      	ldr	r3, [r7, #0]
 8028a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028a20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8028a24:	2b00      	cmp	r3, #0
 8028a26:	d009      	beq.n	8028a3c <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028a28:	f240 2301 	movw	r3, #513	@ 0x201
 8028a2c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            buffer = file->cache.buffer;
 8028a2e:	683b      	ldr	r3, [r7, #0]
 8028a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8028a32:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = file->ctz.size;
 8028a34:	683b      	ldr	r3, [r7, #0]
 8028a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8028a3a:	e014      	b.n	8028a66 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8028a3c:	f240 2302 	movw	r3, #514	@ 0x202
 8028a40:	87fb      	strh	r3, [r7, #62]	@ 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8028a42:	683a      	ldr	r2, [r7, #0]
 8028a44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8028a48:	3228      	adds	r2, #40	@ 0x28
 8028a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028a4e:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8028a52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8028a56:	4618      	mov	r0, r3
 8028a58:	f7fb fdd6 	bl	8024608 <lfs_ctz_tole32>
            buffer = &ctz;
 8028a5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8028a60:	63bb      	str	r3, [r7, #56]	@ 0x38
            size = sizeof(ctz);
 8028a62:	2308      	movs	r3, #8
 8028a64:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8028a66:	683b      	ldr	r3, [r7, #0]
 8028a68:	f103 0108 	add.w	r1, r3, #8
 8028a6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8028a6e:	051a      	lsls	r2, r3, #20
 8028a70:	683b      	ldr	r3, [r7, #0]
 8028a72:	889b      	ldrh	r3, [r3, #4]
 8028a74:	029b      	lsls	r3, r3, #10
 8028a76:	431a      	orrs	r2, r3
 8028a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8028a7a:	4313      	orrs	r3, r2
 8028a7c:	61bb      	str	r3, [r7, #24]
 8028a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8028a80:	61fb      	str	r3, [r7, #28]
 8028a82:	683b      	ldr	r3, [r7, #0]
 8028a84:	889b      	ldrh	r3, [r3, #4]
 8028a86:	029a      	lsls	r2, r3, #10
 8028a88:	683b      	ldr	r3, [r7, #0]
 8028a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028a8c:	689b      	ldr	r3, [r3, #8]
 8028a8e:	4313      	orrs	r3, r2
 8028a90:	f043 5381 	orr.w	r3, r3, #270532608	@ 0x10200000
 8028a94:	623b      	str	r3, [r7, #32]
 8028a96:	683b      	ldr	r3, [r7, #0]
 8028a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8028a9a:	685b      	ldr	r3, [r3, #4]
 8028a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8028a9e:	f107 0218 	add.w	r2, r7, #24
 8028aa2:	2302      	movs	r3, #2
 8028aa4:	6878      	ldr	r0, [r7, #4]
 8028aa6:	f7fe ff33 	bl	8027910 <lfs_dir_commit>
 8028aaa:	6338      	str	r0, [r7, #48]	@ 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8028aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028aae:	2b00      	cmp	r3, #0
 8028ab0:	d007      	beq.n	8028ac2 <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8028ab2:	683b      	ldr	r3, [r7, #0]
 8028ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028ab6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8028aba:	683b      	ldr	r3, [r7, #0]
 8028abc:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8028abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8028ac0:	e006      	b.n	8028ad0 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8028ac2:	683b      	ldr	r3, [r7, #0]
 8028ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028ac6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8028aca:	683b      	ldr	r3, [r7, #0]
 8028acc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    return 0;
 8028ace:	2300      	movs	r3, #0
}
 8028ad0:	4618      	mov	r0, r3
 8028ad2:	3740      	adds	r7, #64	@ 0x40
 8028ad4:	46bd      	mov	sp, r7
 8028ad6:	bd80      	pop	{r7, pc}

08028ad8 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028ad8:	b5b0      	push	{r4, r5, r7, lr}
 8028ada:	b090      	sub	sp, #64	@ 0x40
 8028adc:	af06      	add	r7, sp, #24
 8028ade:	60f8      	str	r0, [r7, #12]
 8028ae0:	60b9      	str	r1, [r7, #8]
 8028ae2:	607a      	str	r2, [r7, #4]
 8028ae4:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8028ae6:	687b      	ldr	r3, [r7, #4]
 8028ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_size_t nsize = size;
 8028aea:	683b      	ldr	r3, [r7, #0]
 8028aec:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8028aee:	68bb      	ldr	r3, [r7, #8]
 8028af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028af2:	68bb      	ldr	r3, [r7, #8]
 8028af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028af6:	429a      	cmp	r2, r3
 8028af8:	d301      	bcc.n	8028afe <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8028afa:	2300      	movs	r3, #0
 8028afc:	e0b7      	b.n	8028c6e <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8028afe:	68bb      	ldr	r3, [r7, #8]
 8028b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028b02:	68bb      	ldr	r3, [r7, #8]
 8028b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028b06:	1ad3      	subs	r3, r2, r3
 8028b08:	4619      	mov	r1, r3
 8028b0a:	6838      	ldr	r0, [r7, #0]
 8028b0c:	f7fa ff45 	bl	802399a <lfs_min>
 8028b10:	6038      	str	r0, [r7, #0]
    nsize = size;
 8028b12:	683b      	ldr	r3, [r7, #0]
 8028b14:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8028b16:	e0a5      	b.n	8028c64 <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8028b18:	68bb      	ldr	r3, [r7, #8]
 8028b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8028b20:	2b00      	cmp	r3, #0
 8028b22:	d006      	beq.n	8028b32 <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8028b24:	68bb      	ldr	r3, [r7, #8]
 8028b26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8028b28:	68fb      	ldr	r3, [r7, #12]
 8028b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028b2c:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028b2e:	429a      	cmp	r2, r3
 8028b30:	d130      	bne.n	8028b94 <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8028b32:	68bb      	ldr	r3, [r7, #8]
 8028b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8028b3a:	2b00      	cmp	r3, #0
 8028b3c:	d11c      	bne.n	8028b78 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028b3e:	68bb      	ldr	r3, [r7, #8]
 8028b40:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8028b44:	68bb      	ldr	r3, [r7, #8]
 8028b46:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8028b48:	68bb      	ldr	r3, [r7, #8]
 8028b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028b4c:	68ba      	ldr	r2, [r7, #8]
 8028b4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8028b50:	68b9      	ldr	r1, [r7, #8]
 8028b52:	3138      	adds	r1, #56	@ 0x38
 8028b54:	68b8      	ldr	r0, [r7, #8]
 8028b56:	303c      	adds	r0, #60	@ 0x3c
 8028b58:	9003      	str	r0, [sp, #12]
 8028b5a:	9102      	str	r1, [sp, #8]
 8028b5c:	9201      	str	r2, [sp, #4]
 8028b5e:	9300      	str	r3, [sp, #0]
 8028b60:	462b      	mov	r3, r5
 8028b62:	4622      	mov	r2, r4
 8028b64:	2100      	movs	r1, #0
 8028b66:	68f8      	ldr	r0, [r7, #12]
 8028b68:	f7ff f97c 	bl	8027e64 <lfs_ctz_find>
 8028b6c:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8028b6e:	69fb      	ldr	r3, [r7, #28]
 8028b70:	2b00      	cmp	r3, #0
 8028b72:	d009      	beq.n	8028b88 <lfs_file_flushedread+0xb0>
                    return err;
 8028b74:	69fb      	ldr	r3, [r7, #28]
 8028b76:	e07a      	b.n	8028c6e <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028b78:	68bb      	ldr	r3, [r7, #8]
 8028b7a:	f06f 0201 	mvn.w	r2, #1
 8028b7e:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8028b80:	68bb      	ldr	r3, [r7, #8]
 8028b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028b84:	68bb      	ldr	r3, [r7, #8]
 8028b86:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_READING;
 8028b88:	68bb      	ldr	r3, [r7, #8]
 8028b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028b8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8028b90:	68bb      	ldr	r3, [r7, #8]
 8028b92:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028b94:	68fb      	ldr	r3, [r7, #12]
 8028b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028b98:	69da      	ldr	r2, [r3, #28]
 8028b9a:	68bb      	ldr	r3, [r7, #8]
 8028b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028b9e:	1ad3      	subs	r3, r2, r3
 8028ba0:	4619      	mov	r1, r3
 8028ba2:	6a38      	ldr	r0, [r7, #32]
 8028ba4:	f7fa fef9 	bl	802399a <lfs_min>
 8028ba8:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8028baa:	68bb      	ldr	r3, [r7, #8]
 8028bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8028bb2:	2b00      	cmp	r3, #0
 8028bb4:	d026      	beq.n	8028c04 <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8028bb6:	68bb      	ldr	r3, [r7, #8]
 8028bb8:	f103 0408 	add.w	r4, r3, #8
 8028bbc:	68bb      	ldr	r3, [r7, #8]
 8028bbe:	f103 0540 	add.w	r5, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028bc2:	68fb      	ldr	r3, [r7, #12]
 8028bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028bc6:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028bc8:	68bb      	ldr	r3, [r7, #8]
 8028bca:	889b      	ldrh	r3, [r3, #4]
 8028bcc:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8028bce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8028bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8028bd6:	68b9      	ldr	r1, [r7, #8]
 8028bd8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
 8028bda:	69b8      	ldr	r0, [r7, #24]
 8028bdc:	9005      	str	r0, [sp, #20]
 8028bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8028be0:	9004      	str	r0, [sp, #16]
 8028be2:	9103      	str	r1, [sp, #12]
 8028be4:	9302      	str	r3, [sp, #8]
 8028be6:	4b24      	ldr	r3, [pc, #144]	@ (8028c78 <lfs_file_flushedread+0x1a0>)
 8028be8:	9301      	str	r3, [sp, #4]
 8028bea:	9200      	str	r2, [sp, #0]
 8028bec:	462b      	mov	r3, r5
 8028bee:	2200      	movs	r2, #0
 8028bf0:	4621      	mov	r1, r4
 8028bf2:	68f8      	ldr	r0, [r7, #12]
 8028bf4:	f7fb ffed 	bl	8024bd2 <lfs_dir_getread>
 8028bf8:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8028bfa:	693b      	ldr	r3, [r7, #16]
 8028bfc:	2b00      	cmp	r3, #0
 8028bfe:	d01d      	beq.n	8028c3c <lfs_file_flushedread+0x164>
                return err;
 8028c00:	693b      	ldr	r3, [r7, #16]
 8028c02:	e034      	b.n	8028c6e <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8028c04:	68bb      	ldr	r3, [r7, #8]
 8028c06:	f103 0040 	add.w	r0, r3, #64	@ 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028c0a:	68fb      	ldr	r3, [r7, #12]
 8028c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028c0e:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8028c10:	68bb      	ldr	r3, [r7, #8]
 8028c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028c14:	68ba      	ldr	r2, [r7, #8]
 8028c16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8028c18:	69b9      	ldr	r1, [r7, #24]
 8028c1a:	9103      	str	r1, [sp, #12]
 8028c1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8028c1e:	9102      	str	r1, [sp, #8]
 8028c20:	9201      	str	r2, [sp, #4]
 8028c22:	9300      	str	r3, [sp, #0]
 8028c24:	4623      	mov	r3, r4
 8028c26:	4602      	mov	r2, r0
 8028c28:	2100      	movs	r1, #0
 8028c2a:	68f8      	ldr	r0, [r7, #12]
 8028c2c:	f7fa ff90 	bl	8023b50 <lfs_bd_read>
 8028c30:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028c32:	697b      	ldr	r3, [r7, #20]
 8028c34:	2b00      	cmp	r3, #0
 8028c36:	d001      	beq.n	8028c3c <lfs_file_flushedread+0x164>
                return err;
 8028c38:	697b      	ldr	r3, [r7, #20]
 8028c3a:	e018      	b.n	8028c6e <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8028c3c:	68bb      	ldr	r3, [r7, #8]
 8028c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028c40:	69bb      	ldr	r3, [r7, #24]
 8028c42:	441a      	add	r2, r3
 8028c44:	68bb      	ldr	r3, [r7, #8]
 8028c46:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8028c48:	68bb      	ldr	r3, [r7, #8]
 8028c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8028c4c:	69bb      	ldr	r3, [r7, #24]
 8028c4e:	441a      	add	r2, r3
 8028c50:	68bb      	ldr	r3, [r7, #8]
 8028c52:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8028c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8028c56:	69bb      	ldr	r3, [r7, #24]
 8028c58:	4413      	add	r3, r2
 8028c5a:	627b      	str	r3, [r7, #36]	@ 0x24
        nsize -= diff;
 8028c5c:	6a3a      	ldr	r2, [r7, #32]
 8028c5e:	69bb      	ldr	r3, [r7, #24]
 8028c60:	1ad3      	subs	r3, r2, r3
 8028c62:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8028c64:	6a3b      	ldr	r3, [r7, #32]
 8028c66:	2b00      	cmp	r3, #0
 8028c68:	f47f af56 	bne.w	8028b18 <lfs_file_flushedread+0x40>
    }

    return size;
 8028c6c:	683b      	ldr	r3, [r7, #0]
}
 8028c6e:	4618      	mov	r0, r3
 8028c70:	3728      	adds	r7, #40	@ 0x28
 8028c72:	46bd      	mov	sp, r7
 8028c74:	bdb0      	pop	{r4, r5, r7, pc}
 8028c76:	bf00      	nop
 8028c78:	fff7fc00 	.word	0xfff7fc00

08028c7c <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028c7c:	b580      	push	{r7, lr}
 8028c7e:	b086      	sub	sp, #24
 8028c80:	af00      	add	r7, sp, #0
 8028c82:	60f8      	str	r0, [r7, #12]
 8028c84:	60b9      	str	r1, [r7, #8]
 8028c86:	607a      	str	r2, [r7, #4]
 8028c88:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8028c8a:	68bb      	ldr	r3, [r7, #8]
 8028c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028c8e:	f003 0301 	and.w	r3, r3, #1
 8028c92:	2b00      	cmp	r3, #0
 8028c94:	d106      	bne.n	8028ca4 <lfs_file_rawread+0x28>
 8028c96:	4b11      	ldr	r3, [pc, #68]	@ (8028cdc <lfs_file_rawread+0x60>)
 8028c98:	4a11      	ldr	r2, [pc, #68]	@ (8028ce0 <lfs_file_rawread+0x64>)
 8028c9a:	f640 41ea 	movw	r1, #3306	@ 0xcea
 8028c9e:	4811      	ldr	r0, [pc, #68]	@ (8028ce4 <lfs_file_rawread+0x68>)
 8028ca0:	f003 fdb2 	bl	802c808 <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028ca4:	68bb      	ldr	r3, [r7, #8]
 8028ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8028cac:	2b00      	cmp	r3, #0
 8028cae:	d009      	beq.n	8028cc4 <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8028cb0:	68b9      	ldr	r1, [r7, #8]
 8028cb2:	68f8      	ldr	r0, [r7, #12]
 8028cb4:	f7ff fdb0 	bl	8028818 <lfs_file_flush>
 8028cb8:	6178      	str	r0, [r7, #20]
        if (err) {
 8028cba:	697b      	ldr	r3, [r7, #20]
 8028cbc:	2b00      	cmp	r3, #0
 8028cbe:	d001      	beq.n	8028cc4 <lfs_file_rawread+0x48>
            return err;
 8028cc0:	697b      	ldr	r3, [r7, #20]
 8028cc2:	e006      	b.n	8028cd2 <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8028cc4:	683b      	ldr	r3, [r7, #0]
 8028cc6:	687a      	ldr	r2, [r7, #4]
 8028cc8:	68b9      	ldr	r1, [r7, #8]
 8028cca:	68f8      	ldr	r0, [r7, #12]
 8028ccc:	f7ff ff04 	bl	8028ad8 <lfs_file_flushedread>
 8028cd0:	4603      	mov	r3, r0
}
 8028cd2:	4618      	mov	r0, r3
 8028cd4:	3718      	adds	r7, #24
 8028cd6:	46bd      	mov	sp, r7
 8028cd8:	bd80      	pop	{r7, pc}
 8028cda:	bf00      	nop
 8028cdc:	08033b54 	.word	0x08033b54
 8028ce0:	08034b68 	.word	0x08034b68
 8028ce4:	08033818 	.word	0x08033818

08028ce8 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028ce8:	b5b0      	push	{r4, r5, r7, lr}
 8028cea:	b090      	sub	sp, #64	@ 0x40
 8028cec:	af04      	add	r7, sp, #16
 8028cee:	60f8      	str	r0, [r7, #12]
 8028cf0:	60b9      	str	r1, [r7, #8]
 8028cf2:	607a      	str	r2, [r7, #4]
 8028cf4:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8028cf6:	687b      	ldr	r3, [r7, #4]
 8028cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lfs_size_t nsize = size;
 8028cfa:	683b      	ldr	r3, [r7, #0]
 8028cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8028cfe:	68bb      	ldr	r3, [r7, #8]
 8028d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8028d06:	2b00      	cmp	r3, #0
 8028d08:	f000 810c 	beq.w	8028f24 <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8028d0c:	68bb      	ldr	r3, [r7, #8]
 8028d0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028d12:	441a      	add	r2, r3
 8028d14:	68bb      	ldr	r3, [r7, #8]
 8028d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028d18:	4619      	mov	r1, r3
 8028d1a:	4610      	mov	r0, r2
 8028d1c:	f7fa fe2d 	bl	802397a <lfs_max>
 8028d20:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8028d22:	68fb      	ldr	r3, [r7, #12]
 8028d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                (lfs->cfg->metadata_max ?
 8028d28:	68fb      	ldr	r3, [r7, #12]
 8028d2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 8028d2e:	2b00      	cmp	r3, #0
 8028d30:	d004      	beq.n	8028d3c <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028d32:	68fb      	ldr	r3, [r7, #12]
 8028d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
            lfs_min(0x3fe, lfs_min(
 8028d38:	08db      	lsrs	r3, r3, #3
 8028d3a:	e003      	b.n	8028d44 <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028d3c:	68fb      	ldr	r3, [r7, #12]
 8028d3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028d40:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8028d42:	08db      	lsrs	r3, r3, #3
 8028d44:	4619      	mov	r1, r3
 8028d46:	4610      	mov	r0, r2
 8028d48:	f7fa fe27 	bl	802399a <lfs_min>
 8028d4c:	4603      	mov	r3, r0
 8028d4e:	4619      	mov	r1, r3
 8028d50:	f240 30fe 	movw	r0, #1022	@ 0x3fe
 8028d54:	f7fa fe21 	bl	802399a <lfs_min>
 8028d58:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028d5a:	429c      	cmp	r4, r3
 8028d5c:	f240 80e2 	bls.w	8028f24 <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028d60:	68b9      	ldr	r1, [r7, #8]
 8028d62:	68f8      	ldr	r0, [r7, #12]
 8028d64:	f7ff fd36 	bl	80287d4 <lfs_file_outline>
 8028d68:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8028d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	f000 80d9 	beq.w	8028f24 <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8028d72:	68bb      	ldr	r3, [r7, #8]
 8028d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028d76:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8028d7a:	68bb      	ldr	r3, [r7, #8]
 8028d7c:	631a      	str	r2, [r3, #48]	@ 0x30
            return err;
 8028d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028d80:	e0d5      	b.n	8028f2e <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8028d82:	68bb      	ldr	r3, [r7, #8]
 8028d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8028d8a:	2b00      	cmp	r3, #0
 8028d8c:	d006      	beq.n	8028d9c <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8028d8e:	68bb      	ldr	r3, [r7, #8]
 8028d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8028d92:	68fb      	ldr	r3, [r7, #12]
 8028d94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028d96:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8028d98:	429a      	cmp	r2, r3
 8028d9a:	d16b      	bne.n	8028e74 <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8028d9c:	68bb      	ldr	r3, [r7, #8]
 8028d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8028da4:	2b00      	cmp	r3, #0
 8028da6:	d157      	bne.n	8028e58 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8028da8:	68bb      	ldr	r3, [r7, #8]
 8028daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8028db0:	2b00      	cmp	r3, #0
 8028db2:	d12d      	bne.n	8028e10 <lfs_file_flushedwrite+0x128>
 8028db4:	68bb      	ldr	r3, [r7, #8]
 8028db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028db8:	2b00      	cmp	r3, #0
 8028dba:	d029      	beq.n	8028e10 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028dbc:	68bb      	ldr	r3, [r7, #8]
 8028dbe:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8028dc2:	68bb      	ldr	r3, [r7, #8]
 8028dc4:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8028dc6:	68bb      	ldr	r3, [r7, #8]
 8028dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8028dca:	68ba      	ldr	r2, [r7, #8]
 8028dcc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028dce:	3a01      	subs	r2, #1
 8028dd0:	68b9      	ldr	r1, [r7, #8]
 8028dd2:	3138      	adds	r1, #56	@ 0x38
 8028dd4:	68b8      	ldr	r0, [r7, #8]
 8028dd6:	303c      	adds	r0, #60	@ 0x3c
 8028dd8:	9003      	str	r0, [sp, #12]
 8028dda:	9102      	str	r1, [sp, #8]
 8028ddc:	9201      	str	r2, [sp, #4]
 8028dde:	9300      	str	r3, [sp, #0]
 8028de0:	462b      	mov	r3, r5
 8028de2:	4622      	mov	r2, r4
 8028de4:	2100      	movs	r1, #0
 8028de6:	68f8      	ldr	r0, [r7, #12]
 8028de8:	f7ff f83c 	bl	8027e64 <lfs_ctz_find>
 8028dec:	6238      	str	r0, [r7, #32]
                    if (err) {
 8028dee:	6a3b      	ldr	r3, [r7, #32]
 8028df0:	2b00      	cmp	r3, #0
 8028df2:	d007      	beq.n	8028e04 <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8028df4:	68bb      	ldr	r3, [r7, #8]
 8028df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028df8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8028dfc:	68bb      	ldr	r3, [r7, #8]
 8028dfe:	631a      	str	r2, [r3, #48]	@ 0x30
                        return err;
 8028e00:	6a3b      	ldr	r3, [r7, #32]
 8028e02:	e094      	b.n	8028f2e <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8028e04:	68bb      	ldr	r3, [r7, #8]
 8028e06:	3340      	adds	r3, #64	@ 0x40
 8028e08:	4619      	mov	r1, r3
 8028e0a:	68f8      	ldr	r0, [r7, #12]
 8028e0c:	f7fa fe8a 	bl	8023b24 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8028e10:	68f8      	ldr	r0, [r7, #12]
 8028e12:	f7fb fd09 	bl	8024828 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8028e16:	68bb      	ldr	r3, [r7, #8]
 8028e18:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8028e1c:	68fc      	ldr	r4, [r7, #12]
 8028e1e:	68bb      	ldr	r3, [r7, #8]
 8028e20:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
 8028e22:	68bb      	ldr	r3, [r7, #8]
 8028e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028e26:	68ba      	ldr	r2, [r7, #8]
 8028e28:	3238      	adds	r2, #56	@ 0x38
 8028e2a:	68b9      	ldr	r1, [r7, #8]
 8028e2c:	313c      	adds	r1, #60	@ 0x3c
 8028e2e:	9102      	str	r1, [sp, #8]
 8028e30:	9201      	str	r2, [sp, #4]
 8028e32:	9300      	str	r3, [sp, #0]
 8028e34:	462b      	mov	r3, r5
 8028e36:	4622      	mov	r2, r4
 8028e38:	4601      	mov	r1, r0
 8028e3a:	68f8      	ldr	r0, [r7, #12]
 8028e3c:	f7ff f87e 	bl	8027f3c <lfs_ctz_extend>
 8028e40:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8028e42:	69fb      	ldr	r3, [r7, #28]
 8028e44:	2b00      	cmp	r3, #0
 8028e46:	d00f      	beq.n	8028e68 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028e48:	68bb      	ldr	r3, [r7, #8]
 8028e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028e4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8028e50:	68bb      	ldr	r3, [r7, #8]
 8028e52:	631a      	str	r2, [r3, #48]	@ 0x30
                    return err;
 8028e54:	69fb      	ldr	r3, [r7, #28]
 8028e56:	e06a      	b.n	8028f2e <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028e58:	68bb      	ldr	r3, [r7, #8]
 8028e5a:	f06f 0201 	mvn.w	r2, #1
 8028e5e:	639a      	str	r2, [r3, #56]	@ 0x38
                file->off = file->pos;
 8028e60:	68bb      	ldr	r3, [r7, #8]
 8028e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028e64:	68bb      	ldr	r3, [r7, #8]
 8028e66:	63da      	str	r2, [r3, #60]	@ 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8028e68:	68bb      	ldr	r3, [r7, #8]
 8028e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028e6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8028e70:	68bb      	ldr	r3, [r7, #8]
 8028e72:	631a      	str	r2, [r3, #48]	@ 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028e74:	68fb      	ldr	r3, [r7, #12]
 8028e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8028e78:	69da      	ldr	r2, [r3, #28]
 8028e7a:	68bb      	ldr	r3, [r7, #8]
 8028e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8028e7e:	1ad3      	subs	r3, r2, r3
 8028e80:	4619      	mov	r1, r3
 8028e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8028e84:	f7fa fd89 	bl	802399a <lfs_min>
 8028e88:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8028e8a:	68bb      	ldr	r3, [r7, #8]
 8028e8c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8028e90:	68fc      	ldr	r4, [r7, #12]
 8028e92:	68bb      	ldr	r3, [r7, #8]
 8028e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8028e96:	68ba      	ldr	r2, [r7, #8]
 8028e98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8028e9a:	69b9      	ldr	r1, [r7, #24]
 8028e9c:	9103      	str	r1, [sp, #12]
 8028e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8028ea0:	9102      	str	r1, [sp, #8]
 8028ea2:	9201      	str	r2, [sp, #4]
 8028ea4:	9300      	str	r3, [sp, #0]
 8028ea6:	2301      	movs	r3, #1
 8028ea8:	4622      	mov	r2, r4
 8028eaa:	4601      	mov	r1, r0
 8028eac:	68f8      	ldr	r0, [r7, #12]
 8028eae:	f7fb f895 	bl	8023fdc <lfs_bd_prog>
 8028eb2:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028eb4:	697b      	ldr	r3, [r7, #20]
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	d01c      	beq.n	8028ef4 <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8028eba:	697b      	ldr	r3, [r7, #20]
 8028ebc:	f113 0f54 	cmn.w	r3, #84	@ 0x54
 8028ec0:	d007      	beq.n	8028ed2 <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8028ec2:	68bb      	ldr	r3, [r7, #8]
 8028ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028ec6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8028eca:	68bb      	ldr	r3, [r7, #8]
 8028ecc:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8028ece:	697b      	ldr	r3, [r7, #20]
 8028ed0:	e02d      	b.n	8028f2e <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8028ed2:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8028ed4:	68b9      	ldr	r1, [r7, #8]
 8028ed6:	68f8      	ldr	r0, [r7, #12]
 8028ed8:	f7ff fba2 	bl	8028620 <lfs_file_relocate>
 8028edc:	6178      	str	r0, [r7, #20]
            if (err) {
 8028ede:	697b      	ldr	r3, [r7, #20]
 8028ee0:	2b00      	cmp	r3, #0
 8028ee2:	d0d2      	beq.n	8028e8a <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8028ee4:	68bb      	ldr	r3, [r7, #8]
 8028ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028ee8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8028eec:	68bb      	ldr	r3, [r7, #8]
 8028eee:	631a      	str	r2, [r3, #48]	@ 0x30
                return err;
 8028ef0:	697b      	ldr	r3, [r7, #20]
 8028ef2:	e01c      	b.n	8028f2e <lfs_file_flushedwrite+0x246>
            break;
 8028ef4:	bf00      	nop
            }
        }

        file->pos += diff;
 8028ef6:	68bb      	ldr	r3, [r7, #8]
 8028ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028efa:	69bb      	ldr	r3, [r7, #24]
 8028efc:	441a      	add	r2, r3
 8028efe:	68bb      	ldr	r3, [r7, #8]
 8028f00:	635a      	str	r2, [r3, #52]	@ 0x34
        file->off += diff;
 8028f02:	68bb      	ldr	r3, [r7, #8]
 8028f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8028f06:	69bb      	ldr	r3, [r7, #24]
 8028f08:	441a      	add	r2, r3
 8028f0a:	68bb      	ldr	r3, [r7, #8]
 8028f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
        data += diff;
 8028f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8028f10:	69bb      	ldr	r3, [r7, #24]
 8028f12:	4413      	add	r3, r2
 8028f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        nsize -= diff;
 8028f16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8028f18:	69bb      	ldr	r3, [r7, #24]
 8028f1a:	1ad3      	subs	r3, r2, r3
 8028f1c:	62bb      	str	r3, [r7, #40]	@ 0x28

        lfs_alloc_ack(lfs);
 8028f1e:	68f8      	ldr	r0, [r7, #12]
 8028f20:	f7fb fc82 	bl	8024828 <lfs_alloc_ack>
    while (nsize > 0) {
 8028f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8028f26:	2b00      	cmp	r3, #0
 8028f28:	f47f af2b 	bne.w	8028d82 <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028f2c:	683b      	ldr	r3, [r7, #0]
}
 8028f2e:	4618      	mov	r0, r3
 8028f30:	3730      	adds	r7, #48	@ 0x30
 8028f32:	46bd      	mov	sp, r7
 8028f34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028f38 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028f38:	b580      	push	{r7, lr}
 8028f3a:	b08a      	sub	sp, #40	@ 0x28
 8028f3c:	af00      	add	r7, sp, #0
 8028f3e:	60f8      	str	r0, [r7, #12]
 8028f40:	60b9      	str	r1, [r7, #8]
 8028f42:	607a      	str	r2, [r7, #4]
 8028f44:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8028f46:	68bb      	ldr	r3, [r7, #8]
 8028f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028f4a:	f003 0302 	and.w	r3, r3, #2
 8028f4e:	2b00      	cmp	r3, #0
 8028f50:	d106      	bne.n	8028f60 <lfs_file_rawwrite+0x28>
 8028f52:	4b38      	ldr	r3, [pc, #224]	@ (8029034 <lfs_file_rawwrite+0xfc>)
 8028f54:	4a38      	ldr	r2, [pc, #224]	@ (8029038 <lfs_file_rawwrite+0x100>)
 8028f56:	f640 5155 	movw	r1, #3413	@ 0xd55
 8028f5a:	4838      	ldr	r0, [pc, #224]	@ (802903c <lfs_file_rawwrite+0x104>)
 8028f5c:	f003 fc54 	bl	802c808 <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028f60:	68bb      	ldr	r3, [r7, #8]
 8028f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8028f68:	2b00      	cmp	r3, #0
 8028f6a:	d009      	beq.n	8028f80 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028f6c:	68b9      	ldr	r1, [r7, #8]
 8028f6e:	68f8      	ldr	r0, [r7, #12]
 8028f70:	f7ff fc52 	bl	8028818 <lfs_file_flush>
 8028f74:	6278      	str	r0, [r7, #36]	@ 0x24
        if (err) {
 8028f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028f78:	2b00      	cmp	r3, #0
 8028f7a:	d001      	beq.n	8028f80 <lfs_file_rawwrite+0x48>
            return err;
 8028f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8028f7e:	e055      	b.n	802902c <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028f80:	68bb      	ldr	r3, [r7, #8]
 8028f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8028f88:	2b00      	cmp	r3, #0
 8028f8a:	d009      	beq.n	8028fa0 <lfs_file_rawwrite+0x68>
 8028f8c:	68bb      	ldr	r3, [r7, #8]
 8028f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028f90:	68bb      	ldr	r3, [r7, #8]
 8028f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028f94:	429a      	cmp	r2, r3
 8028f96:	d203      	bcs.n	8028fa0 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028f98:	68bb      	ldr	r3, [r7, #8]
 8028f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028f9c:	68bb      	ldr	r3, [r7, #8]
 8028f9e:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028fa0:	68bb      	ldr	r3, [r7, #8]
 8028fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028fa4:	683b      	ldr	r3, [r7, #0]
 8028fa6:	441a      	add	r2, r3
 8028fa8:	68fb      	ldr	r3, [r7, #12]
 8028faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8028fac:	429a      	cmp	r2, r3
 8028fae:	d902      	bls.n	8028fb6 <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028fb0:	f06f 031a 	mvn.w	r3, #26
 8028fb4:	e03a      	b.n	802902c <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8028fb6:	68bb      	ldr	r3, [r7, #8]
 8028fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8028fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8028fbe:	2b00      	cmp	r3, #0
 8028fc0:	d121      	bne.n	8029006 <lfs_file_rawwrite+0xce>
 8028fc2:	68bb      	ldr	r3, [r7, #8]
 8028fc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8028fc6:	68bb      	ldr	r3, [r7, #8]
 8028fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8028fca:	429a      	cmp	r2, r3
 8028fcc:	d91b      	bls.n	8029006 <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8028fce:	68bb      	ldr	r3, [r7, #8]
 8028fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8028fd2:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8028fd4:	68bb      	ldr	r3, [r7, #8]
 8028fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8028fd8:	68bb      	ldr	r3, [r7, #8]
 8028fda:	635a      	str	r2, [r3, #52]	@ 0x34

        while (file->pos < pos) {
 8028fdc:	e00e      	b.n	8028ffc <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8028fde:	2300      	movs	r3, #0
 8028fe0:	75fb      	strb	r3, [r7, #23]
 8028fe2:	f107 0217 	add.w	r2, r7, #23
 8028fe6:	2301      	movs	r3, #1
 8028fe8:	68b9      	ldr	r1, [r7, #8]
 8028fea:	68f8      	ldr	r0, [r7, #12]
 8028fec:	f7ff fe7c 	bl	8028ce8 <lfs_file_flushedwrite>
 8028ff0:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8028ff2:	69fb      	ldr	r3, [r7, #28]
 8028ff4:	2b00      	cmp	r3, #0
 8028ff6:	da01      	bge.n	8028ffc <lfs_file_rawwrite+0xc4>
                return res;
 8028ff8:	69fb      	ldr	r3, [r7, #28]
 8028ffa:	e017      	b.n	802902c <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8028ffc:	68bb      	ldr	r3, [r7, #8]
 8028ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029000:	6a3a      	ldr	r2, [r7, #32]
 8029002:	429a      	cmp	r2, r3
 8029004:	d8eb      	bhi.n	8028fde <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8029006:	683b      	ldr	r3, [r7, #0]
 8029008:	687a      	ldr	r2, [r7, #4]
 802900a:	68b9      	ldr	r1, [r7, #8]
 802900c:	68f8      	ldr	r0, [r7, #12]
 802900e:	f7ff fe6b 	bl	8028ce8 <lfs_file_flushedwrite>
 8029012:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8029014:	69bb      	ldr	r3, [r7, #24]
 8029016:	2b00      	cmp	r3, #0
 8029018:	da01      	bge.n	802901e <lfs_file_rawwrite+0xe6>
        return nsize;
 802901a:	69bb      	ldr	r3, [r7, #24]
 802901c:	e006      	b.n	802902c <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 802901e:	68bb      	ldr	r3, [r7, #8]
 8029020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029022:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8029026:	68bb      	ldr	r3, [r7, #8]
 8029028:	631a      	str	r2, [r3, #48]	@ 0x30
    return nsize;
 802902a:	69bb      	ldr	r3, [r7, #24]
}
 802902c:	4618      	mov	r0, r3
 802902e:	3728      	adds	r7, #40	@ 0x28
 8029030:	46bd      	mov	sp, r7
 8029032:	bd80      	pop	{r7, pc}
 8029034:	08033b84 	.word	0x08033b84
 8029038:	08034b7c 	.word	0x08034b7c
 802903c:	08033818 	.word	0x08033818

08029040 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8029040:	b580      	push	{r7, lr}
 8029042:	b08c      	sub	sp, #48	@ 0x30
 8029044:	af00      	add	r7, sp, #0
 8029046:	60f8      	str	r0, [r7, #12]
 8029048:	60b9      	str	r1, [r7, #8]
 802904a:	607a      	str	r2, [r7, #4]
 802904c:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 802904e:	68bb      	ldr	r3, [r7, #8]
 8029050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029052:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (whence == LFS_SEEK_SET) {
 8029054:	683b      	ldr	r3, [r7, #0]
 8029056:	2b00      	cmp	r3, #0
 8029058:	d102      	bne.n	8029060 <lfs_file_rawseek+0x20>
        npos = off;
 802905a:	687b      	ldr	r3, [r7, #4]
 802905c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 802905e:	e025      	b.n	80290ac <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8029060:	683b      	ldr	r3, [r7, #0]
 8029062:	2b01      	cmp	r3, #1
 8029064:	d10f      	bne.n	8029086 <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8029066:	68bb      	ldr	r3, [r7, #8]
 8029068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802906a:	461a      	mov	r2, r3
 802906c:	687b      	ldr	r3, [r7, #4]
 802906e:	4413      	add	r3, r2
 8029070:	2b00      	cmp	r3, #0
 8029072:	da02      	bge.n	802907a <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8029074:	f06f 0315 	mvn.w	r3, #21
 8029078:	e067      	b.n	802914a <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 802907a:	68bb      	ldr	r3, [r7, #8]
 802907c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802907e:	687b      	ldr	r3, [r7, #4]
 8029080:	4413      	add	r3, r2
 8029082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029084:	e012      	b.n	80290ac <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8029086:	683b      	ldr	r3, [r7, #0]
 8029088:	2b02      	cmp	r3, #2
 802908a:	d10f      	bne.n	80290ac <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 802908c:	68b9      	ldr	r1, [r7, #8]
 802908e:	68f8      	ldr	r0, [r7, #12]
 8029090:	f000 f85f 	bl	8029152 <lfs_file_rawsize>
 8029094:	4602      	mov	r2, r0
 8029096:	687b      	ldr	r3, [r7, #4]
 8029098:	4413      	add	r3, r2
 802909a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (res < 0) {
 802909c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802909e:	2b00      	cmp	r3, #0
 80290a0:	da02      	bge.n	80290a8 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 80290a2:	f06f 0315 	mvn.w	r3, #21
 80290a6:	e050      	b.n	802914a <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 80290a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80290aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if (npos > lfs->file_max) {
 80290ac:	68fb      	ldr	r3, [r7, #12]
 80290ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80290b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80290b2:	429a      	cmp	r2, r3
 80290b4:	d902      	bls.n	80290bc <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 80290b6:	f06f 0315 	mvn.w	r3, #21
 80290ba:	e046      	b.n	802914a <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 80290bc:	68bb      	ldr	r3, [r7, #8]
 80290be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80290c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80290c2:	429a      	cmp	r2, r3
 80290c4:	d101      	bne.n	80290ca <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 80290c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80290c8:	e03f      	b.n	802914a <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 80290ca:	68bb      	ldr	r3, [r7, #8]
 80290cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80290ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
    if (
 80290d2:	2b00      	cmp	r3, #0
 80290d4:	d12b      	bne.n	802912e <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 80290d6:	68bb      	ldr	r3, [r7, #8]
 80290d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80290da:	61bb      	str	r3, [r7, #24]
 80290dc:	f107 0318 	add.w	r3, r7, #24
 80290e0:	4619      	mov	r1, r3
 80290e2:	68f8      	ldr	r0, [r7, #12]
 80290e4:	f7fe fe86 	bl	8027df4 <lfs_ctz_index>
 80290e8:	6278      	str	r0, [r7, #36]	@ 0x24
        lfs_off_t noff = npos;
 80290ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80290ec:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 80290ee:	f107 0314 	add.w	r3, r7, #20
 80290f2:	4619      	mov	r1, r3
 80290f4:	68f8      	ldr	r0, [r7, #12]
 80290f6:	f7fe fe7d 	bl	8027df4 <lfs_ctz_index>
 80290fa:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 80290fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80290fe:	6a3b      	ldr	r3, [r7, #32]
 8029100:	429a      	cmp	r2, r3
 8029102:	d114      	bne.n	802912e <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8029104:	68bb      	ldr	r3, [r7, #8]
 8029106:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8029108:	697b      	ldr	r3, [r7, #20]
 802910a:	429a      	cmp	r2, r3
 802910c:	d80f      	bhi.n	802912e <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 802910e:	68bb      	ldr	r3, [r7, #8]
 8029110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8029112:	68bb      	ldr	r3, [r7, #8]
 8029114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8029116:	441a      	add	r2, r3
 8029118:	697b      	ldr	r3, [r7, #20]
 802911a:	429a      	cmp	r2, r3
 802911c:	d907      	bls.n	802912e <lfs_file_rawseek+0xee>
            file->pos = npos;
 802911e:	68bb      	ldr	r3, [r7, #8]
 8029120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029122:	635a      	str	r2, [r3, #52]	@ 0x34
            file->off = noff;
 8029124:	697a      	ldr	r2, [r7, #20]
 8029126:	68bb      	ldr	r3, [r7, #8]
 8029128:	63da      	str	r2, [r3, #60]	@ 0x3c
            return npos;
 802912a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802912c:	e00d      	b.n	802914a <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 802912e:	68b9      	ldr	r1, [r7, #8]
 8029130:	68f8      	ldr	r0, [r7, #12]
 8029132:	f7ff fb71 	bl	8028818 <lfs_file_flush>
 8029136:	61f8      	str	r0, [r7, #28]
    if (err) {
 8029138:	69fb      	ldr	r3, [r7, #28]
 802913a:	2b00      	cmp	r3, #0
 802913c:	d001      	beq.n	8029142 <lfs_file_rawseek+0x102>
        return err;
 802913e:	69fb      	ldr	r3, [r7, #28]
 8029140:	e003      	b.n	802914a <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8029142:	68bb      	ldr	r3, [r7, #8]
 8029144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8029146:	635a      	str	r2, [r3, #52]	@ 0x34
    return npos;
 8029148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 802914a:	4618      	mov	r0, r3
 802914c:	3730      	adds	r7, #48	@ 0x30
 802914e:	46bd      	mov	sp, r7
 8029150:	bd80      	pop	{r7, pc}

08029152 <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8029152:	b580      	push	{r7, lr}
 8029154:	b082      	sub	sp, #8
 8029156:	af00      	add	r7, sp, #0
 8029158:	6078      	str	r0, [r7, #4]
 802915a:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802915c:	683b      	ldr	r3, [r7, #0]
 802915e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8029164:	2b00      	cmp	r3, #0
 8029166:	d009      	beq.n	802917c <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8029168:	683b      	ldr	r3, [r7, #0]
 802916a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802916c:	683b      	ldr	r3, [r7, #0]
 802916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029170:	4619      	mov	r1, r3
 8029172:	4610      	mov	r0, r2
 8029174:	f7fa fc01 	bl	802397a <lfs_max>
 8029178:	4603      	mov	r3, r0
 802917a:	e001      	b.n	8029180 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 802917c:	683b      	ldr	r3, [r7, #0]
 802917e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 8029180:	4618      	mov	r0, r3
 8029182:	3708      	adds	r7, #8
 8029184:	46bd      	mov	sp, r7
 8029186:	bd80      	pop	{r7, pc}

08029188 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8029188:	b580      	push	{r7, lr}
 802918a:	b08e      	sub	sp, #56	@ 0x38
 802918c:	af00      	add	r7, sp, #0
 802918e:	60f8      	str	r0, [r7, #12]
 8029190:	60b9      	str	r1, [r7, #8]
 8029192:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8029194:	f107 0208 	add.w	r2, r7, #8
 8029198:	f107 0114 	add.w	r1, r7, #20
 802919c:	2300      	movs	r3, #0
 802919e:	68f8      	ldr	r0, [r7, #12]
 80291a0:	f7fc feae 	bl	8025f00 <lfs_dir_find>
 80291a4:	6378      	str	r0, [r7, #52]	@ 0x34
    if (tag < 0) {
 80291a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80291a8:	2b00      	cmp	r3, #0
 80291aa:	da01      	bge.n	80291b0 <lfs_rawstat+0x28>
        return (int)tag;
 80291ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80291ae:	e00c      	b.n	80291ca <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 80291b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80291b2:	4618      	mov	r0, r3
 80291b4:	f7fb f908 	bl	80243c8 <lfs_tag_id>
 80291b8:	4603      	mov	r3, r0
 80291ba:	461a      	mov	r2, r3
 80291bc:	f107 0114 	add.w	r1, r7, #20
 80291c0:	687b      	ldr	r3, [r7, #4]
 80291c2:	68f8      	ldr	r0, [r7, #12]
 80291c4:	f7fc fdd8 	bl	8025d78 <lfs_dir_getinfo>
 80291c8:	4603      	mov	r3, r0
}
 80291ca:	4618      	mov	r0, r3
 80291cc:	3738      	adds	r7, #56	@ 0x38
 80291ce:	46bd      	mov	sp, r7
 80291d0:	bd80      	pop	{r7, pc}
	...

080291d4 <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 80291d4:	b580      	push	{r7, lr}
 80291d6:	b0a0      	sub	sp, #128	@ 0x80
 80291d8:	af02      	add	r7, sp, #8
 80291da:	6078      	str	r0, [r7, #4]
 80291dc:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80291de:	6878      	ldr	r0, [r7, #4]
 80291e0:	f001 fba2 	bl	802a928 <lfs_fs_forceconsistency>
 80291e4:	6778      	str	r0, [r7, #116]	@ 0x74
    if (err) {
 80291e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80291e8:	2b00      	cmp	r3, #0
 80291ea:	d001      	beq.n	80291f0 <lfs_rawremove+0x1c>
        return err;
 80291ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80291ee:	e0c4      	b.n	802937a <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80291f0:	463a      	mov	r2, r7
 80291f2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80291f6:	2300      	movs	r3, #0
 80291f8:	6878      	ldr	r0, [r7, #4]
 80291fa:	f7fc fe81 	bl	8025f00 <lfs_dir_find>
 80291fe:	6738      	str	r0, [r7, #112]	@ 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8029200:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029202:	2b00      	cmp	r3, #0
 8029204:	db09      	blt.n	802921a <lfs_rawremove+0x46>
 8029206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029208:	4618      	mov	r0, r3
 802920a:	f7fb f8dd 	bl	80243c8 <lfs_tag_id>
 802920e:	4603      	mov	r3, r0
 8029210:	461a      	mov	r2, r3
 8029212:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8029216:	429a      	cmp	r2, r3
 8029218:	d107      	bne.n	802922a <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 802921a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802921c:	2b00      	cmp	r3, #0
 802921e:	da01      	bge.n	8029224 <lfs_rawremove+0x50>
 8029220:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029222:	e0aa      	b.n	802937a <lfs_rawremove+0x1a6>
 8029224:	f06f 0315 	mvn.w	r3, #21
 8029228:	e0a7      	b.n	802937a <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 802922a:	687b      	ldr	r3, [r7, #4]
 802922c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802922e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8029230:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029232:	4618      	mov	r0, r3
 8029234:	f7fb f89e 	bl	8024374 <lfs_tag_type3>
 8029238:	4603      	mov	r3, r0
 802923a:	2b02      	cmp	r3, #2
 802923c:	d14a      	bne.n	80292d4 <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 802923e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029240:	4618      	mov	r0, r3
 8029242:	f7fb f8c1 	bl	80243c8 <lfs_tag_id>
 8029246:	4603      	mov	r3, r0
 8029248:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 802924a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 802924e:	f043 0308 	orr.w	r3, r3, #8
 8029252:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8029256:	f107 020c 	add.w	r2, r7, #12
 802925a:	9200      	str	r2, [sp, #0]
 802925c:	4a49      	ldr	r2, [pc, #292]	@ (8029384 <lfs_rawremove+0x1b0>)
 802925e:	6878      	ldr	r0, [r7, #4]
 8029260:	f7fb fc9c 	bl	8024b9c <lfs_dir_get>
 8029264:	66f8      	str	r0, [r7, #108]	@ 0x6c
        if (res < 0) {
 8029266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8029268:	2b00      	cmp	r3, #0
 802926a:	da01      	bge.n	8029270 <lfs_rawremove+0x9c>
            return (int)res;
 802926c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802926e:	e084      	b.n	802937a <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8029270:	f107 030c 	add.w	r3, r7, #12
 8029274:	4618      	mov	r0, r3
 8029276:	f7fb f818 	bl	80242aa <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 802927a:	f107 020c 	add.w	r2, r7, #12
 802927e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8029282:	3308      	adds	r3, #8
 8029284:	4619      	mov	r1, r3
 8029286:	6878      	ldr	r0, [r7, #4]
 8029288:	f7fc fd28 	bl	8025cdc <lfs_dir_fetch>
 802928c:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 802928e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029290:	2b00      	cmp	r3, #0
 8029292:	d001      	beq.n	8029298 <lfs_rawremove+0xc4>
            return err;
 8029294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029296:	e070      	b.n	802937a <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8029298:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 802929c:	2b00      	cmp	r3, #0
 802929e:	d103      	bne.n	80292a8 <lfs_rawremove+0xd4>
 80292a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80292a4:	2b00      	cmp	r3, #0
 80292a6:	d002      	beq.n	80292ae <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 80292a8:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 80292ac:	e065      	b.n	802937a <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80292ae:	2101      	movs	r1, #1
 80292b0:	6878      	ldr	r0, [r7, #4]
 80292b2:	f001 f8bb 	bl	802a42c <lfs_fs_preporphans>
 80292b6:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 80292b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80292ba:	2b00      	cmp	r3, #0
 80292bc:	d001      	beq.n	80292c2 <lfs_rawremove+0xee>
            return err;
 80292be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80292c0:	e05b      	b.n	802937a <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 80292c2:	2300      	movs	r3, #0
 80292c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        dir.id = 0;
 80292c8:	2300      	movs	r3, #0
 80292ca:	853b      	strh	r3, [r7, #40]	@ 0x28
        lfs->mlist = &dir;
 80292cc:	687b      	ldr	r3, [r7, #4]
 80292ce:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80292d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 80292d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80292d6:	4618      	mov	r0, r3
 80292d8:	f7fb f876 	bl	80243c8 <lfs_tag_id>
 80292dc:	4603      	mov	r3, r0
 80292de:	029b      	lsls	r3, r3, #10
 80292e0:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80292e4:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80292e8:	61fb      	str	r3, [r7, #28]
 80292ea:	2300      	movs	r3, #0
 80292ec:	623b      	str	r3, [r7, #32]
 80292ee:	f107 021c 	add.w	r2, r7, #28
 80292f2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80292f6:	2301      	movs	r3, #1
 80292f8:	6878      	ldr	r0, [r7, #4]
 80292fa:	f7fe fb09 	bl	8027910 <lfs_dir_commit>
 80292fe:	6778      	str	r0, [r7, #116]	@ 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8029300:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029302:	2b00      	cmp	r3, #0
 8029304:	d004      	beq.n	8029310 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 8029306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8029308:	687b      	ldr	r3, [r7, #4]
 802930a:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 802930c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802930e:	e034      	b.n	802937a <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8029310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	629a      	str	r2, [r3, #40]	@ 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8029316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8029318:	4618      	mov	r0, r3
 802931a:	f7fb f82b 	bl	8024374 <lfs_tag_type3>
 802931e:	4603      	mov	r3, r0
 8029320:	2b02      	cmp	r3, #2
 8029322:	d129      	bne.n	8029378 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8029324:	f04f 31ff 	mov.w	r1, #4294967295
 8029328:	6878      	ldr	r0, [r7, #4]
 802932a:	f001 f87f 	bl	802a42c <lfs_fs_preporphans>
 802932e:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 8029330:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029332:	2b00      	cmp	r3, #0
 8029334:	d001      	beq.n	802933a <lfs_rawremove+0x166>
            return err;
 8029336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029338:	e01f      	b.n	802937a <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 802933a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 802933e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8029342:	3308      	adds	r3, #8
 8029344:	4619      	mov	r1, r3
 8029346:	6878      	ldr	r0, [r7, #4]
 8029348:	f000 ff90 	bl	802a26c <lfs_fs_pred>
 802934c:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 802934e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029350:	2b00      	cmp	r3, #0
 8029352:	d001      	beq.n	8029358 <lfs_rawremove+0x184>
            return err;
 8029354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029356:	e010      	b.n	802937a <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8029358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802935c:	f103 0208 	add.w	r2, r3, #8
 8029360:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8029364:	4619      	mov	r1, r3
 8029366:	6878      	ldr	r0, [r7, #4]
 8029368:	f7fd f930 	bl	80265cc <lfs_dir_drop>
 802936c:	6778      	str	r0, [r7, #116]	@ 0x74
        if (err) {
 802936e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029370:	2b00      	cmp	r3, #0
 8029372:	d001      	beq.n	8029378 <lfs_rawremove+0x1a4>
            return err;
 8029374:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8029376:	e000      	b.n	802937a <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8029378:	2300      	movs	r3, #0
}
 802937a:	4618      	mov	r0, r3
 802937c:	3778      	adds	r7, #120	@ 0x78
 802937e:	46bd      	mov	sp, r7
 8029380:	bd80      	pop	{r7, pc}
 8029382:	bf00      	nop
 8029384:	700ffc00 	.word	0x700ffc00

08029388 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8029388:	b590      	push	{r4, r7, lr}
 802938a:	b0c3      	sub	sp, #268	@ 0x10c
 802938c:	af02      	add	r7, sp, #8
 802938e:	60f8      	str	r0, [r7, #12]
 8029390:	60b9      	str	r1, [r7, #8]
 8029392:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8029394:	68f8      	ldr	r0, [r7, #12]
 8029396:	f001 fac7 	bl	802a928 <lfs_fs_forceconsistency>
 802939a:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
    if (err) {
 802939e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80293a2:	2b00      	cmp	r3, #0
 80293a4:	d002      	beq.n	80293ac <lfs_rawrename+0x24>
        return err;
 80293a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80293aa:	e1f7      	b.n	802979c <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 80293ac:	f107 0208 	add.w	r2, r7, #8
 80293b0:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80293b4:	2300      	movs	r3, #0
 80293b6:	68f8      	ldr	r0, [r7, #12]
 80293b8:	f7fc fda2 	bl	8025f00 <lfs_dir_find>
 80293bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 80293c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80293c4:	2b00      	cmp	r3, #0
 80293c6:	db0a      	blt.n	80293de <lfs_rawrename+0x56>
 80293c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80293cc:	4618      	mov	r0, r3
 80293ce:	f7fa fffb 	bl	80243c8 <lfs_tag_id>
 80293d2:	4603      	mov	r3, r0
 80293d4:	461a      	mov	r2, r3
 80293d6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80293da:	429a      	cmp	r2, r3
 80293dc:	d109      	bne.n	80293f2 <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 80293de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80293e2:	2b00      	cmp	r3, #0
 80293e4:	da02      	bge.n	80293ec <lfs_rawrename+0x64>
 80293e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80293ea:	e1d7      	b.n	802979c <lfs_rawrename+0x414>
 80293ec:	f06f 0315 	mvn.w	r3, #21
 80293f0:	e1d4      	b.n	802979c <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 80293f2:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 80293f6:	1d3a      	adds	r2, r7, #4
 80293f8:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80293fc:	68f8      	ldr	r0, [r7, #12]
 80293fe:	f7fc fd7f 	bl	8025f00 <lfs_dir_find>
 8029402:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8029406:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802940a:	2b00      	cmp	r3, #0
 802940c:	db0a      	blt.n	8029424 <lfs_rawrename+0x9c>
 802940e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8029412:	4618      	mov	r0, r3
 8029414:	f7fa ffd8 	bl	80243c8 <lfs_tag_id>
 8029418:	4603      	mov	r3, r0
 802941a:	461a      	mov	r2, r3
 802941c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8029420:	429a      	cmp	r2, r3
 8029422:	d114      	bne.n	802944e <lfs_rawrename+0xc6>
 8029424:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8029428:	f113 0f02 	cmn.w	r3, #2
 802942c:	d105      	bne.n	802943a <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 802942e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8029432:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8029436:	4293      	cmp	r3, r2
 8029438:	d109      	bne.n	802944e <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 802943a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802943e:	2b00      	cmp	r3, #0
 8029440:	da02      	bge.n	8029448 <lfs_rawrename+0xc0>
 8029442:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8029446:	e1a9      	b.n	802979c <lfs_rawrename+0x414>
 8029448:	f06f 0315 	mvn.w	r3, #21
 802944c:	e1a6      	b.n	802979c <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 802944e:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8029452:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8029456:	4611      	mov	r1, r2
 8029458:	4618      	mov	r0, r3
 802945a:	f7fa fecf 	bl	80241fc <lfs_pair_cmp>
 802945e:	4603      	mov	r3, r0
 8029460:	2b00      	cmp	r3, #0
 8029462:	bf0c      	ite	eq
 8029464:	2301      	moveq	r3, #1
 8029466:	2300      	movne	r3, #0
 8029468:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 802946c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8029470:	4618      	mov	r0, r3
 8029472:	f7fa ffa9 	bl	80243c8 <lfs_tag_id>
 8029476:	4603      	mov	r3, r0
 8029478:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 802947c:	68fb      	ldr	r3, [r7, #12]
 802947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029480:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8029482:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8029486:	f113 0f02 	cmn.w	r3, #2
 802948a:	d11f      	bne.n	80294cc <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 802948c:	687b      	ldr	r3, [r7, #4]
 802948e:	4618      	mov	r0, r3
 8029490:	f7e6 ff06 	bl	80102a0 <strlen>
 8029494:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (nlen > lfs->name_max) {
 8029498:	68fb      	ldr	r3, [r7, #12]
 802949a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802949c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80294a0:	429a      	cmp	r2, r3
 80294a2:	d902      	bls.n	80294aa <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 80294a4:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80294a8:	e178      	b.n	802979c <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 80294aa:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80294ae:	2b00      	cmp	r3, #0
 80294b0:	f000 8084 	beq.w	80295bc <lfs_rawrename+0x234>
 80294b4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80294b8:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 80294bc:	429a      	cmp	r2, r3
 80294be:	d37d      	bcc.n	80295bc <lfs_rawrename+0x234>
            newoldid += 1;
 80294c0:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80294c4:	3301      	adds	r3, #1
 80294c6:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
 80294ca:	e077      	b.n	80295bc <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 80294cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80294d0:	4618      	mov	r0, r3
 80294d2:	f7fa ff4f 	bl	8024374 <lfs_tag_type3>
 80294d6:	4603      	mov	r3, r0
 80294d8:	461c      	mov	r4, r3
 80294da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80294de:	4618      	mov	r0, r3
 80294e0:	f7fa ff48 	bl	8024374 <lfs_tag_type3>
 80294e4:	4603      	mov	r3, r0
 80294e6:	429c      	cmp	r4, r3
 80294e8:	d002      	beq.n	80294f0 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 80294ea:	f06f 0314 	mvn.w	r3, #20
 80294ee:	e155      	b.n	802979c <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 80294f0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80294f4:	2b00      	cmp	r3, #0
 80294f6:	d007      	beq.n	8029508 <lfs_rawrename+0x180>
 80294f8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80294fc:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	@ 0xfe
 8029500:	429a      	cmp	r2, r3
 8029502:	d101      	bne.n	8029508 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 8029504:	2300      	movs	r3, #0
 8029506:	e149      	b.n	802979c <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8029508:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802950c:	4618      	mov	r0, r3
 802950e:	f7fa ff31 	bl	8024374 <lfs_tag_type3>
 8029512:	4603      	mov	r3, r0
 8029514:	2b02      	cmp	r3, #2
 8029516:	d151      	bne.n	80295bc <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8029518:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 802951c:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 802951e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8029522:	f043 0308 	orr.w	r3, r3, #8
 8029526:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 802952a:	f107 0220 	add.w	r2, r7, #32
 802952e:	9200      	str	r2, [sp, #0]
 8029530:	4a9d      	ldr	r2, [pc, #628]	@ (80297a8 <lfs_rawrename+0x420>)
 8029532:	68f8      	ldr	r0, [r7, #12]
 8029534:	f7fb fb32 	bl	8024b9c <lfs_dir_get>
 8029538:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
        if (res < 0) {
 802953c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8029540:	2b00      	cmp	r3, #0
 8029542:	da02      	bge.n	802954a <lfs_rawrename+0x1c2>
            return (int)res;
 8029544:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8029548:	e128      	b.n	802979c <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 802954a:	f107 0320 	add.w	r3, r7, #32
 802954e:	4618      	mov	r0, r3
 8029550:	f7fa feab 	bl	80242aa <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 8029554:	f107 0220 	add.w	r2, r7, #32
 8029558:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 802955c:	3308      	adds	r3, #8
 802955e:	4619      	mov	r1, r3
 8029560:	68f8      	ldr	r0, [r7, #12]
 8029562:	f7fc fbbb 	bl	8025cdc <lfs_dir_fetch>
 8029566:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 802956a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802956e:	2b00      	cmp	r3, #0
 8029570:	d002      	beq.n	8029578 <lfs_rawrename+0x1f0>
            return err;
 8029572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029576:	e111      	b.n	802979c <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8029578:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 802957c:	2b00      	cmp	r3, #0
 802957e:	d103      	bne.n	8029588 <lfs_rawrename+0x200>
 8029580:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8029584:	2b00      	cmp	r3, #0
 8029586:	d002      	beq.n	802958e <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 8029588:	f06f 0326 	mvn.w	r3, #38	@ 0x26
 802958c:	e106      	b.n	802979c <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 802958e:	2101      	movs	r1, #1
 8029590:	68f8      	ldr	r0, [r7, #12]
 8029592:	f000 ff4b 	bl	802a42c <lfs_fs_preporphans>
 8029596:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 802959a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802959e:	2b00      	cmp	r3, #0
 80295a0:	d002      	beq.n	80295a8 <lfs_rawrename+0x220>
            return err;
 80295a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80295a6:	e0f9      	b.n	802979c <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 80295a8:	2300      	movs	r3, #0
 80295aa:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        prevdir.id = 0;
 80295ae:	2300      	movs	r3, #0
 80295b0:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
        lfs->mlist = &prevdir;
 80295b4:	68fb      	ldr	r3, [r7, #12]
 80295b6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80295ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (!samepair) {
 80295bc:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80295c0:	f083 0301 	eor.w	r3, r3, #1
 80295c4:	b2db      	uxtb	r3, r3
 80295c6:	2b00      	cmp	r3, #0
 80295c8:	d007      	beq.n	80295da <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 80295ca:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 80295ce:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 80295d2:	4619      	mov	r1, r3
 80295d4:	68f8      	ldr	r0, [r7, #12]
 80295d6:	f000 ff63 	bl	802a4a0 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 80295da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80295de:	f113 0f02 	cmn.w	r3, #2
 80295e2:	d007      	beq.n	80295f4 <lfs_rawrename+0x26c>
 80295e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80295e8:	029b      	lsls	r3, r3, #10
 80295ea:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80295ee:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80295f2:	e000      	b.n	80295f6 <lfs_rawrename+0x26e>
 80295f4:	2300      	movs	r3, #0
 80295f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80295f8:	2300      	movs	r3, #0
 80295fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80295fc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8029600:	029b      	lsls	r3, r3, #10
 8029602:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8029606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802960a:	65bb      	str	r3, [r7, #88]	@ 0x58
 802960c:	2300      	movs	r3, #0
 802960e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8029610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8029614:	4618      	mov	r0, r3
 8029616:	f7fa fead 	bl	8024374 <lfs_tag_type3>
 802961a:	4603      	mov	r3, r0
 802961c:	051a      	lsls	r2, r3, #20
 802961e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8029622:	029b      	lsls	r3, r3, #10
 8029624:	ea42 0403 	orr.w	r4, r2, r3
 8029628:	687b      	ldr	r3, [r7, #4]
 802962a:	4618      	mov	r0, r3
 802962c:	f7e6 fe38 	bl	80102a0 <strlen>
 8029630:	4603      	mov	r3, r0
 8029632:	4323      	orrs	r3, r4
 8029634:	663b      	str	r3, [r7, #96]	@ 0x60
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	667b      	str	r3, [r7, #100]	@ 0x64
 802963a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 802963e:	029c      	lsls	r4, r3, #10
 8029640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8029644:	4618      	mov	r0, r3
 8029646:	f7fa febf 	bl	80243c8 <lfs_tag_id>
 802964a:	4603      	mov	r3, r0
 802964c:	4323      	orrs	r3, r4
 802964e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8029652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8029656:	66bb      	str	r3, [r7, #104]	@ 0x68
 8029658:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 802965c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 802965e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8029662:	2b00      	cmp	r3, #0
 8029664:	d007      	beq.n	8029676 <lfs_rawrename+0x2ee>
 8029666:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 802966a:	029b      	lsls	r3, r3, #10
 802966c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 8029670:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 8029674:	e000      	b.n	8029678 <lfs_rawrename+0x2f0>
 8029676:	2300      	movs	r3, #0
 8029678:	673b      	str	r3, [r7, #112]	@ 0x70
 802967a:	2300      	movs	r3, #0
 802967c:	677b      	str	r3, [r7, #116]	@ 0x74
 802967e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8029682:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8029686:	2305      	movs	r3, #5
 8029688:	68f8      	ldr	r0, [r7, #12]
 802968a:	f7fe f941 	bl	8027910 <lfs_dir_commit>
 802968e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 8029692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029696:	2b00      	cmp	r3, #0
 8029698:	d005      	beq.n	80296a6 <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 802969a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 802969c:	68fb      	ldr	r3, [r7, #12]
 802969e:	629a      	str	r2, [r3, #40]	@ 0x28
        return err;
 80296a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80296a4:	e07a      	b.n	802979c <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 80296a6:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 80296aa:	f083 0301 	eor.w	r3, r3, #1
 80296ae:	b2db      	uxtb	r3, r3
 80296b0:	2b00      	cmp	r3, #0
 80296b2:	d02f      	beq.n	8029714 <lfs_rawrename+0x38c>
 80296b4:	68fb      	ldr	r3, [r7, #12]
 80296b6:	3330      	adds	r3, #48	@ 0x30
 80296b8:	4618      	mov	r0, r3
 80296ba:	f7fa ff1a 	bl	80244f2 <lfs_gstate_hasmove>
 80296be:	4603      	mov	r3, r0
 80296c0:	2b00      	cmp	r3, #0
 80296c2:	d027      	beq.n	8029714 <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80296c4:	2200      	movs	r2, #0
 80296c6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80296ca:	68f8      	ldr	r0, [r7, #12]
 80296cc:	f000 fee8 	bl	802a4a0 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 80296d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80296d4:	4618      	mov	r0, r3
 80296d6:	f7fa fe77 	bl	80243c8 <lfs_tag_id>
 80296da:	4603      	mov	r3, r0
 80296dc:	029b      	lsls	r3, r3, #10
 80296de:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 80296e2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 80296e6:	61bb      	str	r3, [r7, #24]
 80296e8:	2300      	movs	r3, #0
 80296ea:	61fb      	str	r3, [r7, #28]
 80296ec:	f107 0218 	add.w	r2, r7, #24
 80296f0:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 80296f4:	2301      	movs	r3, #1
 80296f6:	68f8      	ldr	r0, [r7, #12]
 80296f8:	f7fe f90a 	bl	8027910 <lfs_dir_commit>
 80296fc:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8029700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029704:	2b00      	cmp	r3, #0
 8029706:	d005      	beq.n	8029714 <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 8029708:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 802970a:	68fb      	ldr	r3, [r7, #12]
 802970c:	629a      	str	r2, [r3, #40]	@ 0x28
            return err;
 802970e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029712:	e043      	b.n	802979c <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 8029714:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8029716:	68fb      	ldr	r3, [r7, #12]
 8029718:	629a      	str	r2, [r3, #40]	@ 0x28
    if (prevtag != LFS_ERR_NOENT
 802971a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 802971e:	f113 0f02 	cmn.w	r3, #2
 8029722:	d03a      	beq.n	802979a <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8029724:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8029728:	4618      	mov	r0, r3
 802972a:	f7fa fe23 	bl	8024374 <lfs_tag_type3>
 802972e:	4603      	mov	r3, r0
 8029730:	2b02      	cmp	r3, #2
 8029732:	d132      	bne.n	802979a <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8029734:	f04f 31ff 	mov.w	r1, #4294967295
 8029738:	68f8      	ldr	r0, [r7, #12]
 802973a:	f000 fe77 	bl	802a42c <lfs_fs_preporphans>
 802973e:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8029742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029746:	2b00      	cmp	r3, #0
 8029748:	d002      	beq.n	8029750 <lfs_rawrename+0x3c8>
            return err;
 802974a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802974e:	e025      	b.n	802979c <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8029750:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8029754:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8029758:	3308      	adds	r3, #8
 802975a:	4619      	mov	r1, r3
 802975c:	68f8      	ldr	r0, [r7, #12]
 802975e:	f000 fd85 	bl	802a26c <lfs_fs_pred>
 8029762:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 8029766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 802976a:	2b00      	cmp	r3, #0
 802976c:	d002      	beq.n	8029774 <lfs_rawrename+0x3ec>
            return err;
 802976e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029772:	e013      	b.n	802979c <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 8029774:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8029778:	f103 0208 	add.w	r2, r3, #8
 802977c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8029780:	4619      	mov	r1, r3
 8029782:	68f8      	ldr	r0, [r7, #12]
 8029784:	f7fc ff22 	bl	80265cc <lfs_dir_drop>
 8029788:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
        if (err) {
 802978c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029790:	2b00      	cmp	r3, #0
 8029792:	d002      	beq.n	802979a <lfs_rawrename+0x412>
            return err;
 8029794:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8029798:	e000      	b.n	802979c <lfs_rawrename+0x414>
        }
    }

    return 0;
 802979a:	2300      	movs	r3, #0
}
 802979c:	4618      	mov	r0, r3
 802979e:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 80297a2:	46bd      	mov	sp, r7
 80297a4:	bd90      	pop	{r4, r7, pc}
 80297a6:	bf00      	nop
 80297a8:	700ffc00 	.word	0x700ffc00

080297ac <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80297ac:	b580      	push	{r7, lr}
 80297ae:	b08c      	sub	sp, #48	@ 0x30
 80297b0:	af00      	add	r7, sp, #0
 80297b2:	6078      	str	r0, [r7, #4]
 80297b4:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80297b6:	687b      	ldr	r3, [r7, #4]
 80297b8:	683a      	ldr	r2, [r7, #0]
 80297ba:	669a      	str	r2, [r3, #104]	@ 0x68
    int err = 0;
 80297bc:	2300      	movs	r3, #0
 80297be:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80297c0:	687b      	ldr	r3, [r7, #4]
 80297c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80297c4:	695b      	ldr	r3, [r3, #20]
 80297c6:	2b00      	cmp	r3, #0
 80297c8:	d106      	bne.n	80297d8 <lfs_init+0x2c>
 80297ca:	4b92      	ldr	r3, [pc, #584]	@ (8029a14 <lfs_init+0x268>)
 80297cc:	4a92      	ldr	r2, [pc, #584]	@ (8029a18 <lfs_init+0x26c>)
 80297ce:	f640 7146 	movw	r1, #3910	@ 0xf46
 80297d2:	4892      	ldr	r0, [pc, #584]	@ (8029a1c <lfs_init+0x270>)
 80297d4:	f003 f818 	bl	802c808 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80297d8:	687b      	ldr	r3, [r7, #4]
 80297da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80297dc:	699b      	ldr	r3, [r3, #24]
 80297de:	2b00      	cmp	r3, #0
 80297e0:	d106      	bne.n	80297f0 <lfs_init+0x44>
 80297e2:	4b8f      	ldr	r3, [pc, #572]	@ (8029a20 <lfs_init+0x274>)
 80297e4:	4a8c      	ldr	r2, [pc, #560]	@ (8029a18 <lfs_init+0x26c>)
 80297e6:	f640 7147 	movw	r1, #3911	@ 0xf47
 80297ea:	488c      	ldr	r0, [pc, #560]	@ (8029a1c <lfs_init+0x270>)
 80297ec:	f003 f80c 	bl	802c808 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80297f0:	687b      	ldr	r3, [r7, #4]
 80297f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80297f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80297f6:	2b00      	cmp	r3, #0
 80297f8:	d106      	bne.n	8029808 <lfs_init+0x5c>
 80297fa:	4b8a      	ldr	r3, [pc, #552]	@ (8029a24 <lfs_init+0x278>)
 80297fc:	4a86      	ldr	r2, [pc, #536]	@ (8029a18 <lfs_init+0x26c>)
 80297fe:	f640 7148 	movw	r1, #3912	@ 0xf48
 8029802:	4886      	ldr	r0, [pc, #536]	@ (8029a1c <lfs_init+0x270>)
 8029804:	f003 f800 	bl	802c808 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8029808:	687b      	ldr	r3, [r7, #4]
 802980a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802980e:	687a      	ldr	r2, [r7, #4]
 8029810:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8029812:	6952      	ldr	r2, [r2, #20]
 8029814:	fbb3 f1f2 	udiv	r1, r3, r2
 8029818:	fb01 f202 	mul.w	r2, r1, r2
 802981c:	1a9b      	subs	r3, r3, r2
 802981e:	2b00      	cmp	r3, #0
 8029820:	d006      	beq.n	8029830 <lfs_init+0x84>
 8029822:	4b81      	ldr	r3, [pc, #516]	@ (8029a28 <lfs_init+0x27c>)
 8029824:	4a7c      	ldr	r2, [pc, #496]	@ (8029a18 <lfs_init+0x26c>)
 8029826:	f640 714c 	movw	r1, #3916	@ 0xf4c
 802982a:	487c      	ldr	r0, [pc, #496]	@ (8029a1c <lfs_init+0x270>)
 802982c:	f002 ffec 	bl	802c808 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029830:	687b      	ldr	r3, [r7, #4]
 8029832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8029836:	687a      	ldr	r2, [r7, #4]
 8029838:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 802983a:	6992      	ldr	r2, [r2, #24]
 802983c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029840:	fb01 f202 	mul.w	r2, r1, r2
 8029844:	1a9b      	subs	r3, r3, r2
 8029846:	2b00      	cmp	r3, #0
 8029848:	d006      	beq.n	8029858 <lfs_init+0xac>
 802984a:	4b78      	ldr	r3, [pc, #480]	@ (8029a2c <lfs_init+0x280>)
 802984c:	4a72      	ldr	r2, [pc, #456]	@ (8029a18 <lfs_init+0x26c>)
 802984e:	f640 714d 	movw	r1, #3917	@ 0xf4d
 8029852:	4872      	ldr	r0, [pc, #456]	@ (8029a1c <lfs_init+0x270>)
 8029854:	f002 ffd8 	bl	802c808 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8029858:	687b      	ldr	r3, [r7, #4]
 802985a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802985c:	69db      	ldr	r3, [r3, #28]
 802985e:	687a      	ldr	r2, [r7, #4]
 8029860:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8029862:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8029864:	fbb3 f1f2 	udiv	r1, r3, r2
 8029868:	fb01 f202 	mul.w	r2, r1, r2
 802986c:	1a9b      	subs	r3, r3, r2
 802986e:	2b00      	cmp	r3, #0
 8029870:	d006      	beq.n	8029880 <lfs_init+0xd4>
 8029872:	4b6f      	ldr	r3, [pc, #444]	@ (8029a30 <lfs_init+0x284>)
 8029874:	4a68      	ldr	r2, [pc, #416]	@ (8029a18 <lfs_init+0x26c>)
 8029876:	f640 714e 	movw	r1, #3918	@ 0xf4e
 802987a:	4868      	ldr	r0, [pc, #416]	@ (8029a1c <lfs_init+0x270>)
 802987c:	f002 ffc4 	bl	802c808 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8029880:	687b      	ldr	r3, [r7, #4]
 8029882:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029884:	69db      	ldr	r3, [r3, #28]
 8029886:	3b08      	subs	r3, #8
 8029888:	f04f 32ff 	mov.w	r2, #4294967295
 802988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8029890:	4618      	mov	r0, r3
 8029892:	f7fa f8b9 	bl	8023a08 <lfs_npw2>
 8029896:	4603      	mov	r3, r0
 8029898:	009a      	lsls	r2, r3, #2
 802989a:	687b      	ldr	r3, [r7, #4]
 802989c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802989e:	69db      	ldr	r3, [r3, #28]
 80298a0:	429a      	cmp	r2, r3
 80298a2:	d906      	bls.n	80298b2 <lfs_init+0x106>
 80298a4:	4b63      	ldr	r3, [pc, #396]	@ (8029a34 <lfs_init+0x288>)
 80298a6:	4a5c      	ldr	r2, [pc, #368]	@ (8029a18 <lfs_init+0x26c>)
 80298a8:	f640 7151 	movw	r1, #3921	@ 0xf51
 80298ac:	485b      	ldr	r0, [pc, #364]	@ (8029a1c <lfs_init+0x270>)
 80298ae:	f002 ffab 	bl	802c808 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80298b2:	687b      	ldr	r3, [r7, #4]
 80298b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80298b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80298b8:	2b00      	cmp	r3, #0
 80298ba:	d106      	bne.n	80298ca <lfs_init+0x11e>
 80298bc:	4b5e      	ldr	r3, [pc, #376]	@ (8029a38 <lfs_init+0x28c>)
 80298be:	4a56      	ldr	r2, [pc, #344]	@ (8029a18 <lfs_init+0x26c>)
 80298c0:	f640 715a 	movw	r1, #3930	@ 0xf5a
 80298c4:	4855      	ldr	r0, [pc, #340]	@ (8029a1c <lfs_init+0x270>)
 80298c6:	f002 ff9f 	bl	802c808 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80298ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80298d0:	2b00      	cmp	r3, #0
 80298d2:	d005      	beq.n	80298e0 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80298d4:	687b      	ldr	r3, [r7, #4]
 80298d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80298d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80298da:	687b      	ldr	r3, [r7, #4]
 80298dc:	60da      	str	r2, [r3, #12]
 80298de:	e010      	b.n	8029902 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80298e0:	687b      	ldr	r3, [r7, #4]
 80298e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80298e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80298e6:	4618      	mov	r0, r3
 80298e8:	f7fa f8f6 	bl	8023ad8 <lfs_malloc>
 80298ec:	4602      	mov	r2, r0
 80298ee:	687b      	ldr	r3, [r7, #4]
 80298f0:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80298f2:	687b      	ldr	r3, [r7, #4]
 80298f4:	68db      	ldr	r3, [r3, #12]
 80298f6:	2b00      	cmp	r3, #0
 80298f8:	d103      	bne.n	8029902 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 80298fa:	f06f 030b 	mvn.w	r3, #11
 80298fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8029900:	e0fd      	b.n	8029afe <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8029902:	687b      	ldr	r3, [r7, #4]
 8029904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029908:	2b00      	cmp	r3, #0
 802990a:	d005      	beq.n	8029918 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 802990c:	687b      	ldr	r3, [r7, #4]
 802990e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8029912:	687b      	ldr	r3, [r7, #4]
 8029914:	61da      	str	r2, [r3, #28]
 8029916:	e010      	b.n	802993a <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029918:	687b      	ldr	r3, [r7, #4]
 802991a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802991c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802991e:	4618      	mov	r0, r3
 8029920:	f7fa f8da 	bl	8023ad8 <lfs_malloc>
 8029924:	4602      	mov	r2, r0
 8029926:	687b      	ldr	r3, [r7, #4]
 8029928:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 802992a:	687b      	ldr	r3, [r7, #4]
 802992c:	69db      	ldr	r3, [r3, #28]
 802992e:	2b00      	cmp	r3, #0
 8029930:	d103      	bne.n	802993a <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8029932:	f06f 030b 	mvn.w	r3, #11
 8029936:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 8029938:	e0e1      	b.n	8029afe <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 802993a:	687b      	ldr	r3, [r7, #4]
 802993c:	4619      	mov	r1, r3
 802993e:	6878      	ldr	r0, [r7, #4]
 8029940:	f7fa f8f0 	bl	8023b24 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8029944:	687b      	ldr	r3, [r7, #4]
 8029946:	3310      	adds	r3, #16
 8029948:	4619      	mov	r1, r3
 802994a:	6878      	ldr	r0, [r7, #4]
 802994c:	f7fa f8ea 	bl	8023b24 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8029950:	687b      	ldr	r3, [r7, #4]
 8029952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029956:	2b00      	cmp	r3, #0
 8029958:	d106      	bne.n	8029968 <lfs_init+0x1bc>
 802995a:	4b38      	ldr	r3, [pc, #224]	@ (8029a3c <lfs_init+0x290>)
 802995c:	4a2e      	ldr	r2, [pc, #184]	@ (8029a18 <lfs_init+0x26c>)
 802995e:	f640 7178 	movw	r1, #3960	@ 0xf78
 8029962:	482e      	ldr	r0, [pc, #184]	@ (8029a1c <lfs_init+0x270>)
 8029964:	f002 ff50 	bl	802c808 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8029968:	687b      	ldr	r3, [r7, #4]
 802996a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802996c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802996e:	f003 0307 	and.w	r3, r3, #7
 8029972:	2b00      	cmp	r3, #0
 8029974:	d106      	bne.n	8029984 <lfs_init+0x1d8>
 8029976:	687b      	ldr	r3, [r7, #4]
 8029978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802997a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802997c:	f003 0303 	and.w	r3, r3, #3
 8029980:	2b00      	cmp	r3, #0
 8029982:	d006      	beq.n	8029992 <lfs_init+0x1e6>
 8029984:	4b2e      	ldr	r3, [pc, #184]	@ (8029a40 <lfs_init+0x294>)
 8029986:	4a24      	ldr	r2, [pc, #144]	@ (8029a18 <lfs_init+0x26c>)
 8029988:	f640 7179 	movw	r1, #3961	@ 0xf79
 802998c:	4823      	ldr	r0, [pc, #140]	@ (8029a1c <lfs_init+0x270>)
 802998e:	f002 ff3b 	bl	802c808 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8029992:	687b      	ldr	r3, [r7, #4]
 8029994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8029998:	2b00      	cmp	r3, #0
 802999a:	d005      	beq.n	80299a8 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 802999c:	687b      	ldr	r3, [r7, #4]
 802999e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80299a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80299a2:	687b      	ldr	r3, [r7, #4]
 80299a4:	665a      	str	r2, [r3, #100]	@ 0x64
 80299a6:	e010      	b.n	80299ca <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80299ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80299ae:	4618      	mov	r0, r3
 80299b0:	f7fa f892 	bl	8023ad8 <lfs_malloc>
 80299b4:	4602      	mov	r2, r0
 80299b6:	687b      	ldr	r3, [r7, #4]
 80299b8:	665a      	str	r2, [r3, #100]	@ 0x64
        if (!lfs->free.buffer) {
 80299ba:	687b      	ldr	r3, [r7, #4]
 80299bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80299be:	2b00      	cmp	r3, #0
 80299c0:	d103      	bne.n	80299ca <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80299c2:	f06f 030b 	mvn.w	r3, #11
 80299c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            goto cleanup;
 80299c8:	e099      	b.n	8029afe <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80299ca:	687b      	ldr	r3, [r7, #4]
 80299cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80299ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80299d0:	2bff      	cmp	r3, #255	@ 0xff
 80299d2:	d906      	bls.n	80299e2 <lfs_init+0x236>
 80299d4:	4b1b      	ldr	r3, [pc, #108]	@ (8029a44 <lfs_init+0x298>)
 80299d6:	4a10      	ldr	r2, [pc, #64]	@ (8029a18 <lfs_init+0x26c>)
 80299d8:	f640 7186 	movw	r1, #3974	@ 0xf86
 80299dc:	480f      	ldr	r0, [pc, #60]	@ (8029a1c <lfs_init+0x270>)
 80299de:	f002 ff13 	bl	802c808 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80299e2:	687b      	ldr	r3, [r7, #4]
 80299e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80299e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80299e8:	687b      	ldr	r3, [r7, #4]
 80299ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (!lfs->name_max) {
 80299ec:	687b      	ldr	r3, [r7, #4]
 80299ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80299f0:	2b00      	cmp	r3, #0
 80299f2:	d102      	bne.n	80299fa <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80299f4:	687b      	ldr	r3, [r7, #4]
 80299f6:	22ff      	movs	r2, #255	@ 0xff
 80299f8:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80299fa:	687b      	ldr	r3, [r7, #4]
 80299fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80299fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8029a00:	2b00      	cmp	r3, #0
 8029a02:	da23      	bge.n	8029a4c <lfs_init+0x2a0>
 8029a04:	4b10      	ldr	r3, [pc, #64]	@ (8029a48 <lfs_init+0x29c>)
 8029a06:	4a04      	ldr	r2, [pc, #16]	@ (8029a18 <lfs_init+0x26c>)
 8029a08:	f640 718c 	movw	r1, #3980	@ 0xf8c
 8029a0c:	4803      	ldr	r0, [pc, #12]	@ (8029a1c <lfs_init+0x270>)
 8029a0e:	f002 fefb 	bl	802c808 <__assert_func>
 8029a12:	bf00      	nop
 8029a14:	08033bb4 	.word	0x08033bb4
 8029a18:	08034b90 	.word	0x08034b90
 8029a1c:	08033818 	.word	0x08033818
 8029a20:	08033bd0 	.word	0x08033bd0
 8029a24:	08033bec 	.word	0x08033bec
 8029a28:	08033c08 	.word	0x08033c08
 8029a2c:	08033c38 	.word	0x08033c38
 8029a30:	08033c68 	.word	0x08033c68
 8029a34:	08033c9c 	.word	0x08033c9c
 8029a38:	08033ce8 	.word	0x08033ce8
 8029a3c:	08033d04 	.word	0x08033d04
 8029a40:	08033d24 	.word	0x08033d24
 8029a44:	08033d78 	.word	0x08033d78
 8029a48:	08033d94 	.word	0x08033d94
    lfs->file_max = lfs->cfg->file_max;
 8029a4c:	687b      	ldr	r3, [r7, #4]
 8029a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8029a52:	687b      	ldr	r3, [r7, #4]
 8029a54:	671a      	str	r2, [r3, #112]	@ 0x70
    if (!lfs->file_max) {
 8029a56:	687b      	ldr	r3, [r7, #4]
 8029a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029a5a:	2b00      	cmp	r3, #0
 8029a5c:	d103      	bne.n	8029a66 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8029a5e:	687b      	ldr	r3, [r7, #4]
 8029a60:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8029a64:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8029a66:	687b      	ldr	r3, [r7, #4]
 8029a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8029a6c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8029a70:	4293      	cmp	r3, r2
 8029a72:	d906      	bls.n	8029a82 <lfs_init+0x2d6>
 8029a74:	4b26      	ldr	r3, [pc, #152]	@ (8029b10 <lfs_init+0x364>)
 8029a76:	4a27      	ldr	r2, [pc, #156]	@ (8029b14 <lfs_init+0x368>)
 8029a78:	f640 7192 	movw	r1, #3986	@ 0xf92
 8029a7c:	4826      	ldr	r0, [pc, #152]	@ (8029b18 <lfs_init+0x36c>)
 8029a7e:	f002 fec3 	bl	802c808 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8029a82:	687b      	ldr	r3, [r7, #4]
 8029a84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029a86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8029a88:	687b      	ldr	r3, [r7, #4]
 8029a8a:	675a      	str	r2, [r3, #116]	@ 0x74
    if (!lfs->attr_max) {
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8029a90:	2b00      	cmp	r3, #0
 8029a92:	d103      	bne.n	8029a9c <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8029a94:	687b      	ldr	r3, [r7, #4]
 8029a96:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8029a9a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8029a9c:	687b      	ldr	r3, [r7, #4]
 8029a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029aa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8029aa2:	687b      	ldr	r3, [r7, #4]
 8029aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029aa6:	69db      	ldr	r3, [r3, #28]
 8029aa8:	429a      	cmp	r2, r3
 8029aaa:	d906      	bls.n	8029aba <lfs_init+0x30e>
 8029aac:	4b1b      	ldr	r3, [pc, #108]	@ (8029b1c <lfs_init+0x370>)
 8029aae:	4a19      	ldr	r2, [pc, #100]	@ (8029b14 <lfs_init+0x368>)
 8029ab0:	f640 7198 	movw	r1, #3992	@ 0xf98
 8029ab4:	4818      	ldr	r0, [pc, #96]	@ (8029b18 <lfs_init+0x36c>)
 8029ab6:	f002 fea7 	bl	802c808 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	f04f 32ff 	mov.w	r2, #4294967295
 8029ac0:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8029ac2:	687b      	ldr	r3, [r7, #4]
 8029ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8029ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    lfs->mlist = NULL;
 8029aca:	687b      	ldr	r3, [r7, #4]
 8029acc:	2200      	movs	r2, #0
 8029ace:	629a      	str	r2, [r3, #40]	@ 0x28
    lfs->seed = 0;
 8029ad0:	687b      	ldr	r3, [r7, #4]
 8029ad2:	2200      	movs	r2, #0
 8029ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8029ad6:	687b      	ldr	r3, [r7, #4]
 8029ad8:	333c      	adds	r3, #60	@ 0x3c
 8029ada:	2200      	movs	r2, #0
 8029adc:	601a      	str	r2, [r3, #0]
 8029ade:	605a      	str	r2, [r3, #4]
 8029ae0:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8029ae2:	687b      	ldr	r3, [r7, #4]
 8029ae4:	3330      	adds	r3, #48	@ 0x30
 8029ae6:	2200      	movs	r2, #0
 8029ae8:	601a      	str	r2, [r3, #0]
 8029aea:	605a      	str	r2, [r3, #4]
 8029aec:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	3348      	adds	r3, #72	@ 0x48
 8029af2:	2200      	movs	r2, #0
 8029af4:	601a      	str	r2, [r3, #0]
 8029af6:	605a      	str	r2, [r3, #4]
 8029af8:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8029afa:	2300      	movs	r3, #0
 8029afc:	e003      	b.n	8029b06 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8029afe:	6878      	ldr	r0, [r7, #4]
 8029b00:	f000 f80e 	bl	8029b20 <lfs_deinit>
    return err;
 8029b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8029b06:	4618      	mov	r0, r3
 8029b08:	3730      	adds	r7, #48	@ 0x30
 8029b0a:	46bd      	mov	sp, r7
 8029b0c:	bd80      	pop	{r7, pc}
 8029b0e:	bf00      	nop
 8029b10:	08033db8 	.word	0x08033db8
 8029b14:	08034b90 	.word	0x08034b90
 8029b18:	08033818 	.word	0x08033818
 8029b1c:	08033dd4 	.word	0x08033dd4

08029b20 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8029b20:	b580      	push	{r7, lr}
 8029b22:	b082      	sub	sp, #8
 8029b24:	af00      	add	r7, sp, #0
 8029b26:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029b28:	687b      	ldr	r3, [r7, #4]
 8029b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029b2e:	2b00      	cmp	r3, #0
 8029b30:	d104      	bne.n	8029b3c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8029b32:	687b      	ldr	r3, [r7, #4]
 8029b34:	68db      	ldr	r3, [r3, #12]
 8029b36:	4618      	mov	r0, r3
 8029b38:	f7f9 ffda 	bl	8023af0 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8029b3c:	687b      	ldr	r3, [r7, #4]
 8029b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029b42:	2b00      	cmp	r3, #0
 8029b44:	d104      	bne.n	8029b50 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8029b46:	687b      	ldr	r3, [r7, #4]
 8029b48:	69db      	ldr	r3, [r3, #28]
 8029b4a:	4618      	mov	r0, r3
 8029b4c:	f7f9 ffd0 	bl	8023af0 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8029b50:	687b      	ldr	r3, [r7, #4]
 8029b52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8029b56:	2b00      	cmp	r3, #0
 8029b58:	d104      	bne.n	8029b64 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8029b5a:	687b      	ldr	r3, [r7, #4]
 8029b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8029b5e:	4618      	mov	r0, r3
 8029b60:	f7f9 ffc6 	bl	8023af0 <lfs_free>
    }

    return 0;
 8029b64:	2300      	movs	r3, #0
}
 8029b66:	4618      	mov	r0, r3
 8029b68:	3708      	adds	r7, #8
 8029b6a:	46bd      	mov	sp, r7
 8029b6c:	bd80      	pop	{r7, pc}
	...

08029b70 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8029b70:	b580      	push	{r7, lr}
 8029b72:	b0a0      	sub	sp, #128	@ 0x80
 8029b74:	af00      	add	r7, sp, #0
 8029b76:	6078      	str	r0, [r7, #4]
 8029b78:	6039      	str	r1, [r7, #0]
    int err = 0;
 8029b7a:	2300      	movs	r3, #0
 8029b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    {
        err = lfs_init(lfs, cfg);
 8029b7e:	6839      	ldr	r1, [r7, #0]
 8029b80:	6878      	ldr	r0, [r7, #4]
 8029b82:	f7ff fe13 	bl	80297ac <lfs_init>
 8029b86:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8029b88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8029b8a:	2b00      	cmp	r3, #0
 8029b8c:	d001      	beq.n	8029b92 <lfs_rawformat+0x22>
            return err;
 8029b8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8029b90:	e082      	b.n	8029c98 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8029b92:	687b      	ldr	r3, [r7, #4]
 8029b94:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 8029b96:	687b      	ldr	r3, [r7, #4]
 8029b98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029b9c:	461a      	mov	r2, r3
 8029b9e:	2100      	movs	r1, #0
 8029ba0:	f003 fff6 	bl	802db90 <memset>
        lfs->free.off = 0;
 8029ba4:	687b      	ldr	r3, [r7, #4]
 8029ba6:	2200      	movs	r2, #0
 8029ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029bb0:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8029bb2:	687b      	ldr	r3, [r7, #4]
 8029bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029bb6:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029bb8:	4619      	mov	r1, r3
 8029bba:	4610      	mov	r0, r2
 8029bbc:	f7f9 feed 	bl	802399a <lfs_min>
 8029bc0:	4602      	mov	r2, r0
 8029bc2:	687b      	ldr	r3, [r7, #4]
 8029bc4:	659a      	str	r2, [r3, #88]	@ 0x58
        lfs->free.i = 0;
 8029bc6:	687b      	ldr	r3, [r7, #4]
 8029bc8:	2200      	movs	r2, #0
 8029bca:	65da      	str	r2, [r3, #92]	@ 0x5c
        lfs_alloc_ack(lfs);
 8029bcc:	6878      	ldr	r0, [r7, #4]
 8029bce:	f7fa fe2b 	bl	8024828 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8029bd2:	f107 030c 	add.w	r3, r7, #12
 8029bd6:	4619      	mov	r1, r3
 8029bd8:	6878      	ldr	r0, [r7, #4]
 8029bda:	f7fc fc7d 	bl	80264d8 <lfs_dir_alloc>
 8029bde:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8029be0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8029be2:	2b00      	cmp	r3, #0
 8029be4:	d14f      	bne.n	8029c86 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8029be6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8029bea:	667b      	str	r3, [r7, #100]	@ 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8029bec:	687b      	ldr	r3, [r7, #4]
 8029bee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029bf0:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8029bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
            .block_count = lfs->cfg->block_count,
 8029bf4:	687b      	ldr	r3, [r7, #4]
 8029bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029bf8:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8029bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
            .name_max    = lfs->name_max,
 8029bfc:	687b      	ldr	r3, [r7, #4]
 8029bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        lfs_superblock_t superblock = {
 8029c00:	673b      	str	r3, [r7, #112]	@ 0x70
            .file_max    = lfs->file_max,
 8029c02:	687b      	ldr	r3, [r7, #4]
 8029c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
        lfs_superblock_t superblock = {
 8029c06:	677b      	str	r3, [r7, #116]	@ 0x74
            .attr_max    = lfs->attr_max,
 8029c08:	687b      	ldr	r3, [r7, #4]
 8029c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        lfs_superblock_t superblock = {
 8029c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
        };

        lfs_superblock_tole32(&superblock);
 8029c0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8029c12:	4618      	mov	r0, r3
 8029c14:	f7fa fd48 	bl	80246a8 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8029c18:	4b21      	ldr	r3, [pc, #132]	@ (8029ca0 <lfs_rawformat+0x130>)
 8029c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8029c1c:	2300      	movs	r3, #0
 8029c1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8029c20:	4b20      	ldr	r3, [pc, #128]	@ (8029ca4 <lfs_rawformat+0x134>)
 8029c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8029c24:	4b20      	ldr	r3, [pc, #128]	@ (8029ca8 <lfs_rawformat+0x138>)
 8029c26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8029c28:	4b20      	ldr	r3, [pc, #128]	@ (8029cac <lfs_rawformat+0x13c>)
 8029c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8029c2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8029c30:	663b      	str	r3, [r7, #96]	@ 0x60
 8029c32:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8029c36:	f107 010c 	add.w	r1, r7, #12
 8029c3a:	2303      	movs	r3, #3
 8029c3c:	6878      	ldr	r0, [r7, #4]
 8029c3e:	f7fd fe67 	bl	8027910 <lfs_dir_commit>
 8029c42:	67f8      	str	r0, [r7, #124]	@ 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8029c44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8029c46:	2b00      	cmp	r3, #0
 8029c48:	d11f      	bne.n	8029c8a <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8029c4a:	2300      	movs	r3, #0
 8029c4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8029c50:	f107 010c 	add.w	r1, r7, #12
 8029c54:	2300      	movs	r3, #0
 8029c56:	2200      	movs	r2, #0
 8029c58:	6878      	ldr	r0, [r7, #4]
 8029c5a:	f7fd fe59 	bl	8027910 <lfs_dir_commit>
 8029c5e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8029c60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8029c62:	2b00      	cmp	r3, #0
 8029c64:	d113      	bne.n	8029c8e <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8029c66:	2300      	movs	r3, #0
 8029c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8029c6a:	2301      	movs	r3, #1
 8029c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8029c6e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8029c72:	f107 030c 	add.w	r3, r7, #12
 8029c76:	4619      	mov	r1, r3
 8029c78:	6878      	ldr	r0, [r7, #4]
 8029c7a:	f7fc f82f 	bl	8025cdc <lfs_dir_fetch>
 8029c7e:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (err) {
 8029c80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8029c82:	2b00      	cmp	r3, #0
 8029c84:	e004      	b.n	8029c90 <lfs_rawformat+0x120>
            goto cleanup;
 8029c86:	bf00      	nop
 8029c88:	e002      	b.n	8029c90 <lfs_rawformat+0x120>
            goto cleanup;
 8029c8a:	bf00      	nop
 8029c8c:	e000      	b.n	8029c90 <lfs_rawformat+0x120>
            goto cleanup;
 8029c8e:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8029c90:	6878      	ldr	r0, [r7, #4]
 8029c92:	f7ff ff45 	bl	8029b20 <lfs_deinit>
    return err;
 8029c96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c

}
 8029c98:	4618      	mov	r0, r3
 8029c9a:	3780      	adds	r7, #128	@ 0x80
 8029c9c:	46bd      	mov	sp, r7
 8029c9e:	bd80      	pop	{r7, pc}
 8029ca0:	40100000 	.word	0x40100000
 8029ca4:	0ff00008 	.word	0x0ff00008
 8029ca8:	08033e04 	.word	0x08033e04
 8029cac:	20100018 	.word	0x20100018

08029cb0 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8029cb0:	b580      	push	{r7, lr}
 8029cb2:	b09c      	sub	sp, #112	@ 0x70
 8029cb4:	af04      	add	r7, sp, #16
 8029cb6:	6078      	str	r0, [r7, #4]
 8029cb8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8029cba:	6839      	ldr	r1, [r7, #0]
 8029cbc:	6878      	ldr	r0, [r7, #4]
 8029cbe:	f7ff fd75 	bl	80297ac <lfs_init>
 8029cc2:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if (err) {
 8029cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8029cc6:	2b00      	cmp	r3, #0
 8029cc8:	d001      	beq.n	8029cce <lfs_rawmount+0x1e>
        return err;
 8029cca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8029ccc:	e192      	b.n	8029ff4 <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029cce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8029cd2:	2220      	movs	r2, #32
 8029cd4:	2100      	movs	r1, #0
 8029cd6:	4618      	mov	r0, r3
 8029cd8:	f003 ff5a 	bl	802db90 <memset>
 8029cdc:	2301      	movs	r3, #1
 8029cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
    lfs_block_t cycle = 0;
 8029ce0:	2300      	movs	r3, #0
 8029ce2:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8029ce4:	e10b      	b.n	8029efe <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8029ce6:	687b      	ldr	r3, [r7, #4]
 8029ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029cea:	6a1b      	ldr	r3, [r3, #32]
 8029cec:	085b      	lsrs	r3, r3, #1
 8029cee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8029cf0:	429a      	cmp	r2, r3
 8029cf2:	d303      	bcc.n	8029cfc <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8029cf4:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 8029cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8029cfa:	e177      	b.n	8029fec <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8029cfc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8029cfe:	3301      	adds	r3, #1
 8029d00:	65bb      	str	r3, [r7, #88]	@ 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8029d02:	687b      	ldr	r3, [r7, #4]
 8029d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8029d06:	4b8a      	ldr	r3, [pc, #552]	@ (8029f30 <lfs_rawmount+0x280>)
 8029d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8029d0a:	2308      	movs	r3, #8
 8029d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8029d0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8029d12:	f103 0218 	add.w	r2, r3, #24
 8029d16:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8029d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8029d1e:	9303      	str	r3, [sp, #12]
 8029d20:	4b84      	ldr	r3, [pc, #528]	@ (8029f34 <lfs_rawmount+0x284>)
 8029d22:	9302      	str	r3, [sp, #8]
 8029d24:	2300      	movs	r3, #0
 8029d26:	9301      	str	r3, [sp, #4]
 8029d28:	4b83      	ldr	r3, [pc, #524]	@ (8029f38 <lfs_rawmount+0x288>)
 8029d2a:	9300      	str	r3, [sp, #0]
 8029d2c:	4b83      	ldr	r3, [pc, #524]	@ (8029f3c <lfs_rawmount+0x28c>)
 8029d2e:	6878      	ldr	r0, [r7, #4]
 8029d30:	f7fb fc66 	bl	8025600 <lfs_dir_fetchmatch>
 8029d34:	6578      	str	r0, [r7, #84]	@ 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8029d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029d38:	2b00      	cmp	r3, #0
 8029d3a:	da02      	bge.n	8029d42 <lfs_rawmount+0x92>
            err = tag;
 8029d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            goto cleanup;
 8029d40:	e154      	b.n	8029fec <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8029d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029d44:	2b00      	cmp	r3, #0
 8029d46:	f000 80cd 	beq.w	8029ee4 <lfs_rawmount+0x234>
 8029d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029d4c:	4618      	mov	r0, r3
 8029d4e:	f7fa faee 	bl	802432e <lfs_tag_isdelete>
 8029d52:	4603      	mov	r3, r0
 8029d54:	f083 0301 	eor.w	r3, r3, #1
 8029d58:	b2db      	uxtb	r3, r3
 8029d5a:	2b00      	cmp	r3, #0
 8029d5c:	f000 80c2 	beq.w	8029ee4 <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029d60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8029d62:	687b      	ldr	r3, [r7, #4]
 8029d64:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8029d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8029d68:	687b      	ldr	r3, [r7, #4]
 8029d6a:	625a      	str	r2, [r3, #36]	@ 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8029d6c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8029d70:	f107 030c 	add.w	r3, r7, #12
 8029d74:	9300      	str	r3, [sp, #0]
 8029d76:	4b72      	ldr	r3, [pc, #456]	@ (8029f40 <lfs_rawmount+0x290>)
 8029d78:	4a70      	ldr	r2, [pc, #448]	@ (8029f3c <lfs_rawmount+0x28c>)
 8029d7a:	6878      	ldr	r0, [r7, #4]
 8029d7c:	f7fa ff0e 	bl	8024b9c <lfs_dir_get>
 8029d80:	6578      	str	r0, [r7, #84]	@ 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8029d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029d84:	2b00      	cmp	r3, #0
 8029d86:	da02      	bge.n	8029d8e <lfs_rawmount+0xde>
                err = tag;
 8029d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8029d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8029d8c:	e12e      	b.n	8029fec <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8029d8e:	f107 030c 	add.w	r3, r7, #12
 8029d92:	4618      	mov	r0, r3
 8029d94:	f7fa fc50 	bl	8024638 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8029d98:	68fb      	ldr	r3, [r7, #12]
 8029d9a:	0c1b      	lsrs	r3, r3, #16
 8029d9c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8029da0:	68fb      	ldr	r3, [r7, #12]
 8029da2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8029da6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8029daa:	2b02      	cmp	r3, #2
 8029dac:	d103      	bne.n	8029db6 <lfs_rawmount+0x106>
 8029dae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8029db2:	2b00      	cmp	r3, #0
 8029db4:	d011      	beq.n	8029dda <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8029db6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8029dba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8029dbe:	4961      	ldr	r1, [pc, #388]	@ (8029f44 <lfs_rawmount+0x294>)
 8029dc0:	9101      	str	r1, [sp, #4]
 8029dc2:	9300      	str	r3, [sp, #0]
 8029dc4:	4613      	mov	r3, r2
 8029dc6:	f241 0233 	movw	r2, #4147	@ 0x1033
 8029dca:	495f      	ldr	r1, [pc, #380]	@ (8029f48 <lfs_rawmount+0x298>)
 8029dcc:	485f      	ldr	r0, [pc, #380]	@ (8029f4c <lfs_rawmount+0x29c>)
 8029dce:	f003 fd4b 	bl	802d868 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8029dd2:	f06f 0315 	mvn.w	r3, #21
 8029dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8029dd8:	e083      	b.n	8029ee2 <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8029dda:	69bb      	ldr	r3, [r7, #24]
 8029ddc:	2b00      	cmp	r3, #0
 8029dde:	d018      	beq.n	8029e12 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8029de0:	69ba      	ldr	r2, [r7, #24]
 8029de2:	687b      	ldr	r3, [r7, #4]
 8029de4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8029de6:	429a      	cmp	r2, r3
 8029de8:	d910      	bls.n	8029e0c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8029dea:	69ba      	ldr	r2, [r7, #24]
 8029dec:	687b      	ldr	r3, [r7, #4]
 8029dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8029df0:	4954      	ldr	r1, [pc, #336]	@ (8029f44 <lfs_rawmount+0x294>)
 8029df2:	9101      	str	r1, [sp, #4]
 8029df4:	9300      	str	r3, [sp, #0]
 8029df6:	4613      	mov	r3, r2
 8029df8:	f241 023c 	movw	r2, #4156	@ 0x103c
 8029dfc:	4952      	ldr	r1, [pc, #328]	@ (8029f48 <lfs_rawmount+0x298>)
 8029dfe:	4854      	ldr	r0, [pc, #336]	@ (8029f50 <lfs_rawmount+0x2a0>)
 8029e00:	f003 fd32 	bl	802d868 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8029e04:	f06f 0315 	mvn.w	r3, #21
 8029e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 8029e0a:	e06a      	b.n	8029ee2 <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8029e0c:	69ba      	ldr	r2, [r7, #24]
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            if (superblock.file_max) {
 8029e12:	69fb      	ldr	r3, [r7, #28]
 8029e14:	2b00      	cmp	r3, #0
 8029e16:	d018      	beq.n	8029e4a <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8029e18:	69fa      	ldr	r2, [r7, #28]
 8029e1a:	687b      	ldr	r3, [r7, #4]
 8029e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029e1e:	429a      	cmp	r2, r3
 8029e20:	d910      	bls.n	8029e44 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8029e22:	69fa      	ldr	r2, [r7, #28]
 8029e24:	687b      	ldr	r3, [r7, #4]
 8029e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8029e28:	4946      	ldr	r1, [pc, #280]	@ (8029f44 <lfs_rawmount+0x294>)
 8029e2a:	9101      	str	r1, [sp, #4]
 8029e2c:	9300      	str	r3, [sp, #0]
 8029e2e:	4613      	mov	r3, r2
 8029e30:	f241 0247 	movw	r2, #4167	@ 0x1047
 8029e34:	4944      	ldr	r1, [pc, #272]	@ (8029f48 <lfs_rawmount+0x298>)
 8029e36:	4847      	ldr	r0, [pc, #284]	@ (8029f54 <lfs_rawmount+0x2a4>)
 8029e38:	f003 fd16 	bl	802d868 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029e3c:	f06f 0315 	mvn.w	r3, #21
 8029e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 8029e42:	e04e      	b.n	8029ee2 <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8029e44:	69fa      	ldr	r2, [r7, #28]
 8029e46:	687b      	ldr	r3, [r7, #4]
 8029e48:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            if (superblock.attr_max) {
 8029e4a:	6a3b      	ldr	r3, [r7, #32]
 8029e4c:	2b00      	cmp	r3, #0
 8029e4e:	d018      	beq.n	8029e82 <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029e50:	6a3a      	ldr	r2, [r7, #32]
 8029e52:	687b      	ldr	r3, [r7, #4]
 8029e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8029e56:	429a      	cmp	r2, r3
 8029e58:	d910      	bls.n	8029e7c <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029e5a:	6a3a      	ldr	r2, [r7, #32]
 8029e5c:	687b      	ldr	r3, [r7, #4]
 8029e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8029e60:	4938      	ldr	r1, [pc, #224]	@ (8029f44 <lfs_rawmount+0x294>)
 8029e62:	9101      	str	r1, [sp, #4]
 8029e64:	9300      	str	r3, [sp, #0]
 8029e66:	4613      	mov	r3, r2
 8029e68:	f241 0252 	movw	r2, #4178	@ 0x1052
 8029e6c:	4936      	ldr	r1, [pc, #216]	@ (8029f48 <lfs_rawmount+0x298>)
 8029e6e:	483a      	ldr	r0, [pc, #232]	@ (8029f58 <lfs_rawmount+0x2a8>)
 8029e70:	f003 fcfa 	bl	802d868 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8029e74:	f06f 0315 	mvn.w	r3, #21
 8029e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    goto cleanup;
 8029e7a:	e032      	b.n	8029ee2 <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8029e7c:	6a3a      	ldr	r2, [r7, #32]
 8029e7e:	687b      	ldr	r3, [r7, #4]
 8029e80:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8029e82:	697a      	ldr	r2, [r7, #20]
 8029e84:	687b      	ldr	r3, [r7, #4]
 8029e86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029e88:	6a1b      	ldr	r3, [r3, #32]
 8029e8a:	429a      	cmp	r2, r3
 8029e8c:	d011      	beq.n	8029eb2 <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8029e8e:	697a      	ldr	r2, [r7, #20]
 8029e90:	687b      	ldr	r3, [r7, #4]
 8029e92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029e94:	6a1b      	ldr	r3, [r3, #32]
 8029e96:	492b      	ldr	r1, [pc, #172]	@ (8029f44 <lfs_rawmount+0x294>)
 8029e98:	9101      	str	r1, [sp, #4]
 8029e9a:	9300      	str	r3, [sp, #0]
 8029e9c:	4613      	mov	r3, r2
 8029e9e:	f241 025c 	movw	r2, #4188	@ 0x105c
 8029ea2:	4929      	ldr	r1, [pc, #164]	@ (8029f48 <lfs_rawmount+0x298>)
 8029ea4:	482d      	ldr	r0, [pc, #180]	@ (8029f5c <lfs_rawmount+0x2ac>)
 8029ea6:	f003 fcdf 	bl	802d868 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8029eaa:	f06f 0315 	mvn.w	r3, #21
 8029eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8029eb0:	e017      	b.n	8029ee2 <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8029eb2:	693a      	ldr	r2, [r7, #16]
 8029eb4:	687b      	ldr	r3, [r7, #4]
 8029eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029eb8:	69db      	ldr	r3, [r3, #28]
 8029eba:	429a      	cmp	r2, r3
 8029ebc:	d012      	beq.n	8029ee4 <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8029ebe:	693a      	ldr	r2, [r7, #16]
 8029ec0:	687b      	ldr	r3, [r7, #4]
 8029ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8029ec4:	69db      	ldr	r3, [r3, #28]
 8029ec6:	491f      	ldr	r1, [pc, #124]	@ (8029f44 <lfs_rawmount+0x294>)
 8029ec8:	9101      	str	r1, [sp, #4]
 8029eca:	9300      	str	r3, [sp, #0]
 8029ecc:	4613      	mov	r3, r2
 8029ece:	f241 0263 	movw	r2, #4195	@ 0x1063
 8029ed2:	491d      	ldr	r1, [pc, #116]	@ (8029f48 <lfs_rawmount+0x298>)
 8029ed4:	4822      	ldr	r0, [pc, #136]	@ (8029f60 <lfs_rawmount+0x2b0>)
 8029ed6:	f003 fcc7 	bl	802d868 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8029eda:	f06f 0315 	mvn.w	r3, #21
 8029ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
                goto cleanup;
 8029ee0:	bf00      	nop
            goto cleanup;
 8029ee2:	e083      	b.n	8029fec <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8029eea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8029eee:	4619      	mov	r1, r3
 8029ef0:	6878      	ldr	r0, [r7, #4]
 8029ef2:	f7fb ff0f 	bl	8025d14 <lfs_dir_getgstate>
 8029ef6:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (err) {
 8029ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8029efa:	2b00      	cmp	r3, #0
 8029efc:	d175      	bne.n	8029fea <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8029efe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8029f02:	3318      	adds	r3, #24
 8029f04:	4618      	mov	r0, r3
 8029f06:	f7fa f95e 	bl	80241c6 <lfs_pair_isnull>
 8029f0a:	4603      	mov	r3, r0
 8029f0c:	f083 0301 	eor.w	r3, r3, #1
 8029f10:	b2db      	uxtb	r3, r3
 8029f12:	2b00      	cmp	r3, #0
 8029f14:	f47f aee7 	bne.w	8029ce6 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029f18:	687b      	ldr	r3, [r7, #4]
 8029f1a:	3320      	adds	r3, #32
 8029f1c:	4618      	mov	r0, r3
 8029f1e:	f7fa f952 	bl	80241c6 <lfs_pair_isnull>
 8029f22:	4603      	mov	r3, r0
 8029f24:	2b00      	cmp	r3, #0
 8029f26:	d01d      	beq.n	8029f64 <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029f28:	f06f 0315 	mvn.w	r3, #21
 8029f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
        goto cleanup;
 8029f2e:	e05d      	b.n	8029fec <lfs_rawmount+0x33c>
 8029f30:	08033e04 	.word	0x08033e04
 8029f34:	08025e6d 	.word	0x08025e6d
 8029f38:	0ff00008 	.word	0x0ff00008
 8029f3c:	7ffffc00 	.word	0x7ffffc00
 8029f40:	20100018 	.word	0x20100018
 8029f44:	0803392c 	.word	0x0803392c
 8029f48:	08033818 	.word	0x08033818
 8029f4c:	08033e10 	.word	0x08033e10
 8029f50:	08033e3c 	.word	0x08033e3c
 8029f54:	08033e70 	.word	0x08033e70
 8029f58:	08033ea4 	.word	0x08033ea4
 8029f5c:	08033ed8 	.word	0x08033ed8
 8029f60:	08033f0c 	.word	0x08033f0c
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8029f64:	687b      	ldr	r3, [r7, #4]
 8029f66:	3330      	adds	r3, #48	@ 0x30
 8029f68:	4618      	mov	r0, r3
 8029f6a:	f7fa fa83 	bl	8024474 <lfs_gstate_iszero>
 8029f6e:	4603      	mov	r3, r0
 8029f70:	f083 0301 	eor.w	r3, r3, #1
 8029f74:	b2db      	uxtb	r3, r3
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	d010      	beq.n	8029f9c <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029f7a:	687b      	ldr	r3, [r7, #4]
 8029f7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8029f7e:	687b      	ldr	r3, [r7, #4]
 8029f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8029f82:	687a      	ldr	r2, [r7, #4]
 8029f84:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8029f86:	481d      	ldr	r0, [pc, #116]	@ (8029ffc <lfs_rawmount+0x34c>)
 8029f88:	9002      	str	r0, [sp, #8]
 8029f8a:	9201      	str	r2, [sp, #4]
 8029f8c:	9300      	str	r3, [sp, #0]
 8029f8e:	460b      	mov	r3, r1
 8029f90:	f241 0279 	movw	r2, #4217	@ 0x1079
 8029f94:	491a      	ldr	r1, [pc, #104]	@ (802a000 <lfs_rawmount+0x350>)
 8029f96:	481b      	ldr	r0, [pc, #108]	@ (802a004 <lfs_rawmount+0x354>)
 8029f98:	f003 fc66 	bl	802d868 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029f9c:	687b      	ldr	r3, [r7, #4]
 8029f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029fa0:	4618      	mov	r0, r3
 8029fa2:	f7fa f9b6 	bl	8024312 <lfs_tag_isvalid>
 8029fa6:	4603      	mov	r3, r0
 8029fa8:	f083 0301 	eor.w	r3, r3, #1
 8029fac:	b2db      	uxtb	r3, r3
 8029fae:	461a      	mov	r2, r3
 8029fb0:	687b      	ldr	r3, [r7, #4]
 8029fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8029fb4:	441a      	add	r2, r3
 8029fb6:	687b      	ldr	r3, [r7, #4]
 8029fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gdisk = lfs->gstate;
 8029fba:	687b      	ldr	r3, [r7, #4]
 8029fbc:	687a      	ldr	r2, [r7, #4]
 8029fbe:	333c      	adds	r3, #60	@ 0x3c
 8029fc0:	3230      	adds	r2, #48	@ 0x30
 8029fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8029fc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8029fc8:	687b      	ldr	r3, [r7, #4]
 8029fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8029fcc:	687a      	ldr	r2, [r7, #4]
 8029fce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8029fd0:	6a12      	ldr	r2, [r2, #32]
 8029fd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8029fd6:	fb01 f202 	mul.w	r2, r1, r2
 8029fda:	1a9a      	subs	r2, r3, r2
 8029fdc:	687b      	ldr	r3, [r7, #4]
 8029fde:	655a      	str	r2, [r3, #84]	@ 0x54
    lfs_alloc_drop(lfs);
 8029fe0:	6878      	ldr	r0, [r7, #4]
 8029fe2:	f7fa fc30 	bl	8024846 <lfs_alloc_drop>

    return 0;
 8029fe6:	2300      	movs	r3, #0
 8029fe8:	e004      	b.n	8029ff4 <lfs_rawmount+0x344>
            goto cleanup;
 8029fea:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8029fec:	6878      	ldr	r0, [r7, #4]
 8029fee:	f000 f80b 	bl	802a008 <lfs_rawunmount>
    return err;
 8029ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8029ff4:	4618      	mov	r0, r3
 8029ff6:	3760      	adds	r7, #96	@ 0x60
 8029ff8:	46bd      	mov	sp, r7
 8029ffa:	bd80      	pop	{r7, pc}
 8029ffc:	0803392c 	.word	0x0803392c
 802a000:	08033818 	.word	0x08033818
 802a004:	08033f3c 	.word	0x08033f3c

0802a008 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 802a008:	b580      	push	{r7, lr}
 802a00a:	b082      	sub	sp, #8
 802a00c:	af00      	add	r7, sp, #0
 802a00e:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 802a010:	6878      	ldr	r0, [r7, #4]
 802a012:	f7ff fd85 	bl	8029b20 <lfs_deinit>
 802a016:	4603      	mov	r3, r0
}
 802a018:	4618      	mov	r0, r3
 802a01a:	3708      	adds	r7, #8
 802a01c:	46bd      	mov	sp, r7
 802a01e:	bd80      	pop	{r7, pc}

0802a020 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 802a020:	b590      	push	{r4, r7, lr}
 802a022:	b09d      	sub	sp, #116	@ 0x74
 802a024:	af04      	add	r7, sp, #16
 802a026:	60f8      	str	r0, [r7, #12]
 802a028:	60b9      	str	r1, [r7, #8]
 802a02a:	607a      	str	r2, [r7, #4]
 802a02c:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 802a02e:	f107 0318 	add.w	r3, r7, #24
 802a032:	2220      	movs	r2, #32
 802a034:	2100      	movs	r1, #0
 802a036:	4618      	mov	r0, r3
 802a038:	f003 fdaa 	bl	802db90 <memset>
 802a03c:	2301      	movs	r3, #1
 802a03e:	637b      	str	r3, [r7, #52]	@ 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 802a040:	2300      	movs	r3, #0
 802a042:	65fb      	str	r3, [r7, #92]	@ 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 802a044:	e0a7      	b.n	802a196 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 802a046:	68fb      	ldr	r3, [r7, #12]
 802a048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802a04a:	6a1b      	ldr	r3, [r3, #32]
 802a04c:	085b      	lsrs	r3, r3, #1
 802a04e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 802a050:	429a      	cmp	r2, r3
 802a052:	d302      	bcc.n	802a05a <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a054:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 802a058:	e102      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 802a05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802a05c:	3301      	adds	r3, #1
 802a05e:	65fb      	str	r3, [r7, #92]	@ 0x5c

        for (int i = 0; i < 2; i++) {
 802a060:	2300      	movs	r3, #0
 802a062:	65bb      	str	r3, [r7, #88]	@ 0x58
 802a064:	e013      	b.n	802a08e <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 802a066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802a068:	3306      	adds	r3, #6
 802a06a:	009b      	lsls	r3, r3, #2
 802a06c:	3360      	adds	r3, #96	@ 0x60
 802a06e:	443b      	add	r3, r7
 802a070:	f853 2c48 	ldr.w	r2, [r3, #-72]
 802a074:	68bb      	ldr	r3, [r7, #8]
 802a076:	4611      	mov	r1, r2
 802a078:	6878      	ldr	r0, [r7, #4]
 802a07a:	4798      	blx	r3
 802a07c:	63b8      	str	r0, [r7, #56]	@ 0x38
            if (err) {
 802a07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802a080:	2b00      	cmp	r3, #0
 802a082:	d001      	beq.n	802a088 <lfs_fs_rawtraverse+0x68>
                return err;
 802a084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802a086:	e0eb      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 802a088:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802a08a:	3301      	adds	r3, #1
 802a08c:	65bb      	str	r3, [r7, #88]	@ 0x58
 802a08e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802a090:	2b01      	cmp	r3, #1
 802a092:	dde8      	ble.n	802a066 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 802a094:	f107 0318 	add.w	r3, r7, #24
 802a098:	f103 0218 	add.w	r2, r3, #24
 802a09c:	f107 0318 	add.w	r3, r7, #24
 802a0a0:	4619      	mov	r1, r3
 802a0a2:	68f8      	ldr	r0, [r7, #12]
 802a0a4:	f7fb fe1a 	bl	8025cdc <lfs_dir_fetch>
 802a0a8:	6438      	str	r0, [r7, #64]	@ 0x40
        if (err) {
 802a0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802a0ac:	2b00      	cmp	r3, #0
 802a0ae:	d001      	beq.n	802a0b4 <lfs_fs_rawtraverse+0x94>
            return err;
 802a0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802a0b2:	e0d5      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 802a0b4:	2300      	movs	r3, #0
 802a0b6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 802a0ba:	e067      	b.n	802a18c <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 802a0bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 802a0c0:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 802a0c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 802a0c6:	f043 0308 	orr.w	r3, r3, #8
 802a0ca:	f107 0118 	add.w	r1, r7, #24
 802a0ce:	f107 0210 	add.w	r2, r7, #16
 802a0d2:	9200      	str	r2, [sp, #0]
 802a0d4:	4a64      	ldr	r2, [pc, #400]	@ (802a268 <lfs_fs_rawtraverse+0x248>)
 802a0d6:	68f8      	ldr	r0, [r7, #12]
 802a0d8:	f7fa fd60 	bl	8024b9c <lfs_dir_get>
 802a0dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
            if (tag < 0) {
 802a0de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a0e0:	2b00      	cmp	r3, #0
 802a0e2:	da05      	bge.n	802a0f0 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 802a0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a0e6:	f113 0f02 	cmn.w	r3, #2
 802a0ea:	d049      	beq.n	802a180 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 802a0ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a0ee:	e0b7      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 802a0f0:	f107 0310 	add.w	r3, r7, #16
 802a0f4:	4618      	mov	r0, r3
 802a0f6:	f7fa fa6f 	bl	80245d8 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 802a0fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a0fc:	4618      	mov	r0, r3
 802a0fe:	f7fa f939 	bl	8024374 <lfs_tag_type3>
 802a102:	4603      	mov	r3, r0
 802a104:	461a      	mov	r2, r3
 802a106:	f240 2302 	movw	r3, #514	@ 0x202
 802a10a:	429a      	cmp	r2, r3
 802a10c:	d113      	bne.n	802a136 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 802a10e:	68f9      	ldr	r1, [r7, #12]
 802a110:	6938      	ldr	r0, [r7, #16]
 802a112:	697b      	ldr	r3, [r7, #20]
 802a114:	687a      	ldr	r2, [r7, #4]
 802a116:	9202      	str	r2, [sp, #8]
 802a118:	68ba      	ldr	r2, [r7, #8]
 802a11a:	9201      	str	r2, [sp, #4]
 802a11c:	9300      	str	r3, [sp, #0]
 802a11e:	4603      	mov	r3, r0
 802a120:	460a      	mov	r2, r1
 802a122:	2100      	movs	r1, #0
 802a124:	68f8      	ldr	r0, [r7, #12]
 802a126:	f7fe f811 	bl	802814c <lfs_ctz_traverse>
 802a12a:	6438      	str	r0, [r7, #64]	@ 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 802a12c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802a12e:	2b00      	cmp	r3, #0
 802a130:	d027      	beq.n	802a182 <lfs_fs_rawtraverse+0x162>
                    return err;
 802a132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802a134:	e094      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 802a136:	78fb      	ldrb	r3, [r7, #3]
 802a138:	2b00      	cmp	r3, #0
 802a13a:	d022      	beq.n	802a182 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 802a13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a13e:	4618      	mov	r0, r3
 802a140:	f7fa f918 	bl	8024374 <lfs_tag_type3>
 802a144:	4603      	mov	r3, r0
            } else if (includeorphans &&
 802a146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802a14a:	d11a      	bne.n	802a182 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 802a14c:	2300      	movs	r3, #0
 802a14e:	653b      	str	r3, [r7, #80]	@ 0x50
 802a150:	e012      	b.n	802a178 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 802a152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a154:	009b      	lsls	r3, r3, #2
 802a156:	f107 0210 	add.w	r2, r7, #16
 802a15a:	4413      	add	r3, r2
 802a15c:	681a      	ldr	r2, [r3, #0]
 802a15e:	68bb      	ldr	r3, [r7, #8]
 802a160:	4611      	mov	r1, r2
 802a162:	6878      	ldr	r0, [r7, #4]
 802a164:	4798      	blx	r3
 802a166:	6438      	str	r0, [r7, #64]	@ 0x40
                    if (err) {
 802a168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802a16a:	2b00      	cmp	r3, #0
 802a16c:	d001      	beq.n	802a172 <lfs_fs_rawtraverse+0x152>
                        return err;
 802a16e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802a170:	e076      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 802a172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a174:	3301      	adds	r3, #1
 802a176:	653b      	str	r3, [r7, #80]	@ 0x50
 802a178:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802a17a:	2b01      	cmp	r3, #1
 802a17c:	dde9      	ble.n	802a152 <lfs_fs_rawtraverse+0x132>
 802a17e:	e000      	b.n	802a182 <lfs_fs_rawtraverse+0x162>
                    continue;
 802a180:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 802a182:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 802a186:	3301      	adds	r3, #1
 802a188:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 802a18c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 802a18e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 802a192:	429a      	cmp	r2, r3
 802a194:	d392      	bcc.n	802a0bc <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 802a196:	f107 0318 	add.w	r3, r7, #24
 802a19a:	3318      	adds	r3, #24
 802a19c:	4618      	mov	r0, r3
 802a19e:	f7fa f812 	bl	80241c6 <lfs_pair_isnull>
 802a1a2:	4603      	mov	r3, r0
 802a1a4:	f083 0301 	eor.w	r3, r3, #1
 802a1a8:	b2db      	uxtb	r3, r3
 802a1aa:	2b00      	cmp	r3, #0
 802a1ac:	f47f af4b 	bne.w	802a046 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802a1b0:	68fb      	ldr	r3, [r7, #12]
 802a1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802a1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802a1b6:	e04f      	b.n	802a258 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 802a1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a1ba:	799b      	ldrb	r3, [r3, #6]
 802a1bc:	2b01      	cmp	r3, #1
 802a1be:	d147      	bne.n	802a250 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 802a1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a1c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a1c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 802a1c8:	2b00      	cmp	r3, #0
 802a1ca:	d01d      	beq.n	802a208 <lfs_fs_rawtraverse+0x1e8>
 802a1cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a1ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a1d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802a1d4:	2b00      	cmp	r3, #0
 802a1d6:	d117      	bne.n	802a208 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 802a1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a1da:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 802a1de:	68f8      	ldr	r0, [r7, #12]
 802a1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a1e2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 802a1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802a1e8:	687a      	ldr	r2, [r7, #4]
 802a1ea:	9202      	str	r2, [sp, #8]
 802a1ec:	68ba      	ldr	r2, [r7, #8]
 802a1ee:	9201      	str	r2, [sp, #4]
 802a1f0:	9300      	str	r3, [sp, #0]
 802a1f2:	4623      	mov	r3, r4
 802a1f4:	4602      	mov	r2, r0
 802a1f6:	68f8      	ldr	r0, [r7, #12]
 802a1f8:	f7fd ffa8 	bl	802814c <lfs_ctz_traverse>
 802a1fc:	64b8      	str	r0, [r7, #72]	@ 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 802a1fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802a200:	2b00      	cmp	r3, #0
 802a202:	d001      	beq.n	802a208 <lfs_fs_rawtraverse+0x1e8>
                return err;
 802a204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802a206:	e02b      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 802a208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a20a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a20c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802a210:	2b00      	cmp	r3, #0
 802a212:	d01e      	beq.n	802a252 <lfs_fs_rawtraverse+0x232>
 802a214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802a21c:	2b00      	cmp	r3, #0
 802a21e:	d118      	bne.n	802a252 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 802a220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a222:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 802a226:	68f8      	ldr	r0, [r7, #12]
 802a228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a22a:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 802a22c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802a230:	687a      	ldr	r2, [r7, #4]
 802a232:	9202      	str	r2, [sp, #8]
 802a234:	68ba      	ldr	r2, [r7, #8]
 802a236:	9201      	str	r2, [sp, #4]
 802a238:	9300      	str	r3, [sp, #0]
 802a23a:	4623      	mov	r3, r4
 802a23c:	4602      	mov	r2, r0
 802a23e:	68f8      	ldr	r0, [r7, #12]
 802a240:	f7fd ff84 	bl	802814c <lfs_ctz_traverse>
 802a244:	6478      	str	r0, [r7, #68]	@ 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 802a246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802a248:	2b00      	cmp	r3, #0
 802a24a:	d002      	beq.n	802a252 <lfs_fs_rawtraverse+0x232>
                return err;
 802a24c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802a24e:	e007      	b.n	802a260 <lfs_fs_rawtraverse+0x240>
            continue;
 802a250:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802a252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a254:	681b      	ldr	r3, [r3, #0]
 802a256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802a258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802a25a:	2b00      	cmp	r3, #0
 802a25c:	d1ac      	bne.n	802a1b8 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 802a25e:	2300      	movs	r3, #0
}
 802a260:	4618      	mov	r0, r3
 802a262:	3764      	adds	r7, #100	@ 0x64
 802a264:	46bd      	mov	sp, r7
 802a266:	bd90      	pop	{r4, r7, pc}
 802a268:	700ffc00 	.word	0x700ffc00

0802a26c <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 802a26c:	b580      	push	{r7, lr}
 802a26e:	b086      	sub	sp, #24
 802a270:	af00      	add	r7, sp, #0
 802a272:	60f8      	str	r0, [r7, #12]
 802a274:	60b9      	str	r1, [r7, #8]
 802a276:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 802a278:	687b      	ldr	r3, [r7, #4]
 802a27a:	2200      	movs	r2, #0
 802a27c:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 802a27e:	687b      	ldr	r3, [r7, #4]
 802a280:	2201      	movs	r2, #1
 802a282:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 802a284:	2300      	movs	r3, #0
 802a286:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 802a288:	e024      	b.n	802a2d4 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 802a28a:	68fb      	ldr	r3, [r7, #12]
 802a28c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802a28e:	6a1b      	ldr	r3, [r3, #32]
 802a290:	085b      	lsrs	r3, r3, #1
 802a292:	697a      	ldr	r2, [r7, #20]
 802a294:	429a      	cmp	r2, r3
 802a296:	d302      	bcc.n	802a29e <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a298:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 802a29c:	e027      	b.n	802a2ee <lfs_fs_pred+0x82>
        }
        cycle += 1;
 802a29e:	697b      	ldr	r3, [r7, #20]
 802a2a0:	3301      	adds	r3, #1
 802a2a2:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 802a2a4:	687b      	ldr	r3, [r7, #4]
 802a2a6:	3318      	adds	r3, #24
 802a2a8:	68b9      	ldr	r1, [r7, #8]
 802a2aa:	4618      	mov	r0, r3
 802a2ac:	f7f9 ffa6 	bl	80241fc <lfs_pair_cmp>
 802a2b0:	4603      	mov	r3, r0
 802a2b2:	2b00      	cmp	r3, #0
 802a2b4:	d101      	bne.n	802a2ba <lfs_fs_pred+0x4e>
            return 0;
 802a2b6:	2300      	movs	r3, #0
 802a2b8:	e019      	b.n	802a2ee <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 802a2ba:	687b      	ldr	r3, [r7, #4]
 802a2bc:	3318      	adds	r3, #24
 802a2be:	461a      	mov	r2, r3
 802a2c0:	6879      	ldr	r1, [r7, #4]
 802a2c2:	68f8      	ldr	r0, [r7, #12]
 802a2c4:	f7fb fd0a 	bl	8025cdc <lfs_dir_fetch>
 802a2c8:	6138      	str	r0, [r7, #16]
        if (err) {
 802a2ca:	693b      	ldr	r3, [r7, #16]
 802a2cc:	2b00      	cmp	r3, #0
 802a2ce:	d001      	beq.n	802a2d4 <lfs_fs_pred+0x68>
            return err;
 802a2d0:	693b      	ldr	r3, [r7, #16]
 802a2d2:	e00c      	b.n	802a2ee <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 802a2d4:	687b      	ldr	r3, [r7, #4]
 802a2d6:	3318      	adds	r3, #24
 802a2d8:	4618      	mov	r0, r3
 802a2da:	f7f9 ff74 	bl	80241c6 <lfs_pair_isnull>
 802a2de:	4603      	mov	r3, r0
 802a2e0:	f083 0301 	eor.w	r3, r3, #1
 802a2e4:	b2db      	uxtb	r3, r3
 802a2e6:	2b00      	cmp	r3, #0
 802a2e8:	d1cf      	bne.n	802a28a <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a2ea:	f06f 0301 	mvn.w	r3, #1
}
 802a2ee:	4618      	mov	r0, r3
 802a2f0:	3718      	adds	r7, #24
 802a2f2:	46bd      	mov	sp, r7
 802a2f4:	bd80      	pop	{r7, pc}

0802a2f6 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 802a2f6:	b5b0      	push	{r4, r5, r7, lr}
 802a2f8:	b08e      	sub	sp, #56	@ 0x38
 802a2fa:	af04      	add	r7, sp, #16
 802a2fc:	60f8      	str	r0, [r7, #12]
 802a2fe:	60b9      	str	r1, [r7, #8]
 802a300:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 802a302:	68fb      	ldr	r3, [r7, #12]
 802a304:	627b      	str	r3, [r7, #36]	@ 0x24
    lfs_t *lfs = find->lfs;
 802a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a308:	681b      	ldr	r3, [r3, #0]
 802a30a:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 802a30c:	687b      	ldr	r3, [r7, #4]
 802a30e:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a310:	6a3b      	ldr	r3, [r7, #32]
 802a312:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 802a316:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a318:	6a3b      	ldr	r3, [r7, #32]
 802a31a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802a31c:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 802a31e:	69fb      	ldr	r3, [r7, #28]
 802a320:	681b      	ldr	r3, [r3, #0]
 802a322:	69fa      	ldr	r2, [r7, #28]
 802a324:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 802a326:	2108      	movs	r1, #8
 802a328:	9103      	str	r1, [sp, #12]
 802a32a:	f107 0110 	add.w	r1, r7, #16
 802a32e:	9102      	str	r1, [sp, #8]
 802a330:	9201      	str	r2, [sp, #4]
 802a332:	9300      	str	r3, [sp, #0]
 802a334:	462b      	mov	r3, r5
 802a336:	4622      	mov	r2, r4
 802a338:	4601      	mov	r1, r0
 802a33a:	6a38      	ldr	r0, [r7, #32]
 802a33c:	f7f9 fc08 	bl	8023b50 <lfs_bd_read>
 802a340:	61b8      	str	r0, [r7, #24]
    if (err) {
 802a342:	69bb      	ldr	r3, [r7, #24]
 802a344:	2b00      	cmp	r3, #0
 802a346:	d001      	beq.n	802a34c <lfs_fs_parent_match+0x56>
        return err;
 802a348:	69bb      	ldr	r3, [r7, #24]
 802a34a:	e012      	b.n	802a372 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 802a34c:	f107 0310 	add.w	r3, r7, #16
 802a350:	4618      	mov	r0, r3
 802a352:	f7f9 ffaa 	bl	80242aa <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 802a356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a358:	1d1a      	adds	r2, r3, #4
 802a35a:	f107 0310 	add.w	r3, r7, #16
 802a35e:	4611      	mov	r1, r2
 802a360:	4618      	mov	r0, r3
 802a362:	f7f9 ff4b 	bl	80241fc <lfs_pair_cmp>
 802a366:	4603      	mov	r3, r0
 802a368:	2b00      	cmp	r3, #0
 802a36a:	bf14      	ite	ne
 802a36c:	2301      	movne	r3, #1
 802a36e:	2300      	moveq	r3, #0
 802a370:	b2db      	uxtb	r3, r3
}
 802a372:	4618      	mov	r0, r3
 802a374:	3728      	adds	r7, #40	@ 0x28
 802a376:	46bd      	mov	sp, r7
 802a378:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802a37c <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 802a37c:	b580      	push	{r7, lr}
 802a37e:	b08e      	sub	sp, #56	@ 0x38
 802a380:	af04      	add	r7, sp, #16
 802a382:	60f8      	str	r0, [r7, #12]
 802a384:	60b9      	str	r1, [r7, #8]
 802a386:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 802a388:	687b      	ldr	r3, [r7, #4]
 802a38a:	2200      	movs	r2, #0
 802a38c:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 802a38e:	687b      	ldr	r3, [r7, #4]
 802a390:	2201      	movs	r2, #1
 802a392:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 802a394:	2300      	movs	r3, #0
 802a396:	627b      	str	r3, [r7, #36]	@ 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 802a398:	e030      	b.n	802a3fc <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 802a39a:	68fb      	ldr	r3, [r7, #12]
 802a39c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802a39e:	6a1b      	ldr	r3, [r3, #32]
 802a3a0:	085b      	lsrs	r3, r3, #1
 802a3a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802a3a4:	429a      	cmp	r2, r3
 802a3a6:	d302      	bcc.n	802a3ae <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a3a8:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 802a3ac:	e033      	b.n	802a416 <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 802a3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802a3b0:	3301      	adds	r3, #1
 802a3b2:	627b      	str	r3, [r7, #36]	@ 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a3b4:	687b      	ldr	r3, [r7, #4]
 802a3b6:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a3ba:	68fb      	ldr	r3, [r7, #12]
 802a3bc:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 802a3be:	68bb      	ldr	r3, [r7, #8]
 802a3c0:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a3c2:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 802a3c4:	68bb      	ldr	r3, [r7, #8]
 802a3c6:	3304      	adds	r3, #4
 802a3c8:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a3ca:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a3cc:	f107 0314 	add.w	r3, r7, #20
 802a3d0:	9303      	str	r3, [sp, #12]
 802a3d2:	4b13      	ldr	r3, [pc, #76]	@ (802a420 <lfs_fs_parent+0xa4>)
 802a3d4:	9302      	str	r3, [sp, #8]
 802a3d6:	2300      	movs	r3, #0
 802a3d8:	9301      	str	r3, [sp, #4]
 802a3da:	4b12      	ldr	r3, [pc, #72]	@ (802a424 <lfs_fs_parent+0xa8>)
 802a3dc:	9300      	str	r3, [sp, #0]
 802a3de:	4b12      	ldr	r3, [pc, #72]	@ (802a428 <lfs_fs_parent+0xac>)
 802a3e0:	6879      	ldr	r1, [r7, #4]
 802a3e2:	68f8      	ldr	r0, [r7, #12]
 802a3e4:	f7fb f90c 	bl	8025600 <lfs_dir_fetchmatch>
 802a3e8:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 802a3ea:	6a3b      	ldr	r3, [r7, #32]
 802a3ec:	2b00      	cmp	r3, #0
 802a3ee:	d005      	beq.n	802a3fc <lfs_fs_parent+0x80>
 802a3f0:	6a3b      	ldr	r3, [r7, #32]
 802a3f2:	f113 0f02 	cmn.w	r3, #2
 802a3f6:	d001      	beq.n	802a3fc <lfs_fs_parent+0x80>
            return tag;
 802a3f8:	6a3b      	ldr	r3, [r7, #32]
 802a3fa:	e00c      	b.n	802a416 <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 802a3fc:	687b      	ldr	r3, [r7, #4]
 802a3fe:	3318      	adds	r3, #24
 802a400:	4618      	mov	r0, r3
 802a402:	f7f9 fee0 	bl	80241c6 <lfs_pair_isnull>
 802a406:	4603      	mov	r3, r0
 802a408:	f083 0301 	eor.w	r3, r3, #1
 802a40c:	b2db      	uxtb	r3, r3
 802a40e:	2b00      	cmp	r3, #0
 802a410:	d1c3      	bne.n	802a39a <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a412:	f06f 0301 	mvn.w	r3, #1
}
 802a416:	4618      	mov	r0, r3
 802a418:	3728      	adds	r7, #40	@ 0x28
 802a41a:	46bd      	mov	sp, r7
 802a41c:	bd80      	pop	{r7, pc}
 802a41e:	bf00      	nop
 802a420:	0802a2f7 	.word	0x0802a2f7
 802a424:	20000008 	.word	0x20000008
 802a428:	7ff003ff 	.word	0x7ff003ff

0802a42c <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 802a42c:	b590      	push	{r4, r7, lr}
 802a42e:	b083      	sub	sp, #12
 802a430:	af00      	add	r7, sp, #0
 802a432:	6078      	str	r0, [r7, #4]
 802a434:	460b      	mov	r3, r1
 802a436:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 802a438:	687b      	ldr	r3, [r7, #4]
 802a43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a43c:	4618      	mov	r0, r3
 802a43e:	f7f9 ffd3 	bl	80243e8 <lfs_tag_size>
 802a442:	4603      	mov	r3, r0
 802a444:	2b00      	cmp	r3, #0
 802a446:	d10a      	bne.n	802a45e <lfs_fs_preporphans+0x32>
 802a448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a44c:	2b00      	cmp	r3, #0
 802a44e:	da06      	bge.n	802a45e <lfs_fs_preporphans+0x32>
 802a450:	4b10      	ldr	r3, [pc, #64]	@ (802a494 <lfs_fs_preporphans+0x68>)
 802a452:	4a11      	ldr	r2, [pc, #68]	@ (802a498 <lfs_fs_preporphans+0x6c>)
 802a454:	f241 114c 	movw	r1, #4428	@ 0x114c
 802a458:	4810      	ldr	r0, [pc, #64]	@ (802a49c <lfs_fs_preporphans+0x70>)
 802a45a:	f002 f9d5 	bl	802c808 <__assert_func>
    lfs->gstate.tag += orphans;
 802a45e:	687b      	ldr	r3, [r7, #4]
 802a460:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802a462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a466:	441a      	add	r2, r3
 802a468:	687b      	ldr	r3, [r7, #4]
 802a46a:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a46c:	687b      	ldr	r3, [r7, #4]
 802a46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a470:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 802a474:	687b      	ldr	r3, [r7, #4]
 802a476:	3330      	adds	r3, #48	@ 0x30
 802a478:	4618      	mov	r0, r3
 802a47a:	f7fa f818 	bl	80244ae <lfs_gstate_hasorphans>
 802a47e:	4603      	mov	r3, r0
 802a480:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a482:	ea44 0203 	orr.w	r2, r4, r3
 802a486:	687b      	ldr	r3, [r7, #4]
 802a488:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 802a48a:	2300      	movs	r3, #0
}
 802a48c:	4618      	mov	r0, r3
 802a48e:	370c      	adds	r7, #12
 802a490:	46bd      	mov	sp, r7
 802a492:	bd90      	pop	{r4, r7, pc}
 802a494:	08033f74 	.word	0x08033f74
 802a498:	08034b9c 	.word	0x08034b9c
 802a49c:	08033818 	.word	0x08033818

0802a4a0 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 802a4a0:	b480      	push	{r7}
 802a4a2:	b085      	sub	sp, #20
 802a4a4:	af00      	add	r7, sp, #0
 802a4a6:	60f8      	str	r0, [r7, #12]
 802a4a8:	460b      	mov	r3, r1
 802a4aa:	607a      	str	r2, [r7, #4]
 802a4ac:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a4ae:	68fb      	ldr	r3, [r7, #12]
 802a4b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a4b2:	4a17      	ldr	r2, [pc, #92]	@ (802a510 <lfs_fs_prepmove+0x70>)
 802a4b4:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 802a4b6:	897b      	ldrh	r3, [r7, #10]
 802a4b8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 802a4bc:	428b      	cmp	r3, r1
 802a4be:	d006      	beq.n	802a4ce <lfs_fs_prepmove+0x2e>
 802a4c0:	897b      	ldrh	r3, [r7, #10]
 802a4c2:	029b      	lsls	r3, r3, #10
 802a4c4:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802a4c8:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802a4cc:	e000      	b.n	802a4d0 <lfs_fs_prepmove+0x30>
 802a4ce:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a4d0:	431a      	orrs	r2, r3
 802a4d2:	68fb      	ldr	r3, [r7, #12]
 802a4d4:	631a      	str	r2, [r3, #48]	@ 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 802a4d6:	897b      	ldrh	r3, [r7, #10]
 802a4d8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 802a4dc:	4293      	cmp	r3, r2
 802a4de:	d002      	beq.n	802a4e6 <lfs_fs_prepmove+0x46>
 802a4e0:	687b      	ldr	r3, [r7, #4]
 802a4e2:	681b      	ldr	r3, [r3, #0]
 802a4e4:	e000      	b.n	802a4e8 <lfs_fs_prepmove+0x48>
 802a4e6:	2300      	movs	r3, #0
 802a4e8:	68fa      	ldr	r2, [r7, #12]
 802a4ea:	6353      	str	r3, [r2, #52]	@ 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 802a4ec:	897b      	ldrh	r3, [r7, #10]
 802a4ee:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 802a4f2:	4293      	cmp	r3, r2
 802a4f4:	d003      	beq.n	802a4fe <lfs_fs_prepmove+0x5e>
 802a4f6:	687b      	ldr	r3, [r7, #4]
 802a4f8:	3304      	adds	r3, #4
 802a4fa:	681b      	ldr	r3, [r3, #0]
 802a4fc:	e000      	b.n	802a500 <lfs_fs_prepmove+0x60>
 802a4fe:	2300      	movs	r3, #0
 802a500:	68fa      	ldr	r2, [r7, #12]
 802a502:	6393      	str	r3, [r2, #56]	@ 0x38
}
 802a504:	bf00      	nop
 802a506:	3714      	adds	r7, #20
 802a508:	46bd      	mov	sp, r7
 802a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a50e:	4770      	bx	lr
 802a510:	800003ff 	.word	0x800003ff

0802a514 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 802a514:	b5b0      	push	{r4, r5, r7, lr}
 802a516:	b094      	sub	sp, #80	@ 0x50
 802a518:	af04      	add	r7, sp, #16
 802a51a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 802a51c:	687b      	ldr	r3, [r7, #4]
 802a51e:	333c      	adds	r3, #60	@ 0x3c
 802a520:	4618      	mov	r0, r3
 802a522:	f7f9 ffe6 	bl	80244f2 <lfs_gstate_hasmove>
 802a526:	4603      	mov	r3, r0
 802a528:	f083 0301 	eor.w	r3, r3, #1
 802a52c:	b2db      	uxtb	r3, r3
 802a52e:	2b00      	cmp	r3, #0
 802a530:	d001      	beq.n	802a536 <lfs_fs_demove+0x22>
        return 0;
 802a532:	2300      	movs	r3, #0
 802a534:	e049      	b.n	802a5ca <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802a536:	687b      	ldr	r3, [r7, #4]
 802a538:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 802a53a:	687b      	ldr	r3, [r7, #4]
 802a53c:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 802a53e:	687b      	ldr	r3, [r7, #4]
 802a540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a542:	4618      	mov	r0, r3
 802a544:	f7f9 ff40 	bl	80243c8 <lfs_tag_id>
 802a548:	4603      	mov	r3, r0
 802a54a:	461a      	mov	r2, r3
 802a54c:	4b21      	ldr	r3, [pc, #132]	@ (802a5d4 <lfs_fs_demove+0xc0>)
 802a54e:	9302      	str	r3, [sp, #8]
 802a550:	9201      	str	r2, [sp, #4]
 802a552:	9400      	str	r4, [sp, #0]
 802a554:	462b      	mov	r3, r5
 802a556:	f241 1266 	movw	r2, #4454	@ 0x1166
 802a55a:	491f      	ldr	r1, [pc, #124]	@ (802a5d8 <lfs_fs_demove+0xc4>)
 802a55c:	481f      	ldr	r0, [pc, #124]	@ (802a5dc <lfs_fs_demove+0xc8>)
 802a55e:	f003 f983 	bl	802d868 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802a562:	687b      	ldr	r3, [r7, #4]
 802a564:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 802a568:	f107 0318 	add.w	r3, r7, #24
 802a56c:	4619      	mov	r1, r3
 802a56e:	6878      	ldr	r0, [r7, #4]
 802a570:	f7fb fbb4 	bl	8025cdc <lfs_dir_fetch>
 802a574:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (err) {
 802a576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a578:	2b00      	cmp	r3, #0
 802a57a:	d001      	beq.n	802a580 <lfs_fs_demove+0x6c>
        return err;
 802a57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a57e:	e024      	b.n	802a5ca <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 802a580:	687b      	ldr	r3, [r7, #4]
 802a582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802a584:	4618      	mov	r0, r3
 802a586:	f7f9 ff1f 	bl	80243c8 <lfs_tag_id>
 802a58a:	4603      	mov	r3, r0
 802a58c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a58e:	2200      	movs	r2, #0
 802a590:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 802a594:	6878      	ldr	r0, [r7, #4]
 802a596:	f7ff ff83 	bl	802a4a0 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 802a59a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 802a59c:	029b      	lsls	r3, r3, #10
 802a59e:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802a5a2:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802a5a6:	613b      	str	r3, [r7, #16]
 802a5a8:	2300      	movs	r3, #0
 802a5aa:	617b      	str	r3, [r7, #20]
 802a5ac:	f107 0210 	add.w	r2, r7, #16
 802a5b0:	f107 0118 	add.w	r1, r7, #24
 802a5b4:	2301      	movs	r3, #1
 802a5b6:	6878      	ldr	r0, [r7, #4]
 802a5b8:	f7fd f9aa 	bl	8027910 <lfs_dir_commit>
 802a5bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 802a5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a5c0:	2b00      	cmp	r3, #0
 802a5c2:	d001      	beq.n	802a5c8 <lfs_fs_demove+0xb4>
        return err;
 802a5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802a5c6:	e000      	b.n	802a5ca <lfs_fs_demove+0xb6>
    }

    return 0;
 802a5c8:	2300      	movs	r3, #0
}
 802a5ca:	4618      	mov	r0, r3
 802a5cc:	3740      	adds	r7, #64	@ 0x40
 802a5ce:	46bd      	mov	sp, r7
 802a5d0:	bdb0      	pop	{r4, r5, r7, pc}
 802a5d2:	bf00      	nop
 802a5d4:	0803392c 	.word	0x0803392c
 802a5d8:	08033818 	.word	0x08033818
 802a5dc:	08033fa8 	.word	0x08033fa8

0802a5e0 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 802a5e0:	b5b0      	push	{r4, r5, r7, lr}
 802a5e2:	b0b2      	sub	sp, #200	@ 0xc8
 802a5e4:	af04      	add	r7, sp, #16
 802a5e6:	6078      	str	r0, [r7, #4]
 802a5e8:	460b      	mov	r3, r1
 802a5ea:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802a5ec:	687b      	ldr	r3, [r7, #4]
 802a5ee:	3330      	adds	r3, #48	@ 0x30
 802a5f0:	4618      	mov	r0, r3
 802a5f2:	f7f9 ff5c 	bl	80244ae <lfs_gstate_hasorphans>
 802a5f6:	4603      	mov	r3, r0
 802a5f8:	f083 0301 	eor.w	r3, r3, #1
 802a5fc:	b2db      	uxtb	r3, r3
 802a5fe:	2b00      	cmp	r3, #0
 802a600:	d001      	beq.n	802a606 <lfs_fs_deorphan+0x26>
        return 0;
 802a602:	2300      	movs	r3, #0
 802a604:	e17c      	b.n	802a900 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 802a606:	2300      	movs	r3, #0
 802a608:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802a60c:	f107 030c 	add.w	r3, r7, #12
 802a610:	2220      	movs	r2, #32
 802a612:	2100      	movs	r1, #0
 802a614:	4618      	mov	r0, r3
 802a616:	f003 fabb 	bl	802db90 <memset>
 802a61a:	2301      	movs	r3, #1
 802a61c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 802a620:	2301      	movs	r3, #1
 802a622:	62bb      	str	r3, [r7, #40]	@ 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802a624:	e148      	b.n	802a8b8 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802a626:	f107 030c 	add.w	r3, r7, #12
 802a62a:	f103 0218 	add.w	r2, r3, #24
 802a62e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802a632:	4619      	mov	r1, r3
 802a634:	6878      	ldr	r0, [r7, #4]
 802a636:	f7fb fb51 	bl	8025cdc <lfs_dir_fetch>
 802a63a:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
            if (err) {
 802a63e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802a642:	2b00      	cmp	r3, #0
 802a644:	d002      	beq.n	802a64c <lfs_fs_deorphan+0x6c>
                return err;
 802a646:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802a64a:	e159      	b.n	802a900 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 802a64c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 802a650:	f083 0301 	eor.w	r3, r3, #1
 802a654:	b2db      	uxtb	r3, r3
 802a656:	2b00      	cmp	r3, #0
 802a658:	f000 8122 	beq.w	802a8a0 <lfs_fs_deorphan+0x2c0>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 802a65c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 802a660:	f107 030c 	add.w	r3, r7, #12
 802a664:	3318      	adds	r3, #24
 802a666:	4619      	mov	r1, r3
 802a668:	6878      	ldr	r0, [r7, #4]
 802a66a:	f7ff fe87 	bl	802a37c <lfs_fs_parent>
 802a66e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 802a672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802a676:	2b00      	cmp	r3, #0
 802a678:	da07      	bge.n	802a68a <lfs_fs_deorphan+0xaa>
 802a67a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802a67e:	f113 0f02 	cmn.w	r3, #2
 802a682:	d002      	beq.n	802a68a <lfs_fs_deorphan+0xaa>
                    return tag;
 802a684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802a688:	e13a      	b.n	802a900 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 802a68a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802a68e:	f113 0f02 	cmn.w	r3, #2
 802a692:	d157      	bne.n	802a744 <lfs_fs_deorphan+0x164>
 802a694:	78fb      	ldrb	r3, [r7, #3]
 802a696:	2b00      	cmp	r3, #0
 802a698:	d054      	beq.n	802a744 <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 802a69a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802a69e:	499a      	ldr	r1, [pc, #616]	@ (802a908 <lfs_fs_deorphan+0x328>)
 802a6a0:	9101      	str	r1, [sp, #4]
 802a6a2:	9300      	str	r3, [sp, #0]
 802a6a4:	4613      	mov	r3, r2
 802a6a6:	f241 12a1 	movw	r2, #4513	@ 0x11a1
 802a6aa:	4998      	ldr	r1, [pc, #608]	@ (802a90c <lfs_fs_deorphan+0x32c>)
 802a6ac:	4898      	ldr	r0, [pc, #608]	@ (802a910 <lfs_fs_deorphan+0x330>)
 802a6ae:	f003 f8db 	bl	802d868 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 802a6b2:	687b      	ldr	r3, [r7, #4]
 802a6b4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 802a6b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802a6bc:	4619      	mov	r1, r3
 802a6be:	6878      	ldr	r0, [r7, #4]
 802a6c0:	f7fb fb28 	bl	8025d14 <lfs_dir_getgstate>
 802a6c4:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
                    if (err) {
 802a6c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802a6cc:	2b00      	cmp	r3, #0
 802a6ce:	d002      	beq.n	802a6d6 <lfs_fs_deorphan+0xf6>
                        return err;
 802a6d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802a6d4:	e114      	b.n	802a900 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 802a6d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802a6da:	3318      	adds	r3, #24
 802a6dc:	4618      	mov	r0, r3
 802a6de:	f7f9 fdfe 	bl	80242de <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a6e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802a6e6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 802a6ea:	051a      	lsls	r2, r3, #20
 802a6ec:	4b89      	ldr	r3, [pc, #548]	@ (802a914 <lfs_fs_deorphan+0x334>)
 802a6ee:	4313      	orrs	r3, r2
 802a6f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 802a6f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802a6f8:	3318      	adds	r3, #24
 802a6fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802a6fe:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 802a702:	f107 010c 	add.w	r1, r7, #12
 802a706:	2301      	movs	r3, #1
 802a708:	6878      	ldr	r0, [r7, #4]
 802a70a:	f7fc fe07 	bl	802731c <lfs_dir_orphaningcommit>
 802a70e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 802a712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 802a716:	3318      	adds	r3, #24
 802a718:	4618      	mov	r0, r3
 802a71a:	f7f9 fdc6 	bl	80242aa <lfs_pair_fromle32>
                    if (state < 0) {
 802a71e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802a722:	2b00      	cmp	r3, #0
 802a724:	da02      	bge.n	802a72c <lfs_fs_deorphan+0x14c>
                        return state;
 802a726:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                    return tag;
 802a72a:	e0e9      	b.n	802a900 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 802a72c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 802a730:	3301      	adds	r3, #1
 802a732:	b2db      	uxtb	r3, r3
 802a734:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 802a738:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 802a73c:	2b03      	cmp	r3, #3
 802a73e:	f040 80ba 	bne.w	802a8b6 <lfs_fs_deorphan+0x2d6>
                        goto restart;
 802a742:	e763      	b.n	802a60c <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 802a744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802a748:	f113 0f02 	cmn.w	r3, #2
 802a74c:	f000 80a8 	beq.w	802a8a0 <lfs_fs_deorphan+0x2c0>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802a750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 802a754:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 802a758:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802a75c:	9300      	str	r3, [sp, #0]
 802a75e:	4613      	mov	r3, r2
 802a760:	4a6d      	ldr	r2, [pc, #436]	@ (802a918 <lfs_fs_deorphan+0x338>)
 802a762:	6878      	ldr	r0, [r7, #4]
 802a764:	f7fa fa1a 	bl	8024b9c <lfs_dir_get>
 802a768:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 802a76c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802a770:	2b00      	cmp	r3, #0
 802a772:	da02      	bge.n	802a77a <lfs_fs_deorphan+0x19a>
                        return state;
 802a774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802a778:	e0c2      	b.n	802a900 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 802a77a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802a77e:	4618      	mov	r0, r3
 802a780:	f7f9 fd93 	bl	80242aa <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 802a784:	f107 030c 	add.w	r3, r7, #12
 802a788:	f103 0218 	add.w	r2, r3, #24
 802a78c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802a790:	4611      	mov	r1, r2
 802a792:	4618      	mov	r0, r3
 802a794:	f7f9 fd5c 	bl	8024250 <lfs_pair_sync>
 802a798:	4603      	mov	r3, r0
 802a79a:	f083 0301 	eor.w	r3, r3, #1
 802a79e:	b2db      	uxtb	r3, r3
 802a7a0:	2b00      	cmp	r3, #0
 802a7a2:	d07d      	beq.n	802a8a0 <lfs_fs_deorphan+0x2c0>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 802a7a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802a7a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802a7ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 802a7b0:	4c55      	ldr	r4, [pc, #340]	@ (802a908 <lfs_fs_deorphan+0x328>)
 802a7b2:	9403      	str	r4, [sp, #12]
 802a7b4:	9102      	str	r1, [sp, #8]
 802a7b6:	9201      	str	r2, [sp, #4]
 802a7b8:	9300      	str	r3, [sp, #0]
 802a7ba:	4603      	mov	r3, r0
 802a7bc:	f241 12ca 	movw	r2, #4554	@ 0x11ca
 802a7c0:	4952      	ldr	r1, [pc, #328]	@ (802a90c <lfs_fs_deorphan+0x32c>)
 802a7c2:	4856      	ldr	r0, [pc, #344]	@ (802a91c <lfs_fs_deorphan+0x33c>)
 802a7c4:	f003 f850 	bl	802d868 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802a7c8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 802a7cc:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802a7d0:	687b      	ldr	r3, [r7, #4]
 802a7d2:	3330      	adds	r3, #48	@ 0x30
 802a7d4:	f107 020c 	add.w	r2, r7, #12
 802a7d8:	4611      	mov	r1, r2
 802a7da:	4618      	mov	r0, r3
 802a7dc:	f7f9 fe9c 	bl	8024518 <lfs_gstate_hasmovehere>
 802a7e0:	4603      	mov	r3, r0
 802a7e2:	2b00      	cmp	r3, #0
 802a7e4:	d01c      	beq.n	802a820 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802a7e6:	687b      	ldr	r3, [r7, #4]
 802a7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802a7ea:	4618      	mov	r0, r3
 802a7ec:	f7f9 fdec 	bl	80243c8 <lfs_tag_id>
 802a7f0:	4603      	mov	r3, r0
 802a7f2:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 802a7f6:	68f9      	ldr	r1, [r7, #12]
 802a7f8:	693b      	ldr	r3, [r7, #16]
 802a7fa:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 802a7fe:	4842      	ldr	r0, [pc, #264]	@ (802a908 <lfs_fs_deorphan+0x328>)
 802a800:	9002      	str	r0, [sp, #8]
 802a802:	9201      	str	r2, [sp, #4]
 802a804:	9300      	str	r3, [sp, #0]
 802a806:	460b      	mov	r3, r1
 802a808:	f241 12d5 	movw	r2, #4565	@ 0x11d5
 802a80c:	493f      	ldr	r1, [pc, #252]	@ (802a90c <lfs_fs_deorphan+0x32c>)
 802a80e:	4844      	ldr	r0, [pc, #272]	@ (802a920 <lfs_fs_deorphan+0x340>)
 802a810:	f003 f82a 	bl	802d868 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a814:	2200      	movs	r2, #0
 802a816:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 802a81a:	6878      	ldr	r0, [r7, #4]
 802a81c:	f7ff fe40 	bl	802a4a0 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a820:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802a824:	4618      	mov	r0, r3
 802a826:	f7f9 fd5a 	bl	80242de <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a82a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 802a82e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 802a832:	4293      	cmp	r3, r2
 802a834:	d007      	beq.n	802a846 <lfs_fs_deorphan+0x266>
 802a836:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 802a83a:	029b      	lsls	r3, r3, #10
 802a83c:	f043 439f 	orr.w	r3, r3, #1333788672	@ 0x4f800000
 802a840:	f443 03e0 	orr.w	r3, r3, #7340032	@ 0x700000
 802a844:	e000      	b.n	802a848 <lfs_fs_deorphan+0x268>
 802a846:	2300      	movs	r3, #0
 802a848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 802a84a:	2300      	movs	r3, #0
 802a84c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 802a850:	4b34      	ldr	r3, [pc, #208]	@ (802a924 <lfs_fs_deorphan+0x344>)
 802a852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 802a856:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802a85a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 802a85e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 802a862:	f107 010c 	add.w	r1, r7, #12
 802a866:	2302      	movs	r3, #2
 802a868:	6878      	ldr	r0, [r7, #4]
 802a86a:	f7fc fd57 	bl	802731c <lfs_dir_orphaningcommit>
 802a86e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a872:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 802a876:	4618      	mov	r0, r3
 802a878:	f7f9 fd17 	bl	80242aa <lfs_pair_fromle32>
                        if (state < 0) {
 802a87c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802a880:	2b00      	cmp	r3, #0
 802a882:	da02      	bge.n	802a88a <lfs_fs_deorphan+0x2aa>
                            return state;
 802a884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        return state;
 802a888:	e03a      	b.n	802a900 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a88a:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 802a88e:	3301      	adds	r3, #1
 802a890:	b2db      	uxtb	r3, r3
 802a892:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802a89a:	2b03      	cmp	r3, #3
 802a89c:	d10c      	bne.n	802a8b8 <lfs_fs_deorphan+0x2d8>
 802a89e:	e6b5      	b.n	802a60c <lfs_fs_deorphan+0x2c>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a8a0:	f107 040c 	add.w	r4, r7, #12
 802a8a4:	f107 052c 	add.w	r5, r7, #44	@ 0x2c
 802a8a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a8aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a8ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a8b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802a8b4:	e000      	b.n	802a8b8 <lfs_fs_deorphan+0x2d8>
                    continue;
 802a8b6:	bf00      	nop
        while (!lfs_pair_isnull(pdir.tail)) {
 802a8b8:	f107 030c 	add.w	r3, r7, #12
 802a8bc:	3318      	adds	r3, #24
 802a8be:	4618      	mov	r0, r3
 802a8c0:	f7f9 fc81 	bl	80241c6 <lfs_pair_isnull>
 802a8c4:	4603      	mov	r3, r0
 802a8c6:	f083 0301 	eor.w	r3, r3, #1
 802a8ca:	b2db      	uxtb	r3, r3
 802a8cc:	2b00      	cmp	r3, #0
 802a8ce:	f47f aeaa 	bne.w	802a626 <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a8d2:	687b      	ldr	r3, [r7, #4]
 802a8d4:	3330      	adds	r3, #48	@ 0x30
 802a8d6:	4618      	mov	r0, r3
 802a8d8:	f7f9 fdfc 	bl	80244d4 <lfs_gstate_getorphans>
 802a8dc:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a8de:	461a      	mov	r2, r3
 802a8e0:	f997 30b7 	ldrsb.w	r3, [r7, #183]	@ 0xb7
 802a8e4:	4619      	mov	r1, r3
 802a8e6:	4610      	mov	r0, r2
 802a8e8:	f7f9 f857 	bl	802399a <lfs_min>
 802a8ec:	4603      	mov	r3, r0
 802a8ee:	b2db      	uxtb	r3, r3
 802a8f0:	425b      	negs	r3, r3
 802a8f2:	b2db      	uxtb	r3, r3
 802a8f4:	b25b      	sxtb	r3, r3
 802a8f6:	4619      	mov	r1, r3
 802a8f8:	6878      	ldr	r0, [r7, #4]
 802a8fa:	f7ff fd97 	bl	802a42c <lfs_fs_preporphans>
 802a8fe:	4603      	mov	r3, r0
            found));
}
 802a900:	4618      	mov	r0, r3
 802a902:	37b8      	adds	r7, #184	@ 0xb8
 802a904:	46bd      	mov	sp, r7
 802a906:	bdb0      	pop	{r4, r5, r7, pc}
 802a908:	0803392c 	.word	0x0803392c
 802a90c:	08033818 	.word	0x08033818
 802a910:	08033fdc 	.word	0x08033fdc
 802a914:	000ffc08 	.word	0x000ffc08
 802a918:	7ffffc00 	.word	0x7ffffc00
 802a91c:	0803400c 	.word	0x0803400c
 802a920:	08034050 	.word	0x08034050
 802a924:	600ffc08 	.word	0x600ffc08

0802a928 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a928:	b580      	push	{r7, lr}
 802a92a:	b084      	sub	sp, #16
 802a92c:	af00      	add	r7, sp, #0
 802a92e:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a930:	6878      	ldr	r0, [r7, #4]
 802a932:	f7ff fdef 	bl	802a514 <lfs_fs_demove>
 802a936:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a938:	68fb      	ldr	r3, [r7, #12]
 802a93a:	2b00      	cmp	r3, #0
 802a93c:	d001      	beq.n	802a942 <lfs_fs_forceconsistency+0x1a>
        return err;
 802a93e:	68fb      	ldr	r3, [r7, #12]
 802a940:	e00a      	b.n	802a958 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a942:	2101      	movs	r1, #1
 802a944:	6878      	ldr	r0, [r7, #4]
 802a946:	f7ff fe4b 	bl	802a5e0 <lfs_fs_deorphan>
 802a94a:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a94c:	68fb      	ldr	r3, [r7, #12]
 802a94e:	2b00      	cmp	r3, #0
 802a950:	d001      	beq.n	802a956 <lfs_fs_forceconsistency+0x2e>
        return err;
 802a952:	68fb      	ldr	r3, [r7, #12]
 802a954:	e000      	b.n	802a958 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a956:	2300      	movs	r3, #0
}
 802a958:	4618      	mov	r0, r3
 802a95a:	3710      	adds	r7, #16
 802a95c:	46bd      	mov	sp, r7
 802a95e:	bd80      	pop	{r7, pc}

0802a960 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a960:	b480      	push	{r7}
 802a962:	b085      	sub	sp, #20
 802a964:	af00      	add	r7, sp, #0
 802a966:	6078      	str	r0, [r7, #4]
 802a968:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a96a:	687b      	ldr	r3, [r7, #4]
 802a96c:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a96e:	68fb      	ldr	r3, [r7, #12]
 802a970:	681b      	ldr	r3, [r3, #0]
 802a972:	1c5a      	adds	r2, r3, #1
 802a974:	68fb      	ldr	r3, [r7, #12]
 802a976:	601a      	str	r2, [r3, #0]
    return 0;
 802a978:	2300      	movs	r3, #0
}
 802a97a:	4618      	mov	r0, r3
 802a97c:	3714      	adds	r7, #20
 802a97e:	46bd      	mov	sp, r7
 802a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a984:	4770      	bx	lr
	...

0802a988 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a988:	b580      	push	{r7, lr}
 802a98a:	b084      	sub	sp, #16
 802a98c:	af00      	add	r7, sp, #0
 802a98e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a990:	2300      	movs	r3, #0
 802a992:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a994:	f107 0208 	add.w	r2, r7, #8
 802a998:	2300      	movs	r3, #0
 802a99a:	4907      	ldr	r1, [pc, #28]	@ (802a9b8 <lfs_fs_rawsize+0x30>)
 802a99c:	6878      	ldr	r0, [r7, #4]
 802a99e:	f7ff fb3f 	bl	802a020 <lfs_fs_rawtraverse>
 802a9a2:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a9a4:	68fb      	ldr	r3, [r7, #12]
 802a9a6:	2b00      	cmp	r3, #0
 802a9a8:	d001      	beq.n	802a9ae <lfs_fs_rawsize+0x26>
        return err;
 802a9aa:	68fb      	ldr	r3, [r7, #12]
 802a9ac:	e000      	b.n	802a9b0 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a9ae:	68bb      	ldr	r3, [r7, #8]
}
 802a9b0:	4618      	mov	r0, r3
 802a9b2:	3710      	adds	r7, #16
 802a9b4:	46bd      	mov	sp, r7
 802a9b6:	bd80      	pop	{r7, pc}
 802a9b8:	0802a961 	.word	0x0802a961

0802a9bc <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a9bc:	b580      	push	{r7, lr}
 802a9be:	b084      	sub	sp, #16
 802a9c0:	af00      	add	r7, sp, #0
 802a9c2:	6078      	str	r0, [r7, #4]
 802a9c4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a9c6:	2300      	movs	r3, #0
 802a9c8:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a9ca:	68fb      	ldr	r3, [r7, #12]
 802a9cc:	2b00      	cmp	r3, #0
 802a9ce:	d001      	beq.n	802a9d4 <lfs_format+0x18>
        return err;
 802a9d0:	68fb      	ldr	r3, [r7, #12]
 802a9d2:	e005      	b.n	802a9e0 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a9d4:	6839      	ldr	r1, [r7, #0]
 802a9d6:	6878      	ldr	r0, [r7, #4]
 802a9d8:	f7ff f8ca 	bl	8029b70 <lfs_rawformat>
 802a9dc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a9de:	68fb      	ldr	r3, [r7, #12]
}
 802a9e0:	4618      	mov	r0, r3
 802a9e2:	3710      	adds	r7, #16
 802a9e4:	46bd      	mov	sp, r7
 802a9e6:	bd80      	pop	{r7, pc}

0802a9e8 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a9e8:	b580      	push	{r7, lr}
 802a9ea:	b084      	sub	sp, #16
 802a9ec:	af00      	add	r7, sp, #0
 802a9ee:	6078      	str	r0, [r7, #4]
 802a9f0:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a9f2:	2300      	movs	r3, #0
 802a9f4:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a9f6:	68fb      	ldr	r3, [r7, #12]
 802a9f8:	2b00      	cmp	r3, #0
 802a9fa:	d001      	beq.n	802aa00 <lfs_mount+0x18>
        return err;
 802a9fc:	68fb      	ldr	r3, [r7, #12]
 802a9fe:	e005      	b.n	802aa0c <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802aa00:	6839      	ldr	r1, [r7, #0]
 802aa02:	6878      	ldr	r0, [r7, #4]
 802aa04:	f7ff f954 	bl	8029cb0 <lfs_rawmount>
 802aa08:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802aa0a:	68fb      	ldr	r3, [r7, #12]
}
 802aa0c:	4618      	mov	r0, r3
 802aa0e:	3710      	adds	r7, #16
 802aa10:	46bd      	mov	sp, r7
 802aa12:	bd80      	pop	{r7, pc}

0802aa14 <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802aa14:	b580      	push	{r7, lr}
 802aa16:	b084      	sub	sp, #16
 802aa18:	af00      	add	r7, sp, #0
 802aa1a:	6078      	str	r0, [r7, #4]
 802aa1c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aa1e:	2300      	movs	r3, #0
 802aa20:	60fb      	str	r3, [r7, #12]
    if (err) {
 802aa22:	68fb      	ldr	r3, [r7, #12]
 802aa24:	2b00      	cmp	r3, #0
 802aa26:	d001      	beq.n	802aa2c <lfs_remove+0x18>
        return err;
 802aa28:	68fb      	ldr	r3, [r7, #12]
 802aa2a:	e005      	b.n	802aa38 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802aa2c:	6839      	ldr	r1, [r7, #0]
 802aa2e:	6878      	ldr	r0, [r7, #4]
 802aa30:	f7fe fbd0 	bl	80291d4 <lfs_rawremove>
 802aa34:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa36:	68fb      	ldr	r3, [r7, #12]
}
 802aa38:	4618      	mov	r0, r3
 802aa3a:	3710      	adds	r7, #16
 802aa3c:	46bd      	mov	sp, r7
 802aa3e:	bd80      	pop	{r7, pc}

0802aa40 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802aa40:	b580      	push	{r7, lr}
 802aa42:	b086      	sub	sp, #24
 802aa44:	af00      	add	r7, sp, #0
 802aa46:	60f8      	str	r0, [r7, #12]
 802aa48:	60b9      	str	r1, [r7, #8]
 802aa4a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802aa4c:	2300      	movs	r3, #0
 802aa4e:	617b      	str	r3, [r7, #20]
    if (err) {
 802aa50:	697b      	ldr	r3, [r7, #20]
 802aa52:	2b00      	cmp	r3, #0
 802aa54:	d001      	beq.n	802aa5a <lfs_rename+0x1a>
        return err;
 802aa56:	697b      	ldr	r3, [r7, #20]
 802aa58:	e006      	b.n	802aa68 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802aa5a:	687a      	ldr	r2, [r7, #4]
 802aa5c:	68b9      	ldr	r1, [r7, #8]
 802aa5e:	68f8      	ldr	r0, [r7, #12]
 802aa60:	f7fe fc92 	bl	8029388 <lfs_rawrename>
 802aa64:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa66:	697b      	ldr	r3, [r7, #20]
}
 802aa68:	4618      	mov	r0, r3
 802aa6a:	3718      	adds	r7, #24
 802aa6c:	46bd      	mov	sp, r7
 802aa6e:	bd80      	pop	{r7, pc}

0802aa70 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802aa70:	b580      	push	{r7, lr}
 802aa72:	b086      	sub	sp, #24
 802aa74:	af00      	add	r7, sp, #0
 802aa76:	60f8      	str	r0, [r7, #12]
 802aa78:	60b9      	str	r1, [r7, #8]
 802aa7a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802aa7c:	2300      	movs	r3, #0
 802aa7e:	617b      	str	r3, [r7, #20]
    if (err) {
 802aa80:	697b      	ldr	r3, [r7, #20]
 802aa82:	2b00      	cmp	r3, #0
 802aa84:	d001      	beq.n	802aa8a <lfs_stat+0x1a>
        return err;
 802aa86:	697b      	ldr	r3, [r7, #20]
 802aa88:	e006      	b.n	802aa98 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802aa8a:	687a      	ldr	r2, [r7, #4]
 802aa8c:	68b9      	ldr	r1, [r7, #8]
 802aa8e:	68f8      	ldr	r0, [r7, #12]
 802aa90:	f7fe fb7a 	bl	8029188 <lfs_rawstat>
 802aa94:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa96:	697b      	ldr	r3, [r7, #20]
}
 802aa98:	4618      	mov	r0, r3
 802aa9a:	3718      	adds	r7, #24
 802aa9c:	46bd      	mov	sp, r7
 802aa9e:	bd80      	pop	{r7, pc}

0802aaa0 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802aaa0:	b580      	push	{r7, lr}
 802aaa2:	b088      	sub	sp, #32
 802aaa4:	af02      	add	r7, sp, #8
 802aaa6:	60f8      	str	r0, [r7, #12]
 802aaa8:	60b9      	str	r1, [r7, #8]
 802aaaa:	607a      	str	r2, [r7, #4]
 802aaac:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aaae:	2300      	movs	r3, #0
 802aab0:	617b      	str	r3, [r7, #20]
    if (err) {
 802aab2:	697b      	ldr	r3, [r7, #20]
 802aab4:	2b00      	cmp	r3, #0
 802aab6:	d001      	beq.n	802aabc <lfs_file_opencfg+0x1c>
        return err;
 802aab8:	697b      	ldr	r3, [r7, #20]
 802aaba:	e01c      	b.n	802aaf6 <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802aabc:	68fb      	ldr	r3, [r7, #12]
 802aabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802aac0:	68b9      	ldr	r1, [r7, #8]
 802aac2:	4618      	mov	r0, r3
 802aac4:	f7f9 fe28 	bl	8024718 <lfs_mlist_isopen>
 802aac8:	4603      	mov	r3, r0
 802aaca:	f083 0301 	eor.w	r3, r3, #1
 802aace:	b2db      	uxtb	r3, r3
 802aad0:	2b00      	cmp	r3, #0
 802aad2:	d106      	bne.n	802aae2 <lfs_file_opencfg+0x42>
 802aad4:	4b0a      	ldr	r3, [pc, #40]	@ (802ab00 <lfs_file_opencfg+0x60>)
 802aad6:	4a0b      	ldr	r2, [pc, #44]	@ (802ab04 <lfs_file_opencfg+0x64>)
 802aad8:	f241 517b 	movw	r1, #5499	@ 0x157b
 802aadc:	480a      	ldr	r0, [pc, #40]	@ (802ab08 <lfs_file_opencfg+0x68>)
 802aade:	f001 fe93 	bl	802c808 <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802aae2:	6a3b      	ldr	r3, [r7, #32]
 802aae4:	9300      	str	r3, [sp, #0]
 802aae6:	683b      	ldr	r3, [r7, #0]
 802aae8:	687a      	ldr	r2, [r7, #4]
 802aaea:	68b9      	ldr	r1, [r7, #8]
 802aaec:	68f8      	ldr	r0, [r7, #12]
 802aaee:	f7fd fba9 	bl	8028244 <lfs_file_rawopencfg>
 802aaf2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aaf4:	697b      	ldr	r3, [r7, #20]
}
 802aaf6:	4618      	mov	r0, r3
 802aaf8:	3718      	adds	r7, #24
 802aafa:	46bd      	mov	sp, r7
 802aafc:	bd80      	pop	{r7, pc}
 802aafe:	bf00      	nop
 802ab00:	08034098 	.word	0x08034098
 802ab04:	08034bb0 	.word	0x08034bb0
 802ab08:	08033818 	.word	0x08033818

0802ab0c <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802ab0c:	b580      	push	{r7, lr}
 802ab0e:	b084      	sub	sp, #16
 802ab10:	af00      	add	r7, sp, #0
 802ab12:	6078      	str	r0, [r7, #4]
 802ab14:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ab16:	2300      	movs	r3, #0
 802ab18:	60fb      	str	r3, [r7, #12]
    if (err) {
 802ab1a:	68fb      	ldr	r3, [r7, #12]
 802ab1c:	2b00      	cmp	r3, #0
 802ab1e:	d001      	beq.n	802ab24 <lfs_file_close+0x18>
        return err;
 802ab20:	68fb      	ldr	r3, [r7, #12]
 802ab22:	e015      	b.n	802ab50 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802ab24:	687b      	ldr	r3, [r7, #4]
 802ab26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ab28:	6839      	ldr	r1, [r7, #0]
 802ab2a:	4618      	mov	r0, r3
 802ab2c:	f7f9 fdf4 	bl	8024718 <lfs_mlist_isopen>
 802ab30:	4603      	mov	r3, r0
 802ab32:	2b00      	cmp	r3, #0
 802ab34:	d106      	bne.n	802ab44 <lfs_file_close+0x38>
 802ab36:	4b08      	ldr	r3, [pc, #32]	@ (802ab58 <lfs_file_close+0x4c>)
 802ab38:	4a08      	ldr	r2, [pc, #32]	@ (802ab5c <lfs_file_close+0x50>)
 802ab3a:	f241 518a 	movw	r1, #5514	@ 0x158a
 802ab3e:	4808      	ldr	r0, [pc, #32]	@ (802ab60 <lfs_file_close+0x54>)
 802ab40:	f001 fe62 	bl	802c808 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802ab44:	6839      	ldr	r1, [r7, #0]
 802ab46:	6878      	ldr	r0, [r7, #4]
 802ab48:	f7fd fd4c 	bl	80285e4 <lfs_file_rawclose>
 802ab4c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ab4e:	68fb      	ldr	r3, [r7, #12]
}
 802ab50:	4618      	mov	r0, r3
 802ab52:	3710      	adds	r7, #16
 802ab54:	46bd      	mov	sp, r7
 802ab56:	bd80      	pop	{r7, pc}
 802ab58:	080340d0 	.word	0x080340d0
 802ab5c:	08034bc4 	.word	0x08034bc4
 802ab60:	08033818 	.word	0x08033818

0802ab64 <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802ab64:	b580      	push	{r7, lr}
 802ab66:	b086      	sub	sp, #24
 802ab68:	af00      	add	r7, sp, #0
 802ab6a:	60f8      	str	r0, [r7, #12]
 802ab6c:	60b9      	str	r1, [r7, #8]
 802ab6e:	607a      	str	r2, [r7, #4]
 802ab70:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ab72:	2300      	movs	r3, #0
 802ab74:	617b      	str	r3, [r7, #20]
    if (err) {
 802ab76:	697b      	ldr	r3, [r7, #20]
 802ab78:	2b00      	cmp	r3, #0
 802ab7a:	d001      	beq.n	802ab80 <lfs_file_read+0x1c>
        return err;
 802ab7c:	697b      	ldr	r3, [r7, #20]
 802ab7e:	e017      	b.n	802abb0 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802ab80:	68fb      	ldr	r3, [r7, #12]
 802ab82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ab84:	68b9      	ldr	r1, [r7, #8]
 802ab86:	4618      	mov	r0, r3
 802ab88:	f7f9 fdc6 	bl	8024718 <lfs_mlist_isopen>
 802ab8c:	4603      	mov	r3, r0
 802ab8e:	2b00      	cmp	r3, #0
 802ab90:	d106      	bne.n	802aba0 <lfs_file_read+0x3c>
 802ab92:	4b09      	ldr	r3, [pc, #36]	@ (802abb8 <lfs_file_read+0x54>)
 802ab94:	4a09      	ldr	r2, [pc, #36]	@ (802abbc <lfs_file_read+0x58>)
 802ab96:	f241 51ac 	movw	r1, #5548	@ 0x15ac
 802ab9a:	4809      	ldr	r0, [pc, #36]	@ (802abc0 <lfs_file_read+0x5c>)
 802ab9c:	f001 fe34 	bl	802c808 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802aba0:	683b      	ldr	r3, [r7, #0]
 802aba2:	687a      	ldr	r2, [r7, #4]
 802aba4:	68b9      	ldr	r1, [r7, #8]
 802aba6:	68f8      	ldr	r0, [r7, #12]
 802aba8:	f7fe f868 	bl	8028c7c <lfs_file_rawread>
 802abac:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802abae:	693b      	ldr	r3, [r7, #16]
}
 802abb0:	4618      	mov	r0, r3
 802abb2:	3718      	adds	r7, #24
 802abb4:	46bd      	mov	sp, r7
 802abb6:	bd80      	pop	{r7, pc}
 802abb8:	080340d0 	.word	0x080340d0
 802abbc:	08034bd4 	.word	0x08034bd4
 802abc0:	08033818 	.word	0x08033818

0802abc4 <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802abc4:	b580      	push	{r7, lr}
 802abc6:	b086      	sub	sp, #24
 802abc8:	af00      	add	r7, sp, #0
 802abca:	60f8      	str	r0, [r7, #12]
 802abcc:	60b9      	str	r1, [r7, #8]
 802abce:	607a      	str	r2, [r7, #4]
 802abd0:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802abd2:	2300      	movs	r3, #0
 802abd4:	617b      	str	r3, [r7, #20]
    if (err) {
 802abd6:	697b      	ldr	r3, [r7, #20]
 802abd8:	2b00      	cmp	r3, #0
 802abda:	d001      	beq.n	802abe0 <lfs_file_write+0x1c>
        return err;
 802abdc:	697b      	ldr	r3, [r7, #20]
 802abde:	e017      	b.n	802ac10 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802abe0:	68fb      	ldr	r3, [r7, #12]
 802abe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802abe4:	68b9      	ldr	r1, [r7, #8]
 802abe6:	4618      	mov	r0, r3
 802abe8:	f7f9 fd96 	bl	8024718 <lfs_mlist_isopen>
 802abec:	4603      	mov	r3, r0
 802abee:	2b00      	cmp	r3, #0
 802abf0:	d106      	bne.n	802ac00 <lfs_file_write+0x3c>
 802abf2:	4b09      	ldr	r3, [pc, #36]	@ (802ac18 <lfs_file_write+0x54>)
 802abf4:	4a09      	ldr	r2, [pc, #36]	@ (802ac1c <lfs_file_write+0x58>)
 802abf6:	f241 51be 	movw	r1, #5566	@ 0x15be
 802abfa:	4809      	ldr	r0, [pc, #36]	@ (802ac20 <lfs_file_write+0x5c>)
 802abfc:	f001 fe04 	bl	802c808 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802ac00:	683b      	ldr	r3, [r7, #0]
 802ac02:	687a      	ldr	r2, [r7, #4]
 802ac04:	68b9      	ldr	r1, [r7, #8]
 802ac06:	68f8      	ldr	r0, [r7, #12]
 802ac08:	f7fe f996 	bl	8028f38 <lfs_file_rawwrite>
 802ac0c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802ac0e:	693b      	ldr	r3, [r7, #16]
}
 802ac10:	4618      	mov	r0, r3
 802ac12:	3718      	adds	r7, #24
 802ac14:	46bd      	mov	sp, r7
 802ac16:	bd80      	pop	{r7, pc}
 802ac18:	080340d0 	.word	0x080340d0
 802ac1c:	08034be4 	.word	0x08034be4
 802ac20:	08033818 	.word	0x08033818

0802ac24 <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802ac24:	b580      	push	{r7, lr}
 802ac26:	b086      	sub	sp, #24
 802ac28:	af00      	add	r7, sp, #0
 802ac2a:	60f8      	str	r0, [r7, #12]
 802ac2c:	60b9      	str	r1, [r7, #8]
 802ac2e:	607a      	str	r2, [r7, #4]
 802ac30:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ac32:	2300      	movs	r3, #0
 802ac34:	617b      	str	r3, [r7, #20]
    if (err) {
 802ac36:	697b      	ldr	r3, [r7, #20]
 802ac38:	2b00      	cmp	r3, #0
 802ac3a:	d001      	beq.n	802ac40 <lfs_file_seek+0x1c>
        return err;
 802ac3c:	697b      	ldr	r3, [r7, #20]
 802ac3e:	e017      	b.n	802ac70 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802ac40:	68fb      	ldr	r3, [r7, #12]
 802ac42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ac44:	68b9      	ldr	r1, [r7, #8]
 802ac46:	4618      	mov	r0, r3
 802ac48:	f7f9 fd66 	bl	8024718 <lfs_mlist_isopen>
 802ac4c:	4603      	mov	r3, r0
 802ac4e:	2b00      	cmp	r3, #0
 802ac50:	d106      	bne.n	802ac60 <lfs_file_seek+0x3c>
 802ac52:	4b09      	ldr	r3, [pc, #36]	@ (802ac78 <lfs_file_seek+0x54>)
 802ac54:	4a09      	ldr	r2, [pc, #36]	@ (802ac7c <lfs_file_seek+0x58>)
 802ac56:	f241 51d0 	movw	r1, #5584	@ 0x15d0
 802ac5a:	4809      	ldr	r0, [pc, #36]	@ (802ac80 <lfs_file_seek+0x5c>)
 802ac5c:	f001 fdd4 	bl	802c808 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802ac60:	683b      	ldr	r3, [r7, #0]
 802ac62:	687a      	ldr	r2, [r7, #4]
 802ac64:	68b9      	ldr	r1, [r7, #8]
 802ac66:	68f8      	ldr	r0, [r7, #12]
 802ac68:	f7fe f9ea 	bl	8029040 <lfs_file_rawseek>
 802ac6c:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802ac6e:	693b      	ldr	r3, [r7, #16]
}
 802ac70:	4618      	mov	r0, r3
 802ac72:	3718      	adds	r7, #24
 802ac74:	46bd      	mov	sp, r7
 802ac76:	bd80      	pop	{r7, pc}
 802ac78:	080340d0 	.word	0x080340d0
 802ac7c:	08034bf4 	.word	0x08034bf4
 802ac80:	08033818 	.word	0x08033818

0802ac84 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802ac84:	b580      	push	{r7, lr}
 802ac86:	b084      	sub	sp, #16
 802ac88:	af00      	add	r7, sp, #0
 802ac8a:	6078      	str	r0, [r7, #4]
 802ac8c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ac8e:	2300      	movs	r3, #0
 802ac90:	60fb      	str	r3, [r7, #12]
    if (err) {
 802ac92:	68fb      	ldr	r3, [r7, #12]
 802ac94:	2b00      	cmp	r3, #0
 802ac96:	d001      	beq.n	802ac9c <lfs_mkdir+0x18>
        return err;
 802ac98:	68fb      	ldr	r3, [r7, #12]
 802ac9a:	e005      	b.n	802aca8 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802ac9c:	6839      	ldr	r1, [r7, #0]
 802ac9e:	6878      	ldr	r0, [r7, #4]
 802aca0:	f7fc fe5c 	bl	802795c <lfs_rawmkdir>
 802aca4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aca6:	68fb      	ldr	r3, [r7, #12]
}
 802aca8:	4618      	mov	r0, r3
 802acaa:	3710      	adds	r7, #16
 802acac:	46bd      	mov	sp, r7
 802acae:	bd80      	pop	{r7, pc}

0802acb0 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802acb0:	b580      	push	{r7, lr}
 802acb2:	b086      	sub	sp, #24
 802acb4:	af00      	add	r7, sp, #0
 802acb6:	60f8      	str	r0, [r7, #12]
 802acb8:	60b9      	str	r1, [r7, #8]
 802acba:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802acbc:	2300      	movs	r3, #0
 802acbe:	617b      	str	r3, [r7, #20]
    if (err) {
 802acc0:	697b      	ldr	r3, [r7, #20]
 802acc2:	2b00      	cmp	r3, #0
 802acc4:	d001      	beq.n	802acca <lfs_dir_open+0x1a>
        return err;
 802acc6:	697b      	ldr	r3, [r7, #20]
 802acc8:	e019      	b.n	802acfe <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802acca:	68fb      	ldr	r3, [r7, #12]
 802accc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802acce:	68b9      	ldr	r1, [r7, #8]
 802acd0:	4618      	mov	r0, r3
 802acd2:	f7f9 fd21 	bl	8024718 <lfs_mlist_isopen>
 802acd6:	4603      	mov	r3, r0
 802acd8:	f083 0301 	eor.w	r3, r3, #1
 802acdc:	b2db      	uxtb	r3, r3
 802acde:	2b00      	cmp	r3, #0
 802ace0:	d106      	bne.n	802acf0 <lfs_dir_open+0x40>
 802ace2:	4b09      	ldr	r3, [pc, #36]	@ (802ad08 <lfs_dir_open+0x58>)
 802ace4:	4a09      	ldr	r2, [pc, #36]	@ (802ad0c <lfs_dir_open+0x5c>)
 802ace6:	f241 612d 	movw	r1, #5677	@ 0x162d
 802acea:	4809      	ldr	r0, [pc, #36]	@ (802ad10 <lfs_dir_open+0x60>)
 802acec:	f001 fd8c 	bl	802c808 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802acf0:	687a      	ldr	r2, [r7, #4]
 802acf2:	68b9      	ldr	r1, [r7, #8]
 802acf4:	68f8      	ldr	r0, [r7, #12]
 802acf6:	f7fc ff71 	bl	8027bdc <lfs_dir_rawopen>
 802acfa:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802acfc:	697b      	ldr	r3, [r7, #20]
}
 802acfe:	4618      	mov	r0, r3
 802ad00:	3718      	adds	r7, #24
 802ad02:	46bd      	mov	sp, r7
 802ad04:	bd80      	pop	{r7, pc}
 802ad06:	bf00      	nop
 802ad08:	08034108 	.word	0x08034108
 802ad0c:	08034c04 	.word	0x08034c04
 802ad10:	08033818 	.word	0x08033818

0802ad14 <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802ad14:	b580      	push	{r7, lr}
 802ad16:	b084      	sub	sp, #16
 802ad18:	af00      	add	r7, sp, #0
 802ad1a:	6078      	str	r0, [r7, #4]
 802ad1c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ad1e:	2300      	movs	r3, #0
 802ad20:	60fb      	str	r3, [r7, #12]
    if (err) {
 802ad22:	68fb      	ldr	r3, [r7, #12]
 802ad24:	2b00      	cmp	r3, #0
 802ad26:	d001      	beq.n	802ad2c <lfs_dir_close+0x18>
        return err;
 802ad28:	68fb      	ldr	r3, [r7, #12]
 802ad2a:	e005      	b.n	802ad38 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802ad2c:	6839      	ldr	r1, [r7, #0]
 802ad2e:	6878      	ldr	r0, [r7, #4]
 802ad30:	f7fc ffce 	bl	8027cd0 <lfs_dir_rawclose>
 802ad34:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ad36:	68fb      	ldr	r3, [r7, #12]
}
 802ad38:	4618      	mov	r0, r3
 802ad3a:	3710      	adds	r7, #16
 802ad3c:	46bd      	mov	sp, r7
 802ad3e:	bd80      	pop	{r7, pc}

0802ad40 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802ad40:	b580      	push	{r7, lr}
 802ad42:	b086      	sub	sp, #24
 802ad44:	af00      	add	r7, sp, #0
 802ad46:	60f8      	str	r0, [r7, #12]
 802ad48:	60b9      	str	r1, [r7, #8]
 802ad4a:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802ad4c:	2300      	movs	r3, #0
 802ad4e:	617b      	str	r3, [r7, #20]
    if (err) {
 802ad50:	697b      	ldr	r3, [r7, #20]
 802ad52:	2b00      	cmp	r3, #0
 802ad54:	d001      	beq.n	802ad5a <lfs_dir_read+0x1a>
        return err;
 802ad56:	697b      	ldr	r3, [r7, #20]
 802ad58:	e006      	b.n	802ad68 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802ad5a:	687a      	ldr	r2, [r7, #4]
 802ad5c:	68b9      	ldr	r1, [r7, #8]
 802ad5e:	68f8      	ldr	r0, [r7, #12]
 802ad60:	f7fc ffc4 	bl	8027cec <lfs_dir_rawread>
 802ad64:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ad66:	697b      	ldr	r3, [r7, #20]
}
 802ad68:	4618      	mov	r0, r3
 802ad6a:	3718      	adds	r7, #24
 802ad6c:	46bd      	mov	sp, r7
 802ad6e:	bd80      	pop	{r7, pc}

0802ad70 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802ad70:	b580      	push	{r7, lr}
 802ad72:	b088      	sub	sp, #32
 802ad74:	af00      	add	r7, sp, #0
 802ad76:	60f8      	str	r0, [r7, #12]
 802ad78:	60b9      	str	r1, [r7, #8]
 802ad7a:	607a      	str	r2, [r7, #4]
 802ad7c:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802ad7e:	f107 0310 	add.w	r3, r7, #16
 802ad82:	4618      	mov	r0, r3
 802ad84:	f7ea faa0 	bl	80152c8 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802ad88:	8abb      	ldrh	r3, [r7, #20]
 802ad8a:	461a      	mov	r2, r3
 802ad8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ad8e:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802ad90:	8afb      	ldrh	r3, [r7, #22]
 802ad92:	461a      	mov	r2, r3
 802ad94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ad96:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802ad98:	8b3b      	ldrh	r3, [r7, #24]
 802ad9a:	461a      	mov	r2, r3
 802ad9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ad9e:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802ada0:	8bbb      	ldrh	r3, [r7, #28]
 802ada2:	461a      	mov	r2, r3
 802ada4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ada6:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802ada8:	887a      	ldrh	r2, [r7, #2]
 802adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adac:	62da      	str	r2, [r3, #44]	@ 0x2c
    cfg->cache_size     = buffers_size;
 802adae:	887a      	ldrh	r2, [r7, #2]
 802adb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adb2:	629a      	str	r2, [r3, #40]	@ 0x28
    cfg->read_buffer = lfsReadBuff;
 802adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adb6:	68fa      	ldr	r2, [r7, #12]
 802adb8:	631a      	str	r2, [r3, #48]	@ 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802adba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adbc:	68ba      	ldr	r2, [r7, #8]
 802adbe:	635a      	str	r2, [r3, #52]	@ 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adc2:	687a      	ldr	r2, [r7, #4]
 802adc4:	639a      	str	r2, [r3, #56]	@ 0x38

    cfg->read   = block_device_read;
 802adc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adc8:	4a09      	ldr	r2, [pc, #36]	@ (802adf0 <io_fs_init+0x80>)
 802adca:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adce:	4a09      	ldr	r2, [pc, #36]	@ (802adf4 <io_fs_init+0x84>)
 802add0:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802add4:	4a08      	ldr	r2, [pc, #32]	@ (802adf8 <io_fs_init+0x88>)
 802add6:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802adda:	4a08      	ldr	r2, [pc, #32]	@ (802adfc <io_fs_init+0x8c>)
 802addc:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802ade0:	f242 7210 	movw	r2, #10000	@ 0x2710
 802ade4:	625a      	str	r2, [r3, #36]	@ 0x24
//    cfg->name_max  		= LFS_NAME_MAX;
//    cfg->file_max		= LFS_FILE_MAX;
//    cfg->attr_max		= LFS_ATTR_MAX;
//    cfg->metadata_max	= flash_info.erase_size;

    return 0;
 802ade6:	2300      	movs	r3, #0
}
 802ade8:	4618      	mov	r0, r3
 802adea:	3720      	adds	r7, #32
 802adec:	46bd      	mov	sp, r7
 802adee:	bd80      	pop	{r7, pc}
 802adf0:	0802ae01 	.word	0x0802ae01
 802adf4:	0802ae9d 	.word	0x0802ae9d
 802adf8:	0802ae55 	.word	0x0802ae55
 802adfc:	0802aef1 	.word	0x0802aef1

0802ae00 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802ae00:	b580      	push	{r7, lr}
 802ae02:	b084      	sub	sp, #16
 802ae04:	af00      	add	r7, sp, #0
 802ae06:	60f8      	str	r0, [r7, #12]
 802ae08:	60b9      	str	r1, [r7, #8]
 802ae0a:	607a      	str	r2, [r7, #4]
 802ae0c:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ae0e:	68fb      	ldr	r3, [r7, #12]
 802ae10:	6a1b      	ldr	r3, [r3, #32]
 802ae12:	68ba      	ldr	r2, [r7, #8]
 802ae14:	429a      	cmp	r2, r3
 802ae16:	d305      	bcc.n	802ae24 <block_device_read+0x24>
 802ae18:	4b0b      	ldr	r3, [pc, #44]	@ (802ae48 <block_device_read+0x48>)
 802ae1a:	4a0c      	ldr	r2, [pc, #48]	@ (802ae4c <block_device_read+0x4c>)
 802ae1c:	2148      	movs	r1, #72	@ 0x48
 802ae1e:	480c      	ldr	r0, [pc, #48]	@ (802ae50 <block_device_read+0x50>)
 802ae20:	f001 fcf2 	bl	802c808 <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802ae24:	68fb      	ldr	r3, [r7, #12]
 802ae26:	69db      	ldr	r3, [r3, #28]
 802ae28:	68ba      	ldr	r2, [r7, #8]
 802ae2a:	fb03 f202 	mul.w	r2, r3, r2
 802ae2e:	687b      	ldr	r3, [r7, #4]
 802ae30:	4413      	add	r3, r2
 802ae32:	69ba      	ldr	r2, [r7, #24]
 802ae34:	b292      	uxth	r2, r2
 802ae36:	4619      	mov	r1, r3
 802ae38:	6838      	ldr	r0, [r7, #0]
 802ae3a:	f7ea fbfc 	bl	8015636 <sFLASH_ReadBuffer>
	return 0;
 802ae3e:	2300      	movs	r3, #0
}
 802ae40:	4618      	mov	r0, r3
 802ae42:	3710      	adds	r7, #16
 802ae44:	46bd      	mov	sp, r7
 802ae46:	bd80      	pop	{r7, pc}
 802ae48:	08034140 	.word	0x08034140
 802ae4c:	08034c14 	.word	0x08034c14
 802ae50:	08034158 	.word	0x08034158

0802ae54 <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802ae54:	b580      	push	{r7, lr}
 802ae56:	b082      	sub	sp, #8
 802ae58:	af00      	add	r7, sp, #0
 802ae5a:	6078      	str	r0, [r7, #4]
 802ae5c:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ae5e:	687b      	ldr	r3, [r7, #4]
 802ae60:	6a1b      	ldr	r3, [r3, #32]
 802ae62:	683a      	ldr	r2, [r7, #0]
 802ae64:	429a      	cmp	r2, r3
 802ae66:	d305      	bcc.n	802ae74 <block_device_erase+0x20>
 802ae68:	4b09      	ldr	r3, [pc, #36]	@ (802ae90 <block_device_erase+0x3c>)
 802ae6a:	4a0a      	ldr	r2, [pc, #40]	@ (802ae94 <block_device_erase+0x40>)
 802ae6c:	2150      	movs	r1, #80	@ 0x50
 802ae6e:	480a      	ldr	r0, [pc, #40]	@ (802ae98 <block_device_erase+0x44>)
 802ae70:	f001 fcca 	bl	802c808 <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802ae74:	687b      	ldr	r3, [r7, #4]
 802ae76:	69db      	ldr	r3, [r3, #28]
 802ae78:	683a      	ldr	r2, [r7, #0]
 802ae7a:	fb02 f303 	mul.w	r3, r2, r3
 802ae7e:	4618      	mov	r0, r3
 802ae80:	f7ea fac8 	bl	8015414 <sFLASH_EraseSector>
	return 0;
 802ae84:	2300      	movs	r3, #0
}
 802ae86:	4618      	mov	r0, r3
 802ae88:	3708      	adds	r7, #8
 802ae8a:	46bd      	mov	sp, r7
 802ae8c:	bd80      	pop	{r7, pc}
 802ae8e:	bf00      	nop
 802ae90:	08034140 	.word	0x08034140
 802ae94:	08034c28 	.word	0x08034c28
 802ae98:	08034158 	.word	0x08034158

0802ae9c <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802ae9c:	b580      	push	{r7, lr}
 802ae9e:	b084      	sub	sp, #16
 802aea0:	af00      	add	r7, sp, #0
 802aea2:	60f8      	str	r0, [r7, #12]
 802aea4:	60b9      	str	r1, [r7, #8]
 802aea6:	607a      	str	r2, [r7, #4]
 802aea8:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802aeaa:	68fb      	ldr	r3, [r7, #12]
 802aeac:	6a1b      	ldr	r3, [r3, #32]
 802aeae:	68ba      	ldr	r2, [r7, #8]
 802aeb0:	429a      	cmp	r2, r3
 802aeb2:	d305      	bcc.n	802aec0 <block_device_prog+0x24>
 802aeb4:	4b0b      	ldr	r3, [pc, #44]	@ (802aee4 <block_device_prog+0x48>)
 802aeb6:	4a0c      	ldr	r2, [pc, #48]	@ (802aee8 <block_device_prog+0x4c>)
 802aeb8:	2158      	movs	r1, #88	@ 0x58
 802aeba:	480c      	ldr	r0, [pc, #48]	@ (802aeec <block_device_prog+0x50>)
 802aebc:	f001 fca4 	bl	802c808 <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802aec0:	68fb      	ldr	r3, [r7, #12]
 802aec2:	69db      	ldr	r3, [r3, #28]
 802aec4:	68ba      	ldr	r2, [r7, #8]
 802aec6:	fb03 f202 	mul.w	r2, r3, r2
 802aeca:	687b      	ldr	r3, [r7, #4]
 802aecc:	4413      	add	r3, r2
 802aece:	69ba      	ldr	r2, [r7, #24]
 802aed0:	b292      	uxth	r2, r2
 802aed2:	4619      	mov	r1, r3
 802aed4:	6838      	ldr	r0, [r7, #0]
 802aed6:	f7ea fb05 	bl	80154e4 <sFLASH_WriteBuffer>
	return 0;
 802aeda:	2300      	movs	r3, #0
}
 802aedc:	4618      	mov	r0, r3
 802aede:	3710      	adds	r7, #16
 802aee0:	46bd      	mov	sp, r7
 802aee2:	bd80      	pop	{r7, pc}
 802aee4:	08034140 	.word	0x08034140
 802aee8:	08034c3c 	.word	0x08034c3c
 802aeec:	08034158 	.word	0x08034158

0802aef0 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802aef0:	b480      	push	{r7}
 802aef2:	b083      	sub	sp, #12
 802aef4:	af00      	add	r7, sp, #0
 802aef6:	6078      	str	r0, [r7, #4]
	return 0;
 802aef8:	2300      	movs	r3, #0
}
 802aefa:	4618      	mov	r0, r3
 802aefc:	370c      	adds	r7, #12
 802aefe:	46bd      	mov	sp, r7
 802af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af04:	4770      	bx	lr
	...

0802af08 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802af08:	b480      	push	{r7}
 802af0a:	b087      	sub	sp, #28
 802af0c:	af00      	add	r7, sp, #0
 802af0e:	60f8      	str	r0, [r7, #12]
 802af10:	60b9      	str	r1, [r7, #8]
 802af12:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802af14:	68bb      	ldr	r3, [r7, #8]
 802af16:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802af18:	2300      	movs	r3, #0
 802af1a:	617b      	str	r3, [r7, #20]
 802af1c:	e024      	b.n	802af68 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802af1e:	68fb      	ldr	r3, [r7, #12]
 802af20:	091a      	lsrs	r2, r3, #4
 802af22:	6939      	ldr	r1, [r7, #16]
 802af24:	697b      	ldr	r3, [r7, #20]
 802af26:	440b      	add	r3, r1
 802af28:	781b      	ldrb	r3, [r3, #0]
 802af2a:	4619      	mov	r1, r3
 802af2c:	68fb      	ldr	r3, [r7, #12]
 802af2e:	404b      	eors	r3, r1
 802af30:	f003 030f 	and.w	r3, r3, #15
 802af34:	4912      	ldr	r1, [pc, #72]	@ (802af80 <lfs_crc+0x78>)
 802af36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802af3a:	4053      	eors	r3, r2
 802af3c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802af3e:	68fb      	ldr	r3, [r7, #12]
 802af40:	091a      	lsrs	r2, r3, #4
 802af42:	6939      	ldr	r1, [r7, #16]
 802af44:	697b      	ldr	r3, [r7, #20]
 802af46:	440b      	add	r3, r1
 802af48:	781b      	ldrb	r3, [r3, #0]
 802af4a:	091b      	lsrs	r3, r3, #4
 802af4c:	b2db      	uxtb	r3, r3
 802af4e:	4619      	mov	r1, r3
 802af50:	68fb      	ldr	r3, [r7, #12]
 802af52:	404b      	eors	r3, r1
 802af54:	f003 030f 	and.w	r3, r3, #15
 802af58:	4909      	ldr	r1, [pc, #36]	@ (802af80 <lfs_crc+0x78>)
 802af5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802af5e:	4053      	eors	r3, r2
 802af60:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802af62:	697b      	ldr	r3, [r7, #20]
 802af64:	3301      	adds	r3, #1
 802af66:	617b      	str	r3, [r7, #20]
 802af68:	697a      	ldr	r2, [r7, #20]
 802af6a:	687b      	ldr	r3, [r7, #4]
 802af6c:	429a      	cmp	r2, r3
 802af6e:	d3d6      	bcc.n	802af1e <lfs_crc+0x16>
    }

    return crc;
 802af70:	68fb      	ldr	r3, [r7, #12]
}
 802af72:	4618      	mov	r0, r3
 802af74:	371c      	adds	r7, #28
 802af76:	46bd      	mov	sp, r7
 802af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af7c:	4770      	bx	lr
 802af7e:	bf00      	nop
 802af80:	08034c50 	.word	0x08034c50

0802af84 <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802af84:	b480      	push	{r7}
 802af86:	b083      	sub	sp, #12
 802af88:	af00      	add	r7, sp, #0
 802af8a:	6078      	str	r0, [r7, #4]
 802af8c:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802af8e:	687b      	ldr	r3, [r7, #4]
 802af90:	2b00      	cmp	r3, #0
 802af92:	d002      	beq.n	802af9a <spi_fs_init_mutex+0x16>
 802af94:	4a07      	ldr	r2, [pc, #28]	@ (802afb4 <spi_fs_init_mutex+0x30>)
 802af96:	687b      	ldr	r3, [r7, #4]
 802af98:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802af9a:	683b      	ldr	r3, [r7, #0]
 802af9c:	2b00      	cmp	r3, #0
 802af9e:	d002      	beq.n	802afa6 <spi_fs_init_mutex+0x22>
 802afa0:	4a05      	ldr	r2, [pc, #20]	@ (802afb8 <spi_fs_init_mutex+0x34>)
 802afa2:	683b      	ldr	r3, [r7, #0]
 802afa4:	6013      	str	r3, [r2, #0]

};
 802afa6:	bf00      	nop
 802afa8:	370c      	adds	r7, #12
 802afaa:	46bd      	mov	sp, r7
 802afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afb0:	4770      	bx	lr
 802afb2:	bf00      	nop
 802afb4:	2000d9c0 	.word	0x2000d9c0
 802afb8:	2000d9c4 	.word	0x2000d9c4

0802afbc <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802afbc:	b590      	push	{r4, r7, lr}
 802afbe:	b08b      	sub	sp, #44	@ 0x2c
 802afc0:	af02      	add	r7, sp, #8
 802afc2:	61f8      	str	r0, [r7, #28]
 802afc4:	61b9      	str	r1, [r7, #24]
 802afc6:	617a      	str	r2, [r7, #20]
 802afc8:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802afca:	4c14      	ldr	r4, [pc, #80]	@ (802b01c <spi_fs_init+0x60>)
 802afcc:	463b      	mov	r3, r7
 802afce:	4618      	mov	r0, r3
 802afd0:	f7ea f97a 	bl	80152c8 <sFLASH_GetInfo>
 802afd4:	463b      	mov	r3, r7
 802afd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802afd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802afdc:	4b0f      	ldr	r3, [pc, #60]	@ (802b01c <spi_fs_init+0x60>)
 802afde:	681b      	ldr	r3, [r3, #0]
 802afe0:	2b00      	cmp	r3, #0
 802afe2:	d102      	bne.n	802afea <spi_fs_init+0x2e>
 802afe4:	f04f 33ff 	mov.w	r3, #4294967295
 802afe8:	e013      	b.n	802b012 <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802afea:	8a7b      	ldrh	r3, [r7, #18]
 802afec:	4a0c      	ldr	r2, [pc, #48]	@ (802b020 <spi_fs_init+0x64>)
 802afee:	9200      	str	r2, [sp, #0]
 802aff0:	697a      	ldr	r2, [r7, #20]
 802aff2:	69b9      	ldr	r1, [r7, #24]
 802aff4:	69f8      	ldr	r0, [r7, #28]
 802aff6:	f7ff febb 	bl	802ad70 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802affa:	220c      	movs	r2, #12
 802affc:	2100      	movs	r1, #0
 802affe:	4809      	ldr	r0, [pc, #36]	@ (802b024 <spi_fs_init+0x68>)
 802b000:	f002 fdc6 	bl	802db90 <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802b004:	4b07      	ldr	r3, [pc, #28]	@ (802b024 <spi_fs_init+0x68>)
 802b006:	4a08      	ldr	r2, [pc, #32]	@ (802b028 <spi_fs_init+0x6c>)
 802b008:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802b00a:	4b06      	ldr	r3, [pc, #24]	@ (802b024 <spi_fs_init+0x68>)
 802b00c:	2200      	movs	r2, #0
 802b00e:	609a      	str	r2, [r3, #8]

	return 0;
 802b010:	2300      	movs	r3, #0
}
 802b012:	4618      	mov	r0, r3
 802b014:	3724      	adds	r7, #36	@ 0x24
 802b016:	46bd      	mov	sp, r7
 802b018:	bd90      	pop	{r4, r7, pc}
 802b01a:	bf00      	nop
 802b01c:	2000d924 	.word	0x2000d924
 802b020:	2000d8d8 	.word	0x2000d8d8
 802b024:	2000d934 	.word	0x2000d934
 802b028:	2000d4cc 	.word	0x2000d4cc

0802b02c <spi_fs_mount>:

int spi_fs_mount(void){
 802b02c:	b580      	push	{r7, lr}
 802b02e:	b082      	sub	sp, #8
 802b030:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b032:	4b0d      	ldr	r3, [pc, #52]	@ (802b068 <spi_fs_mount+0x3c>)
 802b034:	681b      	ldr	r3, [r3, #0]
 802b036:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802b038:	490c      	ldr	r1, [pc, #48]	@ (802b06c <spi_fs_mount+0x40>)
 802b03a:	480d      	ldr	r0, [pc, #52]	@ (802b070 <spi_fs_mount+0x44>)
 802b03c:	f7ff fcd4 	bl	802a9e8 <lfs_mount>
 802b040:	6078      	str	r0, [r7, #4]
	if (err) {
 802b042:	687b      	ldr	r3, [r7, #4]
 802b044:	2b00      	cmp	r3, #0
 802b046:	d003      	beq.n	802b050 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802b048:	4b0a      	ldr	r3, [pc, #40]	@ (802b074 <spi_fs_mount+0x48>)
 802b04a:	2200      	movs	r2, #0
 802b04c:	701a      	strb	r2, [r3, #0]
 802b04e:	e002      	b.n	802b056 <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802b050:	4b08      	ldr	r3, [pc, #32]	@ (802b074 <spi_fs_mount+0x48>)
 802b052:	2201      	movs	r2, #1
 802b054:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b056:	4b08      	ldr	r3, [pc, #32]	@ (802b078 <spi_fs_mount+0x4c>)
 802b058:	681b      	ldr	r3, [r3, #0]
 802b05a:	4798      	blx	r3
#endif

	return err;
 802b05c:	687b      	ldr	r3, [r7, #4]
}
 802b05e:	4618      	mov	r0, r3
 802b060:	3708      	adds	r7, #8
 802b062:	46bd      	mov	sp, r7
 802b064:	bd80      	pop	{r7, pc}
 802b066:	bf00      	nop
 802b068:	2000d9c0 	.word	0x2000d9c0
 802b06c:	2000d8d8 	.word	0x2000d8d8
 802b070:	2000d6d0 	.word	0x2000d6d0
 802b074:	2000d6cc 	.word	0x2000d6cc
 802b078:	2000d9c4 	.word	0x2000d9c4

0802b07c <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802b07c:	b580      	push	{r7, lr}
 802b07e:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802b080:	4902      	ldr	r1, [pc, #8]	@ (802b08c <spi_fs_format+0x10>)
 802b082:	4803      	ldr	r0, [pc, #12]	@ (802b090 <spi_fs_format+0x14>)
 802b084:	f7ff fc9a 	bl	802a9bc <lfs_format>
}
 802b088:	bf00      	nop
 802b08a:	bd80      	pop	{r7, pc}
 802b08c:	2000d8d8 	.word	0x2000d8d8
 802b090:	2000d6d0 	.word	0x2000d6d0

0802b094 <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802b094:	b580      	push	{r7, lr}
 802b096:	b088      	sub	sp, #32
 802b098:	af02      	add	r7, sp, #8
 802b09a:	60f8      	str	r0, [r7, #12]
 802b09c:	60b9      	str	r1, [r7, #8]
 802b09e:	607a      	str	r2, [r7, #4]
 802b0a0:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b0a2:	4b19      	ldr	r3, [pc, #100]	@ (802b108 <spi_fs_read_file_offset+0x74>)
 802b0a4:	681b      	ldr	r3, [r3, #0]
 802b0a6:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802b0a8:	4b18      	ldr	r3, [pc, #96]	@ (802b10c <spi_fs_read_file_offset+0x78>)
 802b0aa:	9300      	str	r3, [sp, #0]
 802b0ac:	f240 1301 	movw	r3, #257	@ 0x101
 802b0b0:	68fa      	ldr	r2, [r7, #12]
 802b0b2:	4917      	ldr	r1, [pc, #92]	@ (802b110 <spi_fs_read_file_offset+0x7c>)
 802b0b4:	4817      	ldr	r0, [pc, #92]	@ (802b114 <spi_fs_read_file_offset+0x80>)
 802b0b6:	f7ff fcf3 	bl	802aaa0 <lfs_file_opencfg>
 802b0ba:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b0bc:	697b      	ldr	r3, [r7, #20]
 802b0be:	2b00      	cmp	r3, #0
 802b0c0:	db13      	blt.n	802b0ea <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802b0c2:	687a      	ldr	r2, [r7, #4]
 802b0c4:	2300      	movs	r3, #0
 802b0c6:	4912      	ldr	r1, [pc, #72]	@ (802b110 <spi_fs_read_file_offset+0x7c>)
 802b0c8:	4812      	ldr	r0, [pc, #72]	@ (802b114 <spi_fs_read_file_offset+0x80>)
 802b0ca:	f7ff fdab 	bl	802ac24 <lfs_file_seek>
 802b0ce:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b0d0:	697b      	ldr	r3, [r7, #20]
 802b0d2:	2b00      	cmp	r3, #0
 802b0d4:	db0b      	blt.n	802b0ee <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802b0d6:	683b      	ldr	r3, [r7, #0]
 802b0d8:	68ba      	ldr	r2, [r7, #8]
 802b0da:	490d      	ldr	r1, [pc, #52]	@ (802b110 <spi_fs_read_file_offset+0x7c>)
 802b0dc:	480d      	ldr	r0, [pc, #52]	@ (802b114 <spi_fs_read_file_offset+0x80>)
 802b0de:	f7ff fd41 	bl	802ab64 <lfs_file_read>
 802b0e2:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b0e4:	697b      	ldr	r3, [r7, #20]
 802b0e6:	2b00      	cmp	r3, #0

	func_end:
 802b0e8:	e002      	b.n	802b0f0 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802b0ea:	bf00      	nop
 802b0ec:	e000      	b.n	802b0f0 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802b0ee:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802b0f0:	4907      	ldr	r1, [pc, #28]	@ (802b110 <spi_fs_read_file_offset+0x7c>)
 802b0f2:	4808      	ldr	r0, [pc, #32]	@ (802b114 <spi_fs_read_file_offset+0x80>)
 802b0f4:	f7ff fd0a 	bl	802ab0c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b0f8:	4b07      	ldr	r3, [pc, #28]	@ (802b118 <spi_fs_read_file_offset+0x84>)
 802b0fa:	681b      	ldr	r3, [r3, #0]
 802b0fc:	4798      	blx	r3
#endif
	return err;
 802b0fe:	697b      	ldr	r3, [r7, #20]

}
 802b100:	4618      	mov	r0, r3
 802b102:	3718      	adds	r7, #24
 802b104:	46bd      	mov	sp, r7
 802b106:	bd80      	pop	{r7, pc}
 802b108:	2000d9c0 	.word	0x2000d9c0
 802b10c:	2000d934 	.word	0x2000d934
 802b110:	2000d748 	.word	0x2000d748
 802b114:	2000d6d0 	.word	0x2000d6d0
 802b118:	2000d9c4 	.word	0x2000d9c4

0802b11c <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802b11c:	b580      	push	{r7, lr}
 802b11e:	b088      	sub	sp, #32
 802b120:	af02      	add	r7, sp, #8
 802b122:	60f8      	str	r0, [r7, #12]
 802b124:	60b9      	str	r1, [r7, #8]
 802b126:	607a      	str	r2, [r7, #4]
	int err = 0;
 802b128:	2300      	movs	r3, #0
 802b12a:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b12c:	4b12      	ldr	r3, [pc, #72]	@ (802b178 <spi_fs_over_write_file+0x5c>)
 802b12e:	681b      	ldr	r3, [r3, #0]
 802b130:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802b132:	4b12      	ldr	r3, [pc, #72]	@ (802b17c <spi_fs_over_write_file+0x60>)
 802b134:	9300      	str	r3, [sp, #0]
 802b136:	f240 5303 	movw	r3, #1283	@ 0x503
 802b13a:	68fa      	ldr	r2, [r7, #12]
 802b13c:	4910      	ldr	r1, [pc, #64]	@ (802b180 <spi_fs_over_write_file+0x64>)
 802b13e:	4811      	ldr	r0, [pc, #68]	@ (802b184 <spi_fs_over_write_file+0x68>)
 802b140:	f7ff fcae 	bl	802aaa0 <lfs_file_opencfg>
 802b144:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b146:	697b      	ldr	r3, [r7, #20]
 802b148:	2b00      	cmp	r3, #0
 802b14a:	db0b      	blt.n	802b164 <spi_fs_over_write_file+0x48>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802b14c:	687b      	ldr	r3, [r7, #4]
 802b14e:	68ba      	ldr	r2, [r7, #8]
 802b150:	490b      	ldr	r1, [pc, #44]	@ (802b180 <spi_fs_over_write_file+0x64>)
 802b152:	480c      	ldr	r0, [pc, #48]	@ (802b184 <spi_fs_over_write_file+0x68>)
 802b154:	f7ff fd36 	bl	802abc4 <lfs_file_write>
 802b158:	6178      	str	r0, [r7, #20]

	lfs_file_close(&lfs, &file);
 802b15a:	4909      	ldr	r1, [pc, #36]	@ (802b180 <spi_fs_over_write_file+0x64>)
 802b15c:	4809      	ldr	r0, [pc, #36]	@ (802b184 <spi_fs_over_write_file+0x68>)
 802b15e:	f7ff fcd5 	bl	802ab0c <lfs_file_close>
 802b162:	e000      	b.n	802b166 <spi_fs_over_write_file+0x4a>
	if (err < 0) goto func_end;
 802b164:	bf00      	nop
	func_end:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b166:	4b08      	ldr	r3, [pc, #32]	@ (802b188 <spi_fs_over_write_file+0x6c>)
 802b168:	681b      	ldr	r3, [r3, #0]
 802b16a:	4798      	blx	r3
#endif
	return err;
 802b16c:	697b      	ldr	r3, [r7, #20]
}
 802b16e:	4618      	mov	r0, r3
 802b170:	3718      	adds	r7, #24
 802b172:	46bd      	mov	sp, r7
 802b174:	bd80      	pop	{r7, pc}
 802b176:	bf00      	nop
 802b178:	2000d9c0 	.word	0x2000d9c0
 802b17c:	2000d934 	.word	0x2000d934
 802b180:	2000d748 	.word	0x2000d748
 802b184:	2000d6d0 	.word	0x2000d6d0
 802b188:	2000d9c4 	.word	0x2000d9c4

0802b18c <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802b18c:	b580      	push	{r7, lr}
 802b18e:	b084      	sub	sp, #16
 802b190:	af00      	add	r7, sp, #0
 802b192:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b194:	4b0b      	ldr	r3, [pc, #44]	@ (802b1c4 <spi_fs_file_size+0x38>)
 802b196:	681b      	ldr	r3, [r3, #0]
 802b198:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802b19a:	4a0b      	ldr	r2, [pc, #44]	@ (802b1c8 <spi_fs_file_size+0x3c>)
 802b19c:	6879      	ldr	r1, [r7, #4]
 802b19e:	480b      	ldr	r0, [pc, #44]	@ (802b1cc <spi_fs_file_size+0x40>)
 802b1a0:	f7ff fc66 	bl	802aa70 <lfs_stat>
 802b1a4:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802b1a6:	68fb      	ldr	r3, [r7, #12]
 802b1a8:	2b00      	cmp	r3, #0
 802b1aa:	d102      	bne.n	802b1b2 <spi_fs_file_size+0x26>
		err = file_info.size;
 802b1ac:	4b06      	ldr	r3, [pc, #24]	@ (802b1c8 <spi_fs_file_size+0x3c>)
 802b1ae:	685b      	ldr	r3, [r3, #4]
 802b1b0:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b1b2:	4b07      	ldr	r3, [pc, #28]	@ (802b1d0 <spi_fs_file_size+0x44>)
 802b1b4:	681b      	ldr	r3, [r3, #0]
 802b1b6:	4798      	blx	r3
#endif
	return err;
 802b1b8:	68fb      	ldr	r3, [r7, #12]
}
 802b1ba:	4618      	mov	r0, r3
 802b1bc:	3710      	adds	r7, #16
 802b1be:	46bd      	mov	sp, r7
 802b1c0:	bd80      	pop	{r7, pc}
 802b1c2:	bf00      	nop
 802b1c4:	2000d9c0 	.word	0x2000d9c0
 802b1c8:	2000d7d0 	.word	0x2000d7d0
 802b1cc:	2000d6d0 	.word	0x2000d6d0
 802b1d0:	2000d9c4 	.word	0x2000d9c4

0802b1d4 <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802b1d4:	b580      	push	{r7, lr}
 802b1d6:	b088      	sub	sp, #32
 802b1d8:	af02      	add	r7, sp, #8
 802b1da:	60f8      	str	r0, [r7, #12]
 802b1dc:	60b9      	str	r1, [r7, #8]
 802b1de:	607a      	str	r2, [r7, #4]
	int err = 0;
 802b1e0:	2300      	movs	r3, #0
 802b1e2:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b1e4:	4b13      	ldr	r3, [pc, #76]	@ (802b234 <spi_fs_write_file_to_end+0x60>)
 802b1e6:	681b      	ldr	r3, [r3, #0]
 802b1e8:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802b1ea:	4b13      	ldr	r3, [pc, #76]	@ (802b238 <spi_fs_write_file_to_end+0x64>)
 802b1ec:	9300      	str	r3, [sp, #0]
 802b1ee:	f640 1303 	movw	r3, #2307	@ 0x903
 802b1f2:	68fa      	ldr	r2, [r7, #12]
 802b1f4:	4911      	ldr	r1, [pc, #68]	@ (802b23c <spi_fs_write_file_to_end+0x68>)
 802b1f6:	4812      	ldr	r0, [pc, #72]	@ (802b240 <spi_fs_write_file_to_end+0x6c>)
 802b1f8:	f7ff fc52 	bl	802aaa0 <lfs_file_opencfg>
 802b1fc:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b1fe:	697b      	ldr	r3, [r7, #20]
 802b200:	2b00      	cmp	r3, #0
 802b202:	db09      	blt.n	802b218 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802b204:	687b      	ldr	r3, [r7, #4]
 802b206:	68ba      	ldr	r2, [r7, #8]
 802b208:	490c      	ldr	r1, [pc, #48]	@ (802b23c <spi_fs_write_file_to_end+0x68>)
 802b20a:	480d      	ldr	r0, [pc, #52]	@ (802b240 <spi_fs_write_file_to_end+0x6c>)
 802b20c:	f7ff fcda 	bl	802abc4 <lfs_file_write>
 802b210:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b212:	697b      	ldr	r3, [r7, #20]
 802b214:	2b00      	cmp	r3, #0

	func_end:
 802b216:	e000      	b.n	802b21a <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802b218:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802b21a:	4908      	ldr	r1, [pc, #32]	@ (802b23c <spi_fs_write_file_to_end+0x68>)
 802b21c:	4808      	ldr	r0, [pc, #32]	@ (802b240 <spi_fs_write_file_to_end+0x6c>)
 802b21e:	f7ff fc75 	bl	802ab0c <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b222:	4b08      	ldr	r3, [pc, #32]	@ (802b244 <spi_fs_write_file_to_end+0x70>)
 802b224:	681b      	ldr	r3, [r3, #0]
 802b226:	4798      	blx	r3
#endif
	return err;
 802b228:	697b      	ldr	r3, [r7, #20]
}
 802b22a:	4618      	mov	r0, r3
 802b22c:	3718      	adds	r7, #24
 802b22e:	46bd      	mov	sp, r7
 802b230:	bd80      	pop	{r7, pc}
 802b232:	bf00      	nop
 802b234:	2000d9c0 	.word	0x2000d9c0
 802b238:	2000d934 	.word	0x2000d934
 802b23c:	2000d748 	.word	0x2000d748
 802b240:	2000d6d0 	.word	0x2000d6d0
 802b244:	2000d9c4 	.word	0x2000d9c4

0802b248 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802b248:	b580      	push	{r7, lr}
 802b24a:	b084      	sub	sp, #16
 802b24c:	af00      	add	r7, sp, #0
 802b24e:	6078      	str	r0, [r7, #4]
 802b250:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802b252:	2280      	movs	r2, #128	@ 0x80
 802b254:	2100      	movs	r1, #0
 802b256:	480a      	ldr	r0, [pc, #40]	@ (802b280 <spi_fs_serch_file_in_dir+0x38>)
 802b258:	f002 fc9a 	bl	802db90 <memset>
	strcpy((char *)temp_buf, dir_path);
 802b25c:	6879      	ldr	r1, [r7, #4]
 802b25e:	4808      	ldr	r0, [pc, #32]	@ (802b280 <spi_fs_serch_file_in_dir+0x38>)
 802b260:	f002 fe63 	bl	802df2a <strcpy>
	strcat((char *)temp_buf, filename);
 802b264:	6839      	ldr	r1, [r7, #0]
 802b266:	4806      	ldr	r0, [pc, #24]	@ (802b280 <spi_fs_serch_file_in_dir+0x38>)
 802b268:	f002 fc9a 	bl	802dba0 <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802b26c:	4804      	ldr	r0, [pc, #16]	@ (802b280 <spi_fs_serch_file_in_dir+0x38>)
 802b26e:	f7ff ff8d 	bl	802b18c <spi_fs_file_size>
 802b272:	60f8      	str	r0, [r7, #12]
	return err;
 802b274:	68fb      	ldr	r3, [r7, #12]

}
 802b276:	4618      	mov	r0, r3
 802b278:	3710      	adds	r7, #16
 802b27a:	46bd      	mov	sp, r7
 802b27c:	bd80      	pop	{r7, pc}
 802b27e:	bf00      	nop
 802b280:	2000d940 	.word	0x2000d940

0802b284 <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802b284:	b580      	push	{r7, lr}
 802b286:	b084      	sub	sp, #16
 802b288:	af00      	add	r7, sp, #0
 802b28a:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b28c:	4b07      	ldr	r3, [pc, #28]	@ (802b2ac <spi_fs_mkdir+0x28>)
 802b28e:	681b      	ldr	r3, [r3, #0]
 802b290:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802b292:	6879      	ldr	r1, [r7, #4]
 802b294:	4806      	ldr	r0, [pc, #24]	@ (802b2b0 <spi_fs_mkdir+0x2c>)
 802b296:	f7ff fcf5 	bl	802ac84 <lfs_mkdir>
 802b29a:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b29c:	4b05      	ldr	r3, [pc, #20]	@ (802b2b4 <spi_fs_mkdir+0x30>)
 802b29e:	681b      	ldr	r3, [r3, #0]
 802b2a0:	4798      	blx	r3
#endif

	return err;
 802b2a2:	68fb      	ldr	r3, [r7, #12]
}
 802b2a4:	4618      	mov	r0, r3
 802b2a6:	3710      	adds	r7, #16
 802b2a8:	46bd      	mov	sp, r7
 802b2aa:	bd80      	pop	{r7, pc}
 802b2ac:	2000d9c0 	.word	0x2000d9c0
 802b2b0:	2000d6d0 	.word	0x2000d6d0
 802b2b4:	2000d9c4 	.word	0x2000d9c4

0802b2b8 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802b2b8:	b580      	push	{r7, lr}
 802b2ba:	b084      	sub	sp, #16
 802b2bc:	af00      	add	r7, sp, #0
 802b2be:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b2c0:	4b07      	ldr	r3, [pc, #28]	@ (802b2e0 <spi_fs_remove+0x28>)
 802b2c2:	681b      	ldr	r3, [r3, #0]
 802b2c4:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802b2c6:	6879      	ldr	r1, [r7, #4]
 802b2c8:	4806      	ldr	r0, [pc, #24]	@ (802b2e4 <spi_fs_remove+0x2c>)
 802b2ca:	f7ff fba3 	bl	802aa14 <lfs_remove>
 802b2ce:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b2d0:	4b05      	ldr	r3, [pc, #20]	@ (802b2e8 <spi_fs_remove+0x30>)
 802b2d2:	681b      	ldr	r3, [r3, #0]
 802b2d4:	4798      	blx	r3
#endif
	return err;
 802b2d6:	68fb      	ldr	r3, [r7, #12]
}
 802b2d8:	4618      	mov	r0, r3
 802b2da:	3710      	adds	r7, #16
 802b2dc:	46bd      	mov	sp, r7
 802b2de:	bd80      	pop	{r7, pc}
 802b2e0:	2000d9c0 	.word	0x2000d9c0
 802b2e4:	2000d6d0 	.word	0x2000d6d0
 802b2e8:	2000d9c4 	.word	0x2000d9c4

0802b2ec <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path, uint8_t deep) {
 802b2ec:	b580      	push	{r7, lr}
 802b2ee:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 802b2f2:	af02      	add	r7, sp, #8
 802b2f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b2f8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 802b2fc:	6018      	str	r0, [r3, #0]
 802b2fe:	460a      	mov	r2, r1
 802b300:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b304:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802b308:	701a      	strb	r2, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802b30a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b30e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 802b312:	681a      	ldr	r2, [r3, #0]
 802b314:	4946      	ldr	r1, [pc, #280]	@ (802b430 <remove_recursively_files_and_directories+0x144>)
 802b316:	4847      	ldr	r0, [pc, #284]	@ (802b434 <remove_recursively_files_and_directories+0x148>)
 802b318:	f7ff fcca 	bl	802acb0 <lfs_dir_open>
 802b31c:	4603      	mov	r3, r0
 802b31e:	2b00      	cmp	r3, #0
 802b320:	f040 8081 	bne.w	802b426 <remove_recursively_files_and_directories+0x13a>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b324:	e062      	b.n	802b3ec <remove_recursively_files_and_directories+0x100>
            if (info.type == LFS_TYPE_DIR) {
 802b326:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 802b32e:	781b      	ldrb	r3, [r3, #0]
 802b330:	2b02      	cmp	r3, #2
 802b332:	d13c      	bne.n	802b3ae <remove_recursively_files_and_directories+0xc2>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802b334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802b338:	3308      	adds	r3, #8
 802b33a:	493f      	ldr	r1, [pc, #252]	@ (802b438 <remove_recursively_files_and_directories+0x14c>)
 802b33c:	4618      	mov	r0, r3
 802b33e:	f7e4 ff4f 	bl	80101e0 <strcmp>
 802b342:	4603      	mov	r3, r0
 802b344:	2b00      	cmp	r3, #0
 802b346:	d050      	beq.n	802b3ea <remove_recursively_files_and_directories+0xfe>
 802b348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802b34c:	3308      	adds	r3, #8
 802b34e:	493b      	ldr	r1, [pc, #236]	@ (802b43c <remove_recursively_files_and_directories+0x150>)
 802b350:	4618      	mov	r0, r3
 802b352:	f7e4 ff45 	bl	80101e0 <strcmp>
 802b356:	4603      	mov	r3, r0
 802b358:	2b00      	cmp	r3, #0
 802b35a:	d046      	beq.n	802b3ea <remove_recursively_files_and_directories+0xfe>
                printf("Directory: %s\n", info.name);
 802b35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802b360:	3308      	adds	r3, #8
 802b362:	4619      	mov	r1, r3
 802b364:	4836      	ldr	r0, [pc, #216]	@ (802b440 <remove_recursively_files_and_directories+0x154>)
 802b366:	f002 fa7f 	bl	802d868 <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802b36a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b36e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 802b372:	f107 0008 	add.w	r0, r7, #8
 802b376:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 802b37a:	3208      	adds	r2, #8
 802b37c:	9200      	str	r2, [sp, #0]
 802b37e:	681b      	ldr	r3, [r3, #0]
 802b380:	4a30      	ldr	r2, [pc, #192]	@ (802b444 <remove_recursively_files_and_directories+0x158>)
 802b382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 802b386:	f002 fa81 	bl	802d88c <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802b38a:	4929      	ldr	r1, [pc, #164]	@ (802b430 <remove_recursively_files_and_directories+0x144>)
 802b38c:	4829      	ldr	r0, [pc, #164]	@ (802b434 <remove_recursively_files_and_directories+0x148>)
 802b38e:	f7ff fcc1 	bl	802ad14 <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path, deep + 1);  // Recursive call for subdirectories
 802b392:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b396:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802b39a:	781b      	ldrb	r3, [r3, #0]
 802b39c:	3301      	adds	r3, #1
 802b39e:	b2da      	uxtb	r2, r3
 802b3a0:	f107 0308 	add.w	r3, r7, #8
 802b3a4:	4611      	mov	r1, r2
 802b3a6:	4618      	mov	r0, r3
 802b3a8:	f7ff ffa0 	bl	802b2ec <remove_recursively_files_and_directories>
 802b3ac:	e01e      	b.n	802b3ec <remove_recursively_files_and_directories+0x100>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802b3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802b3b2:	3308      	adds	r3, #8
 802b3b4:	4619      	mov	r1, r3
 802b3b6:	4824      	ldr	r0, [pc, #144]	@ (802b448 <remove_recursively_files_and_directories+0x15c>)
 802b3b8:	f002 fa56 	bl	802d868 <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802b3bc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b3c0:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 802b3c4:	f107 0008 	add.w	r0, r7, #8
 802b3c8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 802b3cc:	3208      	adds	r2, #8
 802b3ce:	9200      	str	r2, [sp, #0]
 802b3d0:	681b      	ldr	r3, [r3, #0]
 802b3d2:	4a1c      	ldr	r2, [pc, #112]	@ (802b444 <remove_recursively_files_and_directories+0x158>)
 802b3d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 802b3d8:	f002 fa58 	bl	802d88c <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802b3dc:	f107 0308 	add.w	r3, r7, #8
 802b3e0:	4619      	mov	r1, r3
 802b3e2:	4814      	ldr	r0, [pc, #80]	@ (802b434 <remove_recursively_files_and_directories+0x148>)
 802b3e4:	f7ff fb16 	bl	802aa14 <lfs_remove>
 802b3e8:	e000      	b.n	802b3ec <remove_recursively_files_and_directories+0x100>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802b3ea:	bf00      	nop
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b3ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802b3f0:	461a      	mov	r2, r3
 802b3f2:	490f      	ldr	r1, [pc, #60]	@ (802b430 <remove_recursively_files_and_directories+0x144>)
 802b3f4:	480f      	ldr	r0, [pc, #60]	@ (802b434 <remove_recursively_files_and_directories+0x148>)
 802b3f6:	f7ff fca3 	bl	802ad40 <lfs_dir_read>
 802b3fa:	4603      	mov	r3, r0
 802b3fc:	2b00      	cmp	r3, #0
 802b3fe:	dc92      	bgt.n	802b326 <remove_recursively_files_and_directories+0x3a>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802b400:	490b      	ldr	r1, [pc, #44]	@ (802b430 <remove_recursively_files_and_directories+0x144>)
 802b402:	480c      	ldr	r0, [pc, #48]	@ (802b434 <remove_recursively_files_and_directories+0x148>)
 802b404:	f7ff fc86 	bl	802ad14 <lfs_dir_close>
        if (deep >= 1){
 802b408:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b40c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802b410:	781b      	ldrb	r3, [r3, #0]
 802b412:	2b00      	cmp	r3, #0
 802b414:	d007      	beq.n	802b426 <remove_recursively_files_and_directories+0x13a>
        	lfs_remove(&lfs, path);
 802b416:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802b41a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 802b41e:	6819      	ldr	r1, [r3, #0]
 802b420:	4804      	ldr	r0, [pc, #16]	@ (802b434 <remove_recursively_files_and_directories+0x148>)
 802b422:	f7ff faf7 	bl	802aa14 <lfs_remove>
        }

    }
}
 802b426:	bf00      	nop
 802b428:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 802b42c:	46bd      	mov	sp, r7
 802b42e:	bd80      	pop	{r7, pc}
 802b430:	2000d79c 	.word	0x2000d79c
 802b434:	2000d6d0 	.word	0x2000d6d0
 802b438:	08034190 	.word	0x08034190
 802b43c:	08034194 	.word	0x08034194
 802b440:	08034198 	.word	0x08034198
 802b444:	080341a8 	.word	0x080341a8
 802b448:	080341b0 	.word	0x080341b0

0802b44c <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802b44c:	b580      	push	{r7, lr}
 802b44e:	b084      	sub	sp, #16
 802b450:	af00      	add	r7, sp, #0
 802b452:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b454:	4b0b      	ldr	r3, [pc, #44]	@ (802b484 <spi_fs_remove_recurcuve_in+0x38>)
 802b456:	681b      	ldr	r3, [r3, #0]
 802b458:	4798      	blx	r3
#endif
	uint8_t deep = 0;
 802b45a:	2300      	movs	r3, #0
 802b45c:	73fb      	strb	r3, [r7, #15]

	remove_recursively_files_and_directories(path, deep);
 802b45e:	7bfb      	ldrb	r3, [r7, #15]
 802b460:	4619      	mov	r1, r3
 802b462:	6878      	ldr	r0, [r7, #4]
 802b464:	f7ff ff42 	bl	802b2ec <remove_recursively_files_and_directories>
	deep = 0;
 802b468:	2300      	movs	r3, #0
 802b46a:	73fb      	strb	r3, [r7, #15]
	remove_recursively_files_and_directories(path, deep);
 802b46c:	7bfb      	ldrb	r3, [r7, #15]
 802b46e:	4619      	mov	r1, r3
 802b470:	6878      	ldr	r0, [r7, #4]
 802b472:	f7ff ff3b 	bl	802b2ec <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b476:	4b04      	ldr	r3, [pc, #16]	@ (802b488 <spi_fs_remove_recurcuve_in+0x3c>)
 802b478:	681b      	ldr	r3, [r3, #0]
 802b47a:	4798      	blx	r3
#endif
}
 802b47c:	bf00      	nop
 802b47e:	3710      	adds	r7, #16
 802b480:	46bd      	mov	sp, r7
 802b482:	bd80      	pop	{r7, pc}
 802b484:	2000d9c0 	.word	0x2000d9c0
 802b488:	2000d9c4 	.word	0x2000d9c4

0802b48c <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802b48c:	b580      	push	{r7, lr}
 802b48e:	b084      	sub	sp, #16
 802b490:	af00      	add	r7, sp, #0
 802b492:	6078      	str	r0, [r7, #4]
 802b494:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b496:	4b08      	ldr	r3, [pc, #32]	@ (802b4b8 <spi_fs_mv+0x2c>)
 802b498:	681b      	ldr	r3, [r3, #0]
 802b49a:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802b49c:	683a      	ldr	r2, [r7, #0]
 802b49e:	6879      	ldr	r1, [r7, #4]
 802b4a0:	4806      	ldr	r0, [pc, #24]	@ (802b4bc <spi_fs_mv+0x30>)
 802b4a2:	f7ff facd 	bl	802aa40 <lfs_rename>
 802b4a6:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b4a8:	4b05      	ldr	r3, [pc, #20]	@ (802b4c0 <spi_fs_mv+0x34>)
 802b4aa:	681b      	ldr	r3, [r3, #0]
 802b4ac:	4798      	blx	r3
#endif
	return err;
 802b4ae:	68fb      	ldr	r3, [r7, #12]
}
 802b4b0:	4618      	mov	r0, r3
 802b4b2:	3710      	adds	r7, #16
 802b4b4:	46bd      	mov	sp, r7
 802b4b6:	bd80      	pop	{r7, pc}
 802b4b8:	2000d9c0 	.word	0x2000d9c0
 802b4bc:	2000d6d0 	.word	0x2000d6d0
 802b4c0:	2000d9c4 	.word	0x2000d9c4

0802b4c4 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802b4c4:	b480      	push	{r7}
 802b4c6:	b08b      	sub	sp, #44	@ 0x2c
 802b4c8:	af00      	add	r7, sp, #0
 802b4ca:	60f8      	str	r0, [r7, #12]
 802b4cc:	60b9      	str	r1, [r7, #8]
 802b4ce:	607a      	str	r2, [r7, #4]
 802b4d0:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802b4d2:	2300      	movs	r3, #0
 802b4d4:	61fb      	str	r3, [r7, #28]
 802b4d6:	2300      	movs	r3, #0
 802b4d8:	623b      	str	r3, [r7, #32]
 802b4da:	6a3b      	ldr	r3, [r7, #32]
 802b4dc:	627b      	str	r3, [r7, #36]	@ 0x24
 802b4de:	e06f      	b.n	802b5c0 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802b4e0:	2300      	movs	r3, #0
 802b4e2:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b4e4:	e005      	b.n	802b4f2 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802b4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b4e8:	3301      	adds	r3, #1
 802b4ea:	627b      	str	r3, [r7, #36]	@ 0x24
            ++x;
 802b4ec:	69bb      	ldr	r3, [r7, #24]
 802b4ee:	3301      	adds	r3, #1
 802b4f0:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b4f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b4f6:	429a      	cmp	r2, r3
 802b4f8:	d205      	bcs.n	802b506 <mbedtls_base64_decode+0x42>
 802b4fa:	683a      	ldr	r2, [r7, #0]
 802b4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b4fe:	4413      	add	r3, r2
 802b500:	781b      	ldrb	r3, [r3, #0]
 802b502:	2b20      	cmp	r3, #32
 802b504:	d0ef      	beq.n	802b4e6 <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802b506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b50a:	429a      	cmp	r2, r3
 802b50c:	d05d      	beq.n	802b5ca <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802b50e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802b510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b512:	1ad3      	subs	r3, r2, r3
 802b514:	2b01      	cmp	r3, #1
 802b516:	d90c      	bls.n	802b532 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b518:	683a      	ldr	r2, [r7, #0]
 802b51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b51c:	4413      	add	r3, r2
 802b51e:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802b520:	2b0d      	cmp	r3, #13
 802b522:	d106      	bne.n	802b532 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b526:	3301      	adds	r3, #1
 802b528:	683a      	ldr	r2, [r7, #0]
 802b52a:	4413      	add	r3, r2
 802b52c:	781b      	ldrb	r3, [r3, #0]
 802b52e:	2b0a      	cmp	r3, #10
 802b530:	d040      	beq.n	802b5b4 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802b532:	683a      	ldr	r2, [r7, #0]
 802b534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b536:	4413      	add	r3, r2
 802b538:	781b      	ldrb	r3, [r3, #0]
 802b53a:	2b0a      	cmp	r3, #10
 802b53c:	d03c      	beq.n	802b5b8 <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802b53e:	69bb      	ldr	r3, [r7, #24]
 802b540:	2b00      	cmp	r3, #0
 802b542:	d002      	beq.n	802b54a <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b544:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 802b548:	e0d0      	b.n	802b6ec <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802b54a:	683a      	ldr	r2, [r7, #0]
 802b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b54e:	4413      	add	r3, r2
 802b550:	781b      	ldrb	r3, [r3, #0]
 802b552:	2b3d      	cmp	r3, #61	@ 0x3d
 802b554:	d108      	bne.n	802b568 <mbedtls_base64_decode+0xa4>
 802b556:	69fb      	ldr	r3, [r7, #28]
 802b558:	3301      	adds	r3, #1
 802b55a:	61fb      	str	r3, [r7, #28]
 802b55c:	69fb      	ldr	r3, [r7, #28]
 802b55e:	2b02      	cmp	r3, #2
 802b560:	d902      	bls.n	802b568 <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b562:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 802b566:	e0c1      	b.n	802b6ec <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802b568:	683a      	ldr	r2, [r7, #0]
 802b56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b56c:	4413      	add	r3, r2
 802b56e:	781b      	ldrb	r3, [r3, #0]
 802b570:	b25b      	sxtb	r3, r3
 802b572:	2b00      	cmp	r3, #0
 802b574:	db08      	blt.n	802b588 <mbedtls_base64_decode+0xc4>
 802b576:	683a      	ldr	r2, [r7, #0]
 802b578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b57a:	4413      	add	r3, r2
 802b57c:	781b      	ldrb	r3, [r3, #0]
 802b57e:	461a      	mov	r2, r3
 802b580:	4b5d      	ldr	r3, [pc, #372]	@ (802b6f8 <mbedtls_base64_decode+0x234>)
 802b582:	5c9b      	ldrb	r3, [r3, r2]
 802b584:	2b7f      	cmp	r3, #127	@ 0x7f
 802b586:	d102      	bne.n	802b58e <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b588:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 802b58c:	e0ae      	b.n	802b6ec <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802b58e:	683a      	ldr	r2, [r7, #0]
 802b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b592:	4413      	add	r3, r2
 802b594:	781b      	ldrb	r3, [r3, #0]
 802b596:	461a      	mov	r2, r3
 802b598:	4b57      	ldr	r3, [pc, #348]	@ (802b6f8 <mbedtls_base64_decode+0x234>)
 802b59a:	5c9b      	ldrb	r3, [r3, r2]
 802b59c:	2b3f      	cmp	r3, #63	@ 0x3f
 802b59e:	d805      	bhi.n	802b5ac <mbedtls_base64_decode+0xe8>
 802b5a0:	69fb      	ldr	r3, [r7, #28]
 802b5a2:	2b00      	cmp	r3, #0
 802b5a4:	d002      	beq.n	802b5ac <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b5a6:	f06f 032b 	mvn.w	r3, #43	@ 0x2b
 802b5aa:	e09f      	b.n	802b6ec <mbedtls_base64_decode+0x228>

        n++;
 802b5ac:	6a3b      	ldr	r3, [r7, #32]
 802b5ae:	3301      	adds	r3, #1
 802b5b0:	623b      	str	r3, [r7, #32]
 802b5b2:	e002      	b.n	802b5ba <mbedtls_base64_decode+0xf6>
            continue;
 802b5b4:	bf00      	nop
 802b5b6:	e000      	b.n	802b5ba <mbedtls_base64_decode+0xf6>
            continue;
 802b5b8:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b5bc:	3301      	adds	r3, #1
 802b5be:	627b      	str	r3, [r7, #36]	@ 0x24
 802b5c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802b5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802b5c4:	429a      	cmp	r2, r3
 802b5c6:	d38b      	bcc.n	802b4e0 <mbedtls_base64_decode+0x1c>
 802b5c8:	e000      	b.n	802b5cc <mbedtls_base64_decode+0x108>
            break;
 802b5ca:	bf00      	nop
    }

    if( n == 0 )
 802b5cc:	6a3b      	ldr	r3, [r7, #32]
 802b5ce:	2b00      	cmp	r3, #0
 802b5d0:	d104      	bne.n	802b5dc <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802b5d2:	687b      	ldr	r3, [r7, #4]
 802b5d4:	2200      	movs	r2, #0
 802b5d6:	601a      	str	r2, [r3, #0]
        return( 0 );
 802b5d8:	2300      	movs	r3, #0
 802b5da:	e087      	b.n	802b6ec <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802b5dc:	6a3b      	ldr	r3, [r7, #32]
 802b5de:	08da      	lsrs	r2, r3, #3
 802b5e0:	4613      	mov	r3, r2
 802b5e2:	005b      	lsls	r3, r3, #1
 802b5e4:	4413      	add	r3, r2
 802b5e6:	005b      	lsls	r3, r3, #1
 802b5e8:	4619      	mov	r1, r3
 802b5ea:	6a3b      	ldr	r3, [r7, #32]
 802b5ec:	f003 0207 	and.w	r2, r3, #7
 802b5f0:	4613      	mov	r3, r2
 802b5f2:	005b      	lsls	r3, r3, #1
 802b5f4:	4413      	add	r3, r2
 802b5f6:	005b      	lsls	r3, r3, #1
 802b5f8:	3307      	adds	r3, #7
 802b5fa:	08db      	lsrs	r3, r3, #3
 802b5fc:	440b      	add	r3, r1
 802b5fe:	623b      	str	r3, [r7, #32]
    n -= j;
 802b600:	6a3a      	ldr	r2, [r7, #32]
 802b602:	69fb      	ldr	r3, [r7, #28]
 802b604:	1ad3      	subs	r3, r2, r3
 802b606:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802b608:	68fb      	ldr	r3, [r7, #12]
 802b60a:	2b00      	cmp	r3, #0
 802b60c:	d003      	beq.n	802b616 <mbedtls_base64_decode+0x152>
 802b60e:	68ba      	ldr	r2, [r7, #8]
 802b610:	6a3b      	ldr	r3, [r7, #32]
 802b612:	429a      	cmp	r2, r3
 802b614:	d205      	bcs.n	802b622 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802b616:	687b      	ldr	r3, [r7, #4]
 802b618:	6a3a      	ldr	r2, [r7, #32]
 802b61a:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802b61c:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 802b620:	e064      	b.n	802b6ec <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b622:	2303      	movs	r3, #3
 802b624:	61fb      	str	r3, [r7, #28]
 802b626:	2300      	movs	r3, #0
 802b628:	61bb      	str	r3, [r7, #24]
 802b62a:	2300      	movs	r3, #0
 802b62c:	623b      	str	r3, [r7, #32]
 802b62e:	68fb      	ldr	r3, [r7, #12]
 802b630:	617b      	str	r3, [r7, #20]
 802b632:	e051      	b.n	802b6d8 <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802b634:	683b      	ldr	r3, [r7, #0]
 802b636:	781b      	ldrb	r3, [r3, #0]
 802b638:	2b0d      	cmp	r3, #13
 802b63a:	d046      	beq.n	802b6ca <mbedtls_base64_decode+0x206>
 802b63c:	683b      	ldr	r3, [r7, #0]
 802b63e:	781b      	ldrb	r3, [r3, #0]
 802b640:	2b0a      	cmp	r3, #10
 802b642:	d042      	beq.n	802b6ca <mbedtls_base64_decode+0x206>
 802b644:	683b      	ldr	r3, [r7, #0]
 802b646:	781b      	ldrb	r3, [r3, #0]
 802b648:	2b20      	cmp	r3, #32
 802b64a:	d03e      	beq.n	802b6ca <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802b64c:	683b      	ldr	r3, [r7, #0]
 802b64e:	781b      	ldrb	r3, [r3, #0]
 802b650:	461a      	mov	r2, r3
 802b652:	4b29      	ldr	r3, [pc, #164]	@ (802b6f8 <mbedtls_base64_decode+0x234>)
 802b654:	5c9b      	ldrb	r3, [r3, r2]
 802b656:	2b40      	cmp	r3, #64	@ 0x40
 802b658:	bf0c      	ite	eq
 802b65a:	2301      	moveq	r3, #1
 802b65c:	2300      	movne	r3, #0
 802b65e:	b2db      	uxtb	r3, r3
 802b660:	461a      	mov	r2, r3
 802b662:	69fb      	ldr	r3, [r7, #28]
 802b664:	1a9b      	subs	r3, r3, r2
 802b666:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802b668:	69bb      	ldr	r3, [r7, #24]
 802b66a:	019a      	lsls	r2, r3, #6
 802b66c:	683b      	ldr	r3, [r7, #0]
 802b66e:	781b      	ldrb	r3, [r3, #0]
 802b670:	4619      	mov	r1, r3
 802b672:	4b21      	ldr	r3, [pc, #132]	@ (802b6f8 <mbedtls_base64_decode+0x234>)
 802b674:	5c5b      	ldrb	r3, [r3, r1]
 802b676:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802b67a:	4313      	orrs	r3, r2
 802b67c:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802b67e:	6a3b      	ldr	r3, [r7, #32]
 802b680:	3301      	adds	r3, #1
 802b682:	623b      	str	r3, [r7, #32]
 802b684:	6a3b      	ldr	r3, [r7, #32]
 802b686:	2b04      	cmp	r3, #4
 802b688:	d120      	bne.n	802b6cc <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802b68a:	2300      	movs	r3, #0
 802b68c:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802b68e:	69fb      	ldr	r3, [r7, #28]
 802b690:	2b00      	cmp	r3, #0
 802b692:	d006      	beq.n	802b6a2 <mbedtls_base64_decode+0x1de>
 802b694:	69bb      	ldr	r3, [r7, #24]
 802b696:	0c19      	lsrs	r1, r3, #16
 802b698:	697b      	ldr	r3, [r7, #20]
 802b69a:	1c5a      	adds	r2, r3, #1
 802b69c:	617a      	str	r2, [r7, #20]
 802b69e:	b2ca      	uxtb	r2, r1
 802b6a0:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802b6a2:	69fb      	ldr	r3, [r7, #28]
 802b6a4:	2b01      	cmp	r3, #1
 802b6a6:	d906      	bls.n	802b6b6 <mbedtls_base64_decode+0x1f2>
 802b6a8:	69bb      	ldr	r3, [r7, #24]
 802b6aa:	0a19      	lsrs	r1, r3, #8
 802b6ac:	697b      	ldr	r3, [r7, #20]
 802b6ae:	1c5a      	adds	r2, r3, #1
 802b6b0:	617a      	str	r2, [r7, #20]
 802b6b2:	b2ca      	uxtb	r2, r1
 802b6b4:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802b6b6:	69fb      	ldr	r3, [r7, #28]
 802b6b8:	2b02      	cmp	r3, #2
 802b6ba:	d907      	bls.n	802b6cc <mbedtls_base64_decode+0x208>
 802b6bc:	697b      	ldr	r3, [r7, #20]
 802b6be:	1c5a      	adds	r2, r3, #1
 802b6c0:	617a      	str	r2, [r7, #20]
 802b6c2:	69ba      	ldr	r2, [r7, #24]
 802b6c4:	b2d2      	uxtb	r2, r2
 802b6c6:	701a      	strb	r2, [r3, #0]
 802b6c8:	e000      	b.n	802b6cc <mbedtls_base64_decode+0x208>
            continue;
 802b6ca:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b6ce:	3b01      	subs	r3, #1
 802b6d0:	627b      	str	r3, [r7, #36]	@ 0x24
 802b6d2:	683b      	ldr	r3, [r7, #0]
 802b6d4:	3301      	adds	r3, #1
 802b6d6:	603b      	str	r3, [r7, #0]
 802b6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802b6da:	2b00      	cmp	r3, #0
 802b6dc:	d1aa      	bne.n	802b634 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802b6de:	697a      	ldr	r2, [r7, #20]
 802b6e0:	68fb      	ldr	r3, [r7, #12]
 802b6e2:	1ad3      	subs	r3, r2, r3
 802b6e4:	461a      	mov	r2, r3
 802b6e6:	687b      	ldr	r3, [r7, #4]
 802b6e8:	601a      	str	r2, [r3, #0]

    return( 0 );
 802b6ea:	2300      	movs	r3, #0
}
 802b6ec:	4618      	mov	r0, r3
 802b6ee:	372c      	adds	r7, #44	@ 0x2c
 802b6f0:	46bd      	mov	sp, r7
 802b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6f6:	4770      	bx	lr
 802b6f8:	08034c90 	.word	0x08034c90

0802b6fc <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802b6fc:	b580      	push	{r7, lr}
 802b6fe:	b082      	sub	sp, #8
 802b700:	af00      	add	r7, sp, #0
 802b702:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802b704:	2258      	movs	r2, #88	@ 0x58
 802b706:	2100      	movs	r1, #0
 802b708:	6878      	ldr	r0, [r7, #4]
 802b70a:	f002 fa41 	bl	802db90 <memset>
}
 802b70e:	bf00      	nop
 802b710:	3708      	adds	r7, #8
 802b712:	46bd      	mov	sp, r7
 802b714:	bd80      	pop	{r7, pc}

0802b716 <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802b716:	b580      	push	{r7, lr}
 802b718:	b082      	sub	sp, #8
 802b71a:	af00      	add	r7, sp, #0
 802b71c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802b71e:	687b      	ldr	r3, [r7, #4]
 802b720:	2b00      	cmp	r3, #0
 802b722:	d004      	beq.n	802b72e <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802b724:	2158      	movs	r1, #88	@ 0x58
 802b726:	6878      	ldr	r0, [r7, #4]
 802b728:	f001 f85c 	bl	802c7e4 <mbedtls_platform_zeroize>
 802b72c:	e000      	b.n	802b730 <mbedtls_md5_free+0x1a>
        return;
 802b72e:	bf00      	nop
}
 802b730:	3708      	adds	r7, #8
 802b732:	46bd      	mov	sp, r7
 802b734:	bd80      	pop	{r7, pc}
	...

0802b738 <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802b738:	b480      	push	{r7}
 802b73a:	b083      	sub	sp, #12
 802b73c:	af00      	add	r7, sp, #0
 802b73e:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802b740:	687b      	ldr	r3, [r7, #4]
 802b742:	2200      	movs	r2, #0
 802b744:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802b746:	687b      	ldr	r3, [r7, #4]
 802b748:	2200      	movs	r2, #0
 802b74a:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802b74c:	687b      	ldr	r3, [r7, #4]
 802b74e:	4a09      	ldr	r2, [pc, #36]	@ (802b774 <mbedtls_md5_starts_ret+0x3c>)
 802b750:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802b752:	687b      	ldr	r3, [r7, #4]
 802b754:	4a08      	ldr	r2, [pc, #32]	@ (802b778 <mbedtls_md5_starts_ret+0x40>)
 802b756:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802b758:	687b      	ldr	r3, [r7, #4]
 802b75a:	4a08      	ldr	r2, [pc, #32]	@ (802b77c <mbedtls_md5_starts_ret+0x44>)
 802b75c:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802b75e:	687b      	ldr	r3, [r7, #4]
 802b760:	4a07      	ldr	r2, [pc, #28]	@ (802b780 <mbedtls_md5_starts_ret+0x48>)
 802b762:	615a      	str	r2, [r3, #20]

    return( 0 );
 802b764:	2300      	movs	r3, #0
}
 802b766:	4618      	mov	r0, r3
 802b768:	370c      	adds	r7, #12
 802b76a:	46bd      	mov	sp, r7
 802b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b770:	4770      	bx	lr
 802b772:	bf00      	nop
 802b774:	67452301 	.word	0x67452301
 802b778:	efcdab89 	.word	0xefcdab89
 802b77c:	98badcfe 	.word	0x98badcfe
 802b780:	10325476 	.word	0x10325476

0802b784 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802b784:	b480      	push	{r7}
 802b786:	b097      	sub	sp, #92	@ 0x5c
 802b788:	af00      	add	r7, sp, #0
 802b78a:	6078      	str	r0, [r7, #4]
 802b78c:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802b78e:	683b      	ldr	r3, [r7, #0]
 802b790:	781b      	ldrb	r3, [r3, #0]
 802b792:	461a      	mov	r2, r3
 802b794:	683b      	ldr	r3, [r7, #0]
 802b796:	3301      	adds	r3, #1
 802b798:	781b      	ldrb	r3, [r3, #0]
 802b79a:	021b      	lsls	r3, r3, #8
 802b79c:	431a      	orrs	r2, r3
 802b79e:	683b      	ldr	r3, [r7, #0]
 802b7a0:	3302      	adds	r3, #2
 802b7a2:	781b      	ldrb	r3, [r3, #0]
 802b7a4:	041b      	lsls	r3, r3, #16
 802b7a6:	431a      	orrs	r2, r3
 802b7a8:	683b      	ldr	r3, [r7, #0]
 802b7aa:	3303      	adds	r3, #3
 802b7ac:	781b      	ldrb	r3, [r3, #0]
 802b7ae:	061b      	lsls	r3, r3, #24
 802b7b0:	4313      	orrs	r3, r2
 802b7b2:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802b7b4:	683b      	ldr	r3, [r7, #0]
 802b7b6:	3304      	adds	r3, #4
 802b7b8:	781b      	ldrb	r3, [r3, #0]
 802b7ba:	461a      	mov	r2, r3
 802b7bc:	683b      	ldr	r3, [r7, #0]
 802b7be:	3305      	adds	r3, #5
 802b7c0:	781b      	ldrb	r3, [r3, #0]
 802b7c2:	021b      	lsls	r3, r3, #8
 802b7c4:	431a      	orrs	r2, r3
 802b7c6:	683b      	ldr	r3, [r7, #0]
 802b7c8:	3306      	adds	r3, #6
 802b7ca:	781b      	ldrb	r3, [r3, #0]
 802b7cc:	041b      	lsls	r3, r3, #16
 802b7ce:	431a      	orrs	r2, r3
 802b7d0:	683b      	ldr	r3, [r7, #0]
 802b7d2:	3307      	adds	r3, #7
 802b7d4:	781b      	ldrb	r3, [r3, #0]
 802b7d6:	061b      	lsls	r3, r3, #24
 802b7d8:	4313      	orrs	r3, r2
 802b7da:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802b7dc:	683b      	ldr	r3, [r7, #0]
 802b7de:	3308      	adds	r3, #8
 802b7e0:	781b      	ldrb	r3, [r3, #0]
 802b7e2:	461a      	mov	r2, r3
 802b7e4:	683b      	ldr	r3, [r7, #0]
 802b7e6:	3309      	adds	r3, #9
 802b7e8:	781b      	ldrb	r3, [r3, #0]
 802b7ea:	021b      	lsls	r3, r3, #8
 802b7ec:	431a      	orrs	r2, r3
 802b7ee:	683b      	ldr	r3, [r7, #0]
 802b7f0:	330a      	adds	r3, #10
 802b7f2:	781b      	ldrb	r3, [r3, #0]
 802b7f4:	041b      	lsls	r3, r3, #16
 802b7f6:	431a      	orrs	r2, r3
 802b7f8:	683b      	ldr	r3, [r7, #0]
 802b7fa:	330b      	adds	r3, #11
 802b7fc:	781b      	ldrb	r3, [r3, #0]
 802b7fe:	061b      	lsls	r3, r3, #24
 802b800:	4313      	orrs	r3, r2
 802b802:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802b804:	683b      	ldr	r3, [r7, #0]
 802b806:	330c      	adds	r3, #12
 802b808:	781b      	ldrb	r3, [r3, #0]
 802b80a:	461a      	mov	r2, r3
 802b80c:	683b      	ldr	r3, [r7, #0]
 802b80e:	330d      	adds	r3, #13
 802b810:	781b      	ldrb	r3, [r3, #0]
 802b812:	021b      	lsls	r3, r3, #8
 802b814:	431a      	orrs	r2, r3
 802b816:	683b      	ldr	r3, [r7, #0]
 802b818:	330e      	adds	r3, #14
 802b81a:	781b      	ldrb	r3, [r3, #0]
 802b81c:	041b      	lsls	r3, r3, #16
 802b81e:	431a      	orrs	r2, r3
 802b820:	683b      	ldr	r3, [r7, #0]
 802b822:	330f      	adds	r3, #15
 802b824:	781b      	ldrb	r3, [r3, #0]
 802b826:	061b      	lsls	r3, r3, #24
 802b828:	4313      	orrs	r3, r2
 802b82a:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802b82c:	683b      	ldr	r3, [r7, #0]
 802b82e:	3310      	adds	r3, #16
 802b830:	781b      	ldrb	r3, [r3, #0]
 802b832:	461a      	mov	r2, r3
 802b834:	683b      	ldr	r3, [r7, #0]
 802b836:	3311      	adds	r3, #17
 802b838:	781b      	ldrb	r3, [r3, #0]
 802b83a:	021b      	lsls	r3, r3, #8
 802b83c:	431a      	orrs	r2, r3
 802b83e:	683b      	ldr	r3, [r7, #0]
 802b840:	3312      	adds	r3, #18
 802b842:	781b      	ldrb	r3, [r3, #0]
 802b844:	041b      	lsls	r3, r3, #16
 802b846:	431a      	orrs	r2, r3
 802b848:	683b      	ldr	r3, [r7, #0]
 802b84a:	3313      	adds	r3, #19
 802b84c:	781b      	ldrb	r3, [r3, #0]
 802b84e:	061b      	lsls	r3, r3, #24
 802b850:	4313      	orrs	r3, r2
 802b852:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b854:	683b      	ldr	r3, [r7, #0]
 802b856:	3314      	adds	r3, #20
 802b858:	781b      	ldrb	r3, [r3, #0]
 802b85a:	461a      	mov	r2, r3
 802b85c:	683b      	ldr	r3, [r7, #0]
 802b85e:	3315      	adds	r3, #21
 802b860:	781b      	ldrb	r3, [r3, #0]
 802b862:	021b      	lsls	r3, r3, #8
 802b864:	431a      	orrs	r2, r3
 802b866:	683b      	ldr	r3, [r7, #0]
 802b868:	3316      	adds	r3, #22
 802b86a:	781b      	ldrb	r3, [r3, #0]
 802b86c:	041b      	lsls	r3, r3, #16
 802b86e:	431a      	orrs	r2, r3
 802b870:	683b      	ldr	r3, [r7, #0]
 802b872:	3317      	adds	r3, #23
 802b874:	781b      	ldrb	r3, [r3, #0]
 802b876:	061b      	lsls	r3, r3, #24
 802b878:	4313      	orrs	r3, r2
 802b87a:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b87c:	683b      	ldr	r3, [r7, #0]
 802b87e:	3318      	adds	r3, #24
 802b880:	781b      	ldrb	r3, [r3, #0]
 802b882:	461a      	mov	r2, r3
 802b884:	683b      	ldr	r3, [r7, #0]
 802b886:	3319      	adds	r3, #25
 802b888:	781b      	ldrb	r3, [r3, #0]
 802b88a:	021b      	lsls	r3, r3, #8
 802b88c:	431a      	orrs	r2, r3
 802b88e:	683b      	ldr	r3, [r7, #0]
 802b890:	331a      	adds	r3, #26
 802b892:	781b      	ldrb	r3, [r3, #0]
 802b894:	041b      	lsls	r3, r3, #16
 802b896:	431a      	orrs	r2, r3
 802b898:	683b      	ldr	r3, [r7, #0]
 802b89a:	331b      	adds	r3, #27
 802b89c:	781b      	ldrb	r3, [r3, #0]
 802b89e:	061b      	lsls	r3, r3, #24
 802b8a0:	4313      	orrs	r3, r2
 802b8a2:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b8a4:	683b      	ldr	r3, [r7, #0]
 802b8a6:	331c      	adds	r3, #28
 802b8a8:	781b      	ldrb	r3, [r3, #0]
 802b8aa:	461a      	mov	r2, r3
 802b8ac:	683b      	ldr	r3, [r7, #0]
 802b8ae:	331d      	adds	r3, #29
 802b8b0:	781b      	ldrb	r3, [r3, #0]
 802b8b2:	021b      	lsls	r3, r3, #8
 802b8b4:	431a      	orrs	r2, r3
 802b8b6:	683b      	ldr	r3, [r7, #0]
 802b8b8:	331e      	adds	r3, #30
 802b8ba:	781b      	ldrb	r3, [r3, #0]
 802b8bc:	041b      	lsls	r3, r3, #16
 802b8be:	431a      	orrs	r2, r3
 802b8c0:	683b      	ldr	r3, [r7, #0]
 802b8c2:	331f      	adds	r3, #31
 802b8c4:	781b      	ldrb	r3, [r3, #0]
 802b8c6:	061b      	lsls	r3, r3, #24
 802b8c8:	4313      	orrs	r3, r2
 802b8ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b8cc:	683b      	ldr	r3, [r7, #0]
 802b8ce:	3320      	adds	r3, #32
 802b8d0:	781b      	ldrb	r3, [r3, #0]
 802b8d2:	461a      	mov	r2, r3
 802b8d4:	683b      	ldr	r3, [r7, #0]
 802b8d6:	3321      	adds	r3, #33	@ 0x21
 802b8d8:	781b      	ldrb	r3, [r3, #0]
 802b8da:	021b      	lsls	r3, r3, #8
 802b8dc:	431a      	orrs	r2, r3
 802b8de:	683b      	ldr	r3, [r7, #0]
 802b8e0:	3322      	adds	r3, #34	@ 0x22
 802b8e2:	781b      	ldrb	r3, [r3, #0]
 802b8e4:	041b      	lsls	r3, r3, #16
 802b8e6:	431a      	orrs	r2, r3
 802b8e8:	683b      	ldr	r3, [r7, #0]
 802b8ea:	3323      	adds	r3, #35	@ 0x23
 802b8ec:	781b      	ldrb	r3, [r3, #0]
 802b8ee:	061b      	lsls	r3, r3, #24
 802b8f0:	4313      	orrs	r3, r2
 802b8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b8f4:	683b      	ldr	r3, [r7, #0]
 802b8f6:	3324      	adds	r3, #36	@ 0x24
 802b8f8:	781b      	ldrb	r3, [r3, #0]
 802b8fa:	461a      	mov	r2, r3
 802b8fc:	683b      	ldr	r3, [r7, #0]
 802b8fe:	3325      	adds	r3, #37	@ 0x25
 802b900:	781b      	ldrb	r3, [r3, #0]
 802b902:	021b      	lsls	r3, r3, #8
 802b904:	431a      	orrs	r2, r3
 802b906:	683b      	ldr	r3, [r7, #0]
 802b908:	3326      	adds	r3, #38	@ 0x26
 802b90a:	781b      	ldrb	r3, [r3, #0]
 802b90c:	041b      	lsls	r3, r3, #16
 802b90e:	431a      	orrs	r2, r3
 802b910:	683b      	ldr	r3, [r7, #0]
 802b912:	3327      	adds	r3, #39	@ 0x27
 802b914:	781b      	ldrb	r3, [r3, #0]
 802b916:	061b      	lsls	r3, r3, #24
 802b918:	4313      	orrs	r3, r2
 802b91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b91c:	683b      	ldr	r3, [r7, #0]
 802b91e:	3328      	adds	r3, #40	@ 0x28
 802b920:	781b      	ldrb	r3, [r3, #0]
 802b922:	461a      	mov	r2, r3
 802b924:	683b      	ldr	r3, [r7, #0]
 802b926:	3329      	adds	r3, #41	@ 0x29
 802b928:	781b      	ldrb	r3, [r3, #0]
 802b92a:	021b      	lsls	r3, r3, #8
 802b92c:	431a      	orrs	r2, r3
 802b92e:	683b      	ldr	r3, [r7, #0]
 802b930:	332a      	adds	r3, #42	@ 0x2a
 802b932:	781b      	ldrb	r3, [r3, #0]
 802b934:	041b      	lsls	r3, r3, #16
 802b936:	431a      	orrs	r2, r3
 802b938:	683b      	ldr	r3, [r7, #0]
 802b93a:	332b      	adds	r3, #43	@ 0x2b
 802b93c:	781b      	ldrb	r3, [r3, #0]
 802b93e:	061b      	lsls	r3, r3, #24
 802b940:	4313      	orrs	r3, r2
 802b942:	633b      	str	r3, [r7, #48]	@ 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b944:	683b      	ldr	r3, [r7, #0]
 802b946:	332c      	adds	r3, #44	@ 0x2c
 802b948:	781b      	ldrb	r3, [r3, #0]
 802b94a:	461a      	mov	r2, r3
 802b94c:	683b      	ldr	r3, [r7, #0]
 802b94e:	332d      	adds	r3, #45	@ 0x2d
 802b950:	781b      	ldrb	r3, [r3, #0]
 802b952:	021b      	lsls	r3, r3, #8
 802b954:	431a      	orrs	r2, r3
 802b956:	683b      	ldr	r3, [r7, #0]
 802b958:	332e      	adds	r3, #46	@ 0x2e
 802b95a:	781b      	ldrb	r3, [r3, #0]
 802b95c:	041b      	lsls	r3, r3, #16
 802b95e:	431a      	orrs	r2, r3
 802b960:	683b      	ldr	r3, [r7, #0]
 802b962:	332f      	adds	r3, #47	@ 0x2f
 802b964:	781b      	ldrb	r3, [r3, #0]
 802b966:	061b      	lsls	r3, r3, #24
 802b968:	4313      	orrs	r3, r2
 802b96a:	637b      	str	r3, [r7, #52]	@ 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b96c:	683b      	ldr	r3, [r7, #0]
 802b96e:	3330      	adds	r3, #48	@ 0x30
 802b970:	781b      	ldrb	r3, [r3, #0]
 802b972:	461a      	mov	r2, r3
 802b974:	683b      	ldr	r3, [r7, #0]
 802b976:	3331      	adds	r3, #49	@ 0x31
 802b978:	781b      	ldrb	r3, [r3, #0]
 802b97a:	021b      	lsls	r3, r3, #8
 802b97c:	431a      	orrs	r2, r3
 802b97e:	683b      	ldr	r3, [r7, #0]
 802b980:	3332      	adds	r3, #50	@ 0x32
 802b982:	781b      	ldrb	r3, [r3, #0]
 802b984:	041b      	lsls	r3, r3, #16
 802b986:	431a      	orrs	r2, r3
 802b988:	683b      	ldr	r3, [r7, #0]
 802b98a:	3333      	adds	r3, #51	@ 0x33
 802b98c:	781b      	ldrb	r3, [r3, #0]
 802b98e:	061b      	lsls	r3, r3, #24
 802b990:	4313      	orrs	r3, r2
 802b992:	63bb      	str	r3, [r7, #56]	@ 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b994:	683b      	ldr	r3, [r7, #0]
 802b996:	3334      	adds	r3, #52	@ 0x34
 802b998:	781b      	ldrb	r3, [r3, #0]
 802b99a:	461a      	mov	r2, r3
 802b99c:	683b      	ldr	r3, [r7, #0]
 802b99e:	3335      	adds	r3, #53	@ 0x35
 802b9a0:	781b      	ldrb	r3, [r3, #0]
 802b9a2:	021b      	lsls	r3, r3, #8
 802b9a4:	431a      	orrs	r2, r3
 802b9a6:	683b      	ldr	r3, [r7, #0]
 802b9a8:	3336      	adds	r3, #54	@ 0x36
 802b9aa:	781b      	ldrb	r3, [r3, #0]
 802b9ac:	041b      	lsls	r3, r3, #16
 802b9ae:	431a      	orrs	r2, r3
 802b9b0:	683b      	ldr	r3, [r7, #0]
 802b9b2:	3337      	adds	r3, #55	@ 0x37
 802b9b4:	781b      	ldrb	r3, [r3, #0]
 802b9b6:	061b      	lsls	r3, r3, #24
 802b9b8:	4313      	orrs	r3, r2
 802b9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b9bc:	683b      	ldr	r3, [r7, #0]
 802b9be:	3338      	adds	r3, #56	@ 0x38
 802b9c0:	781b      	ldrb	r3, [r3, #0]
 802b9c2:	461a      	mov	r2, r3
 802b9c4:	683b      	ldr	r3, [r7, #0]
 802b9c6:	3339      	adds	r3, #57	@ 0x39
 802b9c8:	781b      	ldrb	r3, [r3, #0]
 802b9ca:	021b      	lsls	r3, r3, #8
 802b9cc:	431a      	orrs	r2, r3
 802b9ce:	683b      	ldr	r3, [r7, #0]
 802b9d0:	333a      	adds	r3, #58	@ 0x3a
 802b9d2:	781b      	ldrb	r3, [r3, #0]
 802b9d4:	041b      	lsls	r3, r3, #16
 802b9d6:	431a      	orrs	r2, r3
 802b9d8:	683b      	ldr	r3, [r7, #0]
 802b9da:	333b      	adds	r3, #59	@ 0x3b
 802b9dc:	781b      	ldrb	r3, [r3, #0]
 802b9de:	061b      	lsls	r3, r3, #24
 802b9e0:	4313      	orrs	r3, r2
 802b9e2:	643b      	str	r3, [r7, #64]	@ 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b9e4:	683b      	ldr	r3, [r7, #0]
 802b9e6:	333c      	adds	r3, #60	@ 0x3c
 802b9e8:	781b      	ldrb	r3, [r3, #0]
 802b9ea:	461a      	mov	r2, r3
 802b9ec:	683b      	ldr	r3, [r7, #0]
 802b9ee:	333d      	adds	r3, #61	@ 0x3d
 802b9f0:	781b      	ldrb	r3, [r3, #0]
 802b9f2:	021b      	lsls	r3, r3, #8
 802b9f4:	431a      	orrs	r2, r3
 802b9f6:	683b      	ldr	r3, [r7, #0]
 802b9f8:	333e      	adds	r3, #62	@ 0x3e
 802b9fa:	781b      	ldrb	r3, [r3, #0]
 802b9fc:	041b      	lsls	r3, r3, #16
 802b9fe:	431a      	orrs	r2, r3
 802ba00:	683b      	ldr	r3, [r7, #0]
 802ba02:	333f      	adds	r3, #63	@ 0x3f
 802ba04:	781b      	ldrb	r3, [r3, #0]
 802ba06:	061b      	lsls	r3, r3, #24
 802ba08:	4313      	orrs	r3, r2
 802ba0a:	647b      	str	r3, [r7, #68]	@ 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802ba0c:	687b      	ldr	r3, [r7, #4]
 802ba0e:	689b      	ldr	r3, [r3, #8]
 802ba10:	657b      	str	r3, [r7, #84]	@ 0x54
    B = ctx->state[1];
 802ba12:	687b      	ldr	r3, [r7, #4]
 802ba14:	68db      	ldr	r3, [r3, #12]
 802ba16:	653b      	str	r3, [r7, #80]	@ 0x50
    C = ctx->state[2];
 802ba18:	687b      	ldr	r3, [r7, #4]
 802ba1a:	691b      	ldr	r3, [r3, #16]
 802ba1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    D = ctx->state[3];
 802ba1e:	687b      	ldr	r3, [r7, #4]
 802ba20:	695b      	ldr	r3, [r3, #20]
 802ba22:	64bb      	str	r3, [r7, #72]	@ 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802ba24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802ba26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ba28:	405a      	eors	r2, r3
 802ba2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ba2c:	401a      	ands	r2, r3
 802ba2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ba30:	405a      	eors	r2, r3
 802ba32:	68bb      	ldr	r3, [r7, #8]
 802ba34:	441a      	add	r2, r3
 802ba36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ba38:	441a      	add	r2, r3
 802ba3a:	4ba5      	ldr	r3, [pc, #660]	@ (802bcd0 <mbedtls_internal_md5_process+0x54c>)
 802ba3c:	4413      	add	r3, r2
 802ba3e:	657b      	str	r3, [r7, #84]	@ 0x54
 802ba40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ba42:	ea4f 6373 	mov.w	r3, r3, ror #25
 802ba46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802ba48:	4413      	add	r3, r2
 802ba4a:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802ba4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802ba4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ba50:	405a      	eors	r2, r3
 802ba52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802ba54:	401a      	ands	r2, r3
 802ba56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ba58:	405a      	eors	r2, r3
 802ba5a:	68fb      	ldr	r3, [r7, #12]
 802ba5c:	441a      	add	r2, r3
 802ba5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ba60:	441a      	add	r2, r3
 802ba62:	4b9c      	ldr	r3, [pc, #624]	@ (802bcd4 <mbedtls_internal_md5_process+0x550>)
 802ba64:	4413      	add	r3, r2
 802ba66:	64bb      	str	r3, [r7, #72]	@ 0x48
 802ba68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ba6a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802ba6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802ba70:	4413      	add	r3, r2
 802ba72:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802ba74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802ba76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ba78:	405a      	eors	r2, r3
 802ba7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802ba7c:	401a      	ands	r2, r3
 802ba7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802ba80:	405a      	eors	r2, r3
 802ba82:	693b      	ldr	r3, [r7, #16]
 802ba84:	441a      	add	r2, r3
 802ba86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ba88:	441a      	add	r2, r3
 802ba8a:	4b93      	ldr	r3, [pc, #588]	@ (802bcd8 <mbedtls_internal_md5_process+0x554>)
 802ba8c:	4413      	add	r3, r2
 802ba8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802ba90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802ba92:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802ba96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802ba98:	4413      	add	r3, r2
 802ba9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802ba9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802ba9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802baa0:	405a      	eors	r2, r3
 802baa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802baa4:	401a      	ands	r2, r3
 802baa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802baa8:	405a      	eors	r2, r3
 802baaa:	697b      	ldr	r3, [r7, #20]
 802baac:	441a      	add	r2, r3
 802baae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bab0:	441a      	add	r2, r3
 802bab2:	4b8a      	ldr	r3, [pc, #552]	@ (802bcdc <mbedtls_internal_md5_process+0x558>)
 802bab4:	4413      	add	r3, r2
 802bab6:	653b      	str	r3, [r7, #80]	@ 0x50
 802bab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802baba:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802babe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bac0:	4413      	add	r3, r2
 802bac2:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802bac4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bac8:	405a      	eors	r2, r3
 802baca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bacc:	401a      	ands	r2, r3
 802bace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bad0:	405a      	eors	r2, r3
 802bad2:	69bb      	ldr	r3, [r7, #24]
 802bad4:	441a      	add	r2, r3
 802bad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bad8:	441a      	add	r2, r3
 802bada:	4b81      	ldr	r3, [pc, #516]	@ (802bce0 <mbedtls_internal_md5_process+0x55c>)
 802badc:	4413      	add	r3, r2
 802bade:	657b      	str	r3, [r7, #84]	@ 0x54
 802bae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bae2:	ea4f 6373 	mov.w	r3, r3, ror #25
 802bae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bae8:	4413      	add	r3, r2
 802baea:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802baec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802baee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802baf0:	405a      	eors	r2, r3
 802baf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802baf4:	401a      	ands	r2, r3
 802baf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802baf8:	405a      	eors	r2, r3
 802bafa:	69fb      	ldr	r3, [r7, #28]
 802bafc:	441a      	add	r2, r3
 802bafe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bb00:	441a      	add	r2, r3
 802bb02:	4b78      	ldr	r3, [pc, #480]	@ (802bce4 <mbedtls_internal_md5_process+0x560>)
 802bb04:	4413      	add	r3, r2
 802bb06:	64bb      	str	r3, [r7, #72]	@ 0x48
 802bb08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bb0a:	ea4f 5333 	mov.w	r3, r3, ror #20
 802bb0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bb10:	4413      	add	r3, r2
 802bb12:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802bb14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bb16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bb18:	405a      	eors	r2, r3
 802bb1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bb1c:	401a      	ands	r2, r3
 802bb1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bb20:	405a      	eors	r2, r3
 802bb22:	6a3b      	ldr	r3, [r7, #32]
 802bb24:	441a      	add	r2, r3
 802bb26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bb28:	441a      	add	r2, r3
 802bb2a:	4b6f      	ldr	r3, [pc, #444]	@ (802bce8 <mbedtls_internal_md5_process+0x564>)
 802bb2c:	4413      	add	r3, r2
 802bb2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802bb30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bb32:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802bb36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bb38:	4413      	add	r3, r2
 802bb3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802bb3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bb3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bb40:	405a      	eors	r2, r3
 802bb42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bb44:	401a      	ands	r2, r3
 802bb46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bb48:	405a      	eors	r2, r3
 802bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bb4c:	441a      	add	r2, r3
 802bb4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bb50:	441a      	add	r2, r3
 802bb52:	4b66      	ldr	r3, [pc, #408]	@ (802bcec <mbedtls_internal_md5_process+0x568>)
 802bb54:	4413      	add	r3, r2
 802bb56:	653b      	str	r3, [r7, #80]	@ 0x50
 802bb58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bb5a:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bb5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bb60:	4413      	add	r3, r2
 802bb62:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802bb64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bb66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bb68:	405a      	eors	r2, r3
 802bb6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bb6c:	401a      	ands	r2, r3
 802bb6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bb70:	405a      	eors	r2, r3
 802bb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802bb74:	441a      	add	r2, r3
 802bb76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bb78:	441a      	add	r2, r3
 802bb7a:	4b5d      	ldr	r3, [pc, #372]	@ (802bcf0 <mbedtls_internal_md5_process+0x56c>)
 802bb7c:	4413      	add	r3, r2
 802bb7e:	657b      	str	r3, [r7, #84]	@ 0x54
 802bb80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bb82:	ea4f 6373 	mov.w	r3, r3, ror #25
 802bb86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bb88:	4413      	add	r3, r2
 802bb8a:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802bb8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bb8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bb90:	405a      	eors	r2, r3
 802bb92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bb94:	401a      	ands	r2, r3
 802bb96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bb98:	405a      	eors	r2, r3
 802bb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802bb9c:	441a      	add	r2, r3
 802bb9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bba0:	441a      	add	r2, r3
 802bba2:	4b54      	ldr	r3, [pc, #336]	@ (802bcf4 <mbedtls_internal_md5_process+0x570>)
 802bba4:	4413      	add	r3, r2
 802bba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 802bba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bbaa:	ea4f 5333 	mov.w	r3, r3, ror #20
 802bbae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bbb0:	4413      	add	r3, r2
 802bbb2:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802bbb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bbb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bbb8:	405a      	eors	r2, r3
 802bbba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bbbc:	401a      	ands	r2, r3
 802bbbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bbc0:	405a      	eors	r2, r3
 802bbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bbc4:	441a      	add	r2, r3
 802bbc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bbc8:	4413      	add	r3, r2
 802bbca:	f5a3 4324 	sub.w	r3, r3, #41984	@ 0xa400
 802bbce:	3b4f      	subs	r3, #79	@ 0x4f
 802bbd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802bbd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bbd4:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802bbd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bbda:	4413      	add	r3, r2
 802bbdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802bbde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bbe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bbe2:	405a      	eors	r2, r3
 802bbe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bbe6:	401a      	ands	r2, r3
 802bbe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bbea:	405a      	eors	r2, r3
 802bbec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bbee:	441a      	add	r2, r3
 802bbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bbf2:	441a      	add	r2, r3
 802bbf4:	4b40      	ldr	r3, [pc, #256]	@ (802bcf8 <mbedtls_internal_md5_process+0x574>)
 802bbf6:	4413      	add	r3, r2
 802bbf8:	653b      	str	r3, [r7, #80]	@ 0x50
 802bbfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bbfc:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bc00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bc02:	4413      	add	r3, r2
 802bc04:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802bc06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bc08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bc0a:	405a      	eors	r2, r3
 802bc0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bc0e:	401a      	ands	r2, r3
 802bc10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bc12:	405a      	eors	r2, r3
 802bc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802bc16:	441a      	add	r2, r3
 802bc18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bc1a:	441a      	add	r2, r3
 802bc1c:	4b37      	ldr	r3, [pc, #220]	@ (802bcfc <mbedtls_internal_md5_process+0x578>)
 802bc1e:	4413      	add	r3, r2
 802bc20:	657b      	str	r3, [r7, #84]	@ 0x54
 802bc22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bc24:	ea4f 6373 	mov.w	r3, r3, ror #25
 802bc28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bc2a:	4413      	add	r3, r2
 802bc2c:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802bc2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bc30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bc32:	405a      	eors	r2, r3
 802bc34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bc36:	401a      	ands	r2, r3
 802bc38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bc3a:	405a      	eors	r2, r3
 802bc3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802bc3e:	441a      	add	r2, r3
 802bc40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bc42:	441a      	add	r2, r3
 802bc44:	4b2e      	ldr	r3, [pc, #184]	@ (802bd00 <mbedtls_internal_md5_process+0x57c>)
 802bc46:	4413      	add	r3, r2
 802bc48:	64bb      	str	r3, [r7, #72]	@ 0x48
 802bc4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bc4c:	ea4f 5333 	mov.w	r3, r3, ror #20
 802bc50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bc52:	4413      	add	r3, r2
 802bc54:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802bc56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bc58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bc5a:	405a      	eors	r2, r3
 802bc5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bc5e:	401a      	ands	r2, r3
 802bc60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bc62:	405a      	eors	r2, r3
 802bc64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802bc66:	441a      	add	r2, r3
 802bc68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bc6a:	441a      	add	r2, r3
 802bc6c:	4b25      	ldr	r3, [pc, #148]	@ (802bd04 <mbedtls_internal_md5_process+0x580>)
 802bc6e:	4413      	add	r3, r2
 802bc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802bc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bc74:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802bc78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bc7a:	4413      	add	r3, r2
 802bc7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802bc7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bc80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bc82:	405a      	eors	r2, r3
 802bc84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bc86:	401a      	ands	r2, r3
 802bc88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bc8a:	405a      	eors	r2, r3
 802bc8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802bc8e:	441a      	add	r2, r3
 802bc90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bc92:	441a      	add	r2, r3
 802bc94:	4b1c      	ldr	r3, [pc, #112]	@ (802bd08 <mbedtls_internal_md5_process+0x584>)
 802bc96:	4413      	add	r3, r2
 802bc98:	653b      	str	r3, [r7, #80]	@ 0x50
 802bc9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bc9c:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bca0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bca2:	4413      	add	r3, r2
 802bca4:	653b      	str	r3, [r7, #80]	@ 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802bca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bcaa:	405a      	eors	r2, r3
 802bcac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bcae:	401a      	ands	r2, r3
 802bcb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bcb2:	405a      	eors	r2, r3
 802bcb4:	68fb      	ldr	r3, [r7, #12]
 802bcb6:	441a      	add	r2, r3
 802bcb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bcba:	441a      	add	r2, r3
 802bcbc:	4b13      	ldr	r3, [pc, #76]	@ (802bd0c <mbedtls_internal_md5_process+0x588>)
 802bcbe:	4413      	add	r3, r2
 802bcc0:	657b      	str	r3, [r7, #84]	@ 0x54
 802bcc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bcc4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bcc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bcca:	4413      	add	r3, r2
 802bccc:	e020      	b.n	802bd10 <mbedtls_internal_md5_process+0x58c>
 802bcce:	bf00      	nop
 802bcd0:	d76aa478 	.word	0xd76aa478
 802bcd4:	e8c7b756 	.word	0xe8c7b756
 802bcd8:	242070db 	.word	0x242070db
 802bcdc:	c1bdceee 	.word	0xc1bdceee
 802bce0:	f57c0faf 	.word	0xf57c0faf
 802bce4:	4787c62a 	.word	0x4787c62a
 802bce8:	a8304613 	.word	0xa8304613
 802bcec:	fd469501 	.word	0xfd469501
 802bcf0:	698098d8 	.word	0x698098d8
 802bcf4:	8b44f7af 	.word	0x8b44f7af
 802bcf8:	895cd7be 	.word	0x895cd7be
 802bcfc:	6b901122 	.word	0x6b901122
 802bd00:	fd987193 	.word	0xfd987193
 802bd04:	a679438e 	.word	0xa679438e
 802bd08:	49b40821 	.word	0x49b40821
 802bd0c:	f61e2562 	.word	0xf61e2562
 802bd10:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802bd12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bd14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bd16:	405a      	eors	r2, r3
 802bd18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bd1a:	401a      	ands	r2, r3
 802bd1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bd1e:	405a      	eors	r2, r3
 802bd20:	6a3b      	ldr	r3, [r7, #32]
 802bd22:	441a      	add	r2, r3
 802bd24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bd26:	441a      	add	r2, r3
 802bd28:	4ba4      	ldr	r3, [pc, #656]	@ (802bfbc <mbedtls_internal_md5_process+0x838>)
 802bd2a:	4413      	add	r3, r2
 802bd2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802bd2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bd30:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bd34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bd36:	4413      	add	r3, r2
 802bd38:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802bd3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bd3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bd3e:	405a      	eors	r2, r3
 802bd40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bd42:	401a      	ands	r2, r3
 802bd44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bd46:	405a      	eors	r2, r3
 802bd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802bd4a:	441a      	add	r2, r3
 802bd4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bd4e:	441a      	add	r2, r3
 802bd50:	4b9b      	ldr	r3, [pc, #620]	@ (802bfc0 <mbedtls_internal_md5_process+0x83c>)
 802bd52:	4413      	add	r3, r2
 802bd54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802bd56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bd58:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bd5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bd5e:	4413      	add	r3, r2
 802bd60:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802bd62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bd64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bd66:	405a      	eors	r2, r3
 802bd68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bd6a:	401a      	ands	r2, r3
 802bd6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bd6e:	405a      	eors	r2, r3
 802bd70:	68bb      	ldr	r3, [r7, #8]
 802bd72:	441a      	add	r2, r3
 802bd74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bd76:	441a      	add	r2, r3
 802bd78:	4b92      	ldr	r3, [pc, #584]	@ (802bfc4 <mbedtls_internal_md5_process+0x840>)
 802bd7a:	4413      	add	r3, r2
 802bd7c:	653b      	str	r3, [r7, #80]	@ 0x50
 802bd7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bd80:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bd84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bd86:	4413      	add	r3, r2
 802bd88:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802bd8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bd8e:	405a      	eors	r2, r3
 802bd90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bd92:	401a      	ands	r2, r3
 802bd94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bd96:	405a      	eors	r2, r3
 802bd98:	69fb      	ldr	r3, [r7, #28]
 802bd9a:	441a      	add	r2, r3
 802bd9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bd9e:	441a      	add	r2, r3
 802bda0:	4b89      	ldr	r3, [pc, #548]	@ (802bfc8 <mbedtls_internal_md5_process+0x844>)
 802bda2:	4413      	add	r3, r2
 802bda4:	657b      	str	r3, [r7, #84]	@ 0x54
 802bda6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bda8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bdac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bdae:	4413      	add	r3, r2
 802bdb0:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802bdb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bdb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bdb6:	405a      	eors	r2, r3
 802bdb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bdba:	401a      	ands	r2, r3
 802bdbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bdbe:	405a      	eors	r2, r3
 802bdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802bdc2:	441a      	add	r2, r3
 802bdc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bdc6:	441a      	add	r2, r3
 802bdc8:	4b80      	ldr	r3, [pc, #512]	@ (802bfcc <mbedtls_internal_md5_process+0x848>)
 802bdca:	4413      	add	r3, r2
 802bdcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 802bdce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bdd0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bdd4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bdd6:	4413      	add	r3, r2
 802bdd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802bdda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bdde:	405a      	eors	r2, r3
 802bde0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bde2:	401a      	ands	r2, r3
 802bde4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bde6:	405a      	eors	r2, r3
 802bde8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802bdea:	441a      	add	r2, r3
 802bdec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bdee:	441a      	add	r2, r3
 802bdf0:	4b77      	ldr	r3, [pc, #476]	@ (802bfd0 <mbedtls_internal_md5_process+0x84c>)
 802bdf2:	4413      	add	r3, r2
 802bdf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802bdf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bdf8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bdfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bdfe:	4413      	add	r3, r2
 802be00:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802be02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802be04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802be06:	405a      	eors	r2, r3
 802be08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802be0a:	401a      	ands	r2, r3
 802be0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802be0e:	405a      	eors	r2, r3
 802be10:	69bb      	ldr	r3, [r7, #24]
 802be12:	441a      	add	r2, r3
 802be14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802be16:	441a      	add	r2, r3
 802be18:	4b6e      	ldr	r3, [pc, #440]	@ (802bfd4 <mbedtls_internal_md5_process+0x850>)
 802be1a:	4413      	add	r3, r2
 802be1c:	653b      	str	r3, [r7, #80]	@ 0x50
 802be1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802be20:	ea4f 3333 	mov.w	r3, r3, ror #12
 802be24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802be26:	4413      	add	r3, r2
 802be28:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802be2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802be2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802be2e:	405a      	eors	r2, r3
 802be30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802be32:	401a      	ands	r2, r3
 802be34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802be36:	405a      	eors	r2, r3
 802be38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802be3a:	441a      	add	r2, r3
 802be3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802be3e:	441a      	add	r2, r3
 802be40:	4b65      	ldr	r3, [pc, #404]	@ (802bfd8 <mbedtls_internal_md5_process+0x854>)
 802be42:	4413      	add	r3, r2
 802be44:	657b      	str	r3, [r7, #84]	@ 0x54
 802be46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802be48:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802be4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802be4e:	4413      	add	r3, r2
 802be50:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802be52:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802be54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802be56:	405a      	eors	r2, r3
 802be58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802be5a:	401a      	ands	r2, r3
 802be5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802be5e:	405a      	eors	r2, r3
 802be60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802be62:	441a      	add	r2, r3
 802be64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802be66:	441a      	add	r2, r3
 802be68:	4b5c      	ldr	r3, [pc, #368]	@ (802bfdc <mbedtls_internal_md5_process+0x858>)
 802be6a:	4413      	add	r3, r2
 802be6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802be6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802be70:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802be74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802be76:	4413      	add	r3, r2
 802be78:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802be7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802be7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802be7e:	405a      	eors	r2, r3
 802be80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802be82:	401a      	ands	r2, r3
 802be84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802be86:	405a      	eors	r2, r3
 802be88:	697b      	ldr	r3, [r7, #20]
 802be8a:	441a      	add	r2, r3
 802be8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802be8e:	441a      	add	r2, r3
 802be90:	4b53      	ldr	r3, [pc, #332]	@ (802bfe0 <mbedtls_internal_md5_process+0x85c>)
 802be92:	4413      	add	r3, r2
 802be94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802be96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802be98:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802be9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802be9e:	4413      	add	r3, r2
 802bea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802bea2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bea6:	405a      	eors	r2, r3
 802bea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802beaa:	401a      	ands	r2, r3
 802beac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802beae:	405a      	eors	r2, r3
 802beb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802beb2:	441a      	add	r2, r3
 802beb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802beb6:	441a      	add	r2, r3
 802beb8:	4b4a      	ldr	r3, [pc, #296]	@ (802bfe4 <mbedtls_internal_md5_process+0x860>)
 802beba:	4413      	add	r3, r2
 802bebc:	653b      	str	r3, [r7, #80]	@ 0x50
 802bebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bec0:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bec4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bec6:	4413      	add	r3, r2
 802bec8:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802beca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802becc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bece:	405a      	eors	r2, r3
 802bed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bed2:	401a      	ands	r2, r3
 802bed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bed6:	405a      	eors	r2, r3
 802bed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802beda:	441a      	add	r2, r3
 802bedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bede:	441a      	add	r2, r3
 802bee0:	4b41      	ldr	r3, [pc, #260]	@ (802bfe8 <mbedtls_internal_md5_process+0x864>)
 802bee2:	4413      	add	r3, r2
 802bee4:	657b      	str	r3, [r7, #84]	@ 0x54
 802bee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bee8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802beec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802beee:	4413      	add	r3, r2
 802bef0:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802bef2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bef6:	405a      	eors	r2, r3
 802bef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802befa:	401a      	ands	r2, r3
 802befc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802befe:	405a      	eors	r2, r3
 802bf00:	693b      	ldr	r3, [r7, #16]
 802bf02:	441a      	add	r2, r3
 802bf04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bf06:	441a      	add	r2, r3
 802bf08:	4b38      	ldr	r3, [pc, #224]	@ (802bfec <mbedtls_internal_md5_process+0x868>)
 802bf0a:	4413      	add	r3, r2
 802bf0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802bf0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bf10:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bf14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bf16:	4413      	add	r3, r2
 802bf18:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802bf1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bf1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bf1e:	405a      	eors	r2, r3
 802bf20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bf22:	401a      	ands	r2, r3
 802bf24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bf26:	405a      	eors	r2, r3
 802bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802bf2a:	441a      	add	r2, r3
 802bf2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bf2e:	441a      	add	r2, r3
 802bf30:	4b2f      	ldr	r3, [pc, #188]	@ (802bff0 <mbedtls_internal_md5_process+0x86c>)
 802bf32:	4413      	add	r3, r2
 802bf34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802bf36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bf38:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bf3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bf3e:	4413      	add	r3, r2
 802bf40:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802bf42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bf44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bf46:	405a      	eors	r2, r3
 802bf48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bf4a:	401a      	ands	r2, r3
 802bf4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bf4e:	405a      	eors	r2, r3
 802bf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802bf52:	441a      	add	r2, r3
 802bf54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bf56:	441a      	add	r2, r3
 802bf58:	4b26      	ldr	r3, [pc, #152]	@ (802bff4 <mbedtls_internal_md5_process+0x870>)
 802bf5a:	4413      	add	r3, r2
 802bf5c:	653b      	str	r3, [r7, #80]	@ 0x50
 802bf5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bf60:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bf64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802bf66:	4413      	add	r3, r2
 802bf68:	653b      	str	r3, [r7, #80]	@ 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802bf6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bf6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bf6e:	405a      	eors	r2, r3
 802bf70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bf72:	405a      	eors	r2, r3
 802bf74:	69fb      	ldr	r3, [r7, #28]
 802bf76:	441a      	add	r2, r3
 802bf78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bf7a:	4413      	add	r3, r2
 802bf7c:	f5a3 23b8 	sub.w	r3, r3, #376832	@ 0x5c000
 802bf80:	f2a3 63be 	subw	r3, r3, #1726	@ 0x6be
 802bf84:	657b      	str	r3, [r7, #84]	@ 0x54
 802bf86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bf88:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bf8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802bf8e:	4413      	add	r3, r2
 802bf90:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802bf92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802bf96:	405a      	eors	r2, r3
 802bf98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802bf9a:	405a      	eors	r2, r3
 802bf9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802bf9e:	441a      	add	r2, r3
 802bfa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bfa2:	441a      	add	r2, r3
 802bfa4:	4b14      	ldr	r3, [pc, #80]	@ (802bff8 <mbedtls_internal_md5_process+0x874>)
 802bfa6:	4413      	add	r3, r2
 802bfa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 802bfaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802bfac:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bfb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802bfb2:	4413      	add	r3, r2
 802bfb4:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802bfb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802bfb8:	e020      	b.n	802bffc <mbedtls_internal_md5_process+0x878>
 802bfba:	bf00      	nop
 802bfbc:	c040b340 	.word	0xc040b340
 802bfc0:	265e5a51 	.word	0x265e5a51
 802bfc4:	e9b6c7aa 	.word	0xe9b6c7aa
 802bfc8:	d62f105d 	.word	0xd62f105d
 802bfcc:	02441453 	.word	0x02441453
 802bfd0:	d8a1e681 	.word	0xd8a1e681
 802bfd4:	e7d3fbc8 	.word	0xe7d3fbc8
 802bfd8:	21e1cde6 	.word	0x21e1cde6
 802bfdc:	c33707d6 	.word	0xc33707d6
 802bfe0:	f4d50d87 	.word	0xf4d50d87
 802bfe4:	455a14ed 	.word	0x455a14ed
 802bfe8:	a9e3e905 	.word	0xa9e3e905
 802bfec:	fcefa3f8 	.word	0xfcefa3f8
 802bff0:	676f02d9 	.word	0x676f02d9
 802bff4:	8d2a4c8a 	.word	0x8d2a4c8a
 802bff8:	8771f681 	.word	0x8771f681
 802bffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802bffe:	405a      	eors	r2, r3
 802c000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c002:	405a      	eors	r2, r3
 802c004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c006:	441a      	add	r2, r3
 802c008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c00a:	441a      	add	r2, r3
 802c00c:	4ba4      	ldr	r3, [pc, #656]	@ (802c2a0 <mbedtls_internal_md5_process+0xb1c>)
 802c00e:	4413      	add	r3, r2
 802c010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c014:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c01a:	4413      	add	r3, r2
 802c01c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802c01e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c022:	405a      	eors	r2, r3
 802c024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c026:	405a      	eors	r2, r3
 802c028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802c02a:	441a      	add	r2, r3
 802c02c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c02e:	441a      	add	r2, r3
 802c030:	4b9c      	ldr	r3, [pc, #624]	@ (802c2a4 <mbedtls_internal_md5_process+0xb20>)
 802c032:	4413      	add	r3, r2
 802c034:	653b      	str	r3, [r7, #80]	@ 0x50
 802c036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c038:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c03c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c03e:	4413      	add	r3, r2
 802c040:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802c042:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c046:	405a      	eors	r2, r3
 802c048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c04a:	405a      	eors	r2, r3
 802c04c:	68fb      	ldr	r3, [r7, #12]
 802c04e:	441a      	add	r2, r3
 802c050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c052:	441a      	add	r2, r3
 802c054:	4b94      	ldr	r3, [pc, #592]	@ (802c2a8 <mbedtls_internal_md5_process+0xb24>)
 802c056:	4413      	add	r3, r2
 802c058:	657b      	str	r3, [r7, #84]	@ 0x54
 802c05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c05c:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c060:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c062:	4413      	add	r3, r2
 802c064:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802c066:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c06a:	405a      	eors	r2, r3
 802c06c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c06e:	405a      	eors	r2, r3
 802c070:	69bb      	ldr	r3, [r7, #24]
 802c072:	441a      	add	r2, r3
 802c074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c076:	441a      	add	r2, r3
 802c078:	4b8c      	ldr	r3, [pc, #560]	@ (802c2ac <mbedtls_internal_md5_process+0xb28>)
 802c07a:	4413      	add	r3, r2
 802c07c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c07e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c080:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c084:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c086:	4413      	add	r3, r2
 802c088:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802c08a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c08c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c08e:	405a      	eors	r2, r3
 802c090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c092:	405a      	eors	r2, r3
 802c094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c096:	441a      	add	r2, r3
 802c098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c09a:	441a      	add	r2, r3
 802c09c:	4b84      	ldr	r3, [pc, #528]	@ (802c2b0 <mbedtls_internal_md5_process+0xb2c>)
 802c09e:	4413      	add	r3, r2
 802c0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c0a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c0a4:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c0a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c0aa:	4413      	add	r3, r2
 802c0ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802c0ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c0b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c0b2:	405a      	eors	r2, r3
 802c0b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c0b6:	405a      	eors	r2, r3
 802c0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c0ba:	441a      	add	r2, r3
 802c0bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c0be:	441a      	add	r2, r3
 802c0c0:	4b7c      	ldr	r3, [pc, #496]	@ (802c2b4 <mbedtls_internal_md5_process+0xb30>)
 802c0c2:	4413      	add	r3, r2
 802c0c4:	653b      	str	r3, [r7, #80]	@ 0x50
 802c0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c0c8:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c0cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c0ce:	4413      	add	r3, r2
 802c0d0:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802c0d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c0d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c0d6:	405a      	eors	r2, r3
 802c0d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c0da:	405a      	eors	r2, r3
 802c0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c0de:	441a      	add	r2, r3
 802c0e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c0e2:	441a      	add	r2, r3
 802c0e4:	4b74      	ldr	r3, [pc, #464]	@ (802c2b8 <mbedtls_internal_md5_process+0xb34>)
 802c0e6:	4413      	add	r3, r2
 802c0e8:	657b      	str	r3, [r7, #84]	@ 0x54
 802c0ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c0ec:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c0f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c0f2:	4413      	add	r3, r2
 802c0f4:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802c0f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c0fa:	405a      	eors	r2, r3
 802c0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c0fe:	405a      	eors	r2, r3
 802c100:	68bb      	ldr	r3, [r7, #8]
 802c102:	441a      	add	r2, r3
 802c104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c106:	441a      	add	r2, r3
 802c108:	4b6c      	ldr	r3, [pc, #432]	@ (802c2bc <mbedtls_internal_md5_process+0xb38>)
 802c10a:	4413      	add	r3, r2
 802c10c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c10e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c110:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c116:	4413      	add	r3, r2
 802c118:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802c11a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c11e:	405a      	eors	r2, r3
 802c120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c122:	405a      	eors	r2, r3
 802c124:	697b      	ldr	r3, [r7, #20]
 802c126:	441a      	add	r2, r3
 802c128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c12a:	441a      	add	r2, r3
 802c12c:	4b64      	ldr	r3, [pc, #400]	@ (802c2c0 <mbedtls_internal_md5_process+0xb3c>)
 802c12e:	4413      	add	r3, r2
 802c130:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c134:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c13a:	4413      	add	r3, r2
 802c13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802c13e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c142:	405a      	eors	r2, r3
 802c144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c146:	405a      	eors	r2, r3
 802c148:	6a3b      	ldr	r3, [r7, #32]
 802c14a:	441a      	add	r2, r3
 802c14c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c14e:	441a      	add	r2, r3
 802c150:	4b5c      	ldr	r3, [pc, #368]	@ (802c2c4 <mbedtls_internal_md5_process+0xb40>)
 802c152:	4413      	add	r3, r2
 802c154:	653b      	str	r3, [r7, #80]	@ 0x50
 802c156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c158:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c15c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c15e:	4413      	add	r3, r2
 802c160:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802c162:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c166:	405a      	eors	r2, r3
 802c168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c16a:	405a      	eors	r2, r3
 802c16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c16e:	441a      	add	r2, r3
 802c170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c172:	441a      	add	r2, r3
 802c174:	4b54      	ldr	r3, [pc, #336]	@ (802c2c8 <mbedtls_internal_md5_process+0xb44>)
 802c176:	4413      	add	r3, r2
 802c178:	657b      	str	r3, [r7, #84]	@ 0x54
 802c17a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c17c:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c180:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c182:	4413      	add	r3, r2
 802c184:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802c186:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c18a:	405a      	eors	r2, r3
 802c18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c18e:	405a      	eors	r2, r3
 802c190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802c192:	441a      	add	r2, r3
 802c194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c196:	441a      	add	r2, r3
 802c198:	4b4c      	ldr	r3, [pc, #304]	@ (802c2cc <mbedtls_internal_md5_process+0xb48>)
 802c19a:	4413      	add	r3, r2
 802c19c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c19e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c1a0:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c1a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c1a6:	4413      	add	r3, r2
 802c1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802c1aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c1ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c1ae:	405a      	eors	r2, r3
 802c1b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c1b2:	405a      	eors	r2, r3
 802c1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802c1b6:	441a      	add	r2, r3
 802c1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c1ba:	441a      	add	r2, r3
 802c1bc:	4b44      	ldr	r3, [pc, #272]	@ (802c2d0 <mbedtls_internal_md5_process+0xb4c>)
 802c1be:	4413      	add	r3, r2
 802c1c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c1c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c1c4:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c1c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c1ca:	4413      	add	r3, r2
 802c1cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802c1ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c1d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c1d2:	405a      	eors	r2, r3
 802c1d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c1d6:	405a      	eors	r2, r3
 802c1d8:	693b      	ldr	r3, [r7, #16]
 802c1da:	441a      	add	r2, r3
 802c1dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c1de:	441a      	add	r2, r3
 802c1e0:	4b3c      	ldr	r3, [pc, #240]	@ (802c2d4 <mbedtls_internal_md5_process+0xb50>)
 802c1e2:	4413      	add	r3, r2
 802c1e4:	653b      	str	r3, [r7, #80]	@ 0x50
 802c1e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c1e8:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c1ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c1ee:	4413      	add	r3, r2
 802c1f0:	653b      	str	r3, [r7, #80]	@ 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802c1f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c1f4:	43da      	mvns	r2, r3
 802c1f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c1f8:	431a      	orrs	r2, r3
 802c1fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c1fc:	405a      	eors	r2, r3
 802c1fe:	68bb      	ldr	r3, [r7, #8]
 802c200:	441a      	add	r2, r3
 802c202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c204:	441a      	add	r2, r3
 802c206:	4b34      	ldr	r3, [pc, #208]	@ (802c2d8 <mbedtls_internal_md5_process+0xb54>)
 802c208:	4413      	add	r3, r2
 802c20a:	657b      	str	r3, [r7, #84]	@ 0x54
 802c20c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c20e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c212:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c214:	4413      	add	r3, r2
 802c216:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802c218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c21a:	43da      	mvns	r2, r3
 802c21c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c21e:	431a      	orrs	r2, r3
 802c220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c222:	405a      	eors	r2, r3
 802c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802c226:	441a      	add	r2, r3
 802c228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c22a:	441a      	add	r2, r3
 802c22c:	4b2b      	ldr	r3, [pc, #172]	@ (802c2dc <mbedtls_internal_md5_process+0xb58>)
 802c22e:	4413      	add	r3, r2
 802c230:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c234:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c238:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c23a:	4413      	add	r3, r2
 802c23c:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802c23e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c240:	43da      	mvns	r2, r3
 802c242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c244:	431a      	orrs	r2, r3
 802c246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c248:	405a      	eors	r2, r3
 802c24a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802c24c:	441a      	add	r2, r3
 802c24e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c250:	441a      	add	r2, r3
 802c252:	4b23      	ldr	r3, [pc, #140]	@ (802c2e0 <mbedtls_internal_md5_process+0xb5c>)
 802c254:	4413      	add	r3, r2
 802c256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c25a:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c25e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c260:	4413      	add	r3, r2
 802c262:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802c264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c266:	43da      	mvns	r2, r3
 802c268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c26a:	431a      	orrs	r2, r3
 802c26c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c26e:	405a      	eors	r2, r3
 802c270:	69fb      	ldr	r3, [r7, #28]
 802c272:	441a      	add	r2, r3
 802c274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c276:	441a      	add	r2, r3
 802c278:	4b1a      	ldr	r3, [pc, #104]	@ (802c2e4 <mbedtls_internal_md5_process+0xb60>)
 802c27a:	4413      	add	r3, r2
 802c27c:	653b      	str	r3, [r7, #80]	@ 0x50
 802c27e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c280:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c284:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c286:	4413      	add	r3, r2
 802c288:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802c28a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c28c:	43da      	mvns	r2, r3
 802c28e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c290:	431a      	orrs	r2, r3
 802c292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c294:	405a      	eors	r2, r3
 802c296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802c298:	441a      	add	r2, r3
 802c29a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c29c:	e024      	b.n	802c2e8 <mbedtls_internal_md5_process+0xb64>
 802c29e:	bf00      	nop
 802c2a0:	6d9d6122 	.word	0x6d9d6122
 802c2a4:	fde5380c 	.word	0xfde5380c
 802c2a8:	a4beea44 	.word	0xa4beea44
 802c2ac:	4bdecfa9 	.word	0x4bdecfa9
 802c2b0:	f6bb4b60 	.word	0xf6bb4b60
 802c2b4:	bebfbc70 	.word	0xbebfbc70
 802c2b8:	289b7ec6 	.word	0x289b7ec6
 802c2bc:	eaa127fa 	.word	0xeaa127fa
 802c2c0:	d4ef3085 	.word	0xd4ef3085
 802c2c4:	04881d05 	.word	0x04881d05
 802c2c8:	d9d4d039 	.word	0xd9d4d039
 802c2cc:	e6db99e5 	.word	0xe6db99e5
 802c2d0:	1fa27cf8 	.word	0x1fa27cf8
 802c2d4:	c4ac5665 	.word	0xc4ac5665
 802c2d8:	f4292244 	.word	0xf4292244
 802c2dc:	432aff97 	.word	0x432aff97
 802c2e0:	ab9423a7 	.word	0xab9423a7
 802c2e4:	fc93a039 	.word	0xfc93a039
 802c2e8:	441a      	add	r2, r3
 802c2ea:	4b7d      	ldr	r3, [pc, #500]	@ (802c4e0 <mbedtls_internal_md5_process+0xd5c>)
 802c2ec:	4413      	add	r3, r2
 802c2ee:	657b      	str	r3, [r7, #84]	@ 0x54
 802c2f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c2f2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c2f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c2f8:	4413      	add	r3, r2
 802c2fa:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802c2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c2fe:	43da      	mvns	r2, r3
 802c300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c302:	431a      	orrs	r2, r3
 802c304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c306:	405a      	eors	r2, r3
 802c308:	697b      	ldr	r3, [r7, #20]
 802c30a:	441a      	add	r2, r3
 802c30c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c30e:	441a      	add	r2, r3
 802c310:	4b74      	ldr	r3, [pc, #464]	@ (802c4e4 <mbedtls_internal_md5_process+0xd60>)
 802c312:	4413      	add	r3, r2
 802c314:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c318:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c31c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c31e:	4413      	add	r3, r2
 802c320:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802c322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c324:	43da      	mvns	r2, r3
 802c326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c328:	431a      	orrs	r2, r3
 802c32a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c32c:	405a      	eors	r2, r3
 802c32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802c330:	441a      	add	r2, r3
 802c332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c334:	4413      	add	r3, r2
 802c336:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802c33a:	f6a3 3383 	subw	r3, r3, #2947	@ 0xb83
 802c33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c342:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c348:	4413      	add	r3, r2
 802c34a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802c34c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c34e:	43da      	mvns	r2, r3
 802c350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c352:	431a      	orrs	r2, r3
 802c354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c356:	405a      	eors	r2, r3
 802c358:	68fb      	ldr	r3, [r7, #12]
 802c35a:	441a      	add	r2, r3
 802c35c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c35e:	441a      	add	r2, r3
 802c360:	4b61      	ldr	r3, [pc, #388]	@ (802c4e8 <mbedtls_internal_md5_process+0xd64>)
 802c362:	4413      	add	r3, r2
 802c364:	653b      	str	r3, [r7, #80]	@ 0x50
 802c366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c368:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c36c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c36e:	4413      	add	r3, r2
 802c370:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802c372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c374:	43da      	mvns	r2, r3
 802c376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c378:	431a      	orrs	r2, r3
 802c37a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c37c:	405a      	eors	r2, r3
 802c37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802c380:	441a      	add	r2, r3
 802c382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c384:	441a      	add	r2, r3
 802c386:	4b59      	ldr	r3, [pc, #356]	@ (802c4ec <mbedtls_internal_md5_process+0xd68>)
 802c388:	4413      	add	r3, r2
 802c38a:	657b      	str	r3, [r7, #84]	@ 0x54
 802c38c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c38e:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c392:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c394:	4413      	add	r3, r2
 802c396:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802c398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c39a:	43da      	mvns	r2, r3
 802c39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c39e:	431a      	orrs	r2, r3
 802c3a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c3a2:	405a      	eors	r2, r3
 802c3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802c3a6:	441a      	add	r2, r3
 802c3a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c3aa:	441a      	add	r2, r3
 802c3ac:	4b50      	ldr	r3, [pc, #320]	@ (802c4f0 <mbedtls_internal_md5_process+0xd6c>)
 802c3ae:	4413      	add	r3, r2
 802c3b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c3b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c3b4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c3b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c3ba:	4413      	add	r3, r2
 802c3bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802c3be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c3c0:	43da      	mvns	r2, r3
 802c3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c3c4:	431a      	orrs	r2, r3
 802c3c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c3c8:	405a      	eors	r2, r3
 802c3ca:	6a3b      	ldr	r3, [r7, #32]
 802c3cc:	441a      	add	r2, r3
 802c3ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c3d0:	441a      	add	r2, r3
 802c3d2:	4b48      	ldr	r3, [pc, #288]	@ (802c4f4 <mbedtls_internal_md5_process+0xd70>)
 802c3d4:	4413      	add	r3, r2
 802c3d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c3d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c3da:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c3de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c3e0:	4413      	add	r3, r2
 802c3e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802c3e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c3e6:	43da      	mvns	r2, r3
 802c3e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c3ea:	431a      	orrs	r2, r3
 802c3ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c3ee:	405a      	eors	r2, r3
 802c3f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802c3f2:	441a      	add	r2, r3
 802c3f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c3f6:	441a      	add	r2, r3
 802c3f8:	4b3f      	ldr	r3, [pc, #252]	@ (802c4f8 <mbedtls_internal_md5_process+0xd74>)
 802c3fa:	4413      	add	r3, r2
 802c3fc:	653b      	str	r3, [r7, #80]	@ 0x50
 802c3fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c400:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c406:	4413      	add	r3, r2
 802c408:	653b      	str	r3, [r7, #80]	@ 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802c40a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c40c:	43da      	mvns	r2, r3
 802c40e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c410:	431a      	orrs	r2, r3
 802c412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c414:	405a      	eors	r2, r3
 802c416:	69bb      	ldr	r3, [r7, #24]
 802c418:	441a      	add	r2, r3
 802c41a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c41c:	441a      	add	r2, r3
 802c41e:	4b37      	ldr	r3, [pc, #220]	@ (802c4fc <mbedtls_internal_md5_process+0xd78>)
 802c420:	4413      	add	r3, r2
 802c422:	657b      	str	r3, [r7, #84]	@ 0x54
 802c424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c426:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c42a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 802c42c:	4413      	add	r3, r2
 802c42e:	657b      	str	r3, [r7, #84]	@ 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802c430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c432:	43da      	mvns	r2, r3
 802c434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c436:	431a      	orrs	r2, r3
 802c438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c43a:	405a      	eors	r2, r3
 802c43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802c43e:	441a      	add	r2, r3
 802c440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c442:	441a      	add	r2, r3
 802c444:	4b2e      	ldr	r3, [pc, #184]	@ (802c500 <mbedtls_internal_md5_process+0xd7c>)
 802c446:	4413      	add	r3, r2
 802c448:	64bb      	str	r3, [r7, #72]	@ 0x48
 802c44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c44c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c450:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802c452:	4413      	add	r3, r2
 802c454:	64bb      	str	r3, [r7, #72]	@ 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802c456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c458:	43da      	mvns	r2, r3
 802c45a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c45c:	431a      	orrs	r2, r3
 802c45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c460:	405a      	eors	r2, r3
 802c462:	693b      	ldr	r3, [r7, #16]
 802c464:	441a      	add	r2, r3
 802c466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c468:	441a      	add	r2, r3
 802c46a:	4b26      	ldr	r3, [pc, #152]	@ (802c504 <mbedtls_internal_md5_process+0xd80>)
 802c46c:	4413      	add	r3, r2
 802c46e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802c470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c472:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802c478:	4413      	add	r3, r2
 802c47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802c47c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c47e:	43da      	mvns	r2, r3
 802c480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c482:	431a      	orrs	r2, r3
 802c484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c486:	405a      	eors	r2, r3
 802c488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802c48a:	441a      	add	r2, r3
 802c48c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c48e:	441a      	add	r2, r3
 802c490:	4b1d      	ldr	r3, [pc, #116]	@ (802c508 <mbedtls_internal_md5_process+0xd84>)
 802c492:	4413      	add	r3, r2
 802c494:	653b      	str	r3, [r7, #80]	@ 0x50
 802c496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c498:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c49c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 802c49e:	4413      	add	r3, r2
 802c4a0:	653b      	str	r3, [r7, #80]	@ 0x50

#undef F

    ctx->state[0] += A;
 802c4a2:	687b      	ldr	r3, [r7, #4]
 802c4a4:	689a      	ldr	r2, [r3, #8]
 802c4a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802c4a8:	441a      	add	r2, r3
 802c4aa:	687b      	ldr	r3, [r7, #4]
 802c4ac:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802c4ae:	687b      	ldr	r3, [r7, #4]
 802c4b0:	68da      	ldr	r2, [r3, #12]
 802c4b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802c4b4:	441a      	add	r2, r3
 802c4b6:	687b      	ldr	r3, [r7, #4]
 802c4b8:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802c4ba:	687b      	ldr	r3, [r7, #4]
 802c4bc:	691a      	ldr	r2, [r3, #16]
 802c4be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802c4c0:	441a      	add	r2, r3
 802c4c2:	687b      	ldr	r3, [r7, #4]
 802c4c4:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802c4c6:	687b      	ldr	r3, [r7, #4]
 802c4c8:	695a      	ldr	r2, [r3, #20]
 802c4ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802c4cc:	441a      	add	r2, r3
 802c4ce:	687b      	ldr	r3, [r7, #4]
 802c4d0:	615a      	str	r2, [r3, #20]

    return( 0 );
 802c4d2:	2300      	movs	r3, #0
}
 802c4d4:	4618      	mov	r0, r3
 802c4d6:	375c      	adds	r7, #92	@ 0x5c
 802c4d8:	46bd      	mov	sp, r7
 802c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c4de:	4770      	bx	lr
 802c4e0:	655b59c3 	.word	0x655b59c3
 802c4e4:	8f0ccc92 	.word	0x8f0ccc92
 802c4e8:	85845dd1 	.word	0x85845dd1
 802c4ec:	6fa87e4f 	.word	0x6fa87e4f
 802c4f0:	fe2ce6e0 	.word	0xfe2ce6e0
 802c4f4:	a3014314 	.word	0xa3014314
 802c4f8:	4e0811a1 	.word	0x4e0811a1
 802c4fc:	f7537e82 	.word	0xf7537e82
 802c500:	bd3af235 	.word	0xbd3af235
 802c504:	2ad7d2bb 	.word	0x2ad7d2bb
 802c508:	eb86d391 	.word	0xeb86d391

0802c50c <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802c50c:	b580      	push	{r7, lr}
 802c50e:	b088      	sub	sp, #32
 802c510:	af00      	add	r7, sp, #0
 802c512:	60f8      	str	r0, [r7, #12]
 802c514:	60b9      	str	r1, [r7, #8]
 802c516:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802c518:	687b      	ldr	r3, [r7, #4]
 802c51a:	2b00      	cmp	r3, #0
 802c51c:	d101      	bne.n	802c522 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802c51e:	2300      	movs	r3, #0
 802c520:	e065      	b.n	802c5ee <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802c522:	68fb      	ldr	r3, [r7, #12]
 802c524:	681b      	ldr	r3, [r3, #0]
 802c526:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802c52a:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802c52c:	69fb      	ldr	r3, [r7, #28]
 802c52e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 802c532:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802c534:	68fb      	ldr	r3, [r7, #12]
 802c536:	681a      	ldr	r2, [r3, #0]
 802c538:	687b      	ldr	r3, [r7, #4]
 802c53a:	441a      	add	r2, r3
 802c53c:	68fb      	ldr	r3, [r7, #12]
 802c53e:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802c540:	68fb      	ldr	r3, [r7, #12]
 802c542:	681a      	ldr	r2, [r3, #0]
 802c544:	68fb      	ldr	r3, [r7, #12]
 802c546:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802c548:	68fb      	ldr	r3, [r7, #12]
 802c54a:	681b      	ldr	r3, [r3, #0]
 802c54c:	687a      	ldr	r2, [r7, #4]
 802c54e:	429a      	cmp	r2, r3
 802c550:	d904      	bls.n	802c55c <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802c552:	68fb      	ldr	r3, [r7, #12]
 802c554:	685b      	ldr	r3, [r3, #4]
 802c556:	1c5a      	adds	r2, r3, #1
 802c558:	68fb      	ldr	r3, [r7, #12]
 802c55a:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802c55c:	69fb      	ldr	r3, [r7, #28]
 802c55e:	2b00      	cmp	r3, #0
 802c560:	d034      	beq.n	802c5cc <mbedtls_md5_update_ret+0xc0>
 802c562:	687a      	ldr	r2, [r7, #4]
 802c564:	69bb      	ldr	r3, [r7, #24]
 802c566:	429a      	cmp	r2, r3
 802c568:	d330      	bcc.n	802c5cc <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802c56a:	68fb      	ldr	r3, [r7, #12]
 802c56c:	f103 0218 	add.w	r2, r3, #24
 802c570:	69fb      	ldr	r3, [r7, #28]
 802c572:	4413      	add	r3, r2
 802c574:	69ba      	ldr	r2, [r7, #24]
 802c576:	68b9      	ldr	r1, [r7, #8]
 802c578:	4618      	mov	r0, r3
 802c57a:	f001 fcde 	bl	802df3a <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c57e:	68fb      	ldr	r3, [r7, #12]
 802c580:	3318      	adds	r3, #24
 802c582:	4619      	mov	r1, r3
 802c584:	68f8      	ldr	r0, [r7, #12]
 802c586:	f7ff f8fd 	bl	802b784 <mbedtls_internal_md5_process>
 802c58a:	6178      	str	r0, [r7, #20]
 802c58c:	697b      	ldr	r3, [r7, #20]
 802c58e:	2b00      	cmp	r3, #0
 802c590:	d001      	beq.n	802c596 <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802c592:	697b      	ldr	r3, [r7, #20]
 802c594:	e02b      	b.n	802c5ee <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802c596:	68ba      	ldr	r2, [r7, #8]
 802c598:	69bb      	ldr	r3, [r7, #24]
 802c59a:	4413      	add	r3, r2
 802c59c:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802c59e:	687a      	ldr	r2, [r7, #4]
 802c5a0:	69bb      	ldr	r3, [r7, #24]
 802c5a2:	1ad3      	subs	r3, r2, r3
 802c5a4:	607b      	str	r3, [r7, #4]
        left = 0;
 802c5a6:	2300      	movs	r3, #0
 802c5a8:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802c5aa:	e00f      	b.n	802c5cc <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802c5ac:	68b9      	ldr	r1, [r7, #8]
 802c5ae:	68f8      	ldr	r0, [r7, #12]
 802c5b0:	f7ff f8e8 	bl	802b784 <mbedtls_internal_md5_process>
 802c5b4:	6178      	str	r0, [r7, #20]
 802c5b6:	697b      	ldr	r3, [r7, #20]
 802c5b8:	2b00      	cmp	r3, #0
 802c5ba:	d001      	beq.n	802c5c0 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802c5bc:	697b      	ldr	r3, [r7, #20]
 802c5be:	e016      	b.n	802c5ee <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802c5c0:	68bb      	ldr	r3, [r7, #8]
 802c5c2:	3340      	adds	r3, #64	@ 0x40
 802c5c4:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802c5c6:	687b      	ldr	r3, [r7, #4]
 802c5c8:	3b40      	subs	r3, #64	@ 0x40
 802c5ca:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802c5cc:	687b      	ldr	r3, [r7, #4]
 802c5ce:	2b3f      	cmp	r3, #63	@ 0x3f
 802c5d0:	d8ec      	bhi.n	802c5ac <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802c5d2:	687b      	ldr	r3, [r7, #4]
 802c5d4:	2b00      	cmp	r3, #0
 802c5d6:	d009      	beq.n	802c5ec <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802c5d8:	68fb      	ldr	r3, [r7, #12]
 802c5da:	f103 0218 	add.w	r2, r3, #24
 802c5de:	69fb      	ldr	r3, [r7, #28]
 802c5e0:	4413      	add	r3, r2
 802c5e2:	687a      	ldr	r2, [r7, #4]
 802c5e4:	68b9      	ldr	r1, [r7, #8]
 802c5e6:	4618      	mov	r0, r3
 802c5e8:	f001 fca7 	bl	802df3a <memcpy>
    }

    return( 0 );
 802c5ec:	2300      	movs	r3, #0
}
 802c5ee:	4618      	mov	r0, r3
 802c5f0:	3720      	adds	r7, #32
 802c5f2:	46bd      	mov	sp, r7
 802c5f4:	bd80      	pop	{r7, pc}

0802c5f6 <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802c5f6:	b580      	push	{r7, lr}
 802c5f8:	b086      	sub	sp, #24
 802c5fa:	af00      	add	r7, sp, #0
 802c5fc:	6078      	str	r0, [r7, #4]
 802c5fe:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802c600:	687b      	ldr	r3, [r7, #4]
 802c602:	681b      	ldr	r3, [r3, #0]
 802c604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802c608:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802c60a:	697b      	ldr	r3, [r7, #20]
 802c60c:	1c5a      	adds	r2, r3, #1
 802c60e:	617a      	str	r2, [r7, #20]
 802c610:	687a      	ldr	r2, [r7, #4]
 802c612:	4413      	add	r3, r2
 802c614:	2280      	movs	r2, #128	@ 0x80
 802c616:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802c618:	697b      	ldr	r3, [r7, #20]
 802c61a:	2b38      	cmp	r3, #56	@ 0x38
 802c61c:	d80c      	bhi.n	802c638 <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802c61e:	687b      	ldr	r3, [r7, #4]
 802c620:	f103 0218 	add.w	r2, r3, #24
 802c624:	697b      	ldr	r3, [r7, #20]
 802c626:	18d0      	adds	r0, r2, r3
 802c628:	697b      	ldr	r3, [r7, #20]
 802c62a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 802c62e:	461a      	mov	r2, r3
 802c630:	2100      	movs	r1, #0
 802c632:	f001 faad 	bl	802db90 <memset>
 802c636:	e01e      	b.n	802c676 <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802c638:	687b      	ldr	r3, [r7, #4]
 802c63a:	f103 0218 	add.w	r2, r3, #24
 802c63e:	697b      	ldr	r3, [r7, #20]
 802c640:	18d0      	adds	r0, r2, r3
 802c642:	697b      	ldr	r3, [r7, #20]
 802c644:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 802c648:	461a      	mov	r2, r3
 802c64a:	2100      	movs	r1, #0
 802c64c:	f001 faa0 	bl	802db90 <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c650:	687b      	ldr	r3, [r7, #4]
 802c652:	3318      	adds	r3, #24
 802c654:	4619      	mov	r1, r3
 802c656:	6878      	ldr	r0, [r7, #4]
 802c658:	f7ff f894 	bl	802b784 <mbedtls_internal_md5_process>
 802c65c:	6138      	str	r0, [r7, #16]
 802c65e:	693b      	ldr	r3, [r7, #16]
 802c660:	2b00      	cmp	r3, #0
 802c662:	d001      	beq.n	802c668 <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802c664:	693b      	ldr	r3, [r7, #16]
 802c666:	e0b8      	b.n	802c7da <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802c668:	687b      	ldr	r3, [r7, #4]
 802c66a:	3318      	adds	r3, #24
 802c66c:	2238      	movs	r2, #56	@ 0x38
 802c66e:	2100      	movs	r1, #0
 802c670:	4618      	mov	r0, r3
 802c672:	f001 fa8d 	bl	802db90 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802c676:	687b      	ldr	r3, [r7, #4]
 802c678:	681b      	ldr	r3, [r3, #0]
 802c67a:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802c67c:	687b      	ldr	r3, [r7, #4]
 802c67e:	685b      	ldr	r3, [r3, #4]
 802c680:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802c682:	4313      	orrs	r3, r2
 802c684:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802c686:	687b      	ldr	r3, [r7, #4]
 802c688:	681b      	ldr	r3, [r3, #0]
 802c68a:	00db      	lsls	r3, r3, #3
 802c68c:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802c68e:	68bb      	ldr	r3, [r7, #8]
 802c690:	b2da      	uxtb	r2, r3
 802c692:	687b      	ldr	r3, [r7, #4]
 802c694:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 802c698:	68bb      	ldr	r3, [r7, #8]
 802c69a:	0a1b      	lsrs	r3, r3, #8
 802c69c:	b2da      	uxtb	r2, r3
 802c69e:	687b      	ldr	r3, [r7, #4]
 802c6a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 802c6a4:	68bb      	ldr	r3, [r7, #8]
 802c6a6:	0c1b      	lsrs	r3, r3, #16
 802c6a8:	b2da      	uxtb	r2, r3
 802c6aa:	687b      	ldr	r3, [r7, #4]
 802c6ac:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 802c6b0:	68bb      	ldr	r3, [r7, #8]
 802c6b2:	0e1b      	lsrs	r3, r3, #24
 802c6b4:	b2da      	uxtb	r2, r3
 802c6b6:	687b      	ldr	r3, [r7, #4]
 802c6b8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802c6bc:	68fb      	ldr	r3, [r7, #12]
 802c6be:	b2da      	uxtb	r2, r3
 802c6c0:	687b      	ldr	r3, [r7, #4]
 802c6c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 802c6c6:	68fb      	ldr	r3, [r7, #12]
 802c6c8:	0a1b      	lsrs	r3, r3, #8
 802c6ca:	b2da      	uxtb	r2, r3
 802c6cc:	687b      	ldr	r3, [r7, #4]
 802c6ce:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 802c6d2:	68fb      	ldr	r3, [r7, #12]
 802c6d4:	0c1b      	lsrs	r3, r3, #16
 802c6d6:	b2da      	uxtb	r2, r3
 802c6d8:	687b      	ldr	r3, [r7, #4]
 802c6da:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
 802c6de:	68fb      	ldr	r3, [r7, #12]
 802c6e0:	0e1b      	lsrs	r3, r3, #24
 802c6e2:	b2da      	uxtb	r2, r3
 802c6e4:	687b      	ldr	r3, [r7, #4]
 802c6e6:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c6ea:	687b      	ldr	r3, [r7, #4]
 802c6ec:	3318      	adds	r3, #24
 802c6ee:	4619      	mov	r1, r3
 802c6f0:	6878      	ldr	r0, [r7, #4]
 802c6f2:	f7ff f847 	bl	802b784 <mbedtls_internal_md5_process>
 802c6f6:	6138      	str	r0, [r7, #16]
 802c6f8:	693b      	ldr	r3, [r7, #16]
 802c6fa:	2b00      	cmp	r3, #0
 802c6fc:	d001      	beq.n	802c702 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802c6fe:	693b      	ldr	r3, [r7, #16]
 802c700:	e06b      	b.n	802c7da <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802c702:	687b      	ldr	r3, [r7, #4]
 802c704:	689b      	ldr	r3, [r3, #8]
 802c706:	b2da      	uxtb	r2, r3
 802c708:	683b      	ldr	r3, [r7, #0]
 802c70a:	701a      	strb	r2, [r3, #0]
 802c70c:	687b      	ldr	r3, [r7, #4]
 802c70e:	689b      	ldr	r3, [r3, #8]
 802c710:	0a1a      	lsrs	r2, r3, #8
 802c712:	683b      	ldr	r3, [r7, #0]
 802c714:	3301      	adds	r3, #1
 802c716:	b2d2      	uxtb	r2, r2
 802c718:	701a      	strb	r2, [r3, #0]
 802c71a:	687b      	ldr	r3, [r7, #4]
 802c71c:	689b      	ldr	r3, [r3, #8]
 802c71e:	0c1a      	lsrs	r2, r3, #16
 802c720:	683b      	ldr	r3, [r7, #0]
 802c722:	3302      	adds	r3, #2
 802c724:	b2d2      	uxtb	r2, r2
 802c726:	701a      	strb	r2, [r3, #0]
 802c728:	687b      	ldr	r3, [r7, #4]
 802c72a:	689b      	ldr	r3, [r3, #8]
 802c72c:	0e1a      	lsrs	r2, r3, #24
 802c72e:	683b      	ldr	r3, [r7, #0]
 802c730:	3303      	adds	r3, #3
 802c732:	b2d2      	uxtb	r2, r2
 802c734:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802c736:	687b      	ldr	r3, [r7, #4]
 802c738:	68da      	ldr	r2, [r3, #12]
 802c73a:	683b      	ldr	r3, [r7, #0]
 802c73c:	3304      	adds	r3, #4
 802c73e:	b2d2      	uxtb	r2, r2
 802c740:	701a      	strb	r2, [r3, #0]
 802c742:	687b      	ldr	r3, [r7, #4]
 802c744:	68db      	ldr	r3, [r3, #12]
 802c746:	0a1a      	lsrs	r2, r3, #8
 802c748:	683b      	ldr	r3, [r7, #0]
 802c74a:	3305      	adds	r3, #5
 802c74c:	b2d2      	uxtb	r2, r2
 802c74e:	701a      	strb	r2, [r3, #0]
 802c750:	687b      	ldr	r3, [r7, #4]
 802c752:	68db      	ldr	r3, [r3, #12]
 802c754:	0c1a      	lsrs	r2, r3, #16
 802c756:	683b      	ldr	r3, [r7, #0]
 802c758:	3306      	adds	r3, #6
 802c75a:	b2d2      	uxtb	r2, r2
 802c75c:	701a      	strb	r2, [r3, #0]
 802c75e:	687b      	ldr	r3, [r7, #4]
 802c760:	68db      	ldr	r3, [r3, #12]
 802c762:	0e1a      	lsrs	r2, r3, #24
 802c764:	683b      	ldr	r3, [r7, #0]
 802c766:	3307      	adds	r3, #7
 802c768:	b2d2      	uxtb	r2, r2
 802c76a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802c76c:	687b      	ldr	r3, [r7, #4]
 802c76e:	691a      	ldr	r2, [r3, #16]
 802c770:	683b      	ldr	r3, [r7, #0]
 802c772:	3308      	adds	r3, #8
 802c774:	b2d2      	uxtb	r2, r2
 802c776:	701a      	strb	r2, [r3, #0]
 802c778:	687b      	ldr	r3, [r7, #4]
 802c77a:	691b      	ldr	r3, [r3, #16]
 802c77c:	0a1a      	lsrs	r2, r3, #8
 802c77e:	683b      	ldr	r3, [r7, #0]
 802c780:	3309      	adds	r3, #9
 802c782:	b2d2      	uxtb	r2, r2
 802c784:	701a      	strb	r2, [r3, #0]
 802c786:	687b      	ldr	r3, [r7, #4]
 802c788:	691b      	ldr	r3, [r3, #16]
 802c78a:	0c1a      	lsrs	r2, r3, #16
 802c78c:	683b      	ldr	r3, [r7, #0]
 802c78e:	330a      	adds	r3, #10
 802c790:	b2d2      	uxtb	r2, r2
 802c792:	701a      	strb	r2, [r3, #0]
 802c794:	687b      	ldr	r3, [r7, #4]
 802c796:	691b      	ldr	r3, [r3, #16]
 802c798:	0e1a      	lsrs	r2, r3, #24
 802c79a:	683b      	ldr	r3, [r7, #0]
 802c79c:	330b      	adds	r3, #11
 802c79e:	b2d2      	uxtb	r2, r2
 802c7a0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802c7a2:	687b      	ldr	r3, [r7, #4]
 802c7a4:	695a      	ldr	r2, [r3, #20]
 802c7a6:	683b      	ldr	r3, [r7, #0]
 802c7a8:	330c      	adds	r3, #12
 802c7aa:	b2d2      	uxtb	r2, r2
 802c7ac:	701a      	strb	r2, [r3, #0]
 802c7ae:	687b      	ldr	r3, [r7, #4]
 802c7b0:	695b      	ldr	r3, [r3, #20]
 802c7b2:	0a1a      	lsrs	r2, r3, #8
 802c7b4:	683b      	ldr	r3, [r7, #0]
 802c7b6:	330d      	adds	r3, #13
 802c7b8:	b2d2      	uxtb	r2, r2
 802c7ba:	701a      	strb	r2, [r3, #0]
 802c7bc:	687b      	ldr	r3, [r7, #4]
 802c7be:	695b      	ldr	r3, [r3, #20]
 802c7c0:	0c1a      	lsrs	r2, r3, #16
 802c7c2:	683b      	ldr	r3, [r7, #0]
 802c7c4:	330e      	adds	r3, #14
 802c7c6:	b2d2      	uxtb	r2, r2
 802c7c8:	701a      	strb	r2, [r3, #0]
 802c7ca:	687b      	ldr	r3, [r7, #4]
 802c7cc:	695b      	ldr	r3, [r3, #20]
 802c7ce:	0e1a      	lsrs	r2, r3, #24
 802c7d0:	683b      	ldr	r3, [r7, #0]
 802c7d2:	330f      	adds	r3, #15
 802c7d4:	b2d2      	uxtb	r2, r2
 802c7d6:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802c7d8:	2300      	movs	r3, #0
}
 802c7da:	4618      	mov	r0, r3
 802c7dc:	3718      	adds	r7, #24
 802c7de:	46bd      	mov	sp, r7
 802c7e0:	bd80      	pop	{r7, pc}
	...

0802c7e4 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802c7e4:	b580      	push	{r7, lr}
 802c7e6:	b082      	sub	sp, #8
 802c7e8:	af00      	add	r7, sp, #0
 802c7ea:	6078      	str	r0, [r7, #4]
 802c7ec:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802c7ee:	4b05      	ldr	r3, [pc, #20]	@ (802c804 <mbedtls_platform_zeroize+0x20>)
 802c7f0:	681b      	ldr	r3, [r3, #0]
 802c7f2:	683a      	ldr	r2, [r7, #0]
 802c7f4:	2100      	movs	r1, #0
 802c7f6:	6878      	ldr	r0, [r7, #4]
 802c7f8:	4798      	blx	r3
}
 802c7fa:	bf00      	nop
 802c7fc:	3708      	adds	r7, #8
 802c7fe:	46bd      	mov	sp, r7
 802c800:	bd80      	pop	{r7, pc}
 802c802:	bf00      	nop
 802c804:	2000012c 	.word	0x2000012c

0802c808 <__assert_func>:
 802c808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c80a:	4614      	mov	r4, r2
 802c80c:	461a      	mov	r2, r3
 802c80e:	4b09      	ldr	r3, [pc, #36]	@ (802c834 <__assert_func+0x2c>)
 802c810:	681b      	ldr	r3, [r3, #0]
 802c812:	4605      	mov	r5, r0
 802c814:	68d8      	ldr	r0, [r3, #12]
 802c816:	b954      	cbnz	r4, 802c82e <__assert_func+0x26>
 802c818:	4b07      	ldr	r3, [pc, #28]	@ (802c838 <__assert_func+0x30>)
 802c81a:	461c      	mov	r4, r3
 802c81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c820:	9100      	str	r1, [sp, #0]
 802c822:	462b      	mov	r3, r5
 802c824:	4905      	ldr	r1, [pc, #20]	@ (802c83c <__assert_func+0x34>)
 802c826:	f000 ffef 	bl	802d808 <fiprintf>
 802c82a:	f001 fb9b 	bl	802df64 <abort>
 802c82e:	4b04      	ldr	r3, [pc, #16]	@ (802c840 <__assert_func+0x38>)
 802c830:	e7f4      	b.n	802c81c <__assert_func+0x14>
 802c832:	bf00      	nop
 802c834:	2000013c 	.word	0x2000013c
 802c838:	08034d4b 	.word	0x08034d4b
 802c83c:	08034d1d 	.word	0x08034d1d
 802c840:	08034d10 	.word	0x08034d10

0802c844 <_calloc_r>:
 802c844:	b570      	push	{r4, r5, r6, lr}
 802c846:	fba1 5402 	umull	r5, r4, r1, r2
 802c84a:	b93c      	cbnz	r4, 802c85c <_calloc_r+0x18>
 802c84c:	4629      	mov	r1, r5
 802c84e:	f000 f83f 	bl	802c8d0 <_malloc_r>
 802c852:	4606      	mov	r6, r0
 802c854:	b928      	cbnz	r0, 802c862 <_calloc_r+0x1e>
 802c856:	2600      	movs	r6, #0
 802c858:	4630      	mov	r0, r6
 802c85a:	bd70      	pop	{r4, r5, r6, pc}
 802c85c:	220c      	movs	r2, #12
 802c85e:	6002      	str	r2, [r0, #0]
 802c860:	e7f9      	b.n	802c856 <_calloc_r+0x12>
 802c862:	462a      	mov	r2, r5
 802c864:	4621      	mov	r1, r4
 802c866:	f001 f993 	bl	802db90 <memset>
 802c86a:	e7f5      	b.n	802c858 <_calloc_r+0x14>

0802c86c <malloc>:
 802c86c:	4b02      	ldr	r3, [pc, #8]	@ (802c878 <malloc+0xc>)
 802c86e:	4601      	mov	r1, r0
 802c870:	6818      	ldr	r0, [r3, #0]
 802c872:	f000 b82d 	b.w	802c8d0 <_malloc_r>
 802c876:	bf00      	nop
 802c878:	2000013c 	.word	0x2000013c

0802c87c <free>:
 802c87c:	4b02      	ldr	r3, [pc, #8]	@ (802c888 <free+0xc>)
 802c87e:	4601      	mov	r1, r0
 802c880:	6818      	ldr	r0, [r3, #0]
 802c882:	f002 b9c5 	b.w	802ec10 <_free_r>
 802c886:	bf00      	nop
 802c888:	2000013c 	.word	0x2000013c

0802c88c <sbrk_aligned>:
 802c88c:	b570      	push	{r4, r5, r6, lr}
 802c88e:	4e0f      	ldr	r6, [pc, #60]	@ (802c8cc <sbrk_aligned+0x40>)
 802c890:	460c      	mov	r4, r1
 802c892:	6831      	ldr	r1, [r6, #0]
 802c894:	4605      	mov	r5, r0
 802c896:	b911      	cbnz	r1, 802c89e <sbrk_aligned+0x12>
 802c898:	f001 faf8 	bl	802de8c <_sbrk_r>
 802c89c:	6030      	str	r0, [r6, #0]
 802c89e:	4621      	mov	r1, r4
 802c8a0:	4628      	mov	r0, r5
 802c8a2:	f001 faf3 	bl	802de8c <_sbrk_r>
 802c8a6:	1c43      	adds	r3, r0, #1
 802c8a8:	d103      	bne.n	802c8b2 <sbrk_aligned+0x26>
 802c8aa:	f04f 34ff 	mov.w	r4, #4294967295
 802c8ae:	4620      	mov	r0, r4
 802c8b0:	bd70      	pop	{r4, r5, r6, pc}
 802c8b2:	1cc4      	adds	r4, r0, #3
 802c8b4:	f024 0403 	bic.w	r4, r4, #3
 802c8b8:	42a0      	cmp	r0, r4
 802c8ba:	d0f8      	beq.n	802c8ae <sbrk_aligned+0x22>
 802c8bc:	1a21      	subs	r1, r4, r0
 802c8be:	4628      	mov	r0, r5
 802c8c0:	f001 fae4 	bl	802de8c <_sbrk_r>
 802c8c4:	3001      	adds	r0, #1
 802c8c6:	d1f2      	bne.n	802c8ae <sbrk_aligned+0x22>
 802c8c8:	e7ef      	b.n	802c8aa <sbrk_aligned+0x1e>
 802c8ca:	bf00      	nop
 802c8cc:	2000d9c8 	.word	0x2000d9c8

0802c8d0 <_malloc_r>:
 802c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c8d4:	1ccd      	adds	r5, r1, #3
 802c8d6:	f025 0503 	bic.w	r5, r5, #3
 802c8da:	3508      	adds	r5, #8
 802c8dc:	2d0c      	cmp	r5, #12
 802c8de:	bf38      	it	cc
 802c8e0:	250c      	movcc	r5, #12
 802c8e2:	2d00      	cmp	r5, #0
 802c8e4:	4606      	mov	r6, r0
 802c8e6:	db01      	blt.n	802c8ec <_malloc_r+0x1c>
 802c8e8:	42a9      	cmp	r1, r5
 802c8ea:	d904      	bls.n	802c8f6 <_malloc_r+0x26>
 802c8ec:	230c      	movs	r3, #12
 802c8ee:	6033      	str	r3, [r6, #0]
 802c8f0:	2000      	movs	r0, #0
 802c8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c8f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802c9cc <_malloc_r+0xfc>
 802c8fa:	f000 f869 	bl	802c9d0 <__malloc_lock>
 802c8fe:	f8d8 3000 	ldr.w	r3, [r8]
 802c902:	461c      	mov	r4, r3
 802c904:	bb44      	cbnz	r4, 802c958 <_malloc_r+0x88>
 802c906:	4629      	mov	r1, r5
 802c908:	4630      	mov	r0, r6
 802c90a:	f7ff ffbf 	bl	802c88c <sbrk_aligned>
 802c90e:	1c43      	adds	r3, r0, #1
 802c910:	4604      	mov	r4, r0
 802c912:	d158      	bne.n	802c9c6 <_malloc_r+0xf6>
 802c914:	f8d8 4000 	ldr.w	r4, [r8]
 802c918:	4627      	mov	r7, r4
 802c91a:	2f00      	cmp	r7, #0
 802c91c:	d143      	bne.n	802c9a6 <_malloc_r+0xd6>
 802c91e:	2c00      	cmp	r4, #0
 802c920:	d04b      	beq.n	802c9ba <_malloc_r+0xea>
 802c922:	6823      	ldr	r3, [r4, #0]
 802c924:	4639      	mov	r1, r7
 802c926:	4630      	mov	r0, r6
 802c928:	eb04 0903 	add.w	r9, r4, r3
 802c92c:	f001 faae 	bl	802de8c <_sbrk_r>
 802c930:	4581      	cmp	r9, r0
 802c932:	d142      	bne.n	802c9ba <_malloc_r+0xea>
 802c934:	6821      	ldr	r1, [r4, #0]
 802c936:	1a6d      	subs	r5, r5, r1
 802c938:	4629      	mov	r1, r5
 802c93a:	4630      	mov	r0, r6
 802c93c:	f7ff ffa6 	bl	802c88c <sbrk_aligned>
 802c940:	3001      	adds	r0, #1
 802c942:	d03a      	beq.n	802c9ba <_malloc_r+0xea>
 802c944:	6823      	ldr	r3, [r4, #0]
 802c946:	442b      	add	r3, r5
 802c948:	6023      	str	r3, [r4, #0]
 802c94a:	f8d8 3000 	ldr.w	r3, [r8]
 802c94e:	685a      	ldr	r2, [r3, #4]
 802c950:	bb62      	cbnz	r2, 802c9ac <_malloc_r+0xdc>
 802c952:	f8c8 7000 	str.w	r7, [r8]
 802c956:	e00f      	b.n	802c978 <_malloc_r+0xa8>
 802c958:	6822      	ldr	r2, [r4, #0]
 802c95a:	1b52      	subs	r2, r2, r5
 802c95c:	d420      	bmi.n	802c9a0 <_malloc_r+0xd0>
 802c95e:	2a0b      	cmp	r2, #11
 802c960:	d917      	bls.n	802c992 <_malloc_r+0xc2>
 802c962:	1961      	adds	r1, r4, r5
 802c964:	42a3      	cmp	r3, r4
 802c966:	6025      	str	r5, [r4, #0]
 802c968:	bf18      	it	ne
 802c96a:	6059      	strne	r1, [r3, #4]
 802c96c:	6863      	ldr	r3, [r4, #4]
 802c96e:	bf08      	it	eq
 802c970:	f8c8 1000 	streq.w	r1, [r8]
 802c974:	5162      	str	r2, [r4, r5]
 802c976:	604b      	str	r3, [r1, #4]
 802c978:	4630      	mov	r0, r6
 802c97a:	f000 f82f 	bl	802c9dc <__malloc_unlock>
 802c97e:	f104 000b 	add.w	r0, r4, #11
 802c982:	1d23      	adds	r3, r4, #4
 802c984:	f020 0007 	bic.w	r0, r0, #7
 802c988:	1ac2      	subs	r2, r0, r3
 802c98a:	bf1c      	itt	ne
 802c98c:	1a1b      	subne	r3, r3, r0
 802c98e:	50a3      	strne	r3, [r4, r2]
 802c990:	e7af      	b.n	802c8f2 <_malloc_r+0x22>
 802c992:	6862      	ldr	r2, [r4, #4]
 802c994:	42a3      	cmp	r3, r4
 802c996:	bf0c      	ite	eq
 802c998:	f8c8 2000 	streq.w	r2, [r8]
 802c99c:	605a      	strne	r2, [r3, #4]
 802c99e:	e7eb      	b.n	802c978 <_malloc_r+0xa8>
 802c9a0:	4623      	mov	r3, r4
 802c9a2:	6864      	ldr	r4, [r4, #4]
 802c9a4:	e7ae      	b.n	802c904 <_malloc_r+0x34>
 802c9a6:	463c      	mov	r4, r7
 802c9a8:	687f      	ldr	r7, [r7, #4]
 802c9aa:	e7b6      	b.n	802c91a <_malloc_r+0x4a>
 802c9ac:	461a      	mov	r2, r3
 802c9ae:	685b      	ldr	r3, [r3, #4]
 802c9b0:	42a3      	cmp	r3, r4
 802c9b2:	d1fb      	bne.n	802c9ac <_malloc_r+0xdc>
 802c9b4:	2300      	movs	r3, #0
 802c9b6:	6053      	str	r3, [r2, #4]
 802c9b8:	e7de      	b.n	802c978 <_malloc_r+0xa8>
 802c9ba:	230c      	movs	r3, #12
 802c9bc:	6033      	str	r3, [r6, #0]
 802c9be:	4630      	mov	r0, r6
 802c9c0:	f000 f80c 	bl	802c9dc <__malloc_unlock>
 802c9c4:	e794      	b.n	802c8f0 <_malloc_r+0x20>
 802c9c6:	6005      	str	r5, [r0, #0]
 802c9c8:	e7d6      	b.n	802c978 <_malloc_r+0xa8>
 802c9ca:	bf00      	nop
 802c9cc:	2000d9cc 	.word	0x2000d9cc

0802c9d0 <__malloc_lock>:
 802c9d0:	4801      	ldr	r0, [pc, #4]	@ (802c9d8 <__malloc_lock+0x8>)
 802c9d2:	f001 baa8 	b.w	802df26 <__retarget_lock_acquire_recursive>
 802c9d6:	bf00      	nop
 802c9d8:	2000db10 	.word	0x2000db10

0802c9dc <__malloc_unlock>:
 802c9dc:	4801      	ldr	r0, [pc, #4]	@ (802c9e4 <__malloc_unlock+0x8>)
 802c9de:	f001 baa3 	b.w	802df28 <__retarget_lock_release_recursive>
 802c9e2:	bf00      	nop
 802c9e4:	2000db10 	.word	0x2000db10

0802c9e8 <__cvt>:
 802c9e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c9ec:	ec57 6b10 	vmov	r6, r7, d0
 802c9f0:	2f00      	cmp	r7, #0
 802c9f2:	460c      	mov	r4, r1
 802c9f4:	4619      	mov	r1, r3
 802c9f6:	463b      	mov	r3, r7
 802c9f8:	bfbb      	ittet	lt
 802c9fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 802c9fe:	461f      	movlt	r7, r3
 802ca00:	2300      	movge	r3, #0
 802ca02:	232d      	movlt	r3, #45	@ 0x2d
 802ca04:	700b      	strb	r3, [r1, #0]
 802ca06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ca08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 802ca0c:	4691      	mov	r9, r2
 802ca0e:	f023 0820 	bic.w	r8, r3, #32
 802ca12:	bfbc      	itt	lt
 802ca14:	4632      	movlt	r2, r6
 802ca16:	4616      	movlt	r6, r2
 802ca18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802ca1c:	d005      	beq.n	802ca2a <__cvt+0x42>
 802ca1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 802ca22:	d100      	bne.n	802ca26 <__cvt+0x3e>
 802ca24:	3401      	adds	r4, #1
 802ca26:	2102      	movs	r1, #2
 802ca28:	e000      	b.n	802ca2c <__cvt+0x44>
 802ca2a:	2103      	movs	r1, #3
 802ca2c:	ab03      	add	r3, sp, #12
 802ca2e:	9301      	str	r3, [sp, #4]
 802ca30:	ab02      	add	r3, sp, #8
 802ca32:	9300      	str	r3, [sp, #0]
 802ca34:	ec47 6b10 	vmov	d0, r6, r7
 802ca38:	4653      	mov	r3, sl
 802ca3a:	4622      	mov	r2, r4
 802ca3c:	f001 fb24 	bl	802e088 <_dtoa_r>
 802ca40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 802ca44:	4605      	mov	r5, r0
 802ca46:	d119      	bne.n	802ca7c <__cvt+0x94>
 802ca48:	f019 0f01 	tst.w	r9, #1
 802ca4c:	d00e      	beq.n	802ca6c <__cvt+0x84>
 802ca4e:	eb00 0904 	add.w	r9, r0, r4
 802ca52:	2200      	movs	r2, #0
 802ca54:	2300      	movs	r3, #0
 802ca56:	4630      	mov	r0, r6
 802ca58:	4639      	mov	r1, r7
 802ca5a:	f7e4 f84d 	bl	8010af8 <__aeabi_dcmpeq>
 802ca5e:	b108      	cbz	r0, 802ca64 <__cvt+0x7c>
 802ca60:	f8cd 900c 	str.w	r9, [sp, #12]
 802ca64:	2230      	movs	r2, #48	@ 0x30
 802ca66:	9b03      	ldr	r3, [sp, #12]
 802ca68:	454b      	cmp	r3, r9
 802ca6a:	d31e      	bcc.n	802caaa <__cvt+0xc2>
 802ca6c:	9b03      	ldr	r3, [sp, #12]
 802ca6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ca70:	1b5b      	subs	r3, r3, r5
 802ca72:	4628      	mov	r0, r5
 802ca74:	6013      	str	r3, [r2, #0]
 802ca76:	b004      	add	sp, #16
 802ca78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ca7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802ca80:	eb00 0904 	add.w	r9, r0, r4
 802ca84:	d1e5      	bne.n	802ca52 <__cvt+0x6a>
 802ca86:	7803      	ldrb	r3, [r0, #0]
 802ca88:	2b30      	cmp	r3, #48	@ 0x30
 802ca8a:	d10a      	bne.n	802caa2 <__cvt+0xba>
 802ca8c:	2200      	movs	r2, #0
 802ca8e:	2300      	movs	r3, #0
 802ca90:	4630      	mov	r0, r6
 802ca92:	4639      	mov	r1, r7
 802ca94:	f7e4 f830 	bl	8010af8 <__aeabi_dcmpeq>
 802ca98:	b918      	cbnz	r0, 802caa2 <__cvt+0xba>
 802ca9a:	f1c4 0401 	rsb	r4, r4, #1
 802ca9e:	f8ca 4000 	str.w	r4, [sl]
 802caa2:	f8da 3000 	ldr.w	r3, [sl]
 802caa6:	4499      	add	r9, r3
 802caa8:	e7d3      	b.n	802ca52 <__cvt+0x6a>
 802caaa:	1c59      	adds	r1, r3, #1
 802caac:	9103      	str	r1, [sp, #12]
 802caae:	701a      	strb	r2, [r3, #0]
 802cab0:	e7d9      	b.n	802ca66 <__cvt+0x7e>

0802cab2 <__exponent>:
 802cab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802cab4:	2900      	cmp	r1, #0
 802cab6:	bfba      	itte	lt
 802cab8:	4249      	neglt	r1, r1
 802caba:	232d      	movlt	r3, #45	@ 0x2d
 802cabc:	232b      	movge	r3, #43	@ 0x2b
 802cabe:	2909      	cmp	r1, #9
 802cac0:	7002      	strb	r2, [r0, #0]
 802cac2:	7043      	strb	r3, [r0, #1]
 802cac4:	dd29      	ble.n	802cb1a <__exponent+0x68>
 802cac6:	f10d 0307 	add.w	r3, sp, #7
 802caca:	461d      	mov	r5, r3
 802cacc:	270a      	movs	r7, #10
 802cace:	461a      	mov	r2, r3
 802cad0:	fbb1 f6f7 	udiv	r6, r1, r7
 802cad4:	fb07 1416 	mls	r4, r7, r6, r1
 802cad8:	3430      	adds	r4, #48	@ 0x30
 802cada:	f802 4c01 	strb.w	r4, [r2, #-1]
 802cade:	460c      	mov	r4, r1
 802cae0:	2c63      	cmp	r4, #99	@ 0x63
 802cae2:	f103 33ff 	add.w	r3, r3, #4294967295
 802cae6:	4631      	mov	r1, r6
 802cae8:	dcf1      	bgt.n	802cace <__exponent+0x1c>
 802caea:	3130      	adds	r1, #48	@ 0x30
 802caec:	1e94      	subs	r4, r2, #2
 802caee:	f803 1c01 	strb.w	r1, [r3, #-1]
 802caf2:	1c41      	adds	r1, r0, #1
 802caf4:	4623      	mov	r3, r4
 802caf6:	42ab      	cmp	r3, r5
 802caf8:	d30a      	bcc.n	802cb10 <__exponent+0x5e>
 802cafa:	f10d 0309 	add.w	r3, sp, #9
 802cafe:	1a9b      	subs	r3, r3, r2
 802cb00:	42ac      	cmp	r4, r5
 802cb02:	bf88      	it	hi
 802cb04:	2300      	movhi	r3, #0
 802cb06:	3302      	adds	r3, #2
 802cb08:	4403      	add	r3, r0
 802cb0a:	1a18      	subs	r0, r3, r0
 802cb0c:	b003      	add	sp, #12
 802cb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802cb10:	f813 6b01 	ldrb.w	r6, [r3], #1
 802cb14:	f801 6f01 	strb.w	r6, [r1, #1]!
 802cb18:	e7ed      	b.n	802caf6 <__exponent+0x44>
 802cb1a:	2330      	movs	r3, #48	@ 0x30
 802cb1c:	3130      	adds	r1, #48	@ 0x30
 802cb1e:	7083      	strb	r3, [r0, #2]
 802cb20:	70c1      	strb	r1, [r0, #3]
 802cb22:	1d03      	adds	r3, r0, #4
 802cb24:	e7f1      	b.n	802cb0a <__exponent+0x58>
	...

0802cb28 <_printf_float>:
 802cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cb2c:	b08d      	sub	sp, #52	@ 0x34
 802cb2e:	460c      	mov	r4, r1
 802cb30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802cb34:	4616      	mov	r6, r2
 802cb36:	461f      	mov	r7, r3
 802cb38:	4605      	mov	r5, r0
 802cb3a:	f001 f919 	bl	802dd70 <_localeconv_r>
 802cb3e:	6803      	ldr	r3, [r0, #0]
 802cb40:	9304      	str	r3, [sp, #16]
 802cb42:	4618      	mov	r0, r3
 802cb44:	f7e3 fbac 	bl	80102a0 <strlen>
 802cb48:	2300      	movs	r3, #0
 802cb4a:	930a      	str	r3, [sp, #40]	@ 0x28
 802cb4c:	f8d8 3000 	ldr.w	r3, [r8]
 802cb50:	9005      	str	r0, [sp, #20]
 802cb52:	3307      	adds	r3, #7
 802cb54:	f023 0307 	bic.w	r3, r3, #7
 802cb58:	f103 0208 	add.w	r2, r3, #8
 802cb5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 802cb60:	f8d4 b000 	ldr.w	fp, [r4]
 802cb64:	f8c8 2000 	str.w	r2, [r8]
 802cb68:	e9d3 8900 	ldrd	r8, r9, [r3]
 802cb6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802cb70:	9307      	str	r3, [sp, #28]
 802cb72:	f8cd 8018 	str.w	r8, [sp, #24]
 802cb76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 802cb7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802cb7e:	4b9c      	ldr	r3, [pc, #624]	@ (802cdf0 <_printf_float+0x2c8>)
 802cb80:	f04f 32ff 	mov.w	r2, #4294967295
 802cb84:	f7e3 ffea 	bl	8010b5c <__aeabi_dcmpun>
 802cb88:	bb70      	cbnz	r0, 802cbe8 <_printf_float+0xc0>
 802cb8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802cb8e:	4b98      	ldr	r3, [pc, #608]	@ (802cdf0 <_printf_float+0x2c8>)
 802cb90:	f04f 32ff 	mov.w	r2, #4294967295
 802cb94:	f7e3 ffc4 	bl	8010b20 <__aeabi_dcmple>
 802cb98:	bb30      	cbnz	r0, 802cbe8 <_printf_float+0xc0>
 802cb9a:	2200      	movs	r2, #0
 802cb9c:	2300      	movs	r3, #0
 802cb9e:	4640      	mov	r0, r8
 802cba0:	4649      	mov	r1, r9
 802cba2:	f7e3 ffb3 	bl	8010b0c <__aeabi_dcmplt>
 802cba6:	b110      	cbz	r0, 802cbae <_printf_float+0x86>
 802cba8:	232d      	movs	r3, #45	@ 0x2d
 802cbaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802cbae:	4a91      	ldr	r2, [pc, #580]	@ (802cdf4 <_printf_float+0x2cc>)
 802cbb0:	4b91      	ldr	r3, [pc, #580]	@ (802cdf8 <_printf_float+0x2d0>)
 802cbb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802cbb6:	bf94      	ite	ls
 802cbb8:	4690      	movls	r8, r2
 802cbba:	4698      	movhi	r8, r3
 802cbbc:	2303      	movs	r3, #3
 802cbbe:	6123      	str	r3, [r4, #16]
 802cbc0:	f02b 0304 	bic.w	r3, fp, #4
 802cbc4:	6023      	str	r3, [r4, #0]
 802cbc6:	f04f 0900 	mov.w	r9, #0
 802cbca:	9700      	str	r7, [sp, #0]
 802cbcc:	4633      	mov	r3, r6
 802cbce:	aa0b      	add	r2, sp, #44	@ 0x2c
 802cbd0:	4621      	mov	r1, r4
 802cbd2:	4628      	mov	r0, r5
 802cbd4:	f000 f9d2 	bl	802cf7c <_printf_common>
 802cbd8:	3001      	adds	r0, #1
 802cbda:	f040 808d 	bne.w	802ccf8 <_printf_float+0x1d0>
 802cbde:	f04f 30ff 	mov.w	r0, #4294967295
 802cbe2:	b00d      	add	sp, #52	@ 0x34
 802cbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cbe8:	4642      	mov	r2, r8
 802cbea:	464b      	mov	r3, r9
 802cbec:	4640      	mov	r0, r8
 802cbee:	4649      	mov	r1, r9
 802cbf0:	f7e3 ffb4 	bl	8010b5c <__aeabi_dcmpun>
 802cbf4:	b140      	cbz	r0, 802cc08 <_printf_float+0xe0>
 802cbf6:	464b      	mov	r3, r9
 802cbf8:	2b00      	cmp	r3, #0
 802cbfa:	bfbc      	itt	lt
 802cbfc:	232d      	movlt	r3, #45	@ 0x2d
 802cbfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802cc02:	4a7e      	ldr	r2, [pc, #504]	@ (802cdfc <_printf_float+0x2d4>)
 802cc04:	4b7e      	ldr	r3, [pc, #504]	@ (802ce00 <_printf_float+0x2d8>)
 802cc06:	e7d4      	b.n	802cbb2 <_printf_float+0x8a>
 802cc08:	6863      	ldr	r3, [r4, #4]
 802cc0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 802cc0e:	9206      	str	r2, [sp, #24]
 802cc10:	1c5a      	adds	r2, r3, #1
 802cc12:	d13b      	bne.n	802cc8c <_printf_float+0x164>
 802cc14:	2306      	movs	r3, #6
 802cc16:	6063      	str	r3, [r4, #4]
 802cc18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 802cc1c:	2300      	movs	r3, #0
 802cc1e:	6022      	str	r2, [r4, #0]
 802cc20:	9303      	str	r3, [sp, #12]
 802cc22:	ab0a      	add	r3, sp, #40	@ 0x28
 802cc24:	e9cd a301 	strd	sl, r3, [sp, #4]
 802cc28:	ab09      	add	r3, sp, #36	@ 0x24
 802cc2a:	9300      	str	r3, [sp, #0]
 802cc2c:	6861      	ldr	r1, [r4, #4]
 802cc2e:	ec49 8b10 	vmov	d0, r8, r9
 802cc32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802cc36:	4628      	mov	r0, r5
 802cc38:	f7ff fed6 	bl	802c9e8 <__cvt>
 802cc3c:	9b06      	ldr	r3, [sp, #24]
 802cc3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802cc40:	2b47      	cmp	r3, #71	@ 0x47
 802cc42:	4680      	mov	r8, r0
 802cc44:	d129      	bne.n	802cc9a <_printf_float+0x172>
 802cc46:	1cc8      	adds	r0, r1, #3
 802cc48:	db02      	blt.n	802cc50 <_printf_float+0x128>
 802cc4a:	6863      	ldr	r3, [r4, #4]
 802cc4c:	4299      	cmp	r1, r3
 802cc4e:	dd41      	ble.n	802ccd4 <_printf_float+0x1ac>
 802cc50:	f1aa 0a02 	sub.w	sl, sl, #2
 802cc54:	fa5f fa8a 	uxtb.w	sl, sl
 802cc58:	3901      	subs	r1, #1
 802cc5a:	4652      	mov	r2, sl
 802cc5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 802cc60:	9109      	str	r1, [sp, #36]	@ 0x24
 802cc62:	f7ff ff26 	bl	802cab2 <__exponent>
 802cc66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802cc68:	1813      	adds	r3, r2, r0
 802cc6a:	2a01      	cmp	r2, #1
 802cc6c:	4681      	mov	r9, r0
 802cc6e:	6123      	str	r3, [r4, #16]
 802cc70:	dc02      	bgt.n	802cc78 <_printf_float+0x150>
 802cc72:	6822      	ldr	r2, [r4, #0]
 802cc74:	07d2      	lsls	r2, r2, #31
 802cc76:	d501      	bpl.n	802cc7c <_printf_float+0x154>
 802cc78:	3301      	adds	r3, #1
 802cc7a:	6123      	str	r3, [r4, #16]
 802cc7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802cc80:	2b00      	cmp	r3, #0
 802cc82:	d0a2      	beq.n	802cbca <_printf_float+0xa2>
 802cc84:	232d      	movs	r3, #45	@ 0x2d
 802cc86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802cc8a:	e79e      	b.n	802cbca <_printf_float+0xa2>
 802cc8c:	9a06      	ldr	r2, [sp, #24]
 802cc8e:	2a47      	cmp	r2, #71	@ 0x47
 802cc90:	d1c2      	bne.n	802cc18 <_printf_float+0xf0>
 802cc92:	2b00      	cmp	r3, #0
 802cc94:	d1c0      	bne.n	802cc18 <_printf_float+0xf0>
 802cc96:	2301      	movs	r3, #1
 802cc98:	e7bd      	b.n	802cc16 <_printf_float+0xee>
 802cc9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802cc9e:	d9db      	bls.n	802cc58 <_printf_float+0x130>
 802cca0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 802cca4:	d118      	bne.n	802ccd8 <_printf_float+0x1b0>
 802cca6:	2900      	cmp	r1, #0
 802cca8:	6863      	ldr	r3, [r4, #4]
 802ccaa:	dd0b      	ble.n	802ccc4 <_printf_float+0x19c>
 802ccac:	6121      	str	r1, [r4, #16]
 802ccae:	b913      	cbnz	r3, 802ccb6 <_printf_float+0x18e>
 802ccb0:	6822      	ldr	r2, [r4, #0]
 802ccb2:	07d0      	lsls	r0, r2, #31
 802ccb4:	d502      	bpl.n	802ccbc <_printf_float+0x194>
 802ccb6:	3301      	adds	r3, #1
 802ccb8:	440b      	add	r3, r1
 802ccba:	6123      	str	r3, [r4, #16]
 802ccbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 802ccbe:	f04f 0900 	mov.w	r9, #0
 802ccc2:	e7db      	b.n	802cc7c <_printf_float+0x154>
 802ccc4:	b913      	cbnz	r3, 802cccc <_printf_float+0x1a4>
 802ccc6:	6822      	ldr	r2, [r4, #0]
 802ccc8:	07d2      	lsls	r2, r2, #31
 802ccca:	d501      	bpl.n	802ccd0 <_printf_float+0x1a8>
 802cccc:	3302      	adds	r3, #2
 802ccce:	e7f4      	b.n	802ccba <_printf_float+0x192>
 802ccd0:	2301      	movs	r3, #1
 802ccd2:	e7f2      	b.n	802ccba <_printf_float+0x192>
 802ccd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 802ccd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ccda:	4299      	cmp	r1, r3
 802ccdc:	db05      	blt.n	802ccea <_printf_float+0x1c2>
 802ccde:	6823      	ldr	r3, [r4, #0]
 802cce0:	6121      	str	r1, [r4, #16]
 802cce2:	07d8      	lsls	r0, r3, #31
 802cce4:	d5ea      	bpl.n	802ccbc <_printf_float+0x194>
 802cce6:	1c4b      	adds	r3, r1, #1
 802cce8:	e7e7      	b.n	802ccba <_printf_float+0x192>
 802ccea:	2900      	cmp	r1, #0
 802ccec:	bfd4      	ite	le
 802ccee:	f1c1 0202 	rsble	r2, r1, #2
 802ccf2:	2201      	movgt	r2, #1
 802ccf4:	4413      	add	r3, r2
 802ccf6:	e7e0      	b.n	802ccba <_printf_float+0x192>
 802ccf8:	6823      	ldr	r3, [r4, #0]
 802ccfa:	055a      	lsls	r2, r3, #21
 802ccfc:	d407      	bmi.n	802cd0e <_printf_float+0x1e6>
 802ccfe:	6923      	ldr	r3, [r4, #16]
 802cd00:	4642      	mov	r2, r8
 802cd02:	4631      	mov	r1, r6
 802cd04:	4628      	mov	r0, r5
 802cd06:	47b8      	blx	r7
 802cd08:	3001      	adds	r0, #1
 802cd0a:	d12b      	bne.n	802cd64 <_printf_float+0x23c>
 802cd0c:	e767      	b.n	802cbde <_printf_float+0xb6>
 802cd0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802cd12:	f240 80dd 	bls.w	802ced0 <_printf_float+0x3a8>
 802cd16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802cd1a:	2200      	movs	r2, #0
 802cd1c:	2300      	movs	r3, #0
 802cd1e:	f7e3 feeb 	bl	8010af8 <__aeabi_dcmpeq>
 802cd22:	2800      	cmp	r0, #0
 802cd24:	d033      	beq.n	802cd8e <_printf_float+0x266>
 802cd26:	4a37      	ldr	r2, [pc, #220]	@ (802ce04 <_printf_float+0x2dc>)
 802cd28:	2301      	movs	r3, #1
 802cd2a:	4631      	mov	r1, r6
 802cd2c:	4628      	mov	r0, r5
 802cd2e:	47b8      	blx	r7
 802cd30:	3001      	adds	r0, #1
 802cd32:	f43f af54 	beq.w	802cbde <_printf_float+0xb6>
 802cd36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802cd3a:	4543      	cmp	r3, r8
 802cd3c:	db02      	blt.n	802cd44 <_printf_float+0x21c>
 802cd3e:	6823      	ldr	r3, [r4, #0]
 802cd40:	07d8      	lsls	r0, r3, #31
 802cd42:	d50f      	bpl.n	802cd64 <_printf_float+0x23c>
 802cd44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802cd48:	4631      	mov	r1, r6
 802cd4a:	4628      	mov	r0, r5
 802cd4c:	47b8      	blx	r7
 802cd4e:	3001      	adds	r0, #1
 802cd50:	f43f af45 	beq.w	802cbde <_printf_float+0xb6>
 802cd54:	f04f 0900 	mov.w	r9, #0
 802cd58:	f108 38ff 	add.w	r8, r8, #4294967295
 802cd5c:	f104 0a1a 	add.w	sl, r4, #26
 802cd60:	45c8      	cmp	r8, r9
 802cd62:	dc09      	bgt.n	802cd78 <_printf_float+0x250>
 802cd64:	6823      	ldr	r3, [r4, #0]
 802cd66:	079b      	lsls	r3, r3, #30
 802cd68:	f100 8103 	bmi.w	802cf72 <_printf_float+0x44a>
 802cd6c:	68e0      	ldr	r0, [r4, #12]
 802cd6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802cd70:	4298      	cmp	r0, r3
 802cd72:	bfb8      	it	lt
 802cd74:	4618      	movlt	r0, r3
 802cd76:	e734      	b.n	802cbe2 <_printf_float+0xba>
 802cd78:	2301      	movs	r3, #1
 802cd7a:	4652      	mov	r2, sl
 802cd7c:	4631      	mov	r1, r6
 802cd7e:	4628      	mov	r0, r5
 802cd80:	47b8      	blx	r7
 802cd82:	3001      	adds	r0, #1
 802cd84:	f43f af2b 	beq.w	802cbde <_printf_float+0xb6>
 802cd88:	f109 0901 	add.w	r9, r9, #1
 802cd8c:	e7e8      	b.n	802cd60 <_printf_float+0x238>
 802cd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802cd90:	2b00      	cmp	r3, #0
 802cd92:	dc39      	bgt.n	802ce08 <_printf_float+0x2e0>
 802cd94:	4a1b      	ldr	r2, [pc, #108]	@ (802ce04 <_printf_float+0x2dc>)
 802cd96:	2301      	movs	r3, #1
 802cd98:	4631      	mov	r1, r6
 802cd9a:	4628      	mov	r0, r5
 802cd9c:	47b8      	blx	r7
 802cd9e:	3001      	adds	r0, #1
 802cda0:	f43f af1d 	beq.w	802cbde <_printf_float+0xb6>
 802cda4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802cda8:	ea59 0303 	orrs.w	r3, r9, r3
 802cdac:	d102      	bne.n	802cdb4 <_printf_float+0x28c>
 802cdae:	6823      	ldr	r3, [r4, #0]
 802cdb0:	07d9      	lsls	r1, r3, #31
 802cdb2:	d5d7      	bpl.n	802cd64 <_printf_float+0x23c>
 802cdb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802cdb8:	4631      	mov	r1, r6
 802cdba:	4628      	mov	r0, r5
 802cdbc:	47b8      	blx	r7
 802cdbe:	3001      	adds	r0, #1
 802cdc0:	f43f af0d 	beq.w	802cbde <_printf_float+0xb6>
 802cdc4:	f04f 0a00 	mov.w	sl, #0
 802cdc8:	f104 0b1a 	add.w	fp, r4, #26
 802cdcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802cdce:	425b      	negs	r3, r3
 802cdd0:	4553      	cmp	r3, sl
 802cdd2:	dc01      	bgt.n	802cdd8 <_printf_float+0x2b0>
 802cdd4:	464b      	mov	r3, r9
 802cdd6:	e793      	b.n	802cd00 <_printf_float+0x1d8>
 802cdd8:	2301      	movs	r3, #1
 802cdda:	465a      	mov	r2, fp
 802cddc:	4631      	mov	r1, r6
 802cdde:	4628      	mov	r0, r5
 802cde0:	47b8      	blx	r7
 802cde2:	3001      	adds	r0, #1
 802cde4:	f43f aefb 	beq.w	802cbde <_printf_float+0xb6>
 802cde8:	f10a 0a01 	add.w	sl, sl, #1
 802cdec:	e7ee      	b.n	802cdcc <_printf_float+0x2a4>
 802cdee:	bf00      	nop
 802cdf0:	7fefffff 	.word	0x7fefffff
 802cdf4:	08034d4c 	.word	0x08034d4c
 802cdf8:	08034d50 	.word	0x08034d50
 802cdfc:	08034d54 	.word	0x08034d54
 802ce00:	08034d58 	.word	0x08034d58
 802ce04:	08035140 	.word	0x08035140
 802ce08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802ce0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802ce0e:	4553      	cmp	r3, sl
 802ce10:	bfa8      	it	ge
 802ce12:	4653      	movge	r3, sl
 802ce14:	2b00      	cmp	r3, #0
 802ce16:	4699      	mov	r9, r3
 802ce18:	dc36      	bgt.n	802ce88 <_printf_float+0x360>
 802ce1a:	f04f 0b00 	mov.w	fp, #0
 802ce1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802ce22:	f104 021a 	add.w	r2, r4, #26
 802ce26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802ce28:	9306      	str	r3, [sp, #24]
 802ce2a:	eba3 0309 	sub.w	r3, r3, r9
 802ce2e:	455b      	cmp	r3, fp
 802ce30:	dc31      	bgt.n	802ce96 <_printf_float+0x36e>
 802ce32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ce34:	459a      	cmp	sl, r3
 802ce36:	dc3a      	bgt.n	802ceae <_printf_float+0x386>
 802ce38:	6823      	ldr	r3, [r4, #0]
 802ce3a:	07da      	lsls	r2, r3, #31
 802ce3c:	d437      	bmi.n	802ceae <_printf_float+0x386>
 802ce3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ce40:	ebaa 0903 	sub.w	r9, sl, r3
 802ce44:	9b06      	ldr	r3, [sp, #24]
 802ce46:	ebaa 0303 	sub.w	r3, sl, r3
 802ce4a:	4599      	cmp	r9, r3
 802ce4c:	bfa8      	it	ge
 802ce4e:	4699      	movge	r9, r3
 802ce50:	f1b9 0f00 	cmp.w	r9, #0
 802ce54:	dc33      	bgt.n	802cebe <_printf_float+0x396>
 802ce56:	f04f 0800 	mov.w	r8, #0
 802ce5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802ce5e:	f104 0b1a 	add.w	fp, r4, #26
 802ce62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ce64:	ebaa 0303 	sub.w	r3, sl, r3
 802ce68:	eba3 0309 	sub.w	r3, r3, r9
 802ce6c:	4543      	cmp	r3, r8
 802ce6e:	f77f af79 	ble.w	802cd64 <_printf_float+0x23c>
 802ce72:	2301      	movs	r3, #1
 802ce74:	465a      	mov	r2, fp
 802ce76:	4631      	mov	r1, r6
 802ce78:	4628      	mov	r0, r5
 802ce7a:	47b8      	blx	r7
 802ce7c:	3001      	adds	r0, #1
 802ce7e:	f43f aeae 	beq.w	802cbde <_printf_float+0xb6>
 802ce82:	f108 0801 	add.w	r8, r8, #1
 802ce86:	e7ec      	b.n	802ce62 <_printf_float+0x33a>
 802ce88:	4642      	mov	r2, r8
 802ce8a:	4631      	mov	r1, r6
 802ce8c:	4628      	mov	r0, r5
 802ce8e:	47b8      	blx	r7
 802ce90:	3001      	adds	r0, #1
 802ce92:	d1c2      	bne.n	802ce1a <_printf_float+0x2f2>
 802ce94:	e6a3      	b.n	802cbde <_printf_float+0xb6>
 802ce96:	2301      	movs	r3, #1
 802ce98:	4631      	mov	r1, r6
 802ce9a:	4628      	mov	r0, r5
 802ce9c:	9206      	str	r2, [sp, #24]
 802ce9e:	47b8      	blx	r7
 802cea0:	3001      	adds	r0, #1
 802cea2:	f43f ae9c 	beq.w	802cbde <_printf_float+0xb6>
 802cea6:	9a06      	ldr	r2, [sp, #24]
 802cea8:	f10b 0b01 	add.w	fp, fp, #1
 802ceac:	e7bb      	b.n	802ce26 <_printf_float+0x2fe>
 802ceae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802ceb2:	4631      	mov	r1, r6
 802ceb4:	4628      	mov	r0, r5
 802ceb6:	47b8      	blx	r7
 802ceb8:	3001      	adds	r0, #1
 802ceba:	d1c0      	bne.n	802ce3e <_printf_float+0x316>
 802cebc:	e68f      	b.n	802cbde <_printf_float+0xb6>
 802cebe:	9a06      	ldr	r2, [sp, #24]
 802cec0:	464b      	mov	r3, r9
 802cec2:	4442      	add	r2, r8
 802cec4:	4631      	mov	r1, r6
 802cec6:	4628      	mov	r0, r5
 802cec8:	47b8      	blx	r7
 802ceca:	3001      	adds	r0, #1
 802cecc:	d1c3      	bne.n	802ce56 <_printf_float+0x32e>
 802cece:	e686      	b.n	802cbde <_printf_float+0xb6>
 802ced0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802ced4:	f1ba 0f01 	cmp.w	sl, #1
 802ced8:	dc01      	bgt.n	802cede <_printf_float+0x3b6>
 802ceda:	07db      	lsls	r3, r3, #31
 802cedc:	d536      	bpl.n	802cf4c <_printf_float+0x424>
 802cede:	2301      	movs	r3, #1
 802cee0:	4642      	mov	r2, r8
 802cee2:	4631      	mov	r1, r6
 802cee4:	4628      	mov	r0, r5
 802cee6:	47b8      	blx	r7
 802cee8:	3001      	adds	r0, #1
 802ceea:	f43f ae78 	beq.w	802cbde <_printf_float+0xb6>
 802ceee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802cef2:	4631      	mov	r1, r6
 802cef4:	4628      	mov	r0, r5
 802cef6:	47b8      	blx	r7
 802cef8:	3001      	adds	r0, #1
 802cefa:	f43f ae70 	beq.w	802cbde <_printf_float+0xb6>
 802cefe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802cf02:	2200      	movs	r2, #0
 802cf04:	2300      	movs	r3, #0
 802cf06:	f10a 3aff 	add.w	sl, sl, #4294967295
 802cf0a:	f7e3 fdf5 	bl	8010af8 <__aeabi_dcmpeq>
 802cf0e:	b9c0      	cbnz	r0, 802cf42 <_printf_float+0x41a>
 802cf10:	4653      	mov	r3, sl
 802cf12:	f108 0201 	add.w	r2, r8, #1
 802cf16:	4631      	mov	r1, r6
 802cf18:	4628      	mov	r0, r5
 802cf1a:	47b8      	blx	r7
 802cf1c:	3001      	adds	r0, #1
 802cf1e:	d10c      	bne.n	802cf3a <_printf_float+0x412>
 802cf20:	e65d      	b.n	802cbde <_printf_float+0xb6>
 802cf22:	2301      	movs	r3, #1
 802cf24:	465a      	mov	r2, fp
 802cf26:	4631      	mov	r1, r6
 802cf28:	4628      	mov	r0, r5
 802cf2a:	47b8      	blx	r7
 802cf2c:	3001      	adds	r0, #1
 802cf2e:	f43f ae56 	beq.w	802cbde <_printf_float+0xb6>
 802cf32:	f108 0801 	add.w	r8, r8, #1
 802cf36:	45d0      	cmp	r8, sl
 802cf38:	dbf3      	blt.n	802cf22 <_printf_float+0x3fa>
 802cf3a:	464b      	mov	r3, r9
 802cf3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 802cf40:	e6df      	b.n	802cd02 <_printf_float+0x1da>
 802cf42:	f04f 0800 	mov.w	r8, #0
 802cf46:	f104 0b1a 	add.w	fp, r4, #26
 802cf4a:	e7f4      	b.n	802cf36 <_printf_float+0x40e>
 802cf4c:	2301      	movs	r3, #1
 802cf4e:	4642      	mov	r2, r8
 802cf50:	e7e1      	b.n	802cf16 <_printf_float+0x3ee>
 802cf52:	2301      	movs	r3, #1
 802cf54:	464a      	mov	r2, r9
 802cf56:	4631      	mov	r1, r6
 802cf58:	4628      	mov	r0, r5
 802cf5a:	47b8      	blx	r7
 802cf5c:	3001      	adds	r0, #1
 802cf5e:	f43f ae3e 	beq.w	802cbde <_printf_float+0xb6>
 802cf62:	f108 0801 	add.w	r8, r8, #1
 802cf66:	68e3      	ldr	r3, [r4, #12]
 802cf68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802cf6a:	1a5b      	subs	r3, r3, r1
 802cf6c:	4543      	cmp	r3, r8
 802cf6e:	dcf0      	bgt.n	802cf52 <_printf_float+0x42a>
 802cf70:	e6fc      	b.n	802cd6c <_printf_float+0x244>
 802cf72:	f04f 0800 	mov.w	r8, #0
 802cf76:	f104 0919 	add.w	r9, r4, #25
 802cf7a:	e7f4      	b.n	802cf66 <_printf_float+0x43e>

0802cf7c <_printf_common>:
 802cf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cf80:	4616      	mov	r6, r2
 802cf82:	4698      	mov	r8, r3
 802cf84:	688a      	ldr	r2, [r1, #8]
 802cf86:	690b      	ldr	r3, [r1, #16]
 802cf88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802cf8c:	4293      	cmp	r3, r2
 802cf8e:	bfb8      	it	lt
 802cf90:	4613      	movlt	r3, r2
 802cf92:	6033      	str	r3, [r6, #0]
 802cf94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802cf98:	4607      	mov	r7, r0
 802cf9a:	460c      	mov	r4, r1
 802cf9c:	b10a      	cbz	r2, 802cfa2 <_printf_common+0x26>
 802cf9e:	3301      	adds	r3, #1
 802cfa0:	6033      	str	r3, [r6, #0]
 802cfa2:	6823      	ldr	r3, [r4, #0]
 802cfa4:	0699      	lsls	r1, r3, #26
 802cfa6:	bf42      	ittt	mi
 802cfa8:	6833      	ldrmi	r3, [r6, #0]
 802cfaa:	3302      	addmi	r3, #2
 802cfac:	6033      	strmi	r3, [r6, #0]
 802cfae:	6825      	ldr	r5, [r4, #0]
 802cfb0:	f015 0506 	ands.w	r5, r5, #6
 802cfb4:	d106      	bne.n	802cfc4 <_printf_common+0x48>
 802cfb6:	f104 0a19 	add.w	sl, r4, #25
 802cfba:	68e3      	ldr	r3, [r4, #12]
 802cfbc:	6832      	ldr	r2, [r6, #0]
 802cfbe:	1a9b      	subs	r3, r3, r2
 802cfc0:	42ab      	cmp	r3, r5
 802cfc2:	dc26      	bgt.n	802d012 <_printf_common+0x96>
 802cfc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802cfc8:	6822      	ldr	r2, [r4, #0]
 802cfca:	3b00      	subs	r3, #0
 802cfcc:	bf18      	it	ne
 802cfce:	2301      	movne	r3, #1
 802cfd0:	0692      	lsls	r2, r2, #26
 802cfd2:	d42b      	bmi.n	802d02c <_printf_common+0xb0>
 802cfd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802cfd8:	4641      	mov	r1, r8
 802cfda:	4638      	mov	r0, r7
 802cfdc:	47c8      	blx	r9
 802cfde:	3001      	adds	r0, #1
 802cfe0:	d01e      	beq.n	802d020 <_printf_common+0xa4>
 802cfe2:	6823      	ldr	r3, [r4, #0]
 802cfe4:	6922      	ldr	r2, [r4, #16]
 802cfe6:	f003 0306 	and.w	r3, r3, #6
 802cfea:	2b04      	cmp	r3, #4
 802cfec:	bf02      	ittt	eq
 802cfee:	68e5      	ldreq	r5, [r4, #12]
 802cff0:	6833      	ldreq	r3, [r6, #0]
 802cff2:	1aed      	subeq	r5, r5, r3
 802cff4:	68a3      	ldr	r3, [r4, #8]
 802cff6:	bf0c      	ite	eq
 802cff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cffc:	2500      	movne	r5, #0
 802cffe:	4293      	cmp	r3, r2
 802d000:	bfc4      	itt	gt
 802d002:	1a9b      	subgt	r3, r3, r2
 802d004:	18ed      	addgt	r5, r5, r3
 802d006:	2600      	movs	r6, #0
 802d008:	341a      	adds	r4, #26
 802d00a:	42b5      	cmp	r5, r6
 802d00c:	d11a      	bne.n	802d044 <_printf_common+0xc8>
 802d00e:	2000      	movs	r0, #0
 802d010:	e008      	b.n	802d024 <_printf_common+0xa8>
 802d012:	2301      	movs	r3, #1
 802d014:	4652      	mov	r2, sl
 802d016:	4641      	mov	r1, r8
 802d018:	4638      	mov	r0, r7
 802d01a:	47c8      	blx	r9
 802d01c:	3001      	adds	r0, #1
 802d01e:	d103      	bne.n	802d028 <_printf_common+0xac>
 802d020:	f04f 30ff 	mov.w	r0, #4294967295
 802d024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d028:	3501      	adds	r5, #1
 802d02a:	e7c6      	b.n	802cfba <_printf_common+0x3e>
 802d02c:	18e1      	adds	r1, r4, r3
 802d02e:	1c5a      	adds	r2, r3, #1
 802d030:	2030      	movs	r0, #48	@ 0x30
 802d032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802d036:	4422      	add	r2, r4
 802d038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802d03c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802d040:	3302      	adds	r3, #2
 802d042:	e7c7      	b.n	802cfd4 <_printf_common+0x58>
 802d044:	2301      	movs	r3, #1
 802d046:	4622      	mov	r2, r4
 802d048:	4641      	mov	r1, r8
 802d04a:	4638      	mov	r0, r7
 802d04c:	47c8      	blx	r9
 802d04e:	3001      	adds	r0, #1
 802d050:	d0e6      	beq.n	802d020 <_printf_common+0xa4>
 802d052:	3601      	adds	r6, #1
 802d054:	e7d9      	b.n	802d00a <_printf_common+0x8e>
	...

0802d058 <_printf_i>:
 802d058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d05c:	7e0f      	ldrb	r7, [r1, #24]
 802d05e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802d060:	2f78      	cmp	r7, #120	@ 0x78
 802d062:	4691      	mov	r9, r2
 802d064:	4680      	mov	r8, r0
 802d066:	460c      	mov	r4, r1
 802d068:	469a      	mov	sl, r3
 802d06a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802d06e:	d807      	bhi.n	802d080 <_printf_i+0x28>
 802d070:	2f62      	cmp	r7, #98	@ 0x62
 802d072:	d80a      	bhi.n	802d08a <_printf_i+0x32>
 802d074:	2f00      	cmp	r7, #0
 802d076:	f000 80d2 	beq.w	802d21e <_printf_i+0x1c6>
 802d07a:	2f58      	cmp	r7, #88	@ 0x58
 802d07c:	f000 80b9 	beq.w	802d1f2 <_printf_i+0x19a>
 802d080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802d088:	e03a      	b.n	802d100 <_printf_i+0xa8>
 802d08a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802d08e:	2b15      	cmp	r3, #21
 802d090:	d8f6      	bhi.n	802d080 <_printf_i+0x28>
 802d092:	a101      	add	r1, pc, #4	@ (adr r1, 802d098 <_printf_i+0x40>)
 802d094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d098:	0802d0f1 	.word	0x0802d0f1
 802d09c:	0802d105 	.word	0x0802d105
 802d0a0:	0802d081 	.word	0x0802d081
 802d0a4:	0802d081 	.word	0x0802d081
 802d0a8:	0802d081 	.word	0x0802d081
 802d0ac:	0802d081 	.word	0x0802d081
 802d0b0:	0802d105 	.word	0x0802d105
 802d0b4:	0802d081 	.word	0x0802d081
 802d0b8:	0802d081 	.word	0x0802d081
 802d0bc:	0802d081 	.word	0x0802d081
 802d0c0:	0802d081 	.word	0x0802d081
 802d0c4:	0802d205 	.word	0x0802d205
 802d0c8:	0802d12f 	.word	0x0802d12f
 802d0cc:	0802d1bf 	.word	0x0802d1bf
 802d0d0:	0802d081 	.word	0x0802d081
 802d0d4:	0802d081 	.word	0x0802d081
 802d0d8:	0802d227 	.word	0x0802d227
 802d0dc:	0802d081 	.word	0x0802d081
 802d0e0:	0802d12f 	.word	0x0802d12f
 802d0e4:	0802d081 	.word	0x0802d081
 802d0e8:	0802d081 	.word	0x0802d081
 802d0ec:	0802d1c7 	.word	0x0802d1c7
 802d0f0:	6833      	ldr	r3, [r6, #0]
 802d0f2:	1d1a      	adds	r2, r3, #4
 802d0f4:	681b      	ldr	r3, [r3, #0]
 802d0f6:	6032      	str	r2, [r6, #0]
 802d0f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d0fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802d100:	2301      	movs	r3, #1
 802d102:	e09d      	b.n	802d240 <_printf_i+0x1e8>
 802d104:	6833      	ldr	r3, [r6, #0]
 802d106:	6820      	ldr	r0, [r4, #0]
 802d108:	1d19      	adds	r1, r3, #4
 802d10a:	6031      	str	r1, [r6, #0]
 802d10c:	0606      	lsls	r6, r0, #24
 802d10e:	d501      	bpl.n	802d114 <_printf_i+0xbc>
 802d110:	681d      	ldr	r5, [r3, #0]
 802d112:	e003      	b.n	802d11c <_printf_i+0xc4>
 802d114:	0645      	lsls	r5, r0, #25
 802d116:	d5fb      	bpl.n	802d110 <_printf_i+0xb8>
 802d118:	f9b3 5000 	ldrsh.w	r5, [r3]
 802d11c:	2d00      	cmp	r5, #0
 802d11e:	da03      	bge.n	802d128 <_printf_i+0xd0>
 802d120:	232d      	movs	r3, #45	@ 0x2d
 802d122:	426d      	negs	r5, r5
 802d124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d128:	4859      	ldr	r0, [pc, #356]	@ (802d290 <_printf_i+0x238>)
 802d12a:	230a      	movs	r3, #10
 802d12c:	e011      	b.n	802d152 <_printf_i+0xfa>
 802d12e:	6821      	ldr	r1, [r4, #0]
 802d130:	6833      	ldr	r3, [r6, #0]
 802d132:	0608      	lsls	r0, r1, #24
 802d134:	f853 5b04 	ldr.w	r5, [r3], #4
 802d138:	d402      	bmi.n	802d140 <_printf_i+0xe8>
 802d13a:	0649      	lsls	r1, r1, #25
 802d13c:	bf48      	it	mi
 802d13e:	b2ad      	uxthmi	r5, r5
 802d140:	2f6f      	cmp	r7, #111	@ 0x6f
 802d142:	4853      	ldr	r0, [pc, #332]	@ (802d290 <_printf_i+0x238>)
 802d144:	6033      	str	r3, [r6, #0]
 802d146:	bf14      	ite	ne
 802d148:	230a      	movne	r3, #10
 802d14a:	2308      	moveq	r3, #8
 802d14c:	2100      	movs	r1, #0
 802d14e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802d152:	6866      	ldr	r6, [r4, #4]
 802d154:	60a6      	str	r6, [r4, #8]
 802d156:	2e00      	cmp	r6, #0
 802d158:	bfa2      	ittt	ge
 802d15a:	6821      	ldrge	r1, [r4, #0]
 802d15c:	f021 0104 	bicge.w	r1, r1, #4
 802d160:	6021      	strge	r1, [r4, #0]
 802d162:	b90d      	cbnz	r5, 802d168 <_printf_i+0x110>
 802d164:	2e00      	cmp	r6, #0
 802d166:	d04b      	beq.n	802d200 <_printf_i+0x1a8>
 802d168:	4616      	mov	r6, r2
 802d16a:	fbb5 f1f3 	udiv	r1, r5, r3
 802d16e:	fb03 5711 	mls	r7, r3, r1, r5
 802d172:	5dc7      	ldrb	r7, [r0, r7]
 802d174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802d178:	462f      	mov	r7, r5
 802d17a:	42bb      	cmp	r3, r7
 802d17c:	460d      	mov	r5, r1
 802d17e:	d9f4      	bls.n	802d16a <_printf_i+0x112>
 802d180:	2b08      	cmp	r3, #8
 802d182:	d10b      	bne.n	802d19c <_printf_i+0x144>
 802d184:	6823      	ldr	r3, [r4, #0]
 802d186:	07df      	lsls	r7, r3, #31
 802d188:	d508      	bpl.n	802d19c <_printf_i+0x144>
 802d18a:	6923      	ldr	r3, [r4, #16]
 802d18c:	6861      	ldr	r1, [r4, #4]
 802d18e:	4299      	cmp	r1, r3
 802d190:	bfde      	ittt	le
 802d192:	2330      	movle	r3, #48	@ 0x30
 802d194:	f806 3c01 	strble.w	r3, [r6, #-1]
 802d198:	f106 36ff 	addle.w	r6, r6, #4294967295
 802d19c:	1b92      	subs	r2, r2, r6
 802d19e:	6122      	str	r2, [r4, #16]
 802d1a0:	f8cd a000 	str.w	sl, [sp]
 802d1a4:	464b      	mov	r3, r9
 802d1a6:	aa03      	add	r2, sp, #12
 802d1a8:	4621      	mov	r1, r4
 802d1aa:	4640      	mov	r0, r8
 802d1ac:	f7ff fee6 	bl	802cf7c <_printf_common>
 802d1b0:	3001      	adds	r0, #1
 802d1b2:	d14a      	bne.n	802d24a <_printf_i+0x1f2>
 802d1b4:	f04f 30ff 	mov.w	r0, #4294967295
 802d1b8:	b004      	add	sp, #16
 802d1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d1be:	6823      	ldr	r3, [r4, #0]
 802d1c0:	f043 0320 	orr.w	r3, r3, #32
 802d1c4:	6023      	str	r3, [r4, #0]
 802d1c6:	4833      	ldr	r0, [pc, #204]	@ (802d294 <_printf_i+0x23c>)
 802d1c8:	2778      	movs	r7, #120	@ 0x78
 802d1ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802d1ce:	6823      	ldr	r3, [r4, #0]
 802d1d0:	6831      	ldr	r1, [r6, #0]
 802d1d2:	061f      	lsls	r7, r3, #24
 802d1d4:	f851 5b04 	ldr.w	r5, [r1], #4
 802d1d8:	d402      	bmi.n	802d1e0 <_printf_i+0x188>
 802d1da:	065f      	lsls	r7, r3, #25
 802d1dc:	bf48      	it	mi
 802d1de:	b2ad      	uxthmi	r5, r5
 802d1e0:	6031      	str	r1, [r6, #0]
 802d1e2:	07d9      	lsls	r1, r3, #31
 802d1e4:	bf44      	itt	mi
 802d1e6:	f043 0320 	orrmi.w	r3, r3, #32
 802d1ea:	6023      	strmi	r3, [r4, #0]
 802d1ec:	b11d      	cbz	r5, 802d1f6 <_printf_i+0x19e>
 802d1ee:	2310      	movs	r3, #16
 802d1f0:	e7ac      	b.n	802d14c <_printf_i+0xf4>
 802d1f2:	4827      	ldr	r0, [pc, #156]	@ (802d290 <_printf_i+0x238>)
 802d1f4:	e7e9      	b.n	802d1ca <_printf_i+0x172>
 802d1f6:	6823      	ldr	r3, [r4, #0]
 802d1f8:	f023 0320 	bic.w	r3, r3, #32
 802d1fc:	6023      	str	r3, [r4, #0]
 802d1fe:	e7f6      	b.n	802d1ee <_printf_i+0x196>
 802d200:	4616      	mov	r6, r2
 802d202:	e7bd      	b.n	802d180 <_printf_i+0x128>
 802d204:	6833      	ldr	r3, [r6, #0]
 802d206:	6825      	ldr	r5, [r4, #0]
 802d208:	6961      	ldr	r1, [r4, #20]
 802d20a:	1d18      	adds	r0, r3, #4
 802d20c:	6030      	str	r0, [r6, #0]
 802d20e:	062e      	lsls	r6, r5, #24
 802d210:	681b      	ldr	r3, [r3, #0]
 802d212:	d501      	bpl.n	802d218 <_printf_i+0x1c0>
 802d214:	6019      	str	r1, [r3, #0]
 802d216:	e002      	b.n	802d21e <_printf_i+0x1c6>
 802d218:	0668      	lsls	r0, r5, #25
 802d21a:	d5fb      	bpl.n	802d214 <_printf_i+0x1bc>
 802d21c:	8019      	strh	r1, [r3, #0]
 802d21e:	2300      	movs	r3, #0
 802d220:	6123      	str	r3, [r4, #16]
 802d222:	4616      	mov	r6, r2
 802d224:	e7bc      	b.n	802d1a0 <_printf_i+0x148>
 802d226:	6833      	ldr	r3, [r6, #0]
 802d228:	1d1a      	adds	r2, r3, #4
 802d22a:	6032      	str	r2, [r6, #0]
 802d22c:	681e      	ldr	r6, [r3, #0]
 802d22e:	6862      	ldr	r2, [r4, #4]
 802d230:	2100      	movs	r1, #0
 802d232:	4630      	mov	r0, r6
 802d234:	f7e2 ffe4 	bl	8010200 <memchr>
 802d238:	b108      	cbz	r0, 802d23e <_printf_i+0x1e6>
 802d23a:	1b80      	subs	r0, r0, r6
 802d23c:	6060      	str	r0, [r4, #4]
 802d23e:	6863      	ldr	r3, [r4, #4]
 802d240:	6123      	str	r3, [r4, #16]
 802d242:	2300      	movs	r3, #0
 802d244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d248:	e7aa      	b.n	802d1a0 <_printf_i+0x148>
 802d24a:	6923      	ldr	r3, [r4, #16]
 802d24c:	4632      	mov	r2, r6
 802d24e:	4649      	mov	r1, r9
 802d250:	4640      	mov	r0, r8
 802d252:	47d0      	blx	sl
 802d254:	3001      	adds	r0, #1
 802d256:	d0ad      	beq.n	802d1b4 <_printf_i+0x15c>
 802d258:	6823      	ldr	r3, [r4, #0]
 802d25a:	079b      	lsls	r3, r3, #30
 802d25c:	d413      	bmi.n	802d286 <_printf_i+0x22e>
 802d25e:	68e0      	ldr	r0, [r4, #12]
 802d260:	9b03      	ldr	r3, [sp, #12]
 802d262:	4298      	cmp	r0, r3
 802d264:	bfb8      	it	lt
 802d266:	4618      	movlt	r0, r3
 802d268:	e7a6      	b.n	802d1b8 <_printf_i+0x160>
 802d26a:	2301      	movs	r3, #1
 802d26c:	4632      	mov	r2, r6
 802d26e:	4649      	mov	r1, r9
 802d270:	4640      	mov	r0, r8
 802d272:	47d0      	blx	sl
 802d274:	3001      	adds	r0, #1
 802d276:	d09d      	beq.n	802d1b4 <_printf_i+0x15c>
 802d278:	3501      	adds	r5, #1
 802d27a:	68e3      	ldr	r3, [r4, #12]
 802d27c:	9903      	ldr	r1, [sp, #12]
 802d27e:	1a5b      	subs	r3, r3, r1
 802d280:	42ab      	cmp	r3, r5
 802d282:	dcf2      	bgt.n	802d26a <_printf_i+0x212>
 802d284:	e7eb      	b.n	802d25e <_printf_i+0x206>
 802d286:	2500      	movs	r5, #0
 802d288:	f104 0619 	add.w	r6, r4, #25
 802d28c:	e7f5      	b.n	802d27a <_printf_i+0x222>
 802d28e:	bf00      	nop
 802d290:	08034d5c 	.word	0x08034d5c
 802d294:	08034d6d 	.word	0x08034d6d

0802d298 <_scanf_float>:
 802d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d29c:	b087      	sub	sp, #28
 802d29e:	4617      	mov	r7, r2
 802d2a0:	9303      	str	r3, [sp, #12]
 802d2a2:	688b      	ldr	r3, [r1, #8]
 802d2a4:	1e5a      	subs	r2, r3, #1
 802d2a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802d2aa:	bf81      	itttt	hi
 802d2ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802d2b0:	eb03 0b05 	addhi.w	fp, r3, r5
 802d2b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802d2b8:	608b      	strhi	r3, [r1, #8]
 802d2ba:	680b      	ldr	r3, [r1, #0]
 802d2bc:	460a      	mov	r2, r1
 802d2be:	f04f 0500 	mov.w	r5, #0
 802d2c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 802d2c6:	f842 3b1c 	str.w	r3, [r2], #28
 802d2ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802d2ce:	4680      	mov	r8, r0
 802d2d0:	460c      	mov	r4, r1
 802d2d2:	bf98      	it	ls
 802d2d4:	f04f 0b00 	movls.w	fp, #0
 802d2d8:	9201      	str	r2, [sp, #4]
 802d2da:	4616      	mov	r6, r2
 802d2dc:	46aa      	mov	sl, r5
 802d2de:	46a9      	mov	r9, r5
 802d2e0:	9502      	str	r5, [sp, #8]
 802d2e2:	68a2      	ldr	r2, [r4, #8]
 802d2e4:	b152      	cbz	r2, 802d2fc <_scanf_float+0x64>
 802d2e6:	683b      	ldr	r3, [r7, #0]
 802d2e8:	781b      	ldrb	r3, [r3, #0]
 802d2ea:	2b4e      	cmp	r3, #78	@ 0x4e
 802d2ec:	d864      	bhi.n	802d3b8 <_scanf_float+0x120>
 802d2ee:	2b40      	cmp	r3, #64	@ 0x40
 802d2f0:	d83c      	bhi.n	802d36c <_scanf_float+0xd4>
 802d2f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 802d2f6:	b2c8      	uxtb	r0, r1
 802d2f8:	280e      	cmp	r0, #14
 802d2fa:	d93a      	bls.n	802d372 <_scanf_float+0xda>
 802d2fc:	f1b9 0f00 	cmp.w	r9, #0
 802d300:	d003      	beq.n	802d30a <_scanf_float+0x72>
 802d302:	6823      	ldr	r3, [r4, #0]
 802d304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 802d308:	6023      	str	r3, [r4, #0]
 802d30a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d30e:	f1ba 0f01 	cmp.w	sl, #1
 802d312:	f200 8117 	bhi.w	802d544 <_scanf_float+0x2ac>
 802d316:	9b01      	ldr	r3, [sp, #4]
 802d318:	429e      	cmp	r6, r3
 802d31a:	f200 8108 	bhi.w	802d52e <_scanf_float+0x296>
 802d31e:	2001      	movs	r0, #1
 802d320:	b007      	add	sp, #28
 802d322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d326:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 802d32a:	2a0d      	cmp	r2, #13
 802d32c:	d8e6      	bhi.n	802d2fc <_scanf_float+0x64>
 802d32e:	a101      	add	r1, pc, #4	@ (adr r1, 802d334 <_scanf_float+0x9c>)
 802d330:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802d334:	0802d47b 	.word	0x0802d47b
 802d338:	0802d2fd 	.word	0x0802d2fd
 802d33c:	0802d2fd 	.word	0x0802d2fd
 802d340:	0802d2fd 	.word	0x0802d2fd
 802d344:	0802d4db 	.word	0x0802d4db
 802d348:	0802d4b3 	.word	0x0802d4b3
 802d34c:	0802d2fd 	.word	0x0802d2fd
 802d350:	0802d2fd 	.word	0x0802d2fd
 802d354:	0802d489 	.word	0x0802d489
 802d358:	0802d2fd 	.word	0x0802d2fd
 802d35c:	0802d2fd 	.word	0x0802d2fd
 802d360:	0802d2fd 	.word	0x0802d2fd
 802d364:	0802d2fd 	.word	0x0802d2fd
 802d368:	0802d441 	.word	0x0802d441
 802d36c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 802d370:	e7db      	b.n	802d32a <_scanf_float+0x92>
 802d372:	290e      	cmp	r1, #14
 802d374:	d8c2      	bhi.n	802d2fc <_scanf_float+0x64>
 802d376:	a001      	add	r0, pc, #4	@ (adr r0, 802d37c <_scanf_float+0xe4>)
 802d378:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802d37c:	0802d431 	.word	0x0802d431
 802d380:	0802d2fd 	.word	0x0802d2fd
 802d384:	0802d431 	.word	0x0802d431
 802d388:	0802d4c7 	.word	0x0802d4c7
 802d38c:	0802d2fd 	.word	0x0802d2fd
 802d390:	0802d3d9 	.word	0x0802d3d9
 802d394:	0802d417 	.word	0x0802d417
 802d398:	0802d417 	.word	0x0802d417
 802d39c:	0802d417 	.word	0x0802d417
 802d3a0:	0802d417 	.word	0x0802d417
 802d3a4:	0802d417 	.word	0x0802d417
 802d3a8:	0802d417 	.word	0x0802d417
 802d3ac:	0802d417 	.word	0x0802d417
 802d3b0:	0802d417 	.word	0x0802d417
 802d3b4:	0802d417 	.word	0x0802d417
 802d3b8:	2b6e      	cmp	r3, #110	@ 0x6e
 802d3ba:	d809      	bhi.n	802d3d0 <_scanf_float+0x138>
 802d3bc:	2b60      	cmp	r3, #96	@ 0x60
 802d3be:	d8b2      	bhi.n	802d326 <_scanf_float+0x8e>
 802d3c0:	2b54      	cmp	r3, #84	@ 0x54
 802d3c2:	d07b      	beq.n	802d4bc <_scanf_float+0x224>
 802d3c4:	2b59      	cmp	r3, #89	@ 0x59
 802d3c6:	d199      	bne.n	802d2fc <_scanf_float+0x64>
 802d3c8:	2d07      	cmp	r5, #7
 802d3ca:	d197      	bne.n	802d2fc <_scanf_float+0x64>
 802d3cc:	2508      	movs	r5, #8
 802d3ce:	e02c      	b.n	802d42a <_scanf_float+0x192>
 802d3d0:	2b74      	cmp	r3, #116	@ 0x74
 802d3d2:	d073      	beq.n	802d4bc <_scanf_float+0x224>
 802d3d4:	2b79      	cmp	r3, #121	@ 0x79
 802d3d6:	e7f6      	b.n	802d3c6 <_scanf_float+0x12e>
 802d3d8:	6821      	ldr	r1, [r4, #0]
 802d3da:	05c8      	lsls	r0, r1, #23
 802d3dc:	d51b      	bpl.n	802d416 <_scanf_float+0x17e>
 802d3de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 802d3e2:	6021      	str	r1, [r4, #0]
 802d3e4:	f109 0901 	add.w	r9, r9, #1
 802d3e8:	f1bb 0f00 	cmp.w	fp, #0
 802d3ec:	d003      	beq.n	802d3f6 <_scanf_float+0x15e>
 802d3ee:	3201      	adds	r2, #1
 802d3f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 802d3f4:	60a2      	str	r2, [r4, #8]
 802d3f6:	68a3      	ldr	r3, [r4, #8]
 802d3f8:	3b01      	subs	r3, #1
 802d3fa:	60a3      	str	r3, [r4, #8]
 802d3fc:	6923      	ldr	r3, [r4, #16]
 802d3fe:	3301      	adds	r3, #1
 802d400:	6123      	str	r3, [r4, #16]
 802d402:	687b      	ldr	r3, [r7, #4]
 802d404:	3b01      	subs	r3, #1
 802d406:	2b00      	cmp	r3, #0
 802d408:	607b      	str	r3, [r7, #4]
 802d40a:	f340 8087 	ble.w	802d51c <_scanf_float+0x284>
 802d40e:	683b      	ldr	r3, [r7, #0]
 802d410:	3301      	adds	r3, #1
 802d412:	603b      	str	r3, [r7, #0]
 802d414:	e765      	b.n	802d2e2 <_scanf_float+0x4a>
 802d416:	eb1a 0105 	adds.w	r1, sl, r5
 802d41a:	f47f af6f 	bne.w	802d2fc <_scanf_float+0x64>
 802d41e:	6822      	ldr	r2, [r4, #0]
 802d420:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 802d424:	6022      	str	r2, [r4, #0]
 802d426:	460d      	mov	r5, r1
 802d428:	468a      	mov	sl, r1
 802d42a:	f806 3b01 	strb.w	r3, [r6], #1
 802d42e:	e7e2      	b.n	802d3f6 <_scanf_float+0x15e>
 802d430:	6822      	ldr	r2, [r4, #0]
 802d432:	0610      	lsls	r0, r2, #24
 802d434:	f57f af62 	bpl.w	802d2fc <_scanf_float+0x64>
 802d438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 802d43c:	6022      	str	r2, [r4, #0]
 802d43e:	e7f4      	b.n	802d42a <_scanf_float+0x192>
 802d440:	f1ba 0f00 	cmp.w	sl, #0
 802d444:	d10e      	bne.n	802d464 <_scanf_float+0x1cc>
 802d446:	f1b9 0f00 	cmp.w	r9, #0
 802d44a:	d10e      	bne.n	802d46a <_scanf_float+0x1d2>
 802d44c:	6822      	ldr	r2, [r4, #0]
 802d44e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 802d452:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 802d456:	d108      	bne.n	802d46a <_scanf_float+0x1d2>
 802d458:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802d45c:	6022      	str	r2, [r4, #0]
 802d45e:	f04f 0a01 	mov.w	sl, #1
 802d462:	e7e2      	b.n	802d42a <_scanf_float+0x192>
 802d464:	f1ba 0f02 	cmp.w	sl, #2
 802d468:	d055      	beq.n	802d516 <_scanf_float+0x27e>
 802d46a:	2d01      	cmp	r5, #1
 802d46c:	d002      	beq.n	802d474 <_scanf_float+0x1dc>
 802d46e:	2d04      	cmp	r5, #4
 802d470:	f47f af44 	bne.w	802d2fc <_scanf_float+0x64>
 802d474:	3501      	adds	r5, #1
 802d476:	b2ed      	uxtb	r5, r5
 802d478:	e7d7      	b.n	802d42a <_scanf_float+0x192>
 802d47a:	f1ba 0f01 	cmp.w	sl, #1
 802d47e:	f47f af3d 	bne.w	802d2fc <_scanf_float+0x64>
 802d482:	f04f 0a02 	mov.w	sl, #2
 802d486:	e7d0      	b.n	802d42a <_scanf_float+0x192>
 802d488:	b97d      	cbnz	r5, 802d4aa <_scanf_float+0x212>
 802d48a:	f1b9 0f00 	cmp.w	r9, #0
 802d48e:	f47f af38 	bne.w	802d302 <_scanf_float+0x6a>
 802d492:	6822      	ldr	r2, [r4, #0]
 802d494:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 802d498:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 802d49c:	f040 8108 	bne.w	802d6b0 <_scanf_float+0x418>
 802d4a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802d4a4:	6022      	str	r2, [r4, #0]
 802d4a6:	2501      	movs	r5, #1
 802d4a8:	e7bf      	b.n	802d42a <_scanf_float+0x192>
 802d4aa:	2d03      	cmp	r5, #3
 802d4ac:	d0e2      	beq.n	802d474 <_scanf_float+0x1dc>
 802d4ae:	2d05      	cmp	r5, #5
 802d4b0:	e7de      	b.n	802d470 <_scanf_float+0x1d8>
 802d4b2:	2d02      	cmp	r5, #2
 802d4b4:	f47f af22 	bne.w	802d2fc <_scanf_float+0x64>
 802d4b8:	2503      	movs	r5, #3
 802d4ba:	e7b6      	b.n	802d42a <_scanf_float+0x192>
 802d4bc:	2d06      	cmp	r5, #6
 802d4be:	f47f af1d 	bne.w	802d2fc <_scanf_float+0x64>
 802d4c2:	2507      	movs	r5, #7
 802d4c4:	e7b1      	b.n	802d42a <_scanf_float+0x192>
 802d4c6:	6822      	ldr	r2, [r4, #0]
 802d4c8:	0591      	lsls	r1, r2, #22
 802d4ca:	f57f af17 	bpl.w	802d2fc <_scanf_float+0x64>
 802d4ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 802d4d2:	6022      	str	r2, [r4, #0]
 802d4d4:	f8cd 9008 	str.w	r9, [sp, #8]
 802d4d8:	e7a7      	b.n	802d42a <_scanf_float+0x192>
 802d4da:	6822      	ldr	r2, [r4, #0]
 802d4dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 802d4e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 802d4e4:	d006      	beq.n	802d4f4 <_scanf_float+0x25c>
 802d4e6:	0550      	lsls	r0, r2, #21
 802d4e8:	f57f af08 	bpl.w	802d2fc <_scanf_float+0x64>
 802d4ec:	f1b9 0f00 	cmp.w	r9, #0
 802d4f0:	f000 80de 	beq.w	802d6b0 <_scanf_float+0x418>
 802d4f4:	0591      	lsls	r1, r2, #22
 802d4f6:	bf58      	it	pl
 802d4f8:	9902      	ldrpl	r1, [sp, #8]
 802d4fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 802d4fe:	bf58      	it	pl
 802d500:	eba9 0101 	subpl.w	r1, r9, r1
 802d504:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 802d508:	bf58      	it	pl
 802d50a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802d50e:	6022      	str	r2, [r4, #0]
 802d510:	f04f 0900 	mov.w	r9, #0
 802d514:	e789      	b.n	802d42a <_scanf_float+0x192>
 802d516:	f04f 0a03 	mov.w	sl, #3
 802d51a:	e786      	b.n	802d42a <_scanf_float+0x192>
 802d51c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802d520:	4639      	mov	r1, r7
 802d522:	4640      	mov	r0, r8
 802d524:	4798      	blx	r3
 802d526:	2800      	cmp	r0, #0
 802d528:	f43f aedb 	beq.w	802d2e2 <_scanf_float+0x4a>
 802d52c:	e6e6      	b.n	802d2fc <_scanf_float+0x64>
 802d52e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802d532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d536:	463a      	mov	r2, r7
 802d538:	4640      	mov	r0, r8
 802d53a:	4798      	blx	r3
 802d53c:	6923      	ldr	r3, [r4, #16]
 802d53e:	3b01      	subs	r3, #1
 802d540:	6123      	str	r3, [r4, #16]
 802d542:	e6e8      	b.n	802d316 <_scanf_float+0x7e>
 802d544:	1e6b      	subs	r3, r5, #1
 802d546:	2b06      	cmp	r3, #6
 802d548:	d824      	bhi.n	802d594 <_scanf_float+0x2fc>
 802d54a:	2d02      	cmp	r5, #2
 802d54c:	d836      	bhi.n	802d5bc <_scanf_float+0x324>
 802d54e:	9b01      	ldr	r3, [sp, #4]
 802d550:	429e      	cmp	r6, r3
 802d552:	f67f aee4 	bls.w	802d31e <_scanf_float+0x86>
 802d556:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802d55a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d55e:	463a      	mov	r2, r7
 802d560:	4640      	mov	r0, r8
 802d562:	4798      	blx	r3
 802d564:	6923      	ldr	r3, [r4, #16]
 802d566:	3b01      	subs	r3, #1
 802d568:	6123      	str	r3, [r4, #16]
 802d56a:	e7f0      	b.n	802d54e <_scanf_float+0x2b6>
 802d56c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802d570:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 802d574:	463a      	mov	r2, r7
 802d576:	4640      	mov	r0, r8
 802d578:	4798      	blx	r3
 802d57a:	6923      	ldr	r3, [r4, #16]
 802d57c:	3b01      	subs	r3, #1
 802d57e:	6123      	str	r3, [r4, #16]
 802d580:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d584:	fa5f fa8a 	uxtb.w	sl, sl
 802d588:	f1ba 0f02 	cmp.w	sl, #2
 802d58c:	d1ee      	bne.n	802d56c <_scanf_float+0x2d4>
 802d58e:	3d03      	subs	r5, #3
 802d590:	b2ed      	uxtb	r5, r5
 802d592:	1b76      	subs	r6, r6, r5
 802d594:	6823      	ldr	r3, [r4, #0]
 802d596:	05da      	lsls	r2, r3, #23
 802d598:	d530      	bpl.n	802d5fc <_scanf_float+0x364>
 802d59a:	055b      	lsls	r3, r3, #21
 802d59c:	d511      	bpl.n	802d5c2 <_scanf_float+0x32a>
 802d59e:	9b01      	ldr	r3, [sp, #4]
 802d5a0:	429e      	cmp	r6, r3
 802d5a2:	f67f aebc 	bls.w	802d31e <_scanf_float+0x86>
 802d5a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802d5aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d5ae:	463a      	mov	r2, r7
 802d5b0:	4640      	mov	r0, r8
 802d5b2:	4798      	blx	r3
 802d5b4:	6923      	ldr	r3, [r4, #16]
 802d5b6:	3b01      	subs	r3, #1
 802d5b8:	6123      	str	r3, [r4, #16]
 802d5ba:	e7f0      	b.n	802d59e <_scanf_float+0x306>
 802d5bc:	46aa      	mov	sl, r5
 802d5be:	46b3      	mov	fp, r6
 802d5c0:	e7de      	b.n	802d580 <_scanf_float+0x2e8>
 802d5c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802d5c6:	6923      	ldr	r3, [r4, #16]
 802d5c8:	2965      	cmp	r1, #101	@ 0x65
 802d5ca:	f103 33ff 	add.w	r3, r3, #4294967295
 802d5ce:	f106 35ff 	add.w	r5, r6, #4294967295
 802d5d2:	6123      	str	r3, [r4, #16]
 802d5d4:	d00c      	beq.n	802d5f0 <_scanf_float+0x358>
 802d5d6:	2945      	cmp	r1, #69	@ 0x45
 802d5d8:	d00a      	beq.n	802d5f0 <_scanf_float+0x358>
 802d5da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802d5de:	463a      	mov	r2, r7
 802d5e0:	4640      	mov	r0, r8
 802d5e2:	4798      	blx	r3
 802d5e4:	6923      	ldr	r3, [r4, #16]
 802d5e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802d5ea:	3b01      	subs	r3, #1
 802d5ec:	1eb5      	subs	r5, r6, #2
 802d5ee:	6123      	str	r3, [r4, #16]
 802d5f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802d5f4:	463a      	mov	r2, r7
 802d5f6:	4640      	mov	r0, r8
 802d5f8:	4798      	blx	r3
 802d5fa:	462e      	mov	r6, r5
 802d5fc:	6822      	ldr	r2, [r4, #0]
 802d5fe:	f012 0210 	ands.w	r2, r2, #16
 802d602:	d001      	beq.n	802d608 <_scanf_float+0x370>
 802d604:	2000      	movs	r0, #0
 802d606:	e68b      	b.n	802d320 <_scanf_float+0x88>
 802d608:	7032      	strb	r2, [r6, #0]
 802d60a:	6823      	ldr	r3, [r4, #0]
 802d60c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 802d610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802d614:	d11c      	bne.n	802d650 <_scanf_float+0x3b8>
 802d616:	9b02      	ldr	r3, [sp, #8]
 802d618:	454b      	cmp	r3, r9
 802d61a:	eba3 0209 	sub.w	r2, r3, r9
 802d61e:	d123      	bne.n	802d668 <_scanf_float+0x3d0>
 802d620:	9901      	ldr	r1, [sp, #4]
 802d622:	2200      	movs	r2, #0
 802d624:	4640      	mov	r0, r8
 802d626:	f002 fdf3 	bl	8030210 <_strtod_r>
 802d62a:	9b03      	ldr	r3, [sp, #12]
 802d62c:	6821      	ldr	r1, [r4, #0]
 802d62e:	681b      	ldr	r3, [r3, #0]
 802d630:	f011 0f02 	tst.w	r1, #2
 802d634:	ec57 6b10 	vmov	r6, r7, d0
 802d638:	f103 0204 	add.w	r2, r3, #4
 802d63c:	d01f      	beq.n	802d67e <_scanf_float+0x3e6>
 802d63e:	9903      	ldr	r1, [sp, #12]
 802d640:	600a      	str	r2, [r1, #0]
 802d642:	681b      	ldr	r3, [r3, #0]
 802d644:	e9c3 6700 	strd	r6, r7, [r3]
 802d648:	68e3      	ldr	r3, [r4, #12]
 802d64a:	3301      	adds	r3, #1
 802d64c:	60e3      	str	r3, [r4, #12]
 802d64e:	e7d9      	b.n	802d604 <_scanf_float+0x36c>
 802d650:	9b04      	ldr	r3, [sp, #16]
 802d652:	2b00      	cmp	r3, #0
 802d654:	d0e4      	beq.n	802d620 <_scanf_float+0x388>
 802d656:	9905      	ldr	r1, [sp, #20]
 802d658:	230a      	movs	r3, #10
 802d65a:	3101      	adds	r1, #1
 802d65c:	4640      	mov	r0, r8
 802d65e:	f002 fe57 	bl	8030310 <_strtol_r>
 802d662:	9b04      	ldr	r3, [sp, #16]
 802d664:	9e05      	ldr	r6, [sp, #20]
 802d666:	1ac2      	subs	r2, r0, r3
 802d668:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 802d66c:	429e      	cmp	r6, r3
 802d66e:	bf28      	it	cs
 802d670:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 802d674:	4910      	ldr	r1, [pc, #64]	@ (802d6b8 <_scanf_float+0x420>)
 802d676:	4630      	mov	r0, r6
 802d678:	f000 f93c 	bl	802d8f4 <siprintf>
 802d67c:	e7d0      	b.n	802d620 <_scanf_float+0x388>
 802d67e:	f011 0f04 	tst.w	r1, #4
 802d682:	9903      	ldr	r1, [sp, #12]
 802d684:	600a      	str	r2, [r1, #0]
 802d686:	d1dc      	bne.n	802d642 <_scanf_float+0x3aa>
 802d688:	681d      	ldr	r5, [r3, #0]
 802d68a:	4632      	mov	r2, r6
 802d68c:	463b      	mov	r3, r7
 802d68e:	4630      	mov	r0, r6
 802d690:	4639      	mov	r1, r7
 802d692:	f7e3 fa63 	bl	8010b5c <__aeabi_dcmpun>
 802d696:	b128      	cbz	r0, 802d6a4 <_scanf_float+0x40c>
 802d698:	4808      	ldr	r0, [pc, #32]	@ (802d6bc <_scanf_float+0x424>)
 802d69a:	f000 fc5d 	bl	802df58 <nanf>
 802d69e:	ed85 0a00 	vstr	s0, [r5]
 802d6a2:	e7d1      	b.n	802d648 <_scanf_float+0x3b0>
 802d6a4:	4630      	mov	r0, r6
 802d6a6:	4639      	mov	r1, r7
 802d6a8:	f7e3 fab6 	bl	8010c18 <__aeabi_d2f>
 802d6ac:	6028      	str	r0, [r5, #0]
 802d6ae:	e7cb      	b.n	802d648 <_scanf_float+0x3b0>
 802d6b0:	f04f 0900 	mov.w	r9, #0
 802d6b4:	e629      	b.n	802d30a <_scanf_float+0x72>
 802d6b6:	bf00      	nop
 802d6b8:	08034d7e 	.word	0x08034d7e
 802d6bc:	08034d4b 	.word	0x08034d4b

0802d6c0 <std>:
 802d6c0:	2300      	movs	r3, #0
 802d6c2:	b510      	push	{r4, lr}
 802d6c4:	4604      	mov	r4, r0
 802d6c6:	e9c0 3300 	strd	r3, r3, [r0]
 802d6ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d6ce:	6083      	str	r3, [r0, #8]
 802d6d0:	8181      	strh	r1, [r0, #12]
 802d6d2:	6643      	str	r3, [r0, #100]	@ 0x64
 802d6d4:	81c2      	strh	r2, [r0, #14]
 802d6d6:	6183      	str	r3, [r0, #24]
 802d6d8:	4619      	mov	r1, r3
 802d6da:	2208      	movs	r2, #8
 802d6dc:	305c      	adds	r0, #92	@ 0x5c
 802d6de:	f000 fa57 	bl	802db90 <memset>
 802d6e2:	4b0d      	ldr	r3, [pc, #52]	@ (802d718 <std+0x58>)
 802d6e4:	6263      	str	r3, [r4, #36]	@ 0x24
 802d6e6:	4b0d      	ldr	r3, [pc, #52]	@ (802d71c <std+0x5c>)
 802d6e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 802d6ea:	4b0d      	ldr	r3, [pc, #52]	@ (802d720 <std+0x60>)
 802d6ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802d6ee:	4b0d      	ldr	r3, [pc, #52]	@ (802d724 <std+0x64>)
 802d6f0:	6323      	str	r3, [r4, #48]	@ 0x30
 802d6f2:	4b0d      	ldr	r3, [pc, #52]	@ (802d728 <std+0x68>)
 802d6f4:	6224      	str	r4, [r4, #32]
 802d6f6:	429c      	cmp	r4, r3
 802d6f8:	d006      	beq.n	802d708 <std+0x48>
 802d6fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802d6fe:	4294      	cmp	r4, r2
 802d700:	d002      	beq.n	802d708 <std+0x48>
 802d702:	33d0      	adds	r3, #208	@ 0xd0
 802d704:	429c      	cmp	r4, r3
 802d706:	d105      	bne.n	802d714 <std+0x54>
 802d708:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802d70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d710:	f000 bc08 	b.w	802df24 <__retarget_lock_init_recursive>
 802d714:	bd10      	pop	{r4, pc}
 802d716:	bf00      	nop
 802d718:	0802d989 	.word	0x0802d989
 802d71c:	0802d9af 	.word	0x0802d9af
 802d720:	0802d9e7 	.word	0x0802d9e7
 802d724:	0802da0b 	.word	0x0802da0b
 802d728:	2000d9d0 	.word	0x2000d9d0

0802d72c <stdio_exit_handler>:
 802d72c:	4a02      	ldr	r2, [pc, #8]	@ (802d738 <stdio_exit_handler+0xc>)
 802d72e:	4903      	ldr	r1, [pc, #12]	@ (802d73c <stdio_exit_handler+0x10>)
 802d730:	4803      	ldr	r0, [pc, #12]	@ (802d740 <stdio_exit_handler+0x14>)
 802d732:	f000 b87b 	b.w	802d82c <_fwalk_sglue>
 802d736:	bf00      	nop
 802d738:	20000130 	.word	0x20000130
 802d73c:	08030f85 	.word	0x08030f85
 802d740:	20000140 	.word	0x20000140

0802d744 <cleanup_stdio>:
 802d744:	6841      	ldr	r1, [r0, #4]
 802d746:	4b0c      	ldr	r3, [pc, #48]	@ (802d778 <cleanup_stdio+0x34>)
 802d748:	4299      	cmp	r1, r3
 802d74a:	b510      	push	{r4, lr}
 802d74c:	4604      	mov	r4, r0
 802d74e:	d001      	beq.n	802d754 <cleanup_stdio+0x10>
 802d750:	f003 fc18 	bl	8030f84 <_fflush_r>
 802d754:	68a1      	ldr	r1, [r4, #8]
 802d756:	4b09      	ldr	r3, [pc, #36]	@ (802d77c <cleanup_stdio+0x38>)
 802d758:	4299      	cmp	r1, r3
 802d75a:	d002      	beq.n	802d762 <cleanup_stdio+0x1e>
 802d75c:	4620      	mov	r0, r4
 802d75e:	f003 fc11 	bl	8030f84 <_fflush_r>
 802d762:	68e1      	ldr	r1, [r4, #12]
 802d764:	4b06      	ldr	r3, [pc, #24]	@ (802d780 <cleanup_stdio+0x3c>)
 802d766:	4299      	cmp	r1, r3
 802d768:	d004      	beq.n	802d774 <cleanup_stdio+0x30>
 802d76a:	4620      	mov	r0, r4
 802d76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d770:	f003 bc08 	b.w	8030f84 <_fflush_r>
 802d774:	bd10      	pop	{r4, pc}
 802d776:	bf00      	nop
 802d778:	2000d9d0 	.word	0x2000d9d0
 802d77c:	2000da38 	.word	0x2000da38
 802d780:	2000daa0 	.word	0x2000daa0

0802d784 <global_stdio_init.part.0>:
 802d784:	b510      	push	{r4, lr}
 802d786:	4b0b      	ldr	r3, [pc, #44]	@ (802d7b4 <global_stdio_init.part.0+0x30>)
 802d788:	4c0b      	ldr	r4, [pc, #44]	@ (802d7b8 <global_stdio_init.part.0+0x34>)
 802d78a:	4a0c      	ldr	r2, [pc, #48]	@ (802d7bc <global_stdio_init.part.0+0x38>)
 802d78c:	601a      	str	r2, [r3, #0]
 802d78e:	4620      	mov	r0, r4
 802d790:	2200      	movs	r2, #0
 802d792:	2104      	movs	r1, #4
 802d794:	f7ff ff94 	bl	802d6c0 <std>
 802d798:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802d79c:	2201      	movs	r2, #1
 802d79e:	2109      	movs	r1, #9
 802d7a0:	f7ff ff8e 	bl	802d6c0 <std>
 802d7a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802d7a8:	2202      	movs	r2, #2
 802d7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d7ae:	2112      	movs	r1, #18
 802d7b0:	f7ff bf86 	b.w	802d6c0 <std>
 802d7b4:	2000db08 	.word	0x2000db08
 802d7b8:	2000d9d0 	.word	0x2000d9d0
 802d7bc:	0802d72d 	.word	0x0802d72d

0802d7c0 <__sfp_lock_acquire>:
 802d7c0:	4801      	ldr	r0, [pc, #4]	@ (802d7c8 <__sfp_lock_acquire+0x8>)
 802d7c2:	f000 bbb0 	b.w	802df26 <__retarget_lock_acquire_recursive>
 802d7c6:	bf00      	nop
 802d7c8:	2000db11 	.word	0x2000db11

0802d7cc <__sfp_lock_release>:
 802d7cc:	4801      	ldr	r0, [pc, #4]	@ (802d7d4 <__sfp_lock_release+0x8>)
 802d7ce:	f000 bbab 	b.w	802df28 <__retarget_lock_release_recursive>
 802d7d2:	bf00      	nop
 802d7d4:	2000db11 	.word	0x2000db11

0802d7d8 <__sinit>:
 802d7d8:	b510      	push	{r4, lr}
 802d7da:	4604      	mov	r4, r0
 802d7dc:	f7ff fff0 	bl	802d7c0 <__sfp_lock_acquire>
 802d7e0:	6a23      	ldr	r3, [r4, #32]
 802d7e2:	b11b      	cbz	r3, 802d7ec <__sinit+0x14>
 802d7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d7e8:	f7ff bff0 	b.w	802d7cc <__sfp_lock_release>
 802d7ec:	4b04      	ldr	r3, [pc, #16]	@ (802d800 <__sinit+0x28>)
 802d7ee:	6223      	str	r3, [r4, #32]
 802d7f0:	4b04      	ldr	r3, [pc, #16]	@ (802d804 <__sinit+0x2c>)
 802d7f2:	681b      	ldr	r3, [r3, #0]
 802d7f4:	2b00      	cmp	r3, #0
 802d7f6:	d1f5      	bne.n	802d7e4 <__sinit+0xc>
 802d7f8:	f7ff ffc4 	bl	802d784 <global_stdio_init.part.0>
 802d7fc:	e7f2      	b.n	802d7e4 <__sinit+0xc>
 802d7fe:	bf00      	nop
 802d800:	0802d745 	.word	0x0802d745
 802d804:	2000db08 	.word	0x2000db08

0802d808 <fiprintf>:
 802d808:	b40e      	push	{r1, r2, r3}
 802d80a:	b503      	push	{r0, r1, lr}
 802d80c:	4601      	mov	r1, r0
 802d80e:	ab03      	add	r3, sp, #12
 802d810:	4805      	ldr	r0, [pc, #20]	@ (802d828 <fiprintf+0x20>)
 802d812:	f853 2b04 	ldr.w	r2, [r3], #4
 802d816:	6800      	ldr	r0, [r0, #0]
 802d818:	9301      	str	r3, [sp, #4]
 802d81a:	f003 f8c9 	bl	80309b0 <_vfiprintf_r>
 802d81e:	b002      	add	sp, #8
 802d820:	f85d eb04 	ldr.w	lr, [sp], #4
 802d824:	b003      	add	sp, #12
 802d826:	4770      	bx	lr
 802d828:	2000013c 	.word	0x2000013c

0802d82c <_fwalk_sglue>:
 802d82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d830:	4607      	mov	r7, r0
 802d832:	4688      	mov	r8, r1
 802d834:	4614      	mov	r4, r2
 802d836:	2600      	movs	r6, #0
 802d838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d83c:	f1b9 0901 	subs.w	r9, r9, #1
 802d840:	d505      	bpl.n	802d84e <_fwalk_sglue+0x22>
 802d842:	6824      	ldr	r4, [r4, #0]
 802d844:	2c00      	cmp	r4, #0
 802d846:	d1f7      	bne.n	802d838 <_fwalk_sglue+0xc>
 802d848:	4630      	mov	r0, r6
 802d84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d84e:	89ab      	ldrh	r3, [r5, #12]
 802d850:	2b01      	cmp	r3, #1
 802d852:	d907      	bls.n	802d864 <_fwalk_sglue+0x38>
 802d854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d858:	3301      	adds	r3, #1
 802d85a:	d003      	beq.n	802d864 <_fwalk_sglue+0x38>
 802d85c:	4629      	mov	r1, r5
 802d85e:	4638      	mov	r0, r7
 802d860:	47c0      	blx	r8
 802d862:	4306      	orrs	r6, r0
 802d864:	3568      	adds	r5, #104	@ 0x68
 802d866:	e7e9      	b.n	802d83c <_fwalk_sglue+0x10>

0802d868 <iprintf>:
 802d868:	b40f      	push	{r0, r1, r2, r3}
 802d86a:	b507      	push	{r0, r1, r2, lr}
 802d86c:	4906      	ldr	r1, [pc, #24]	@ (802d888 <iprintf+0x20>)
 802d86e:	ab04      	add	r3, sp, #16
 802d870:	6808      	ldr	r0, [r1, #0]
 802d872:	f853 2b04 	ldr.w	r2, [r3], #4
 802d876:	6881      	ldr	r1, [r0, #8]
 802d878:	9301      	str	r3, [sp, #4]
 802d87a:	f003 f899 	bl	80309b0 <_vfiprintf_r>
 802d87e:	b003      	add	sp, #12
 802d880:	f85d eb04 	ldr.w	lr, [sp], #4
 802d884:	b004      	add	sp, #16
 802d886:	4770      	bx	lr
 802d888:	2000013c 	.word	0x2000013c

0802d88c <sniprintf>:
 802d88c:	b40c      	push	{r2, r3}
 802d88e:	b530      	push	{r4, r5, lr}
 802d890:	4b17      	ldr	r3, [pc, #92]	@ (802d8f0 <sniprintf+0x64>)
 802d892:	1e0c      	subs	r4, r1, #0
 802d894:	681d      	ldr	r5, [r3, #0]
 802d896:	b09d      	sub	sp, #116	@ 0x74
 802d898:	da08      	bge.n	802d8ac <sniprintf+0x20>
 802d89a:	238b      	movs	r3, #139	@ 0x8b
 802d89c:	602b      	str	r3, [r5, #0]
 802d89e:	f04f 30ff 	mov.w	r0, #4294967295
 802d8a2:	b01d      	add	sp, #116	@ 0x74
 802d8a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d8a8:	b002      	add	sp, #8
 802d8aa:	4770      	bx	lr
 802d8ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802d8b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d8b4:	bf14      	ite	ne
 802d8b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d8ba:	4623      	moveq	r3, r4
 802d8bc:	9304      	str	r3, [sp, #16]
 802d8be:	9307      	str	r3, [sp, #28]
 802d8c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802d8c4:	9002      	str	r0, [sp, #8]
 802d8c6:	9006      	str	r0, [sp, #24]
 802d8c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d8cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802d8ce:	ab21      	add	r3, sp, #132	@ 0x84
 802d8d0:	a902      	add	r1, sp, #8
 802d8d2:	4628      	mov	r0, r5
 802d8d4:	9301      	str	r3, [sp, #4]
 802d8d6:	f002 fd79 	bl	80303cc <_svfiprintf_r>
 802d8da:	1c43      	adds	r3, r0, #1
 802d8dc:	bfbc      	itt	lt
 802d8de:	238b      	movlt	r3, #139	@ 0x8b
 802d8e0:	602b      	strlt	r3, [r5, #0]
 802d8e2:	2c00      	cmp	r4, #0
 802d8e4:	d0dd      	beq.n	802d8a2 <sniprintf+0x16>
 802d8e6:	9b02      	ldr	r3, [sp, #8]
 802d8e8:	2200      	movs	r2, #0
 802d8ea:	701a      	strb	r2, [r3, #0]
 802d8ec:	e7d9      	b.n	802d8a2 <sniprintf+0x16>
 802d8ee:	bf00      	nop
 802d8f0:	2000013c 	.word	0x2000013c

0802d8f4 <siprintf>:
 802d8f4:	b40e      	push	{r1, r2, r3}
 802d8f6:	b500      	push	{lr}
 802d8f8:	b09c      	sub	sp, #112	@ 0x70
 802d8fa:	ab1d      	add	r3, sp, #116	@ 0x74
 802d8fc:	9002      	str	r0, [sp, #8]
 802d8fe:	9006      	str	r0, [sp, #24]
 802d900:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802d904:	4809      	ldr	r0, [pc, #36]	@ (802d92c <siprintf+0x38>)
 802d906:	9107      	str	r1, [sp, #28]
 802d908:	9104      	str	r1, [sp, #16]
 802d90a:	4909      	ldr	r1, [pc, #36]	@ (802d930 <siprintf+0x3c>)
 802d90c:	f853 2b04 	ldr.w	r2, [r3], #4
 802d910:	9105      	str	r1, [sp, #20]
 802d912:	6800      	ldr	r0, [r0, #0]
 802d914:	9301      	str	r3, [sp, #4]
 802d916:	a902      	add	r1, sp, #8
 802d918:	f002 fd58 	bl	80303cc <_svfiprintf_r>
 802d91c:	9b02      	ldr	r3, [sp, #8]
 802d91e:	2200      	movs	r2, #0
 802d920:	701a      	strb	r2, [r3, #0]
 802d922:	b01c      	add	sp, #112	@ 0x70
 802d924:	f85d eb04 	ldr.w	lr, [sp], #4
 802d928:	b003      	add	sp, #12
 802d92a:	4770      	bx	lr
 802d92c:	2000013c 	.word	0x2000013c
 802d930:	ffff0208 	.word	0xffff0208

0802d934 <siscanf>:
 802d934:	b40e      	push	{r1, r2, r3}
 802d936:	b530      	push	{r4, r5, lr}
 802d938:	b09c      	sub	sp, #112	@ 0x70
 802d93a:	ac1f      	add	r4, sp, #124	@ 0x7c
 802d93c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802d940:	f854 5b04 	ldr.w	r5, [r4], #4
 802d944:	f8ad 2014 	strh.w	r2, [sp, #20]
 802d948:	9002      	str	r0, [sp, #8]
 802d94a:	9006      	str	r0, [sp, #24]
 802d94c:	f7e2 fca8 	bl	80102a0 <strlen>
 802d950:	4b0b      	ldr	r3, [pc, #44]	@ (802d980 <siscanf+0x4c>)
 802d952:	9003      	str	r0, [sp, #12]
 802d954:	9007      	str	r0, [sp, #28]
 802d956:	930b      	str	r3, [sp, #44]	@ 0x2c
 802d958:	480a      	ldr	r0, [pc, #40]	@ (802d984 <siscanf+0x50>)
 802d95a:	9401      	str	r4, [sp, #4]
 802d95c:	2300      	movs	r3, #0
 802d95e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802d960:	9314      	str	r3, [sp, #80]	@ 0x50
 802d962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802d966:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d96a:	462a      	mov	r2, r5
 802d96c:	4623      	mov	r3, r4
 802d96e:	a902      	add	r1, sp, #8
 802d970:	6800      	ldr	r0, [r0, #0]
 802d972:	f002 fe7f 	bl	8030674 <__ssvfiscanf_r>
 802d976:	b01c      	add	sp, #112	@ 0x70
 802d978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d97c:	b003      	add	sp, #12
 802d97e:	4770      	bx	lr
 802d980:	0802d9ab 	.word	0x0802d9ab
 802d984:	2000013c 	.word	0x2000013c

0802d988 <__sread>:
 802d988:	b510      	push	{r4, lr}
 802d98a:	460c      	mov	r4, r1
 802d98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d990:	f000 fa6a 	bl	802de68 <_read_r>
 802d994:	2800      	cmp	r0, #0
 802d996:	bfab      	itete	ge
 802d998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802d99a:	89a3      	ldrhlt	r3, [r4, #12]
 802d99c:	181b      	addge	r3, r3, r0
 802d99e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802d9a2:	bfac      	ite	ge
 802d9a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 802d9a6:	81a3      	strhlt	r3, [r4, #12]
 802d9a8:	bd10      	pop	{r4, pc}

0802d9aa <__seofread>:
 802d9aa:	2000      	movs	r0, #0
 802d9ac:	4770      	bx	lr

0802d9ae <__swrite>:
 802d9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d9b2:	461f      	mov	r7, r3
 802d9b4:	898b      	ldrh	r3, [r1, #12]
 802d9b6:	05db      	lsls	r3, r3, #23
 802d9b8:	4605      	mov	r5, r0
 802d9ba:	460c      	mov	r4, r1
 802d9bc:	4616      	mov	r6, r2
 802d9be:	d505      	bpl.n	802d9cc <__swrite+0x1e>
 802d9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d9c4:	2302      	movs	r3, #2
 802d9c6:	2200      	movs	r2, #0
 802d9c8:	f000 fa3c 	bl	802de44 <_lseek_r>
 802d9cc:	89a3      	ldrh	r3, [r4, #12]
 802d9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d9d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802d9d6:	81a3      	strh	r3, [r4, #12]
 802d9d8:	4632      	mov	r2, r6
 802d9da:	463b      	mov	r3, r7
 802d9dc:	4628      	mov	r0, r5
 802d9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d9e2:	f000 ba63 	b.w	802deac <_write_r>

0802d9e6 <__sseek>:
 802d9e6:	b510      	push	{r4, lr}
 802d9e8:	460c      	mov	r4, r1
 802d9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d9ee:	f000 fa29 	bl	802de44 <_lseek_r>
 802d9f2:	1c43      	adds	r3, r0, #1
 802d9f4:	89a3      	ldrh	r3, [r4, #12]
 802d9f6:	bf15      	itete	ne
 802d9f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 802d9fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802d9fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802da02:	81a3      	strheq	r3, [r4, #12]
 802da04:	bf18      	it	ne
 802da06:	81a3      	strhne	r3, [r4, #12]
 802da08:	bd10      	pop	{r4, pc}

0802da0a <__sclose>:
 802da0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802da0e:	f000 b9b3 	b.w	802dd78 <_close_r>

0802da12 <__swbuf_r>:
 802da12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da14:	460e      	mov	r6, r1
 802da16:	4614      	mov	r4, r2
 802da18:	4605      	mov	r5, r0
 802da1a:	b118      	cbz	r0, 802da24 <__swbuf_r+0x12>
 802da1c:	6a03      	ldr	r3, [r0, #32]
 802da1e:	b90b      	cbnz	r3, 802da24 <__swbuf_r+0x12>
 802da20:	f7ff feda 	bl	802d7d8 <__sinit>
 802da24:	69a3      	ldr	r3, [r4, #24]
 802da26:	60a3      	str	r3, [r4, #8]
 802da28:	89a3      	ldrh	r3, [r4, #12]
 802da2a:	071a      	lsls	r2, r3, #28
 802da2c:	d501      	bpl.n	802da32 <__swbuf_r+0x20>
 802da2e:	6923      	ldr	r3, [r4, #16]
 802da30:	b943      	cbnz	r3, 802da44 <__swbuf_r+0x32>
 802da32:	4621      	mov	r1, r4
 802da34:	4628      	mov	r0, r5
 802da36:	f000 f82b 	bl	802da90 <__swsetup_r>
 802da3a:	b118      	cbz	r0, 802da44 <__swbuf_r+0x32>
 802da3c:	f04f 37ff 	mov.w	r7, #4294967295
 802da40:	4638      	mov	r0, r7
 802da42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802da44:	6823      	ldr	r3, [r4, #0]
 802da46:	6922      	ldr	r2, [r4, #16]
 802da48:	1a98      	subs	r0, r3, r2
 802da4a:	6963      	ldr	r3, [r4, #20]
 802da4c:	b2f6      	uxtb	r6, r6
 802da4e:	4283      	cmp	r3, r0
 802da50:	4637      	mov	r7, r6
 802da52:	dc05      	bgt.n	802da60 <__swbuf_r+0x4e>
 802da54:	4621      	mov	r1, r4
 802da56:	4628      	mov	r0, r5
 802da58:	f003 fa94 	bl	8030f84 <_fflush_r>
 802da5c:	2800      	cmp	r0, #0
 802da5e:	d1ed      	bne.n	802da3c <__swbuf_r+0x2a>
 802da60:	68a3      	ldr	r3, [r4, #8]
 802da62:	3b01      	subs	r3, #1
 802da64:	60a3      	str	r3, [r4, #8]
 802da66:	6823      	ldr	r3, [r4, #0]
 802da68:	1c5a      	adds	r2, r3, #1
 802da6a:	6022      	str	r2, [r4, #0]
 802da6c:	701e      	strb	r6, [r3, #0]
 802da6e:	6962      	ldr	r2, [r4, #20]
 802da70:	1c43      	adds	r3, r0, #1
 802da72:	429a      	cmp	r2, r3
 802da74:	d004      	beq.n	802da80 <__swbuf_r+0x6e>
 802da76:	89a3      	ldrh	r3, [r4, #12]
 802da78:	07db      	lsls	r3, r3, #31
 802da7a:	d5e1      	bpl.n	802da40 <__swbuf_r+0x2e>
 802da7c:	2e0a      	cmp	r6, #10
 802da7e:	d1df      	bne.n	802da40 <__swbuf_r+0x2e>
 802da80:	4621      	mov	r1, r4
 802da82:	4628      	mov	r0, r5
 802da84:	f003 fa7e 	bl	8030f84 <_fflush_r>
 802da88:	2800      	cmp	r0, #0
 802da8a:	d0d9      	beq.n	802da40 <__swbuf_r+0x2e>
 802da8c:	e7d6      	b.n	802da3c <__swbuf_r+0x2a>
	...

0802da90 <__swsetup_r>:
 802da90:	b538      	push	{r3, r4, r5, lr}
 802da92:	4b29      	ldr	r3, [pc, #164]	@ (802db38 <__swsetup_r+0xa8>)
 802da94:	4605      	mov	r5, r0
 802da96:	6818      	ldr	r0, [r3, #0]
 802da98:	460c      	mov	r4, r1
 802da9a:	b118      	cbz	r0, 802daa4 <__swsetup_r+0x14>
 802da9c:	6a03      	ldr	r3, [r0, #32]
 802da9e:	b90b      	cbnz	r3, 802daa4 <__swsetup_r+0x14>
 802daa0:	f7ff fe9a 	bl	802d7d8 <__sinit>
 802daa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802daa8:	0719      	lsls	r1, r3, #28
 802daaa:	d422      	bmi.n	802daf2 <__swsetup_r+0x62>
 802daac:	06da      	lsls	r2, r3, #27
 802daae:	d407      	bmi.n	802dac0 <__swsetup_r+0x30>
 802dab0:	2209      	movs	r2, #9
 802dab2:	602a      	str	r2, [r5, #0]
 802dab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802dab8:	81a3      	strh	r3, [r4, #12]
 802daba:	f04f 30ff 	mov.w	r0, #4294967295
 802dabe:	e033      	b.n	802db28 <__swsetup_r+0x98>
 802dac0:	0758      	lsls	r0, r3, #29
 802dac2:	d512      	bpl.n	802daea <__swsetup_r+0x5a>
 802dac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802dac6:	b141      	cbz	r1, 802dada <__swsetup_r+0x4a>
 802dac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802dacc:	4299      	cmp	r1, r3
 802dace:	d002      	beq.n	802dad6 <__swsetup_r+0x46>
 802dad0:	4628      	mov	r0, r5
 802dad2:	f001 f89d 	bl	802ec10 <_free_r>
 802dad6:	2300      	movs	r3, #0
 802dad8:	6363      	str	r3, [r4, #52]	@ 0x34
 802dada:	89a3      	ldrh	r3, [r4, #12]
 802dadc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802dae0:	81a3      	strh	r3, [r4, #12]
 802dae2:	2300      	movs	r3, #0
 802dae4:	6063      	str	r3, [r4, #4]
 802dae6:	6923      	ldr	r3, [r4, #16]
 802dae8:	6023      	str	r3, [r4, #0]
 802daea:	89a3      	ldrh	r3, [r4, #12]
 802daec:	f043 0308 	orr.w	r3, r3, #8
 802daf0:	81a3      	strh	r3, [r4, #12]
 802daf2:	6923      	ldr	r3, [r4, #16]
 802daf4:	b94b      	cbnz	r3, 802db0a <__swsetup_r+0x7a>
 802daf6:	89a3      	ldrh	r3, [r4, #12]
 802daf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802dafc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802db00:	d003      	beq.n	802db0a <__swsetup_r+0x7a>
 802db02:	4621      	mov	r1, r4
 802db04:	4628      	mov	r0, r5
 802db06:	f003 fa8b 	bl	8031020 <__smakebuf_r>
 802db0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802db0e:	f013 0201 	ands.w	r2, r3, #1
 802db12:	d00a      	beq.n	802db2a <__swsetup_r+0x9a>
 802db14:	2200      	movs	r2, #0
 802db16:	60a2      	str	r2, [r4, #8]
 802db18:	6962      	ldr	r2, [r4, #20]
 802db1a:	4252      	negs	r2, r2
 802db1c:	61a2      	str	r2, [r4, #24]
 802db1e:	6922      	ldr	r2, [r4, #16]
 802db20:	b942      	cbnz	r2, 802db34 <__swsetup_r+0xa4>
 802db22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802db26:	d1c5      	bne.n	802dab4 <__swsetup_r+0x24>
 802db28:	bd38      	pop	{r3, r4, r5, pc}
 802db2a:	0799      	lsls	r1, r3, #30
 802db2c:	bf58      	it	pl
 802db2e:	6962      	ldrpl	r2, [r4, #20]
 802db30:	60a2      	str	r2, [r4, #8]
 802db32:	e7f4      	b.n	802db1e <__swsetup_r+0x8e>
 802db34:	2000      	movs	r0, #0
 802db36:	e7f7      	b.n	802db28 <__swsetup_r+0x98>
 802db38:	2000013c 	.word	0x2000013c

0802db3c <memcmp>:
 802db3c:	b510      	push	{r4, lr}
 802db3e:	3901      	subs	r1, #1
 802db40:	4402      	add	r2, r0
 802db42:	4290      	cmp	r0, r2
 802db44:	d101      	bne.n	802db4a <memcmp+0xe>
 802db46:	2000      	movs	r0, #0
 802db48:	e005      	b.n	802db56 <memcmp+0x1a>
 802db4a:	7803      	ldrb	r3, [r0, #0]
 802db4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802db50:	42a3      	cmp	r3, r4
 802db52:	d001      	beq.n	802db58 <memcmp+0x1c>
 802db54:	1b18      	subs	r0, r3, r4
 802db56:	bd10      	pop	{r4, pc}
 802db58:	3001      	adds	r0, #1
 802db5a:	e7f2      	b.n	802db42 <memcmp+0x6>

0802db5c <memmove>:
 802db5c:	4288      	cmp	r0, r1
 802db5e:	b510      	push	{r4, lr}
 802db60:	eb01 0402 	add.w	r4, r1, r2
 802db64:	d902      	bls.n	802db6c <memmove+0x10>
 802db66:	4284      	cmp	r4, r0
 802db68:	4623      	mov	r3, r4
 802db6a:	d807      	bhi.n	802db7c <memmove+0x20>
 802db6c:	1e43      	subs	r3, r0, #1
 802db6e:	42a1      	cmp	r1, r4
 802db70:	d008      	beq.n	802db84 <memmove+0x28>
 802db72:	f811 2b01 	ldrb.w	r2, [r1], #1
 802db76:	f803 2f01 	strb.w	r2, [r3, #1]!
 802db7a:	e7f8      	b.n	802db6e <memmove+0x12>
 802db7c:	4402      	add	r2, r0
 802db7e:	4601      	mov	r1, r0
 802db80:	428a      	cmp	r2, r1
 802db82:	d100      	bne.n	802db86 <memmove+0x2a>
 802db84:	bd10      	pop	{r4, pc}
 802db86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802db8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802db8e:	e7f7      	b.n	802db80 <memmove+0x24>

0802db90 <memset>:
 802db90:	4402      	add	r2, r0
 802db92:	4603      	mov	r3, r0
 802db94:	4293      	cmp	r3, r2
 802db96:	d100      	bne.n	802db9a <memset+0xa>
 802db98:	4770      	bx	lr
 802db9a:	f803 1b01 	strb.w	r1, [r3], #1
 802db9e:	e7f9      	b.n	802db94 <memset+0x4>

0802dba0 <strcat>:
 802dba0:	b510      	push	{r4, lr}
 802dba2:	4602      	mov	r2, r0
 802dba4:	7814      	ldrb	r4, [r2, #0]
 802dba6:	4613      	mov	r3, r2
 802dba8:	3201      	adds	r2, #1
 802dbaa:	2c00      	cmp	r4, #0
 802dbac:	d1fa      	bne.n	802dba4 <strcat+0x4>
 802dbae:	3b01      	subs	r3, #1
 802dbb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 802dbb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 802dbb8:	2a00      	cmp	r2, #0
 802dbba:	d1f9      	bne.n	802dbb0 <strcat+0x10>
 802dbbc:	bd10      	pop	{r4, pc}

0802dbbe <strchr>:
 802dbbe:	b2c9      	uxtb	r1, r1
 802dbc0:	4603      	mov	r3, r0
 802dbc2:	4618      	mov	r0, r3
 802dbc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802dbc8:	b112      	cbz	r2, 802dbd0 <strchr+0x12>
 802dbca:	428a      	cmp	r2, r1
 802dbcc:	d1f9      	bne.n	802dbc2 <strchr+0x4>
 802dbce:	4770      	bx	lr
 802dbd0:	2900      	cmp	r1, #0
 802dbd2:	bf18      	it	ne
 802dbd4:	2000      	movne	r0, #0
 802dbd6:	4770      	bx	lr

0802dbd8 <strcspn>:
 802dbd8:	b570      	push	{r4, r5, r6, lr}
 802dbda:	4603      	mov	r3, r0
 802dbdc:	461e      	mov	r6, r3
 802dbde:	f813 4b01 	ldrb.w	r4, [r3], #1
 802dbe2:	b144      	cbz	r4, 802dbf6 <strcspn+0x1e>
 802dbe4:	1e4a      	subs	r2, r1, #1
 802dbe6:	e001      	b.n	802dbec <strcspn+0x14>
 802dbe8:	42a5      	cmp	r5, r4
 802dbea:	d004      	beq.n	802dbf6 <strcspn+0x1e>
 802dbec:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802dbf0:	2d00      	cmp	r5, #0
 802dbf2:	d1f9      	bne.n	802dbe8 <strcspn+0x10>
 802dbf4:	e7f2      	b.n	802dbdc <strcspn+0x4>
 802dbf6:	1a30      	subs	r0, r6, r0
 802dbf8:	bd70      	pop	{r4, r5, r6, pc}

0802dbfa <strncat>:
 802dbfa:	b530      	push	{r4, r5, lr}
 802dbfc:	4604      	mov	r4, r0
 802dbfe:	7825      	ldrb	r5, [r4, #0]
 802dc00:	4623      	mov	r3, r4
 802dc02:	3401      	adds	r4, #1
 802dc04:	2d00      	cmp	r5, #0
 802dc06:	d1fa      	bne.n	802dbfe <strncat+0x4>
 802dc08:	3a01      	subs	r2, #1
 802dc0a:	d304      	bcc.n	802dc16 <strncat+0x1c>
 802dc0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802dc10:	f803 4b01 	strb.w	r4, [r3], #1
 802dc14:	b904      	cbnz	r4, 802dc18 <strncat+0x1e>
 802dc16:	bd30      	pop	{r4, r5, pc}
 802dc18:	2a00      	cmp	r2, #0
 802dc1a:	d1f5      	bne.n	802dc08 <strncat+0xe>
 802dc1c:	701a      	strb	r2, [r3, #0]
 802dc1e:	e7f3      	b.n	802dc08 <strncat+0xe>

0802dc20 <strncmp>:
 802dc20:	b510      	push	{r4, lr}
 802dc22:	b16a      	cbz	r2, 802dc40 <strncmp+0x20>
 802dc24:	3901      	subs	r1, #1
 802dc26:	1884      	adds	r4, r0, r2
 802dc28:	f810 2b01 	ldrb.w	r2, [r0], #1
 802dc2c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802dc30:	429a      	cmp	r2, r3
 802dc32:	d103      	bne.n	802dc3c <strncmp+0x1c>
 802dc34:	42a0      	cmp	r0, r4
 802dc36:	d001      	beq.n	802dc3c <strncmp+0x1c>
 802dc38:	2a00      	cmp	r2, #0
 802dc3a:	d1f5      	bne.n	802dc28 <strncmp+0x8>
 802dc3c:	1ad0      	subs	r0, r2, r3
 802dc3e:	bd10      	pop	{r4, pc}
 802dc40:	4610      	mov	r0, r2
 802dc42:	e7fc      	b.n	802dc3e <strncmp+0x1e>

0802dc44 <strncpy>:
 802dc44:	b510      	push	{r4, lr}
 802dc46:	3901      	subs	r1, #1
 802dc48:	4603      	mov	r3, r0
 802dc4a:	b132      	cbz	r2, 802dc5a <strncpy+0x16>
 802dc4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802dc50:	f803 4b01 	strb.w	r4, [r3], #1
 802dc54:	3a01      	subs	r2, #1
 802dc56:	2c00      	cmp	r4, #0
 802dc58:	d1f7      	bne.n	802dc4a <strncpy+0x6>
 802dc5a:	441a      	add	r2, r3
 802dc5c:	2100      	movs	r1, #0
 802dc5e:	4293      	cmp	r3, r2
 802dc60:	d100      	bne.n	802dc64 <strncpy+0x20>
 802dc62:	bd10      	pop	{r4, pc}
 802dc64:	f803 1b01 	strb.w	r1, [r3], #1
 802dc68:	e7f9      	b.n	802dc5e <strncpy+0x1a>

0802dc6a <strspn>:
 802dc6a:	b570      	push	{r4, r5, r6, lr}
 802dc6c:	4603      	mov	r3, r0
 802dc6e:	461e      	mov	r6, r3
 802dc70:	f813 4b01 	ldrb.w	r4, [r3], #1
 802dc74:	b13c      	cbz	r4, 802dc86 <strspn+0x1c>
 802dc76:	1e4a      	subs	r2, r1, #1
 802dc78:	e001      	b.n	802dc7e <strspn+0x14>
 802dc7a:	42a5      	cmp	r5, r4
 802dc7c:	d0f7      	beq.n	802dc6e <strspn+0x4>
 802dc7e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802dc82:	2d00      	cmp	r5, #0
 802dc84:	d1f9      	bne.n	802dc7a <strspn+0x10>
 802dc86:	1a30      	subs	r0, r6, r0
 802dc88:	bd70      	pop	{r4, r5, r6, pc}
	...

0802dc8c <strtok>:
 802dc8c:	4b16      	ldr	r3, [pc, #88]	@ (802dce8 <strtok+0x5c>)
 802dc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dc92:	681f      	ldr	r7, [r3, #0]
 802dc94:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 802dc96:	4605      	mov	r5, r0
 802dc98:	460e      	mov	r6, r1
 802dc9a:	b9ec      	cbnz	r4, 802dcd8 <strtok+0x4c>
 802dc9c:	2050      	movs	r0, #80	@ 0x50
 802dc9e:	f7fe fde5 	bl	802c86c <malloc>
 802dca2:	4602      	mov	r2, r0
 802dca4:	6478      	str	r0, [r7, #68]	@ 0x44
 802dca6:	b920      	cbnz	r0, 802dcb2 <strtok+0x26>
 802dca8:	4b10      	ldr	r3, [pc, #64]	@ (802dcec <strtok+0x60>)
 802dcaa:	4811      	ldr	r0, [pc, #68]	@ (802dcf0 <strtok+0x64>)
 802dcac:	215b      	movs	r1, #91	@ 0x5b
 802dcae:	f7fe fdab 	bl	802c808 <__assert_func>
 802dcb2:	e9c0 4400 	strd	r4, r4, [r0]
 802dcb6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802dcba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802dcbe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 802dcc2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 802dcc6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 802dcca:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 802dcce:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 802dcd2:	6184      	str	r4, [r0, #24]
 802dcd4:	7704      	strb	r4, [r0, #28]
 802dcd6:	6244      	str	r4, [r0, #36]	@ 0x24
 802dcd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802dcda:	4631      	mov	r1, r6
 802dcdc:	4628      	mov	r0, r5
 802dcde:	2301      	movs	r3, #1
 802dce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802dce4:	f000 b806 	b.w	802dcf4 <__strtok_r>
 802dce8:	2000013c 	.word	0x2000013c
 802dcec:	08034d83 	.word	0x08034d83
 802dcf0:	08034d9a 	.word	0x08034d9a

0802dcf4 <__strtok_r>:
 802dcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802dcf6:	4604      	mov	r4, r0
 802dcf8:	b908      	cbnz	r0, 802dcfe <__strtok_r+0xa>
 802dcfa:	6814      	ldr	r4, [r2, #0]
 802dcfc:	b144      	cbz	r4, 802dd10 <__strtok_r+0x1c>
 802dcfe:	4620      	mov	r0, r4
 802dd00:	f814 5b01 	ldrb.w	r5, [r4], #1
 802dd04:	460f      	mov	r7, r1
 802dd06:	f817 6b01 	ldrb.w	r6, [r7], #1
 802dd0a:	b91e      	cbnz	r6, 802dd14 <__strtok_r+0x20>
 802dd0c:	b965      	cbnz	r5, 802dd28 <__strtok_r+0x34>
 802dd0e:	6015      	str	r5, [r2, #0]
 802dd10:	2000      	movs	r0, #0
 802dd12:	e005      	b.n	802dd20 <__strtok_r+0x2c>
 802dd14:	42b5      	cmp	r5, r6
 802dd16:	d1f6      	bne.n	802dd06 <__strtok_r+0x12>
 802dd18:	2b00      	cmp	r3, #0
 802dd1a:	d1f0      	bne.n	802dcfe <__strtok_r+0xa>
 802dd1c:	6014      	str	r4, [r2, #0]
 802dd1e:	7003      	strb	r3, [r0, #0]
 802dd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dd22:	461c      	mov	r4, r3
 802dd24:	e00c      	b.n	802dd40 <__strtok_r+0x4c>
 802dd26:	b915      	cbnz	r5, 802dd2e <__strtok_r+0x3a>
 802dd28:	f814 3b01 	ldrb.w	r3, [r4], #1
 802dd2c:	460e      	mov	r6, r1
 802dd2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 802dd32:	42ab      	cmp	r3, r5
 802dd34:	d1f7      	bne.n	802dd26 <__strtok_r+0x32>
 802dd36:	2b00      	cmp	r3, #0
 802dd38:	d0f3      	beq.n	802dd22 <__strtok_r+0x2e>
 802dd3a:	2300      	movs	r3, #0
 802dd3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 802dd40:	6014      	str	r4, [r2, #0]
 802dd42:	e7ed      	b.n	802dd20 <__strtok_r+0x2c>

0802dd44 <strstr>:
 802dd44:	780a      	ldrb	r2, [r1, #0]
 802dd46:	b570      	push	{r4, r5, r6, lr}
 802dd48:	b96a      	cbnz	r2, 802dd66 <strstr+0x22>
 802dd4a:	bd70      	pop	{r4, r5, r6, pc}
 802dd4c:	429a      	cmp	r2, r3
 802dd4e:	d109      	bne.n	802dd64 <strstr+0x20>
 802dd50:	460c      	mov	r4, r1
 802dd52:	4605      	mov	r5, r0
 802dd54:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802dd58:	2b00      	cmp	r3, #0
 802dd5a:	d0f6      	beq.n	802dd4a <strstr+0x6>
 802dd5c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802dd60:	429e      	cmp	r6, r3
 802dd62:	d0f7      	beq.n	802dd54 <strstr+0x10>
 802dd64:	3001      	adds	r0, #1
 802dd66:	7803      	ldrb	r3, [r0, #0]
 802dd68:	2b00      	cmp	r3, #0
 802dd6a:	d1ef      	bne.n	802dd4c <strstr+0x8>
 802dd6c:	4618      	mov	r0, r3
 802dd6e:	e7ec      	b.n	802dd4a <strstr+0x6>

0802dd70 <_localeconv_r>:
 802dd70:	4800      	ldr	r0, [pc, #0]	@ (802dd74 <_localeconv_r+0x4>)
 802dd72:	4770      	bx	lr
 802dd74:	2000027c 	.word	0x2000027c

0802dd78 <_close_r>:
 802dd78:	b538      	push	{r3, r4, r5, lr}
 802dd7a:	4d06      	ldr	r5, [pc, #24]	@ (802dd94 <_close_r+0x1c>)
 802dd7c:	2300      	movs	r3, #0
 802dd7e:	4604      	mov	r4, r0
 802dd80:	4608      	mov	r0, r1
 802dd82:	602b      	str	r3, [r5, #0]
 802dd84:	f7e4 ffb2 	bl	8012cec <_close>
 802dd88:	1c43      	adds	r3, r0, #1
 802dd8a:	d102      	bne.n	802dd92 <_close_r+0x1a>
 802dd8c:	682b      	ldr	r3, [r5, #0]
 802dd8e:	b103      	cbz	r3, 802dd92 <_close_r+0x1a>
 802dd90:	6023      	str	r3, [r4, #0]
 802dd92:	bd38      	pop	{r3, r4, r5, pc}
 802dd94:	2000db0c 	.word	0x2000db0c

0802dd98 <_reclaim_reent>:
 802dd98:	4b29      	ldr	r3, [pc, #164]	@ (802de40 <_reclaim_reent+0xa8>)
 802dd9a:	681b      	ldr	r3, [r3, #0]
 802dd9c:	4283      	cmp	r3, r0
 802dd9e:	b570      	push	{r4, r5, r6, lr}
 802dda0:	4604      	mov	r4, r0
 802dda2:	d04b      	beq.n	802de3c <_reclaim_reent+0xa4>
 802dda4:	69c3      	ldr	r3, [r0, #28]
 802dda6:	b1ab      	cbz	r3, 802ddd4 <_reclaim_reent+0x3c>
 802dda8:	68db      	ldr	r3, [r3, #12]
 802ddaa:	b16b      	cbz	r3, 802ddc8 <_reclaim_reent+0x30>
 802ddac:	2500      	movs	r5, #0
 802ddae:	69e3      	ldr	r3, [r4, #28]
 802ddb0:	68db      	ldr	r3, [r3, #12]
 802ddb2:	5959      	ldr	r1, [r3, r5]
 802ddb4:	2900      	cmp	r1, #0
 802ddb6:	d13b      	bne.n	802de30 <_reclaim_reent+0x98>
 802ddb8:	3504      	adds	r5, #4
 802ddba:	2d80      	cmp	r5, #128	@ 0x80
 802ddbc:	d1f7      	bne.n	802ddae <_reclaim_reent+0x16>
 802ddbe:	69e3      	ldr	r3, [r4, #28]
 802ddc0:	4620      	mov	r0, r4
 802ddc2:	68d9      	ldr	r1, [r3, #12]
 802ddc4:	f000 ff24 	bl	802ec10 <_free_r>
 802ddc8:	69e3      	ldr	r3, [r4, #28]
 802ddca:	6819      	ldr	r1, [r3, #0]
 802ddcc:	b111      	cbz	r1, 802ddd4 <_reclaim_reent+0x3c>
 802ddce:	4620      	mov	r0, r4
 802ddd0:	f000 ff1e 	bl	802ec10 <_free_r>
 802ddd4:	6961      	ldr	r1, [r4, #20]
 802ddd6:	b111      	cbz	r1, 802ddde <_reclaim_reent+0x46>
 802ddd8:	4620      	mov	r0, r4
 802ddda:	f000 ff19 	bl	802ec10 <_free_r>
 802ddde:	69e1      	ldr	r1, [r4, #28]
 802dde0:	b111      	cbz	r1, 802dde8 <_reclaim_reent+0x50>
 802dde2:	4620      	mov	r0, r4
 802dde4:	f000 ff14 	bl	802ec10 <_free_r>
 802dde8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802ddea:	b111      	cbz	r1, 802ddf2 <_reclaim_reent+0x5a>
 802ddec:	4620      	mov	r0, r4
 802ddee:	f000 ff0f 	bl	802ec10 <_free_r>
 802ddf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802ddf4:	b111      	cbz	r1, 802ddfc <_reclaim_reent+0x64>
 802ddf6:	4620      	mov	r0, r4
 802ddf8:	f000 ff0a 	bl	802ec10 <_free_r>
 802ddfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802ddfe:	b111      	cbz	r1, 802de06 <_reclaim_reent+0x6e>
 802de00:	4620      	mov	r0, r4
 802de02:	f000 ff05 	bl	802ec10 <_free_r>
 802de06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802de08:	b111      	cbz	r1, 802de10 <_reclaim_reent+0x78>
 802de0a:	4620      	mov	r0, r4
 802de0c:	f000 ff00 	bl	802ec10 <_free_r>
 802de10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802de12:	b111      	cbz	r1, 802de1a <_reclaim_reent+0x82>
 802de14:	4620      	mov	r0, r4
 802de16:	f000 fefb 	bl	802ec10 <_free_r>
 802de1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802de1c:	b111      	cbz	r1, 802de24 <_reclaim_reent+0x8c>
 802de1e:	4620      	mov	r0, r4
 802de20:	f000 fef6 	bl	802ec10 <_free_r>
 802de24:	6a23      	ldr	r3, [r4, #32]
 802de26:	b14b      	cbz	r3, 802de3c <_reclaim_reent+0xa4>
 802de28:	4620      	mov	r0, r4
 802de2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802de2e:	4718      	bx	r3
 802de30:	680e      	ldr	r6, [r1, #0]
 802de32:	4620      	mov	r0, r4
 802de34:	f000 feec 	bl	802ec10 <_free_r>
 802de38:	4631      	mov	r1, r6
 802de3a:	e7bb      	b.n	802ddb4 <_reclaim_reent+0x1c>
 802de3c:	bd70      	pop	{r4, r5, r6, pc}
 802de3e:	bf00      	nop
 802de40:	2000013c 	.word	0x2000013c

0802de44 <_lseek_r>:
 802de44:	b538      	push	{r3, r4, r5, lr}
 802de46:	4d07      	ldr	r5, [pc, #28]	@ (802de64 <_lseek_r+0x20>)
 802de48:	4604      	mov	r4, r0
 802de4a:	4608      	mov	r0, r1
 802de4c:	4611      	mov	r1, r2
 802de4e:	2200      	movs	r2, #0
 802de50:	602a      	str	r2, [r5, #0]
 802de52:	461a      	mov	r2, r3
 802de54:	f7e4 ff71 	bl	8012d3a <_lseek>
 802de58:	1c43      	adds	r3, r0, #1
 802de5a:	d102      	bne.n	802de62 <_lseek_r+0x1e>
 802de5c:	682b      	ldr	r3, [r5, #0]
 802de5e:	b103      	cbz	r3, 802de62 <_lseek_r+0x1e>
 802de60:	6023      	str	r3, [r4, #0]
 802de62:	bd38      	pop	{r3, r4, r5, pc}
 802de64:	2000db0c 	.word	0x2000db0c

0802de68 <_read_r>:
 802de68:	b538      	push	{r3, r4, r5, lr}
 802de6a:	4d07      	ldr	r5, [pc, #28]	@ (802de88 <_read_r+0x20>)
 802de6c:	4604      	mov	r4, r0
 802de6e:	4608      	mov	r0, r1
 802de70:	4611      	mov	r1, r2
 802de72:	2200      	movs	r2, #0
 802de74:	602a      	str	r2, [r5, #0]
 802de76:	461a      	mov	r2, r3
 802de78:	f7e4 feff 	bl	8012c7a <_read>
 802de7c:	1c43      	adds	r3, r0, #1
 802de7e:	d102      	bne.n	802de86 <_read_r+0x1e>
 802de80:	682b      	ldr	r3, [r5, #0]
 802de82:	b103      	cbz	r3, 802de86 <_read_r+0x1e>
 802de84:	6023      	str	r3, [r4, #0]
 802de86:	bd38      	pop	{r3, r4, r5, pc}
 802de88:	2000db0c 	.word	0x2000db0c

0802de8c <_sbrk_r>:
 802de8c:	b538      	push	{r3, r4, r5, lr}
 802de8e:	4d06      	ldr	r5, [pc, #24]	@ (802dea8 <_sbrk_r+0x1c>)
 802de90:	2300      	movs	r3, #0
 802de92:	4604      	mov	r4, r0
 802de94:	4608      	mov	r0, r1
 802de96:	602b      	str	r3, [r5, #0]
 802de98:	f7e4 ff5c 	bl	8012d54 <_sbrk>
 802de9c:	1c43      	adds	r3, r0, #1
 802de9e:	d102      	bne.n	802dea6 <_sbrk_r+0x1a>
 802dea0:	682b      	ldr	r3, [r5, #0]
 802dea2:	b103      	cbz	r3, 802dea6 <_sbrk_r+0x1a>
 802dea4:	6023      	str	r3, [r4, #0]
 802dea6:	bd38      	pop	{r3, r4, r5, pc}
 802dea8:	2000db0c 	.word	0x2000db0c

0802deac <_write_r>:
 802deac:	b538      	push	{r3, r4, r5, lr}
 802deae:	4d07      	ldr	r5, [pc, #28]	@ (802decc <_write_r+0x20>)
 802deb0:	4604      	mov	r4, r0
 802deb2:	4608      	mov	r0, r1
 802deb4:	4611      	mov	r1, r2
 802deb6:	2200      	movs	r2, #0
 802deb8:	602a      	str	r2, [r5, #0]
 802deba:	461a      	mov	r2, r3
 802debc:	f7e4 fefa 	bl	8012cb4 <_write>
 802dec0:	1c43      	adds	r3, r0, #1
 802dec2:	d102      	bne.n	802deca <_write_r+0x1e>
 802dec4:	682b      	ldr	r3, [r5, #0]
 802dec6:	b103      	cbz	r3, 802deca <_write_r+0x1e>
 802dec8:	6023      	str	r3, [r4, #0]
 802deca:	bd38      	pop	{r3, r4, r5, pc}
 802decc:	2000db0c 	.word	0x2000db0c

0802ded0 <__errno>:
 802ded0:	4b01      	ldr	r3, [pc, #4]	@ (802ded8 <__errno+0x8>)
 802ded2:	6818      	ldr	r0, [r3, #0]
 802ded4:	4770      	bx	lr
 802ded6:	bf00      	nop
 802ded8:	2000013c 	.word	0x2000013c

0802dedc <__libc_init_array>:
 802dedc:	b570      	push	{r4, r5, r6, lr}
 802dede:	4d0d      	ldr	r5, [pc, #52]	@ (802df14 <__libc_init_array+0x38>)
 802dee0:	4c0d      	ldr	r4, [pc, #52]	@ (802df18 <__libc_init_array+0x3c>)
 802dee2:	1b64      	subs	r4, r4, r5
 802dee4:	10a4      	asrs	r4, r4, #2
 802dee6:	2600      	movs	r6, #0
 802dee8:	42a6      	cmp	r6, r4
 802deea:	d109      	bne.n	802df00 <__libc_init_array+0x24>
 802deec:	4d0b      	ldr	r5, [pc, #44]	@ (802df1c <__libc_init_array+0x40>)
 802deee:	4c0c      	ldr	r4, [pc, #48]	@ (802df20 <__libc_init_array+0x44>)
 802def0:	f003 fdb6 	bl	8031a60 <_init>
 802def4:	1b64      	subs	r4, r4, r5
 802def6:	10a4      	asrs	r4, r4, #2
 802def8:	2600      	movs	r6, #0
 802defa:	42a6      	cmp	r6, r4
 802defc:	d105      	bne.n	802df0a <__libc_init_array+0x2e>
 802defe:	bd70      	pop	{r4, r5, r6, pc}
 802df00:	f855 3b04 	ldr.w	r3, [r5], #4
 802df04:	4798      	blx	r3
 802df06:	3601      	adds	r6, #1
 802df08:	e7ee      	b.n	802dee8 <__libc_init_array+0xc>
 802df0a:	f855 3b04 	ldr.w	r3, [r5], #4
 802df0e:	4798      	blx	r3
 802df10:	3601      	adds	r6, #1
 802df12:	e7f2      	b.n	802defa <__libc_init_array+0x1e>
 802df14:	080351b8 	.word	0x080351b8
 802df18:	080351b8 	.word	0x080351b8
 802df1c:	080351b8 	.word	0x080351b8
 802df20:	080351bc 	.word	0x080351bc

0802df24 <__retarget_lock_init_recursive>:
 802df24:	4770      	bx	lr

0802df26 <__retarget_lock_acquire_recursive>:
 802df26:	4770      	bx	lr

0802df28 <__retarget_lock_release_recursive>:
 802df28:	4770      	bx	lr

0802df2a <strcpy>:
 802df2a:	4603      	mov	r3, r0
 802df2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802df30:	f803 2b01 	strb.w	r2, [r3], #1
 802df34:	2a00      	cmp	r2, #0
 802df36:	d1f9      	bne.n	802df2c <strcpy+0x2>
 802df38:	4770      	bx	lr

0802df3a <memcpy>:
 802df3a:	440a      	add	r2, r1
 802df3c:	4291      	cmp	r1, r2
 802df3e:	f100 33ff 	add.w	r3, r0, #4294967295
 802df42:	d100      	bne.n	802df46 <memcpy+0xc>
 802df44:	4770      	bx	lr
 802df46:	b510      	push	{r4, lr}
 802df48:	f811 4b01 	ldrb.w	r4, [r1], #1
 802df4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802df50:	4291      	cmp	r1, r2
 802df52:	d1f9      	bne.n	802df48 <memcpy+0xe>
 802df54:	bd10      	pop	{r4, pc}
	...

0802df58 <nanf>:
 802df58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802df60 <nanf+0x8>
 802df5c:	4770      	bx	lr
 802df5e:	bf00      	nop
 802df60:	7fc00000 	.word	0x7fc00000

0802df64 <abort>:
 802df64:	b508      	push	{r3, lr}
 802df66:	2006      	movs	r0, #6
 802df68:	f003 f932 	bl	80311d0 <raise>
 802df6c:	2001      	movs	r0, #1
 802df6e:	f7e4 fe79 	bl	8012c64 <_exit>

0802df72 <quorem>:
 802df72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802df76:	6903      	ldr	r3, [r0, #16]
 802df78:	690c      	ldr	r4, [r1, #16]
 802df7a:	42a3      	cmp	r3, r4
 802df7c:	4607      	mov	r7, r0
 802df7e:	db7e      	blt.n	802e07e <quorem+0x10c>
 802df80:	3c01      	subs	r4, #1
 802df82:	f101 0814 	add.w	r8, r1, #20
 802df86:	00a3      	lsls	r3, r4, #2
 802df88:	f100 0514 	add.w	r5, r0, #20
 802df8c:	9300      	str	r3, [sp, #0]
 802df8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802df92:	9301      	str	r3, [sp, #4]
 802df94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802df98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802df9c:	3301      	adds	r3, #1
 802df9e:	429a      	cmp	r2, r3
 802dfa0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802dfa4:	fbb2 f6f3 	udiv	r6, r2, r3
 802dfa8:	d32e      	bcc.n	802e008 <quorem+0x96>
 802dfaa:	f04f 0a00 	mov.w	sl, #0
 802dfae:	46c4      	mov	ip, r8
 802dfb0:	46ae      	mov	lr, r5
 802dfb2:	46d3      	mov	fp, sl
 802dfb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 802dfb8:	b298      	uxth	r0, r3
 802dfba:	fb06 a000 	mla	r0, r6, r0, sl
 802dfbe:	0c02      	lsrs	r2, r0, #16
 802dfc0:	0c1b      	lsrs	r3, r3, #16
 802dfc2:	fb06 2303 	mla	r3, r6, r3, r2
 802dfc6:	f8de 2000 	ldr.w	r2, [lr]
 802dfca:	b280      	uxth	r0, r0
 802dfcc:	b292      	uxth	r2, r2
 802dfce:	1a12      	subs	r2, r2, r0
 802dfd0:	445a      	add	r2, fp
 802dfd2:	f8de 0000 	ldr.w	r0, [lr]
 802dfd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802dfda:	b29b      	uxth	r3, r3
 802dfdc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 802dfe0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 802dfe4:	b292      	uxth	r2, r2
 802dfe6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 802dfea:	45e1      	cmp	r9, ip
 802dfec:	f84e 2b04 	str.w	r2, [lr], #4
 802dff0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 802dff4:	d2de      	bcs.n	802dfb4 <quorem+0x42>
 802dff6:	9b00      	ldr	r3, [sp, #0]
 802dff8:	58eb      	ldr	r3, [r5, r3]
 802dffa:	b92b      	cbnz	r3, 802e008 <quorem+0x96>
 802dffc:	9b01      	ldr	r3, [sp, #4]
 802dffe:	3b04      	subs	r3, #4
 802e000:	429d      	cmp	r5, r3
 802e002:	461a      	mov	r2, r3
 802e004:	d32f      	bcc.n	802e066 <quorem+0xf4>
 802e006:	613c      	str	r4, [r7, #16]
 802e008:	4638      	mov	r0, r7
 802e00a:	f001 f90f 	bl	802f22c <__mcmp>
 802e00e:	2800      	cmp	r0, #0
 802e010:	db25      	blt.n	802e05e <quorem+0xec>
 802e012:	4629      	mov	r1, r5
 802e014:	2000      	movs	r0, #0
 802e016:	f858 2b04 	ldr.w	r2, [r8], #4
 802e01a:	f8d1 c000 	ldr.w	ip, [r1]
 802e01e:	fa1f fe82 	uxth.w	lr, r2
 802e022:	fa1f f38c 	uxth.w	r3, ip
 802e026:	eba3 030e 	sub.w	r3, r3, lr
 802e02a:	4403      	add	r3, r0
 802e02c:	0c12      	lsrs	r2, r2, #16
 802e02e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802e032:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802e036:	b29b      	uxth	r3, r3
 802e038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802e03c:	45c1      	cmp	r9, r8
 802e03e:	f841 3b04 	str.w	r3, [r1], #4
 802e042:	ea4f 4022 	mov.w	r0, r2, asr #16
 802e046:	d2e6      	bcs.n	802e016 <quorem+0xa4>
 802e048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802e04c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802e050:	b922      	cbnz	r2, 802e05c <quorem+0xea>
 802e052:	3b04      	subs	r3, #4
 802e054:	429d      	cmp	r5, r3
 802e056:	461a      	mov	r2, r3
 802e058:	d30b      	bcc.n	802e072 <quorem+0x100>
 802e05a:	613c      	str	r4, [r7, #16]
 802e05c:	3601      	adds	r6, #1
 802e05e:	4630      	mov	r0, r6
 802e060:	b003      	add	sp, #12
 802e062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e066:	6812      	ldr	r2, [r2, #0]
 802e068:	3b04      	subs	r3, #4
 802e06a:	2a00      	cmp	r2, #0
 802e06c:	d1cb      	bne.n	802e006 <quorem+0x94>
 802e06e:	3c01      	subs	r4, #1
 802e070:	e7c6      	b.n	802e000 <quorem+0x8e>
 802e072:	6812      	ldr	r2, [r2, #0]
 802e074:	3b04      	subs	r3, #4
 802e076:	2a00      	cmp	r2, #0
 802e078:	d1ef      	bne.n	802e05a <quorem+0xe8>
 802e07a:	3c01      	subs	r4, #1
 802e07c:	e7ea      	b.n	802e054 <quorem+0xe2>
 802e07e:	2000      	movs	r0, #0
 802e080:	e7ee      	b.n	802e060 <quorem+0xee>
 802e082:	0000      	movs	r0, r0
 802e084:	0000      	movs	r0, r0
	...

0802e088 <_dtoa_r>:
 802e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e08c:	69c7      	ldr	r7, [r0, #28]
 802e08e:	b099      	sub	sp, #100	@ 0x64
 802e090:	ed8d 0b02 	vstr	d0, [sp, #8]
 802e094:	ec55 4b10 	vmov	r4, r5, d0
 802e098:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802e09a:	9109      	str	r1, [sp, #36]	@ 0x24
 802e09c:	4683      	mov	fp, r0
 802e09e:	920e      	str	r2, [sp, #56]	@ 0x38
 802e0a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 802e0a2:	b97f      	cbnz	r7, 802e0c4 <_dtoa_r+0x3c>
 802e0a4:	2010      	movs	r0, #16
 802e0a6:	f7fe fbe1 	bl	802c86c <malloc>
 802e0aa:	4602      	mov	r2, r0
 802e0ac:	f8cb 001c 	str.w	r0, [fp, #28]
 802e0b0:	b920      	cbnz	r0, 802e0bc <_dtoa_r+0x34>
 802e0b2:	4ba7      	ldr	r3, [pc, #668]	@ (802e350 <_dtoa_r+0x2c8>)
 802e0b4:	21ef      	movs	r1, #239	@ 0xef
 802e0b6:	48a7      	ldr	r0, [pc, #668]	@ (802e354 <_dtoa_r+0x2cc>)
 802e0b8:	f7fe fba6 	bl	802c808 <__assert_func>
 802e0bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 802e0c0:	6007      	str	r7, [r0, #0]
 802e0c2:	60c7      	str	r7, [r0, #12]
 802e0c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 802e0c8:	6819      	ldr	r1, [r3, #0]
 802e0ca:	b159      	cbz	r1, 802e0e4 <_dtoa_r+0x5c>
 802e0cc:	685a      	ldr	r2, [r3, #4]
 802e0ce:	604a      	str	r2, [r1, #4]
 802e0d0:	2301      	movs	r3, #1
 802e0d2:	4093      	lsls	r3, r2
 802e0d4:	608b      	str	r3, [r1, #8]
 802e0d6:	4658      	mov	r0, fp
 802e0d8:	f000 fe24 	bl	802ed24 <_Bfree>
 802e0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 802e0e0:	2200      	movs	r2, #0
 802e0e2:	601a      	str	r2, [r3, #0]
 802e0e4:	1e2b      	subs	r3, r5, #0
 802e0e6:	bfb9      	ittee	lt
 802e0e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 802e0ec:	9303      	strlt	r3, [sp, #12]
 802e0ee:	2300      	movge	r3, #0
 802e0f0:	6033      	strge	r3, [r6, #0]
 802e0f2:	9f03      	ldr	r7, [sp, #12]
 802e0f4:	4b98      	ldr	r3, [pc, #608]	@ (802e358 <_dtoa_r+0x2d0>)
 802e0f6:	bfbc      	itt	lt
 802e0f8:	2201      	movlt	r2, #1
 802e0fa:	6032      	strlt	r2, [r6, #0]
 802e0fc:	43bb      	bics	r3, r7
 802e0fe:	d112      	bne.n	802e126 <_dtoa_r+0x9e>
 802e100:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e102:	f242 730f 	movw	r3, #9999	@ 0x270f
 802e106:	6013      	str	r3, [r2, #0]
 802e108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802e10c:	4323      	orrs	r3, r4
 802e10e:	f000 854d 	beq.w	802ebac <_dtoa_r+0xb24>
 802e112:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e114:	f8df a254 	ldr.w	sl, [pc, #596]	@ 802e36c <_dtoa_r+0x2e4>
 802e118:	2b00      	cmp	r3, #0
 802e11a:	f000 854f 	beq.w	802ebbc <_dtoa_r+0xb34>
 802e11e:	f10a 0303 	add.w	r3, sl, #3
 802e122:	f000 bd49 	b.w	802ebb8 <_dtoa_r+0xb30>
 802e126:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e12a:	2200      	movs	r2, #0
 802e12c:	ec51 0b17 	vmov	r0, r1, d7
 802e130:	2300      	movs	r3, #0
 802e132:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802e136:	f7e2 fcdf 	bl	8010af8 <__aeabi_dcmpeq>
 802e13a:	4680      	mov	r8, r0
 802e13c:	b158      	cbz	r0, 802e156 <_dtoa_r+0xce>
 802e13e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802e140:	2301      	movs	r3, #1
 802e142:	6013      	str	r3, [r2, #0]
 802e144:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e146:	b113      	cbz	r3, 802e14e <_dtoa_r+0xc6>
 802e148:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802e14a:	4b84      	ldr	r3, [pc, #528]	@ (802e35c <_dtoa_r+0x2d4>)
 802e14c:	6013      	str	r3, [r2, #0]
 802e14e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 802e370 <_dtoa_r+0x2e8>
 802e152:	f000 bd33 	b.w	802ebbc <_dtoa_r+0xb34>
 802e156:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 802e15a:	aa16      	add	r2, sp, #88	@ 0x58
 802e15c:	a917      	add	r1, sp, #92	@ 0x5c
 802e15e:	4658      	mov	r0, fp
 802e160:	f001 f984 	bl	802f46c <__d2b>
 802e164:	f3c7 560a 	ubfx	r6, r7, #20, #11
 802e168:	4681      	mov	r9, r0
 802e16a:	2e00      	cmp	r6, #0
 802e16c:	d077      	beq.n	802e25e <_dtoa_r+0x1d6>
 802e16e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802e170:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802e174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e178:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e17c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 802e180:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802e184:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 802e188:	4619      	mov	r1, r3
 802e18a:	2200      	movs	r2, #0
 802e18c:	4b74      	ldr	r3, [pc, #464]	@ (802e360 <_dtoa_r+0x2d8>)
 802e18e:	f7e2 f893 	bl	80102b8 <__aeabi_dsub>
 802e192:	a369      	add	r3, pc, #420	@ (adr r3, 802e338 <_dtoa_r+0x2b0>)
 802e194:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e198:	f7e2 fa46 	bl	8010628 <__aeabi_dmul>
 802e19c:	a368      	add	r3, pc, #416	@ (adr r3, 802e340 <_dtoa_r+0x2b8>)
 802e19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1a2:	f7e2 f88b 	bl	80102bc <__adddf3>
 802e1a6:	4604      	mov	r4, r0
 802e1a8:	4630      	mov	r0, r6
 802e1aa:	460d      	mov	r5, r1
 802e1ac:	f7e2 f9d2 	bl	8010554 <__aeabi_i2d>
 802e1b0:	a365      	add	r3, pc, #404	@ (adr r3, 802e348 <_dtoa_r+0x2c0>)
 802e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1b6:	f7e2 fa37 	bl	8010628 <__aeabi_dmul>
 802e1ba:	4602      	mov	r2, r0
 802e1bc:	460b      	mov	r3, r1
 802e1be:	4620      	mov	r0, r4
 802e1c0:	4629      	mov	r1, r5
 802e1c2:	f7e2 f87b 	bl	80102bc <__adddf3>
 802e1c6:	4604      	mov	r4, r0
 802e1c8:	460d      	mov	r5, r1
 802e1ca:	f7e2 fcdd 	bl	8010b88 <__aeabi_d2iz>
 802e1ce:	2200      	movs	r2, #0
 802e1d0:	4607      	mov	r7, r0
 802e1d2:	2300      	movs	r3, #0
 802e1d4:	4620      	mov	r0, r4
 802e1d6:	4629      	mov	r1, r5
 802e1d8:	f7e2 fc98 	bl	8010b0c <__aeabi_dcmplt>
 802e1dc:	b140      	cbz	r0, 802e1f0 <_dtoa_r+0x168>
 802e1de:	4638      	mov	r0, r7
 802e1e0:	f7e2 f9b8 	bl	8010554 <__aeabi_i2d>
 802e1e4:	4622      	mov	r2, r4
 802e1e6:	462b      	mov	r3, r5
 802e1e8:	f7e2 fc86 	bl	8010af8 <__aeabi_dcmpeq>
 802e1ec:	b900      	cbnz	r0, 802e1f0 <_dtoa_r+0x168>
 802e1ee:	3f01      	subs	r7, #1
 802e1f0:	2f16      	cmp	r7, #22
 802e1f2:	d851      	bhi.n	802e298 <_dtoa_r+0x210>
 802e1f4:	4b5b      	ldr	r3, [pc, #364]	@ (802e364 <_dtoa_r+0x2dc>)
 802e1f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e202:	f7e2 fc83 	bl	8010b0c <__aeabi_dcmplt>
 802e206:	2800      	cmp	r0, #0
 802e208:	d048      	beq.n	802e29c <_dtoa_r+0x214>
 802e20a:	3f01      	subs	r7, #1
 802e20c:	2300      	movs	r3, #0
 802e20e:	9312      	str	r3, [sp, #72]	@ 0x48
 802e210:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e212:	1b9b      	subs	r3, r3, r6
 802e214:	1e5a      	subs	r2, r3, #1
 802e216:	bf44      	itt	mi
 802e218:	f1c3 0801 	rsbmi	r8, r3, #1
 802e21c:	2300      	movmi	r3, #0
 802e21e:	9208      	str	r2, [sp, #32]
 802e220:	bf54      	ite	pl
 802e222:	f04f 0800 	movpl.w	r8, #0
 802e226:	9308      	strmi	r3, [sp, #32]
 802e228:	2f00      	cmp	r7, #0
 802e22a:	db39      	blt.n	802e2a0 <_dtoa_r+0x218>
 802e22c:	9b08      	ldr	r3, [sp, #32]
 802e22e:	970f      	str	r7, [sp, #60]	@ 0x3c
 802e230:	443b      	add	r3, r7
 802e232:	9308      	str	r3, [sp, #32]
 802e234:	2300      	movs	r3, #0
 802e236:	930a      	str	r3, [sp, #40]	@ 0x28
 802e238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e23a:	2b09      	cmp	r3, #9
 802e23c:	d864      	bhi.n	802e308 <_dtoa_r+0x280>
 802e23e:	2b05      	cmp	r3, #5
 802e240:	bfc4      	itt	gt
 802e242:	3b04      	subgt	r3, #4
 802e244:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802e246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e248:	f1a3 0302 	sub.w	r3, r3, #2
 802e24c:	bfcc      	ite	gt
 802e24e:	2400      	movgt	r4, #0
 802e250:	2401      	movle	r4, #1
 802e252:	2b03      	cmp	r3, #3
 802e254:	d863      	bhi.n	802e31e <_dtoa_r+0x296>
 802e256:	e8df f003 	tbb	[pc, r3]
 802e25a:	372a      	.short	0x372a
 802e25c:	5535      	.short	0x5535
 802e25e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802e262:	441e      	add	r6, r3
 802e264:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 802e268:	2b20      	cmp	r3, #32
 802e26a:	bfc1      	itttt	gt
 802e26c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 802e270:	409f      	lslgt	r7, r3
 802e272:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802e276:	fa24 f303 	lsrgt.w	r3, r4, r3
 802e27a:	bfd6      	itet	le
 802e27c:	f1c3 0320 	rsble	r3, r3, #32
 802e280:	ea47 0003 	orrgt.w	r0, r7, r3
 802e284:	fa04 f003 	lslle.w	r0, r4, r3
 802e288:	f7e2 f954 	bl	8010534 <__aeabi_ui2d>
 802e28c:	2201      	movs	r2, #1
 802e28e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802e292:	3e01      	subs	r6, #1
 802e294:	9214      	str	r2, [sp, #80]	@ 0x50
 802e296:	e777      	b.n	802e188 <_dtoa_r+0x100>
 802e298:	2301      	movs	r3, #1
 802e29a:	e7b8      	b.n	802e20e <_dtoa_r+0x186>
 802e29c:	9012      	str	r0, [sp, #72]	@ 0x48
 802e29e:	e7b7      	b.n	802e210 <_dtoa_r+0x188>
 802e2a0:	427b      	negs	r3, r7
 802e2a2:	930a      	str	r3, [sp, #40]	@ 0x28
 802e2a4:	2300      	movs	r3, #0
 802e2a6:	eba8 0807 	sub.w	r8, r8, r7
 802e2aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 802e2ac:	e7c4      	b.n	802e238 <_dtoa_r+0x1b0>
 802e2ae:	2300      	movs	r3, #0
 802e2b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e2b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e2b4:	2b00      	cmp	r3, #0
 802e2b6:	dc35      	bgt.n	802e324 <_dtoa_r+0x29c>
 802e2b8:	2301      	movs	r3, #1
 802e2ba:	9300      	str	r3, [sp, #0]
 802e2bc:	9307      	str	r3, [sp, #28]
 802e2be:	461a      	mov	r2, r3
 802e2c0:	920e      	str	r2, [sp, #56]	@ 0x38
 802e2c2:	e00b      	b.n	802e2dc <_dtoa_r+0x254>
 802e2c4:	2301      	movs	r3, #1
 802e2c6:	e7f3      	b.n	802e2b0 <_dtoa_r+0x228>
 802e2c8:	2300      	movs	r3, #0
 802e2ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e2cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e2ce:	18fb      	adds	r3, r7, r3
 802e2d0:	9300      	str	r3, [sp, #0]
 802e2d2:	3301      	adds	r3, #1
 802e2d4:	2b01      	cmp	r3, #1
 802e2d6:	9307      	str	r3, [sp, #28]
 802e2d8:	bfb8      	it	lt
 802e2da:	2301      	movlt	r3, #1
 802e2dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 802e2e0:	2100      	movs	r1, #0
 802e2e2:	2204      	movs	r2, #4
 802e2e4:	f102 0514 	add.w	r5, r2, #20
 802e2e8:	429d      	cmp	r5, r3
 802e2ea:	d91f      	bls.n	802e32c <_dtoa_r+0x2a4>
 802e2ec:	6041      	str	r1, [r0, #4]
 802e2ee:	4658      	mov	r0, fp
 802e2f0:	f000 fcd8 	bl	802eca4 <_Balloc>
 802e2f4:	4682      	mov	sl, r0
 802e2f6:	2800      	cmp	r0, #0
 802e2f8:	d13c      	bne.n	802e374 <_dtoa_r+0x2ec>
 802e2fa:	4b1b      	ldr	r3, [pc, #108]	@ (802e368 <_dtoa_r+0x2e0>)
 802e2fc:	4602      	mov	r2, r0
 802e2fe:	f240 11af 	movw	r1, #431	@ 0x1af
 802e302:	e6d8      	b.n	802e0b6 <_dtoa_r+0x2e>
 802e304:	2301      	movs	r3, #1
 802e306:	e7e0      	b.n	802e2ca <_dtoa_r+0x242>
 802e308:	2401      	movs	r4, #1
 802e30a:	2300      	movs	r3, #0
 802e30c:	9309      	str	r3, [sp, #36]	@ 0x24
 802e30e:	940b      	str	r4, [sp, #44]	@ 0x2c
 802e310:	f04f 33ff 	mov.w	r3, #4294967295
 802e314:	9300      	str	r3, [sp, #0]
 802e316:	9307      	str	r3, [sp, #28]
 802e318:	2200      	movs	r2, #0
 802e31a:	2312      	movs	r3, #18
 802e31c:	e7d0      	b.n	802e2c0 <_dtoa_r+0x238>
 802e31e:	2301      	movs	r3, #1
 802e320:	930b      	str	r3, [sp, #44]	@ 0x2c
 802e322:	e7f5      	b.n	802e310 <_dtoa_r+0x288>
 802e324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e326:	9300      	str	r3, [sp, #0]
 802e328:	9307      	str	r3, [sp, #28]
 802e32a:	e7d7      	b.n	802e2dc <_dtoa_r+0x254>
 802e32c:	3101      	adds	r1, #1
 802e32e:	0052      	lsls	r2, r2, #1
 802e330:	e7d8      	b.n	802e2e4 <_dtoa_r+0x25c>
 802e332:	bf00      	nop
 802e334:	f3af 8000 	nop.w
 802e338:	636f4361 	.word	0x636f4361
 802e33c:	3fd287a7 	.word	0x3fd287a7
 802e340:	8b60c8b3 	.word	0x8b60c8b3
 802e344:	3fc68a28 	.word	0x3fc68a28
 802e348:	509f79fb 	.word	0x509f79fb
 802e34c:	3fd34413 	.word	0x3fd34413
 802e350:	08034d83 	.word	0x08034d83
 802e354:	08034e01 	.word	0x08034e01
 802e358:	7ff00000 	.word	0x7ff00000
 802e35c:	08035141 	.word	0x08035141
 802e360:	3ff80000 	.word	0x3ff80000
 802e364:	08034ef8 	.word	0x08034ef8
 802e368:	08034e59 	.word	0x08034e59
 802e36c:	08034dfd 	.word	0x08034dfd
 802e370:	08035140 	.word	0x08035140
 802e374:	f8db 301c 	ldr.w	r3, [fp, #28]
 802e378:	6018      	str	r0, [r3, #0]
 802e37a:	9b07      	ldr	r3, [sp, #28]
 802e37c:	2b0e      	cmp	r3, #14
 802e37e:	f200 80a4 	bhi.w	802e4ca <_dtoa_r+0x442>
 802e382:	2c00      	cmp	r4, #0
 802e384:	f000 80a1 	beq.w	802e4ca <_dtoa_r+0x442>
 802e388:	2f00      	cmp	r7, #0
 802e38a:	dd33      	ble.n	802e3f4 <_dtoa_r+0x36c>
 802e38c:	4bad      	ldr	r3, [pc, #692]	@ (802e644 <_dtoa_r+0x5bc>)
 802e38e:	f007 020f 	and.w	r2, r7, #15
 802e392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e396:	ed93 7b00 	vldr	d7, [r3]
 802e39a:	05f8      	lsls	r0, r7, #23
 802e39c:	ed8d 7b04 	vstr	d7, [sp, #16]
 802e3a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 802e3a4:	d516      	bpl.n	802e3d4 <_dtoa_r+0x34c>
 802e3a6:	4ba8      	ldr	r3, [pc, #672]	@ (802e648 <_dtoa_r+0x5c0>)
 802e3a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e3ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e3b0:	f7e2 fa64 	bl	801087c <__aeabi_ddiv>
 802e3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3b8:	f004 040f 	and.w	r4, r4, #15
 802e3bc:	2603      	movs	r6, #3
 802e3be:	4da2      	ldr	r5, [pc, #648]	@ (802e648 <_dtoa_r+0x5c0>)
 802e3c0:	b954      	cbnz	r4, 802e3d8 <_dtoa_r+0x350>
 802e3c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802e3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e3ca:	f7e2 fa57 	bl	801087c <__aeabi_ddiv>
 802e3ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3d2:	e028      	b.n	802e426 <_dtoa_r+0x39e>
 802e3d4:	2602      	movs	r6, #2
 802e3d6:	e7f2      	b.n	802e3be <_dtoa_r+0x336>
 802e3d8:	07e1      	lsls	r1, r4, #31
 802e3da:	d508      	bpl.n	802e3ee <_dtoa_r+0x366>
 802e3dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802e3e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e3e4:	f7e2 f920 	bl	8010628 <__aeabi_dmul>
 802e3e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802e3ec:	3601      	adds	r6, #1
 802e3ee:	1064      	asrs	r4, r4, #1
 802e3f0:	3508      	adds	r5, #8
 802e3f2:	e7e5      	b.n	802e3c0 <_dtoa_r+0x338>
 802e3f4:	f000 80d2 	beq.w	802e59c <_dtoa_r+0x514>
 802e3f8:	427c      	negs	r4, r7
 802e3fa:	4b92      	ldr	r3, [pc, #584]	@ (802e644 <_dtoa_r+0x5bc>)
 802e3fc:	4d92      	ldr	r5, [pc, #584]	@ (802e648 <_dtoa_r+0x5c0>)
 802e3fe:	f004 020f 	and.w	r2, r4, #15
 802e402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e40a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802e40e:	f7e2 f90b 	bl	8010628 <__aeabi_dmul>
 802e412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e416:	1124      	asrs	r4, r4, #4
 802e418:	2300      	movs	r3, #0
 802e41a:	2602      	movs	r6, #2
 802e41c:	2c00      	cmp	r4, #0
 802e41e:	f040 80b2 	bne.w	802e586 <_dtoa_r+0x4fe>
 802e422:	2b00      	cmp	r3, #0
 802e424:	d1d3      	bne.n	802e3ce <_dtoa_r+0x346>
 802e426:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e428:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e42c:	2b00      	cmp	r3, #0
 802e42e:	f000 80b7 	beq.w	802e5a0 <_dtoa_r+0x518>
 802e432:	4b86      	ldr	r3, [pc, #536]	@ (802e64c <_dtoa_r+0x5c4>)
 802e434:	2200      	movs	r2, #0
 802e436:	4620      	mov	r0, r4
 802e438:	4629      	mov	r1, r5
 802e43a:	f7e2 fb67 	bl	8010b0c <__aeabi_dcmplt>
 802e43e:	2800      	cmp	r0, #0
 802e440:	f000 80ae 	beq.w	802e5a0 <_dtoa_r+0x518>
 802e444:	9b07      	ldr	r3, [sp, #28]
 802e446:	2b00      	cmp	r3, #0
 802e448:	f000 80aa 	beq.w	802e5a0 <_dtoa_r+0x518>
 802e44c:	9b00      	ldr	r3, [sp, #0]
 802e44e:	2b00      	cmp	r3, #0
 802e450:	dd37      	ble.n	802e4c2 <_dtoa_r+0x43a>
 802e452:	1e7b      	subs	r3, r7, #1
 802e454:	9304      	str	r3, [sp, #16]
 802e456:	4620      	mov	r0, r4
 802e458:	4b7d      	ldr	r3, [pc, #500]	@ (802e650 <_dtoa_r+0x5c8>)
 802e45a:	2200      	movs	r2, #0
 802e45c:	4629      	mov	r1, r5
 802e45e:	f7e2 f8e3 	bl	8010628 <__aeabi_dmul>
 802e462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e466:	9c00      	ldr	r4, [sp, #0]
 802e468:	3601      	adds	r6, #1
 802e46a:	4630      	mov	r0, r6
 802e46c:	f7e2 f872 	bl	8010554 <__aeabi_i2d>
 802e470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e474:	f7e2 f8d8 	bl	8010628 <__aeabi_dmul>
 802e478:	4b76      	ldr	r3, [pc, #472]	@ (802e654 <_dtoa_r+0x5cc>)
 802e47a:	2200      	movs	r2, #0
 802e47c:	f7e1 ff1e 	bl	80102bc <__adddf3>
 802e480:	4605      	mov	r5, r0
 802e482:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802e486:	2c00      	cmp	r4, #0
 802e488:	f040 808d 	bne.w	802e5a6 <_dtoa_r+0x51e>
 802e48c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e490:	4b71      	ldr	r3, [pc, #452]	@ (802e658 <_dtoa_r+0x5d0>)
 802e492:	2200      	movs	r2, #0
 802e494:	f7e1 ff10 	bl	80102b8 <__aeabi_dsub>
 802e498:	4602      	mov	r2, r0
 802e49a:	460b      	mov	r3, r1
 802e49c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e4a0:	462a      	mov	r2, r5
 802e4a2:	4633      	mov	r3, r6
 802e4a4:	f7e2 fb50 	bl	8010b48 <__aeabi_dcmpgt>
 802e4a8:	2800      	cmp	r0, #0
 802e4aa:	f040 828b 	bne.w	802e9c4 <_dtoa_r+0x93c>
 802e4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e4b2:	462a      	mov	r2, r5
 802e4b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802e4b8:	f7e2 fb28 	bl	8010b0c <__aeabi_dcmplt>
 802e4bc:	2800      	cmp	r0, #0
 802e4be:	f040 8128 	bne.w	802e712 <_dtoa_r+0x68a>
 802e4c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802e4c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802e4ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802e4cc:	2b00      	cmp	r3, #0
 802e4ce:	f2c0 815a 	blt.w	802e786 <_dtoa_r+0x6fe>
 802e4d2:	2f0e      	cmp	r7, #14
 802e4d4:	f300 8157 	bgt.w	802e786 <_dtoa_r+0x6fe>
 802e4d8:	4b5a      	ldr	r3, [pc, #360]	@ (802e644 <_dtoa_r+0x5bc>)
 802e4da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802e4de:	ed93 7b00 	vldr	d7, [r3]
 802e4e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e4e4:	2b00      	cmp	r3, #0
 802e4e6:	ed8d 7b00 	vstr	d7, [sp]
 802e4ea:	da03      	bge.n	802e4f4 <_dtoa_r+0x46c>
 802e4ec:	9b07      	ldr	r3, [sp, #28]
 802e4ee:	2b00      	cmp	r3, #0
 802e4f0:	f340 8101 	ble.w	802e6f6 <_dtoa_r+0x66e>
 802e4f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 802e4f8:	4656      	mov	r6, sl
 802e4fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e4fe:	4620      	mov	r0, r4
 802e500:	4629      	mov	r1, r5
 802e502:	f7e2 f9bb 	bl	801087c <__aeabi_ddiv>
 802e506:	f7e2 fb3f 	bl	8010b88 <__aeabi_d2iz>
 802e50a:	4680      	mov	r8, r0
 802e50c:	f7e2 f822 	bl	8010554 <__aeabi_i2d>
 802e510:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e514:	f7e2 f888 	bl	8010628 <__aeabi_dmul>
 802e518:	4602      	mov	r2, r0
 802e51a:	460b      	mov	r3, r1
 802e51c:	4620      	mov	r0, r4
 802e51e:	4629      	mov	r1, r5
 802e520:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 802e524:	f7e1 fec8 	bl	80102b8 <__aeabi_dsub>
 802e528:	f806 4b01 	strb.w	r4, [r6], #1
 802e52c:	9d07      	ldr	r5, [sp, #28]
 802e52e:	eba6 040a 	sub.w	r4, r6, sl
 802e532:	42a5      	cmp	r5, r4
 802e534:	4602      	mov	r2, r0
 802e536:	460b      	mov	r3, r1
 802e538:	f040 8117 	bne.w	802e76a <_dtoa_r+0x6e2>
 802e53c:	f7e1 febe 	bl	80102bc <__adddf3>
 802e540:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e544:	4604      	mov	r4, r0
 802e546:	460d      	mov	r5, r1
 802e548:	f7e2 fafe 	bl	8010b48 <__aeabi_dcmpgt>
 802e54c:	2800      	cmp	r0, #0
 802e54e:	f040 80f9 	bne.w	802e744 <_dtoa_r+0x6bc>
 802e552:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e556:	4620      	mov	r0, r4
 802e558:	4629      	mov	r1, r5
 802e55a:	f7e2 facd 	bl	8010af8 <__aeabi_dcmpeq>
 802e55e:	b118      	cbz	r0, 802e568 <_dtoa_r+0x4e0>
 802e560:	f018 0f01 	tst.w	r8, #1
 802e564:	f040 80ee 	bne.w	802e744 <_dtoa_r+0x6bc>
 802e568:	4649      	mov	r1, r9
 802e56a:	4658      	mov	r0, fp
 802e56c:	f000 fbda 	bl	802ed24 <_Bfree>
 802e570:	2300      	movs	r3, #0
 802e572:	7033      	strb	r3, [r6, #0]
 802e574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802e576:	3701      	adds	r7, #1
 802e578:	601f      	str	r7, [r3, #0]
 802e57a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802e57c:	2b00      	cmp	r3, #0
 802e57e:	f000 831d 	beq.w	802ebbc <_dtoa_r+0xb34>
 802e582:	601e      	str	r6, [r3, #0]
 802e584:	e31a      	b.n	802ebbc <_dtoa_r+0xb34>
 802e586:	07e2      	lsls	r2, r4, #31
 802e588:	d505      	bpl.n	802e596 <_dtoa_r+0x50e>
 802e58a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802e58e:	f7e2 f84b 	bl	8010628 <__aeabi_dmul>
 802e592:	3601      	adds	r6, #1
 802e594:	2301      	movs	r3, #1
 802e596:	1064      	asrs	r4, r4, #1
 802e598:	3508      	adds	r5, #8
 802e59a:	e73f      	b.n	802e41c <_dtoa_r+0x394>
 802e59c:	2602      	movs	r6, #2
 802e59e:	e742      	b.n	802e426 <_dtoa_r+0x39e>
 802e5a0:	9c07      	ldr	r4, [sp, #28]
 802e5a2:	9704      	str	r7, [sp, #16]
 802e5a4:	e761      	b.n	802e46a <_dtoa_r+0x3e2>
 802e5a6:	4b27      	ldr	r3, [pc, #156]	@ (802e644 <_dtoa_r+0x5bc>)
 802e5a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802e5aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802e5ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e5b2:	4454      	add	r4, sl
 802e5b4:	2900      	cmp	r1, #0
 802e5b6:	d053      	beq.n	802e660 <_dtoa_r+0x5d8>
 802e5b8:	4928      	ldr	r1, [pc, #160]	@ (802e65c <_dtoa_r+0x5d4>)
 802e5ba:	2000      	movs	r0, #0
 802e5bc:	f7e2 f95e 	bl	801087c <__aeabi_ddiv>
 802e5c0:	4633      	mov	r3, r6
 802e5c2:	462a      	mov	r2, r5
 802e5c4:	f7e1 fe78 	bl	80102b8 <__aeabi_dsub>
 802e5c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e5cc:	4656      	mov	r6, sl
 802e5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e5d2:	f7e2 fad9 	bl	8010b88 <__aeabi_d2iz>
 802e5d6:	4605      	mov	r5, r0
 802e5d8:	f7e1 ffbc 	bl	8010554 <__aeabi_i2d>
 802e5dc:	4602      	mov	r2, r0
 802e5de:	460b      	mov	r3, r1
 802e5e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e5e4:	f7e1 fe68 	bl	80102b8 <__aeabi_dsub>
 802e5e8:	3530      	adds	r5, #48	@ 0x30
 802e5ea:	4602      	mov	r2, r0
 802e5ec:	460b      	mov	r3, r1
 802e5ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e5f2:	f806 5b01 	strb.w	r5, [r6], #1
 802e5f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e5fa:	f7e2 fa87 	bl	8010b0c <__aeabi_dcmplt>
 802e5fe:	2800      	cmp	r0, #0
 802e600:	d171      	bne.n	802e6e6 <_dtoa_r+0x65e>
 802e602:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e606:	4911      	ldr	r1, [pc, #68]	@ (802e64c <_dtoa_r+0x5c4>)
 802e608:	2000      	movs	r0, #0
 802e60a:	f7e1 fe55 	bl	80102b8 <__aeabi_dsub>
 802e60e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e612:	f7e2 fa7b 	bl	8010b0c <__aeabi_dcmplt>
 802e616:	2800      	cmp	r0, #0
 802e618:	f040 8095 	bne.w	802e746 <_dtoa_r+0x6be>
 802e61c:	42a6      	cmp	r6, r4
 802e61e:	f43f af50 	beq.w	802e4c2 <_dtoa_r+0x43a>
 802e622:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e626:	4b0a      	ldr	r3, [pc, #40]	@ (802e650 <_dtoa_r+0x5c8>)
 802e628:	2200      	movs	r2, #0
 802e62a:	f7e1 fffd 	bl	8010628 <__aeabi_dmul>
 802e62e:	4b08      	ldr	r3, [pc, #32]	@ (802e650 <_dtoa_r+0x5c8>)
 802e630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e634:	2200      	movs	r2, #0
 802e636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e63a:	f7e1 fff5 	bl	8010628 <__aeabi_dmul>
 802e63e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e642:	e7c4      	b.n	802e5ce <_dtoa_r+0x546>
 802e644:	08034ef8 	.word	0x08034ef8
 802e648:	08034ed0 	.word	0x08034ed0
 802e64c:	3ff00000 	.word	0x3ff00000
 802e650:	40240000 	.word	0x40240000
 802e654:	401c0000 	.word	0x401c0000
 802e658:	40140000 	.word	0x40140000
 802e65c:	3fe00000 	.word	0x3fe00000
 802e660:	4631      	mov	r1, r6
 802e662:	4628      	mov	r0, r5
 802e664:	f7e1 ffe0 	bl	8010628 <__aeabi_dmul>
 802e668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802e66c:	9415      	str	r4, [sp, #84]	@ 0x54
 802e66e:	4656      	mov	r6, sl
 802e670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e674:	f7e2 fa88 	bl	8010b88 <__aeabi_d2iz>
 802e678:	4605      	mov	r5, r0
 802e67a:	f7e1 ff6b 	bl	8010554 <__aeabi_i2d>
 802e67e:	4602      	mov	r2, r0
 802e680:	460b      	mov	r3, r1
 802e682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e686:	f7e1 fe17 	bl	80102b8 <__aeabi_dsub>
 802e68a:	3530      	adds	r5, #48	@ 0x30
 802e68c:	f806 5b01 	strb.w	r5, [r6], #1
 802e690:	4602      	mov	r2, r0
 802e692:	460b      	mov	r3, r1
 802e694:	42a6      	cmp	r6, r4
 802e696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802e69a:	f04f 0200 	mov.w	r2, #0
 802e69e:	d124      	bne.n	802e6ea <_dtoa_r+0x662>
 802e6a0:	4bac      	ldr	r3, [pc, #688]	@ (802e954 <_dtoa_r+0x8cc>)
 802e6a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802e6a6:	f7e1 fe09 	bl	80102bc <__adddf3>
 802e6aa:	4602      	mov	r2, r0
 802e6ac:	460b      	mov	r3, r1
 802e6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e6b2:	f7e2 fa49 	bl	8010b48 <__aeabi_dcmpgt>
 802e6b6:	2800      	cmp	r0, #0
 802e6b8:	d145      	bne.n	802e746 <_dtoa_r+0x6be>
 802e6ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802e6be:	49a5      	ldr	r1, [pc, #660]	@ (802e954 <_dtoa_r+0x8cc>)
 802e6c0:	2000      	movs	r0, #0
 802e6c2:	f7e1 fdf9 	bl	80102b8 <__aeabi_dsub>
 802e6c6:	4602      	mov	r2, r0
 802e6c8:	460b      	mov	r3, r1
 802e6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e6ce:	f7e2 fa1d 	bl	8010b0c <__aeabi_dcmplt>
 802e6d2:	2800      	cmp	r0, #0
 802e6d4:	f43f aef5 	beq.w	802e4c2 <_dtoa_r+0x43a>
 802e6d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 802e6da:	1e73      	subs	r3, r6, #1
 802e6dc:	9315      	str	r3, [sp, #84]	@ 0x54
 802e6de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802e6e2:	2b30      	cmp	r3, #48	@ 0x30
 802e6e4:	d0f8      	beq.n	802e6d8 <_dtoa_r+0x650>
 802e6e6:	9f04      	ldr	r7, [sp, #16]
 802e6e8:	e73e      	b.n	802e568 <_dtoa_r+0x4e0>
 802e6ea:	4b9b      	ldr	r3, [pc, #620]	@ (802e958 <_dtoa_r+0x8d0>)
 802e6ec:	f7e1 ff9c 	bl	8010628 <__aeabi_dmul>
 802e6f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e6f4:	e7bc      	b.n	802e670 <_dtoa_r+0x5e8>
 802e6f6:	d10c      	bne.n	802e712 <_dtoa_r+0x68a>
 802e6f8:	4b98      	ldr	r3, [pc, #608]	@ (802e95c <_dtoa_r+0x8d4>)
 802e6fa:	2200      	movs	r2, #0
 802e6fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 802e700:	f7e1 ff92 	bl	8010628 <__aeabi_dmul>
 802e704:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e708:	f7e2 fa14 	bl	8010b34 <__aeabi_dcmpge>
 802e70c:	2800      	cmp	r0, #0
 802e70e:	f000 8157 	beq.w	802e9c0 <_dtoa_r+0x938>
 802e712:	2400      	movs	r4, #0
 802e714:	4625      	mov	r5, r4
 802e716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802e718:	43db      	mvns	r3, r3
 802e71a:	9304      	str	r3, [sp, #16]
 802e71c:	4656      	mov	r6, sl
 802e71e:	2700      	movs	r7, #0
 802e720:	4621      	mov	r1, r4
 802e722:	4658      	mov	r0, fp
 802e724:	f000 fafe 	bl	802ed24 <_Bfree>
 802e728:	2d00      	cmp	r5, #0
 802e72a:	d0dc      	beq.n	802e6e6 <_dtoa_r+0x65e>
 802e72c:	b12f      	cbz	r7, 802e73a <_dtoa_r+0x6b2>
 802e72e:	42af      	cmp	r7, r5
 802e730:	d003      	beq.n	802e73a <_dtoa_r+0x6b2>
 802e732:	4639      	mov	r1, r7
 802e734:	4658      	mov	r0, fp
 802e736:	f000 faf5 	bl	802ed24 <_Bfree>
 802e73a:	4629      	mov	r1, r5
 802e73c:	4658      	mov	r0, fp
 802e73e:	f000 faf1 	bl	802ed24 <_Bfree>
 802e742:	e7d0      	b.n	802e6e6 <_dtoa_r+0x65e>
 802e744:	9704      	str	r7, [sp, #16]
 802e746:	4633      	mov	r3, r6
 802e748:	461e      	mov	r6, r3
 802e74a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e74e:	2a39      	cmp	r2, #57	@ 0x39
 802e750:	d107      	bne.n	802e762 <_dtoa_r+0x6da>
 802e752:	459a      	cmp	sl, r3
 802e754:	d1f8      	bne.n	802e748 <_dtoa_r+0x6c0>
 802e756:	9a04      	ldr	r2, [sp, #16]
 802e758:	3201      	adds	r2, #1
 802e75a:	9204      	str	r2, [sp, #16]
 802e75c:	2230      	movs	r2, #48	@ 0x30
 802e75e:	f88a 2000 	strb.w	r2, [sl]
 802e762:	781a      	ldrb	r2, [r3, #0]
 802e764:	3201      	adds	r2, #1
 802e766:	701a      	strb	r2, [r3, #0]
 802e768:	e7bd      	b.n	802e6e6 <_dtoa_r+0x65e>
 802e76a:	4b7b      	ldr	r3, [pc, #492]	@ (802e958 <_dtoa_r+0x8d0>)
 802e76c:	2200      	movs	r2, #0
 802e76e:	f7e1 ff5b 	bl	8010628 <__aeabi_dmul>
 802e772:	2200      	movs	r2, #0
 802e774:	2300      	movs	r3, #0
 802e776:	4604      	mov	r4, r0
 802e778:	460d      	mov	r5, r1
 802e77a:	f7e2 f9bd 	bl	8010af8 <__aeabi_dcmpeq>
 802e77e:	2800      	cmp	r0, #0
 802e780:	f43f aebb 	beq.w	802e4fa <_dtoa_r+0x472>
 802e784:	e6f0      	b.n	802e568 <_dtoa_r+0x4e0>
 802e786:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802e788:	2a00      	cmp	r2, #0
 802e78a:	f000 80db 	beq.w	802e944 <_dtoa_r+0x8bc>
 802e78e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802e790:	2a01      	cmp	r2, #1
 802e792:	f300 80bf 	bgt.w	802e914 <_dtoa_r+0x88c>
 802e796:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802e798:	2a00      	cmp	r2, #0
 802e79a:	f000 80b7 	beq.w	802e90c <_dtoa_r+0x884>
 802e79e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802e7a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e7a4:	4646      	mov	r6, r8
 802e7a6:	9a08      	ldr	r2, [sp, #32]
 802e7a8:	2101      	movs	r1, #1
 802e7aa:	441a      	add	r2, r3
 802e7ac:	4658      	mov	r0, fp
 802e7ae:	4498      	add	r8, r3
 802e7b0:	9208      	str	r2, [sp, #32]
 802e7b2:	f000 fbb5 	bl	802ef20 <__i2b>
 802e7b6:	4605      	mov	r5, r0
 802e7b8:	b15e      	cbz	r6, 802e7d2 <_dtoa_r+0x74a>
 802e7ba:	9b08      	ldr	r3, [sp, #32]
 802e7bc:	2b00      	cmp	r3, #0
 802e7be:	dd08      	ble.n	802e7d2 <_dtoa_r+0x74a>
 802e7c0:	42b3      	cmp	r3, r6
 802e7c2:	9a08      	ldr	r2, [sp, #32]
 802e7c4:	bfa8      	it	ge
 802e7c6:	4633      	movge	r3, r6
 802e7c8:	eba8 0803 	sub.w	r8, r8, r3
 802e7cc:	1af6      	subs	r6, r6, r3
 802e7ce:	1ad3      	subs	r3, r2, r3
 802e7d0:	9308      	str	r3, [sp, #32]
 802e7d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e7d4:	b1f3      	cbz	r3, 802e814 <_dtoa_r+0x78c>
 802e7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e7d8:	2b00      	cmp	r3, #0
 802e7da:	f000 80b7 	beq.w	802e94c <_dtoa_r+0x8c4>
 802e7de:	b18c      	cbz	r4, 802e804 <_dtoa_r+0x77c>
 802e7e0:	4629      	mov	r1, r5
 802e7e2:	4622      	mov	r2, r4
 802e7e4:	4658      	mov	r0, fp
 802e7e6:	f000 fc5b 	bl	802f0a0 <__pow5mult>
 802e7ea:	464a      	mov	r2, r9
 802e7ec:	4601      	mov	r1, r0
 802e7ee:	4605      	mov	r5, r0
 802e7f0:	4658      	mov	r0, fp
 802e7f2:	f000 fbab 	bl	802ef4c <__multiply>
 802e7f6:	4649      	mov	r1, r9
 802e7f8:	9004      	str	r0, [sp, #16]
 802e7fa:	4658      	mov	r0, fp
 802e7fc:	f000 fa92 	bl	802ed24 <_Bfree>
 802e800:	9b04      	ldr	r3, [sp, #16]
 802e802:	4699      	mov	r9, r3
 802e804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e806:	1b1a      	subs	r2, r3, r4
 802e808:	d004      	beq.n	802e814 <_dtoa_r+0x78c>
 802e80a:	4649      	mov	r1, r9
 802e80c:	4658      	mov	r0, fp
 802e80e:	f000 fc47 	bl	802f0a0 <__pow5mult>
 802e812:	4681      	mov	r9, r0
 802e814:	2101      	movs	r1, #1
 802e816:	4658      	mov	r0, fp
 802e818:	f000 fb82 	bl	802ef20 <__i2b>
 802e81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e81e:	4604      	mov	r4, r0
 802e820:	2b00      	cmp	r3, #0
 802e822:	f000 81cf 	beq.w	802ebc4 <_dtoa_r+0xb3c>
 802e826:	461a      	mov	r2, r3
 802e828:	4601      	mov	r1, r0
 802e82a:	4658      	mov	r0, fp
 802e82c:	f000 fc38 	bl	802f0a0 <__pow5mult>
 802e830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e832:	2b01      	cmp	r3, #1
 802e834:	4604      	mov	r4, r0
 802e836:	f300 8095 	bgt.w	802e964 <_dtoa_r+0x8dc>
 802e83a:	9b02      	ldr	r3, [sp, #8]
 802e83c:	2b00      	cmp	r3, #0
 802e83e:	f040 8087 	bne.w	802e950 <_dtoa_r+0x8c8>
 802e842:	9b03      	ldr	r3, [sp, #12]
 802e844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e848:	2b00      	cmp	r3, #0
 802e84a:	f040 8089 	bne.w	802e960 <_dtoa_r+0x8d8>
 802e84e:	9b03      	ldr	r3, [sp, #12]
 802e850:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802e854:	0d1b      	lsrs	r3, r3, #20
 802e856:	051b      	lsls	r3, r3, #20
 802e858:	b12b      	cbz	r3, 802e866 <_dtoa_r+0x7de>
 802e85a:	9b08      	ldr	r3, [sp, #32]
 802e85c:	3301      	adds	r3, #1
 802e85e:	9308      	str	r3, [sp, #32]
 802e860:	f108 0801 	add.w	r8, r8, #1
 802e864:	2301      	movs	r3, #1
 802e866:	930a      	str	r3, [sp, #40]	@ 0x28
 802e868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802e86a:	2b00      	cmp	r3, #0
 802e86c:	f000 81b0 	beq.w	802ebd0 <_dtoa_r+0xb48>
 802e870:	6923      	ldr	r3, [r4, #16]
 802e872:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802e876:	6918      	ldr	r0, [r3, #16]
 802e878:	f000 fb06 	bl	802ee88 <__hi0bits>
 802e87c:	f1c0 0020 	rsb	r0, r0, #32
 802e880:	9b08      	ldr	r3, [sp, #32]
 802e882:	4418      	add	r0, r3
 802e884:	f010 001f 	ands.w	r0, r0, #31
 802e888:	d077      	beq.n	802e97a <_dtoa_r+0x8f2>
 802e88a:	f1c0 0320 	rsb	r3, r0, #32
 802e88e:	2b04      	cmp	r3, #4
 802e890:	dd6b      	ble.n	802e96a <_dtoa_r+0x8e2>
 802e892:	9b08      	ldr	r3, [sp, #32]
 802e894:	f1c0 001c 	rsb	r0, r0, #28
 802e898:	4403      	add	r3, r0
 802e89a:	4480      	add	r8, r0
 802e89c:	4406      	add	r6, r0
 802e89e:	9308      	str	r3, [sp, #32]
 802e8a0:	f1b8 0f00 	cmp.w	r8, #0
 802e8a4:	dd05      	ble.n	802e8b2 <_dtoa_r+0x82a>
 802e8a6:	4649      	mov	r1, r9
 802e8a8:	4642      	mov	r2, r8
 802e8aa:	4658      	mov	r0, fp
 802e8ac:	f000 fc52 	bl	802f154 <__lshift>
 802e8b0:	4681      	mov	r9, r0
 802e8b2:	9b08      	ldr	r3, [sp, #32]
 802e8b4:	2b00      	cmp	r3, #0
 802e8b6:	dd05      	ble.n	802e8c4 <_dtoa_r+0x83c>
 802e8b8:	4621      	mov	r1, r4
 802e8ba:	461a      	mov	r2, r3
 802e8bc:	4658      	mov	r0, fp
 802e8be:	f000 fc49 	bl	802f154 <__lshift>
 802e8c2:	4604      	mov	r4, r0
 802e8c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802e8c6:	2b00      	cmp	r3, #0
 802e8c8:	d059      	beq.n	802e97e <_dtoa_r+0x8f6>
 802e8ca:	4621      	mov	r1, r4
 802e8cc:	4648      	mov	r0, r9
 802e8ce:	f000 fcad 	bl	802f22c <__mcmp>
 802e8d2:	2800      	cmp	r0, #0
 802e8d4:	da53      	bge.n	802e97e <_dtoa_r+0x8f6>
 802e8d6:	1e7b      	subs	r3, r7, #1
 802e8d8:	9304      	str	r3, [sp, #16]
 802e8da:	4649      	mov	r1, r9
 802e8dc:	2300      	movs	r3, #0
 802e8de:	220a      	movs	r2, #10
 802e8e0:	4658      	mov	r0, fp
 802e8e2:	f000 fa41 	bl	802ed68 <__multadd>
 802e8e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e8e8:	4681      	mov	r9, r0
 802e8ea:	2b00      	cmp	r3, #0
 802e8ec:	f000 8172 	beq.w	802ebd4 <_dtoa_r+0xb4c>
 802e8f0:	2300      	movs	r3, #0
 802e8f2:	4629      	mov	r1, r5
 802e8f4:	220a      	movs	r2, #10
 802e8f6:	4658      	mov	r0, fp
 802e8f8:	f000 fa36 	bl	802ed68 <__multadd>
 802e8fc:	9b00      	ldr	r3, [sp, #0]
 802e8fe:	2b00      	cmp	r3, #0
 802e900:	4605      	mov	r5, r0
 802e902:	dc67      	bgt.n	802e9d4 <_dtoa_r+0x94c>
 802e904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e906:	2b02      	cmp	r3, #2
 802e908:	dc41      	bgt.n	802e98e <_dtoa_r+0x906>
 802e90a:	e063      	b.n	802e9d4 <_dtoa_r+0x94c>
 802e90c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802e90e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802e912:	e746      	b.n	802e7a2 <_dtoa_r+0x71a>
 802e914:	9b07      	ldr	r3, [sp, #28]
 802e916:	1e5c      	subs	r4, r3, #1
 802e918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e91a:	42a3      	cmp	r3, r4
 802e91c:	bfbf      	itttt	lt
 802e91e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 802e920:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802e922:	940a      	strlt	r4, [sp, #40]	@ 0x28
 802e924:	1ae3      	sublt	r3, r4, r3
 802e926:	bfb4      	ite	lt
 802e928:	18d2      	addlt	r2, r2, r3
 802e92a:	1b1c      	subge	r4, r3, r4
 802e92c:	9b07      	ldr	r3, [sp, #28]
 802e92e:	bfbc      	itt	lt
 802e930:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 802e932:	2400      	movlt	r4, #0
 802e934:	2b00      	cmp	r3, #0
 802e936:	bfb5      	itete	lt
 802e938:	eba8 0603 	sublt.w	r6, r8, r3
 802e93c:	9b07      	ldrge	r3, [sp, #28]
 802e93e:	2300      	movlt	r3, #0
 802e940:	4646      	movge	r6, r8
 802e942:	e730      	b.n	802e7a6 <_dtoa_r+0x71e>
 802e944:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802e946:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802e948:	4646      	mov	r6, r8
 802e94a:	e735      	b.n	802e7b8 <_dtoa_r+0x730>
 802e94c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802e94e:	e75c      	b.n	802e80a <_dtoa_r+0x782>
 802e950:	2300      	movs	r3, #0
 802e952:	e788      	b.n	802e866 <_dtoa_r+0x7de>
 802e954:	3fe00000 	.word	0x3fe00000
 802e958:	40240000 	.word	0x40240000
 802e95c:	40140000 	.word	0x40140000
 802e960:	9b02      	ldr	r3, [sp, #8]
 802e962:	e780      	b.n	802e866 <_dtoa_r+0x7de>
 802e964:	2300      	movs	r3, #0
 802e966:	930a      	str	r3, [sp, #40]	@ 0x28
 802e968:	e782      	b.n	802e870 <_dtoa_r+0x7e8>
 802e96a:	d099      	beq.n	802e8a0 <_dtoa_r+0x818>
 802e96c:	9a08      	ldr	r2, [sp, #32]
 802e96e:	331c      	adds	r3, #28
 802e970:	441a      	add	r2, r3
 802e972:	4498      	add	r8, r3
 802e974:	441e      	add	r6, r3
 802e976:	9208      	str	r2, [sp, #32]
 802e978:	e792      	b.n	802e8a0 <_dtoa_r+0x818>
 802e97a:	4603      	mov	r3, r0
 802e97c:	e7f6      	b.n	802e96c <_dtoa_r+0x8e4>
 802e97e:	9b07      	ldr	r3, [sp, #28]
 802e980:	9704      	str	r7, [sp, #16]
 802e982:	2b00      	cmp	r3, #0
 802e984:	dc20      	bgt.n	802e9c8 <_dtoa_r+0x940>
 802e986:	9300      	str	r3, [sp, #0]
 802e988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802e98a:	2b02      	cmp	r3, #2
 802e98c:	dd1e      	ble.n	802e9cc <_dtoa_r+0x944>
 802e98e:	9b00      	ldr	r3, [sp, #0]
 802e990:	2b00      	cmp	r3, #0
 802e992:	f47f aec0 	bne.w	802e716 <_dtoa_r+0x68e>
 802e996:	4621      	mov	r1, r4
 802e998:	2205      	movs	r2, #5
 802e99a:	4658      	mov	r0, fp
 802e99c:	f000 f9e4 	bl	802ed68 <__multadd>
 802e9a0:	4601      	mov	r1, r0
 802e9a2:	4604      	mov	r4, r0
 802e9a4:	4648      	mov	r0, r9
 802e9a6:	f000 fc41 	bl	802f22c <__mcmp>
 802e9aa:	2800      	cmp	r0, #0
 802e9ac:	f77f aeb3 	ble.w	802e716 <_dtoa_r+0x68e>
 802e9b0:	4656      	mov	r6, sl
 802e9b2:	2331      	movs	r3, #49	@ 0x31
 802e9b4:	f806 3b01 	strb.w	r3, [r6], #1
 802e9b8:	9b04      	ldr	r3, [sp, #16]
 802e9ba:	3301      	adds	r3, #1
 802e9bc:	9304      	str	r3, [sp, #16]
 802e9be:	e6ae      	b.n	802e71e <_dtoa_r+0x696>
 802e9c0:	9c07      	ldr	r4, [sp, #28]
 802e9c2:	9704      	str	r7, [sp, #16]
 802e9c4:	4625      	mov	r5, r4
 802e9c6:	e7f3      	b.n	802e9b0 <_dtoa_r+0x928>
 802e9c8:	9b07      	ldr	r3, [sp, #28]
 802e9ca:	9300      	str	r3, [sp, #0]
 802e9cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802e9ce:	2b00      	cmp	r3, #0
 802e9d0:	f000 8104 	beq.w	802ebdc <_dtoa_r+0xb54>
 802e9d4:	2e00      	cmp	r6, #0
 802e9d6:	dd05      	ble.n	802e9e4 <_dtoa_r+0x95c>
 802e9d8:	4629      	mov	r1, r5
 802e9da:	4632      	mov	r2, r6
 802e9dc:	4658      	mov	r0, fp
 802e9de:	f000 fbb9 	bl	802f154 <__lshift>
 802e9e2:	4605      	mov	r5, r0
 802e9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802e9e6:	2b00      	cmp	r3, #0
 802e9e8:	d05a      	beq.n	802eaa0 <_dtoa_r+0xa18>
 802e9ea:	6869      	ldr	r1, [r5, #4]
 802e9ec:	4658      	mov	r0, fp
 802e9ee:	f000 f959 	bl	802eca4 <_Balloc>
 802e9f2:	4606      	mov	r6, r0
 802e9f4:	b928      	cbnz	r0, 802ea02 <_dtoa_r+0x97a>
 802e9f6:	4b84      	ldr	r3, [pc, #528]	@ (802ec08 <_dtoa_r+0xb80>)
 802e9f8:	4602      	mov	r2, r0
 802e9fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 802e9fe:	f7ff bb5a 	b.w	802e0b6 <_dtoa_r+0x2e>
 802ea02:	692a      	ldr	r2, [r5, #16]
 802ea04:	3202      	adds	r2, #2
 802ea06:	0092      	lsls	r2, r2, #2
 802ea08:	f105 010c 	add.w	r1, r5, #12
 802ea0c:	300c      	adds	r0, #12
 802ea0e:	f7ff fa94 	bl	802df3a <memcpy>
 802ea12:	2201      	movs	r2, #1
 802ea14:	4631      	mov	r1, r6
 802ea16:	4658      	mov	r0, fp
 802ea18:	f000 fb9c 	bl	802f154 <__lshift>
 802ea1c:	f10a 0301 	add.w	r3, sl, #1
 802ea20:	9307      	str	r3, [sp, #28]
 802ea22:	9b00      	ldr	r3, [sp, #0]
 802ea24:	4453      	add	r3, sl
 802ea26:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ea28:	9b02      	ldr	r3, [sp, #8]
 802ea2a:	f003 0301 	and.w	r3, r3, #1
 802ea2e:	462f      	mov	r7, r5
 802ea30:	930a      	str	r3, [sp, #40]	@ 0x28
 802ea32:	4605      	mov	r5, r0
 802ea34:	9b07      	ldr	r3, [sp, #28]
 802ea36:	4621      	mov	r1, r4
 802ea38:	3b01      	subs	r3, #1
 802ea3a:	4648      	mov	r0, r9
 802ea3c:	9300      	str	r3, [sp, #0]
 802ea3e:	f7ff fa98 	bl	802df72 <quorem>
 802ea42:	4639      	mov	r1, r7
 802ea44:	9002      	str	r0, [sp, #8]
 802ea46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802ea4a:	4648      	mov	r0, r9
 802ea4c:	f000 fbee 	bl	802f22c <__mcmp>
 802ea50:	462a      	mov	r2, r5
 802ea52:	9008      	str	r0, [sp, #32]
 802ea54:	4621      	mov	r1, r4
 802ea56:	4658      	mov	r0, fp
 802ea58:	f000 fc04 	bl	802f264 <__mdiff>
 802ea5c:	68c2      	ldr	r2, [r0, #12]
 802ea5e:	4606      	mov	r6, r0
 802ea60:	bb02      	cbnz	r2, 802eaa4 <_dtoa_r+0xa1c>
 802ea62:	4601      	mov	r1, r0
 802ea64:	4648      	mov	r0, r9
 802ea66:	f000 fbe1 	bl	802f22c <__mcmp>
 802ea6a:	4602      	mov	r2, r0
 802ea6c:	4631      	mov	r1, r6
 802ea6e:	4658      	mov	r0, fp
 802ea70:	920e      	str	r2, [sp, #56]	@ 0x38
 802ea72:	f000 f957 	bl	802ed24 <_Bfree>
 802ea76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ea78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ea7a:	9e07      	ldr	r6, [sp, #28]
 802ea7c:	ea43 0102 	orr.w	r1, r3, r2
 802ea80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802ea82:	4319      	orrs	r1, r3
 802ea84:	d110      	bne.n	802eaa8 <_dtoa_r+0xa20>
 802ea86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802ea8a:	d029      	beq.n	802eae0 <_dtoa_r+0xa58>
 802ea8c:	9b08      	ldr	r3, [sp, #32]
 802ea8e:	2b00      	cmp	r3, #0
 802ea90:	dd02      	ble.n	802ea98 <_dtoa_r+0xa10>
 802ea92:	9b02      	ldr	r3, [sp, #8]
 802ea94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 802ea98:	9b00      	ldr	r3, [sp, #0]
 802ea9a:	f883 8000 	strb.w	r8, [r3]
 802ea9e:	e63f      	b.n	802e720 <_dtoa_r+0x698>
 802eaa0:	4628      	mov	r0, r5
 802eaa2:	e7bb      	b.n	802ea1c <_dtoa_r+0x994>
 802eaa4:	2201      	movs	r2, #1
 802eaa6:	e7e1      	b.n	802ea6c <_dtoa_r+0x9e4>
 802eaa8:	9b08      	ldr	r3, [sp, #32]
 802eaaa:	2b00      	cmp	r3, #0
 802eaac:	db04      	blt.n	802eab8 <_dtoa_r+0xa30>
 802eaae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802eab0:	430b      	orrs	r3, r1
 802eab2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802eab4:	430b      	orrs	r3, r1
 802eab6:	d120      	bne.n	802eafa <_dtoa_r+0xa72>
 802eab8:	2a00      	cmp	r2, #0
 802eaba:	dded      	ble.n	802ea98 <_dtoa_r+0xa10>
 802eabc:	4649      	mov	r1, r9
 802eabe:	2201      	movs	r2, #1
 802eac0:	4658      	mov	r0, fp
 802eac2:	f000 fb47 	bl	802f154 <__lshift>
 802eac6:	4621      	mov	r1, r4
 802eac8:	4681      	mov	r9, r0
 802eaca:	f000 fbaf 	bl	802f22c <__mcmp>
 802eace:	2800      	cmp	r0, #0
 802ead0:	dc03      	bgt.n	802eada <_dtoa_r+0xa52>
 802ead2:	d1e1      	bne.n	802ea98 <_dtoa_r+0xa10>
 802ead4:	f018 0f01 	tst.w	r8, #1
 802ead8:	d0de      	beq.n	802ea98 <_dtoa_r+0xa10>
 802eada:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802eade:	d1d8      	bne.n	802ea92 <_dtoa_r+0xa0a>
 802eae0:	9a00      	ldr	r2, [sp, #0]
 802eae2:	2339      	movs	r3, #57	@ 0x39
 802eae4:	7013      	strb	r3, [r2, #0]
 802eae6:	4633      	mov	r3, r6
 802eae8:	461e      	mov	r6, r3
 802eaea:	3b01      	subs	r3, #1
 802eaec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802eaf0:	2a39      	cmp	r2, #57	@ 0x39
 802eaf2:	d052      	beq.n	802eb9a <_dtoa_r+0xb12>
 802eaf4:	3201      	adds	r2, #1
 802eaf6:	701a      	strb	r2, [r3, #0]
 802eaf8:	e612      	b.n	802e720 <_dtoa_r+0x698>
 802eafa:	2a00      	cmp	r2, #0
 802eafc:	dd07      	ble.n	802eb0e <_dtoa_r+0xa86>
 802eafe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 802eb02:	d0ed      	beq.n	802eae0 <_dtoa_r+0xa58>
 802eb04:	9a00      	ldr	r2, [sp, #0]
 802eb06:	f108 0301 	add.w	r3, r8, #1
 802eb0a:	7013      	strb	r3, [r2, #0]
 802eb0c:	e608      	b.n	802e720 <_dtoa_r+0x698>
 802eb0e:	9b07      	ldr	r3, [sp, #28]
 802eb10:	9a07      	ldr	r2, [sp, #28]
 802eb12:	f803 8c01 	strb.w	r8, [r3, #-1]
 802eb16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802eb18:	4293      	cmp	r3, r2
 802eb1a:	d028      	beq.n	802eb6e <_dtoa_r+0xae6>
 802eb1c:	4649      	mov	r1, r9
 802eb1e:	2300      	movs	r3, #0
 802eb20:	220a      	movs	r2, #10
 802eb22:	4658      	mov	r0, fp
 802eb24:	f000 f920 	bl	802ed68 <__multadd>
 802eb28:	42af      	cmp	r7, r5
 802eb2a:	4681      	mov	r9, r0
 802eb2c:	f04f 0300 	mov.w	r3, #0
 802eb30:	f04f 020a 	mov.w	r2, #10
 802eb34:	4639      	mov	r1, r7
 802eb36:	4658      	mov	r0, fp
 802eb38:	d107      	bne.n	802eb4a <_dtoa_r+0xac2>
 802eb3a:	f000 f915 	bl	802ed68 <__multadd>
 802eb3e:	4607      	mov	r7, r0
 802eb40:	4605      	mov	r5, r0
 802eb42:	9b07      	ldr	r3, [sp, #28]
 802eb44:	3301      	adds	r3, #1
 802eb46:	9307      	str	r3, [sp, #28]
 802eb48:	e774      	b.n	802ea34 <_dtoa_r+0x9ac>
 802eb4a:	f000 f90d 	bl	802ed68 <__multadd>
 802eb4e:	4629      	mov	r1, r5
 802eb50:	4607      	mov	r7, r0
 802eb52:	2300      	movs	r3, #0
 802eb54:	220a      	movs	r2, #10
 802eb56:	4658      	mov	r0, fp
 802eb58:	f000 f906 	bl	802ed68 <__multadd>
 802eb5c:	4605      	mov	r5, r0
 802eb5e:	e7f0      	b.n	802eb42 <_dtoa_r+0xaba>
 802eb60:	9b00      	ldr	r3, [sp, #0]
 802eb62:	2b00      	cmp	r3, #0
 802eb64:	bfcc      	ite	gt
 802eb66:	461e      	movgt	r6, r3
 802eb68:	2601      	movle	r6, #1
 802eb6a:	4456      	add	r6, sl
 802eb6c:	2700      	movs	r7, #0
 802eb6e:	4649      	mov	r1, r9
 802eb70:	2201      	movs	r2, #1
 802eb72:	4658      	mov	r0, fp
 802eb74:	f000 faee 	bl	802f154 <__lshift>
 802eb78:	4621      	mov	r1, r4
 802eb7a:	4681      	mov	r9, r0
 802eb7c:	f000 fb56 	bl	802f22c <__mcmp>
 802eb80:	2800      	cmp	r0, #0
 802eb82:	dcb0      	bgt.n	802eae6 <_dtoa_r+0xa5e>
 802eb84:	d102      	bne.n	802eb8c <_dtoa_r+0xb04>
 802eb86:	f018 0f01 	tst.w	r8, #1
 802eb8a:	d1ac      	bne.n	802eae6 <_dtoa_r+0xa5e>
 802eb8c:	4633      	mov	r3, r6
 802eb8e:	461e      	mov	r6, r3
 802eb90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802eb94:	2a30      	cmp	r2, #48	@ 0x30
 802eb96:	d0fa      	beq.n	802eb8e <_dtoa_r+0xb06>
 802eb98:	e5c2      	b.n	802e720 <_dtoa_r+0x698>
 802eb9a:	459a      	cmp	sl, r3
 802eb9c:	d1a4      	bne.n	802eae8 <_dtoa_r+0xa60>
 802eb9e:	9b04      	ldr	r3, [sp, #16]
 802eba0:	3301      	adds	r3, #1
 802eba2:	9304      	str	r3, [sp, #16]
 802eba4:	2331      	movs	r3, #49	@ 0x31
 802eba6:	f88a 3000 	strb.w	r3, [sl]
 802ebaa:	e5b9      	b.n	802e720 <_dtoa_r+0x698>
 802ebac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ebae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 802ec0c <_dtoa_r+0xb84>
 802ebb2:	b11b      	cbz	r3, 802ebbc <_dtoa_r+0xb34>
 802ebb4:	f10a 0308 	add.w	r3, sl, #8
 802ebb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802ebba:	6013      	str	r3, [r2, #0]
 802ebbc:	4650      	mov	r0, sl
 802ebbe:	b019      	add	sp, #100	@ 0x64
 802ebc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ebc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ebc6:	2b01      	cmp	r3, #1
 802ebc8:	f77f ae37 	ble.w	802e83a <_dtoa_r+0x7b2>
 802ebcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ebce:	930a      	str	r3, [sp, #40]	@ 0x28
 802ebd0:	2001      	movs	r0, #1
 802ebd2:	e655      	b.n	802e880 <_dtoa_r+0x7f8>
 802ebd4:	9b00      	ldr	r3, [sp, #0]
 802ebd6:	2b00      	cmp	r3, #0
 802ebd8:	f77f aed6 	ble.w	802e988 <_dtoa_r+0x900>
 802ebdc:	4656      	mov	r6, sl
 802ebde:	4621      	mov	r1, r4
 802ebe0:	4648      	mov	r0, r9
 802ebe2:	f7ff f9c6 	bl	802df72 <quorem>
 802ebe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 802ebea:	f806 8b01 	strb.w	r8, [r6], #1
 802ebee:	9b00      	ldr	r3, [sp, #0]
 802ebf0:	eba6 020a 	sub.w	r2, r6, sl
 802ebf4:	4293      	cmp	r3, r2
 802ebf6:	ddb3      	ble.n	802eb60 <_dtoa_r+0xad8>
 802ebf8:	4649      	mov	r1, r9
 802ebfa:	2300      	movs	r3, #0
 802ebfc:	220a      	movs	r2, #10
 802ebfe:	4658      	mov	r0, fp
 802ec00:	f000 f8b2 	bl	802ed68 <__multadd>
 802ec04:	4681      	mov	r9, r0
 802ec06:	e7ea      	b.n	802ebde <_dtoa_r+0xb56>
 802ec08:	08034e59 	.word	0x08034e59
 802ec0c:	08034df4 	.word	0x08034df4

0802ec10 <_free_r>:
 802ec10:	b538      	push	{r3, r4, r5, lr}
 802ec12:	4605      	mov	r5, r0
 802ec14:	2900      	cmp	r1, #0
 802ec16:	d041      	beq.n	802ec9c <_free_r+0x8c>
 802ec18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ec1c:	1f0c      	subs	r4, r1, #4
 802ec1e:	2b00      	cmp	r3, #0
 802ec20:	bfb8      	it	lt
 802ec22:	18e4      	addlt	r4, r4, r3
 802ec24:	f7fd fed4 	bl	802c9d0 <__malloc_lock>
 802ec28:	4a1d      	ldr	r2, [pc, #116]	@ (802eca0 <_free_r+0x90>)
 802ec2a:	6813      	ldr	r3, [r2, #0]
 802ec2c:	b933      	cbnz	r3, 802ec3c <_free_r+0x2c>
 802ec2e:	6063      	str	r3, [r4, #4]
 802ec30:	6014      	str	r4, [r2, #0]
 802ec32:	4628      	mov	r0, r5
 802ec34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ec38:	f7fd bed0 	b.w	802c9dc <__malloc_unlock>
 802ec3c:	42a3      	cmp	r3, r4
 802ec3e:	d908      	bls.n	802ec52 <_free_r+0x42>
 802ec40:	6820      	ldr	r0, [r4, #0]
 802ec42:	1821      	adds	r1, r4, r0
 802ec44:	428b      	cmp	r3, r1
 802ec46:	bf01      	itttt	eq
 802ec48:	6819      	ldreq	r1, [r3, #0]
 802ec4a:	685b      	ldreq	r3, [r3, #4]
 802ec4c:	1809      	addeq	r1, r1, r0
 802ec4e:	6021      	streq	r1, [r4, #0]
 802ec50:	e7ed      	b.n	802ec2e <_free_r+0x1e>
 802ec52:	461a      	mov	r2, r3
 802ec54:	685b      	ldr	r3, [r3, #4]
 802ec56:	b10b      	cbz	r3, 802ec5c <_free_r+0x4c>
 802ec58:	42a3      	cmp	r3, r4
 802ec5a:	d9fa      	bls.n	802ec52 <_free_r+0x42>
 802ec5c:	6811      	ldr	r1, [r2, #0]
 802ec5e:	1850      	adds	r0, r2, r1
 802ec60:	42a0      	cmp	r0, r4
 802ec62:	d10b      	bne.n	802ec7c <_free_r+0x6c>
 802ec64:	6820      	ldr	r0, [r4, #0]
 802ec66:	4401      	add	r1, r0
 802ec68:	1850      	adds	r0, r2, r1
 802ec6a:	4283      	cmp	r3, r0
 802ec6c:	6011      	str	r1, [r2, #0]
 802ec6e:	d1e0      	bne.n	802ec32 <_free_r+0x22>
 802ec70:	6818      	ldr	r0, [r3, #0]
 802ec72:	685b      	ldr	r3, [r3, #4]
 802ec74:	6053      	str	r3, [r2, #4]
 802ec76:	4408      	add	r0, r1
 802ec78:	6010      	str	r0, [r2, #0]
 802ec7a:	e7da      	b.n	802ec32 <_free_r+0x22>
 802ec7c:	d902      	bls.n	802ec84 <_free_r+0x74>
 802ec7e:	230c      	movs	r3, #12
 802ec80:	602b      	str	r3, [r5, #0]
 802ec82:	e7d6      	b.n	802ec32 <_free_r+0x22>
 802ec84:	6820      	ldr	r0, [r4, #0]
 802ec86:	1821      	adds	r1, r4, r0
 802ec88:	428b      	cmp	r3, r1
 802ec8a:	bf04      	itt	eq
 802ec8c:	6819      	ldreq	r1, [r3, #0]
 802ec8e:	685b      	ldreq	r3, [r3, #4]
 802ec90:	6063      	str	r3, [r4, #4]
 802ec92:	bf04      	itt	eq
 802ec94:	1809      	addeq	r1, r1, r0
 802ec96:	6021      	streq	r1, [r4, #0]
 802ec98:	6054      	str	r4, [r2, #4]
 802ec9a:	e7ca      	b.n	802ec32 <_free_r+0x22>
 802ec9c:	bd38      	pop	{r3, r4, r5, pc}
 802ec9e:	bf00      	nop
 802eca0:	2000d9cc 	.word	0x2000d9cc

0802eca4 <_Balloc>:
 802eca4:	b570      	push	{r4, r5, r6, lr}
 802eca6:	69c6      	ldr	r6, [r0, #28]
 802eca8:	4604      	mov	r4, r0
 802ecaa:	460d      	mov	r5, r1
 802ecac:	b976      	cbnz	r6, 802eccc <_Balloc+0x28>
 802ecae:	2010      	movs	r0, #16
 802ecb0:	f7fd fddc 	bl	802c86c <malloc>
 802ecb4:	4602      	mov	r2, r0
 802ecb6:	61e0      	str	r0, [r4, #28]
 802ecb8:	b920      	cbnz	r0, 802ecc4 <_Balloc+0x20>
 802ecba:	4b18      	ldr	r3, [pc, #96]	@ (802ed1c <_Balloc+0x78>)
 802ecbc:	4818      	ldr	r0, [pc, #96]	@ (802ed20 <_Balloc+0x7c>)
 802ecbe:	216b      	movs	r1, #107	@ 0x6b
 802ecc0:	f7fd fda2 	bl	802c808 <__assert_func>
 802ecc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ecc8:	6006      	str	r6, [r0, #0]
 802ecca:	60c6      	str	r6, [r0, #12]
 802eccc:	69e6      	ldr	r6, [r4, #28]
 802ecce:	68f3      	ldr	r3, [r6, #12]
 802ecd0:	b183      	cbz	r3, 802ecf4 <_Balloc+0x50>
 802ecd2:	69e3      	ldr	r3, [r4, #28]
 802ecd4:	68db      	ldr	r3, [r3, #12]
 802ecd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802ecda:	b9b8      	cbnz	r0, 802ed0c <_Balloc+0x68>
 802ecdc:	2101      	movs	r1, #1
 802ecde:	fa01 f605 	lsl.w	r6, r1, r5
 802ece2:	1d72      	adds	r2, r6, #5
 802ece4:	0092      	lsls	r2, r2, #2
 802ece6:	4620      	mov	r0, r4
 802ece8:	f7fd fdac 	bl	802c844 <_calloc_r>
 802ecec:	b160      	cbz	r0, 802ed08 <_Balloc+0x64>
 802ecee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802ecf2:	e00e      	b.n	802ed12 <_Balloc+0x6e>
 802ecf4:	2221      	movs	r2, #33	@ 0x21
 802ecf6:	2104      	movs	r1, #4
 802ecf8:	4620      	mov	r0, r4
 802ecfa:	f7fd fda3 	bl	802c844 <_calloc_r>
 802ecfe:	69e3      	ldr	r3, [r4, #28]
 802ed00:	60f0      	str	r0, [r6, #12]
 802ed02:	68db      	ldr	r3, [r3, #12]
 802ed04:	2b00      	cmp	r3, #0
 802ed06:	d1e4      	bne.n	802ecd2 <_Balloc+0x2e>
 802ed08:	2000      	movs	r0, #0
 802ed0a:	bd70      	pop	{r4, r5, r6, pc}
 802ed0c:	6802      	ldr	r2, [r0, #0]
 802ed0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802ed12:	2300      	movs	r3, #0
 802ed14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802ed18:	e7f7      	b.n	802ed0a <_Balloc+0x66>
 802ed1a:	bf00      	nop
 802ed1c:	08034d83 	.word	0x08034d83
 802ed20:	08034e6a 	.word	0x08034e6a

0802ed24 <_Bfree>:
 802ed24:	b570      	push	{r4, r5, r6, lr}
 802ed26:	69c6      	ldr	r6, [r0, #28]
 802ed28:	4605      	mov	r5, r0
 802ed2a:	460c      	mov	r4, r1
 802ed2c:	b976      	cbnz	r6, 802ed4c <_Bfree+0x28>
 802ed2e:	2010      	movs	r0, #16
 802ed30:	f7fd fd9c 	bl	802c86c <malloc>
 802ed34:	4602      	mov	r2, r0
 802ed36:	61e8      	str	r0, [r5, #28]
 802ed38:	b920      	cbnz	r0, 802ed44 <_Bfree+0x20>
 802ed3a:	4b09      	ldr	r3, [pc, #36]	@ (802ed60 <_Bfree+0x3c>)
 802ed3c:	4809      	ldr	r0, [pc, #36]	@ (802ed64 <_Bfree+0x40>)
 802ed3e:	218f      	movs	r1, #143	@ 0x8f
 802ed40:	f7fd fd62 	bl	802c808 <__assert_func>
 802ed44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ed48:	6006      	str	r6, [r0, #0]
 802ed4a:	60c6      	str	r6, [r0, #12]
 802ed4c:	b13c      	cbz	r4, 802ed5e <_Bfree+0x3a>
 802ed4e:	69eb      	ldr	r3, [r5, #28]
 802ed50:	6862      	ldr	r2, [r4, #4]
 802ed52:	68db      	ldr	r3, [r3, #12]
 802ed54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802ed58:	6021      	str	r1, [r4, #0]
 802ed5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802ed5e:	bd70      	pop	{r4, r5, r6, pc}
 802ed60:	08034d83 	.word	0x08034d83
 802ed64:	08034e6a 	.word	0x08034e6a

0802ed68 <__multadd>:
 802ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ed6c:	690d      	ldr	r5, [r1, #16]
 802ed6e:	4607      	mov	r7, r0
 802ed70:	460c      	mov	r4, r1
 802ed72:	461e      	mov	r6, r3
 802ed74:	f101 0c14 	add.w	ip, r1, #20
 802ed78:	2000      	movs	r0, #0
 802ed7a:	f8dc 3000 	ldr.w	r3, [ip]
 802ed7e:	b299      	uxth	r1, r3
 802ed80:	fb02 6101 	mla	r1, r2, r1, r6
 802ed84:	0c1e      	lsrs	r6, r3, #16
 802ed86:	0c0b      	lsrs	r3, r1, #16
 802ed88:	fb02 3306 	mla	r3, r2, r6, r3
 802ed8c:	b289      	uxth	r1, r1
 802ed8e:	3001      	adds	r0, #1
 802ed90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802ed94:	4285      	cmp	r5, r0
 802ed96:	f84c 1b04 	str.w	r1, [ip], #4
 802ed9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802ed9e:	dcec      	bgt.n	802ed7a <__multadd+0x12>
 802eda0:	b30e      	cbz	r6, 802ede6 <__multadd+0x7e>
 802eda2:	68a3      	ldr	r3, [r4, #8]
 802eda4:	42ab      	cmp	r3, r5
 802eda6:	dc19      	bgt.n	802eddc <__multadd+0x74>
 802eda8:	6861      	ldr	r1, [r4, #4]
 802edaa:	4638      	mov	r0, r7
 802edac:	3101      	adds	r1, #1
 802edae:	f7ff ff79 	bl	802eca4 <_Balloc>
 802edb2:	4680      	mov	r8, r0
 802edb4:	b928      	cbnz	r0, 802edc2 <__multadd+0x5a>
 802edb6:	4602      	mov	r2, r0
 802edb8:	4b0c      	ldr	r3, [pc, #48]	@ (802edec <__multadd+0x84>)
 802edba:	480d      	ldr	r0, [pc, #52]	@ (802edf0 <__multadd+0x88>)
 802edbc:	21ba      	movs	r1, #186	@ 0xba
 802edbe:	f7fd fd23 	bl	802c808 <__assert_func>
 802edc2:	6922      	ldr	r2, [r4, #16]
 802edc4:	3202      	adds	r2, #2
 802edc6:	f104 010c 	add.w	r1, r4, #12
 802edca:	0092      	lsls	r2, r2, #2
 802edcc:	300c      	adds	r0, #12
 802edce:	f7ff f8b4 	bl	802df3a <memcpy>
 802edd2:	4621      	mov	r1, r4
 802edd4:	4638      	mov	r0, r7
 802edd6:	f7ff ffa5 	bl	802ed24 <_Bfree>
 802edda:	4644      	mov	r4, r8
 802eddc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802ede0:	3501      	adds	r5, #1
 802ede2:	615e      	str	r6, [r3, #20]
 802ede4:	6125      	str	r5, [r4, #16]
 802ede6:	4620      	mov	r0, r4
 802ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802edec:	08034e59 	.word	0x08034e59
 802edf0:	08034e6a 	.word	0x08034e6a

0802edf4 <__s2b>:
 802edf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802edf8:	460c      	mov	r4, r1
 802edfa:	4615      	mov	r5, r2
 802edfc:	461f      	mov	r7, r3
 802edfe:	2209      	movs	r2, #9
 802ee00:	3308      	adds	r3, #8
 802ee02:	4606      	mov	r6, r0
 802ee04:	fb93 f3f2 	sdiv	r3, r3, r2
 802ee08:	2100      	movs	r1, #0
 802ee0a:	2201      	movs	r2, #1
 802ee0c:	429a      	cmp	r2, r3
 802ee0e:	db09      	blt.n	802ee24 <__s2b+0x30>
 802ee10:	4630      	mov	r0, r6
 802ee12:	f7ff ff47 	bl	802eca4 <_Balloc>
 802ee16:	b940      	cbnz	r0, 802ee2a <__s2b+0x36>
 802ee18:	4602      	mov	r2, r0
 802ee1a:	4b19      	ldr	r3, [pc, #100]	@ (802ee80 <__s2b+0x8c>)
 802ee1c:	4819      	ldr	r0, [pc, #100]	@ (802ee84 <__s2b+0x90>)
 802ee1e:	21d3      	movs	r1, #211	@ 0xd3
 802ee20:	f7fd fcf2 	bl	802c808 <__assert_func>
 802ee24:	0052      	lsls	r2, r2, #1
 802ee26:	3101      	adds	r1, #1
 802ee28:	e7f0      	b.n	802ee0c <__s2b+0x18>
 802ee2a:	9b08      	ldr	r3, [sp, #32]
 802ee2c:	6143      	str	r3, [r0, #20]
 802ee2e:	2d09      	cmp	r5, #9
 802ee30:	f04f 0301 	mov.w	r3, #1
 802ee34:	6103      	str	r3, [r0, #16]
 802ee36:	dd16      	ble.n	802ee66 <__s2b+0x72>
 802ee38:	f104 0909 	add.w	r9, r4, #9
 802ee3c:	46c8      	mov	r8, r9
 802ee3e:	442c      	add	r4, r5
 802ee40:	f818 3b01 	ldrb.w	r3, [r8], #1
 802ee44:	4601      	mov	r1, r0
 802ee46:	3b30      	subs	r3, #48	@ 0x30
 802ee48:	220a      	movs	r2, #10
 802ee4a:	4630      	mov	r0, r6
 802ee4c:	f7ff ff8c 	bl	802ed68 <__multadd>
 802ee50:	45a0      	cmp	r8, r4
 802ee52:	d1f5      	bne.n	802ee40 <__s2b+0x4c>
 802ee54:	f1a5 0408 	sub.w	r4, r5, #8
 802ee58:	444c      	add	r4, r9
 802ee5a:	1b2d      	subs	r5, r5, r4
 802ee5c:	1963      	adds	r3, r4, r5
 802ee5e:	42bb      	cmp	r3, r7
 802ee60:	db04      	blt.n	802ee6c <__s2b+0x78>
 802ee62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ee66:	340a      	adds	r4, #10
 802ee68:	2509      	movs	r5, #9
 802ee6a:	e7f6      	b.n	802ee5a <__s2b+0x66>
 802ee6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 802ee70:	4601      	mov	r1, r0
 802ee72:	3b30      	subs	r3, #48	@ 0x30
 802ee74:	220a      	movs	r2, #10
 802ee76:	4630      	mov	r0, r6
 802ee78:	f7ff ff76 	bl	802ed68 <__multadd>
 802ee7c:	e7ee      	b.n	802ee5c <__s2b+0x68>
 802ee7e:	bf00      	nop
 802ee80:	08034e59 	.word	0x08034e59
 802ee84:	08034e6a 	.word	0x08034e6a

0802ee88 <__hi0bits>:
 802ee88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802ee8c:	4603      	mov	r3, r0
 802ee8e:	bf36      	itet	cc
 802ee90:	0403      	lslcc	r3, r0, #16
 802ee92:	2000      	movcs	r0, #0
 802ee94:	2010      	movcc	r0, #16
 802ee96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802ee9a:	bf3c      	itt	cc
 802ee9c:	021b      	lslcc	r3, r3, #8
 802ee9e:	3008      	addcc	r0, #8
 802eea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802eea4:	bf3c      	itt	cc
 802eea6:	011b      	lslcc	r3, r3, #4
 802eea8:	3004      	addcc	r0, #4
 802eeaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802eeae:	bf3c      	itt	cc
 802eeb0:	009b      	lslcc	r3, r3, #2
 802eeb2:	3002      	addcc	r0, #2
 802eeb4:	2b00      	cmp	r3, #0
 802eeb6:	db05      	blt.n	802eec4 <__hi0bits+0x3c>
 802eeb8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802eebc:	f100 0001 	add.w	r0, r0, #1
 802eec0:	bf08      	it	eq
 802eec2:	2020      	moveq	r0, #32
 802eec4:	4770      	bx	lr

0802eec6 <__lo0bits>:
 802eec6:	6803      	ldr	r3, [r0, #0]
 802eec8:	4602      	mov	r2, r0
 802eeca:	f013 0007 	ands.w	r0, r3, #7
 802eece:	d00b      	beq.n	802eee8 <__lo0bits+0x22>
 802eed0:	07d9      	lsls	r1, r3, #31
 802eed2:	d421      	bmi.n	802ef18 <__lo0bits+0x52>
 802eed4:	0798      	lsls	r0, r3, #30
 802eed6:	bf49      	itett	mi
 802eed8:	085b      	lsrmi	r3, r3, #1
 802eeda:	089b      	lsrpl	r3, r3, #2
 802eedc:	2001      	movmi	r0, #1
 802eede:	6013      	strmi	r3, [r2, #0]
 802eee0:	bf5c      	itt	pl
 802eee2:	6013      	strpl	r3, [r2, #0]
 802eee4:	2002      	movpl	r0, #2
 802eee6:	4770      	bx	lr
 802eee8:	b299      	uxth	r1, r3
 802eeea:	b909      	cbnz	r1, 802eef0 <__lo0bits+0x2a>
 802eeec:	0c1b      	lsrs	r3, r3, #16
 802eeee:	2010      	movs	r0, #16
 802eef0:	b2d9      	uxtb	r1, r3
 802eef2:	b909      	cbnz	r1, 802eef8 <__lo0bits+0x32>
 802eef4:	3008      	adds	r0, #8
 802eef6:	0a1b      	lsrs	r3, r3, #8
 802eef8:	0719      	lsls	r1, r3, #28
 802eefa:	bf04      	itt	eq
 802eefc:	091b      	lsreq	r3, r3, #4
 802eefe:	3004      	addeq	r0, #4
 802ef00:	0799      	lsls	r1, r3, #30
 802ef02:	bf04      	itt	eq
 802ef04:	089b      	lsreq	r3, r3, #2
 802ef06:	3002      	addeq	r0, #2
 802ef08:	07d9      	lsls	r1, r3, #31
 802ef0a:	d403      	bmi.n	802ef14 <__lo0bits+0x4e>
 802ef0c:	085b      	lsrs	r3, r3, #1
 802ef0e:	f100 0001 	add.w	r0, r0, #1
 802ef12:	d003      	beq.n	802ef1c <__lo0bits+0x56>
 802ef14:	6013      	str	r3, [r2, #0]
 802ef16:	4770      	bx	lr
 802ef18:	2000      	movs	r0, #0
 802ef1a:	4770      	bx	lr
 802ef1c:	2020      	movs	r0, #32
 802ef1e:	4770      	bx	lr

0802ef20 <__i2b>:
 802ef20:	b510      	push	{r4, lr}
 802ef22:	460c      	mov	r4, r1
 802ef24:	2101      	movs	r1, #1
 802ef26:	f7ff febd 	bl	802eca4 <_Balloc>
 802ef2a:	4602      	mov	r2, r0
 802ef2c:	b928      	cbnz	r0, 802ef3a <__i2b+0x1a>
 802ef2e:	4b05      	ldr	r3, [pc, #20]	@ (802ef44 <__i2b+0x24>)
 802ef30:	4805      	ldr	r0, [pc, #20]	@ (802ef48 <__i2b+0x28>)
 802ef32:	f240 1145 	movw	r1, #325	@ 0x145
 802ef36:	f7fd fc67 	bl	802c808 <__assert_func>
 802ef3a:	2301      	movs	r3, #1
 802ef3c:	6144      	str	r4, [r0, #20]
 802ef3e:	6103      	str	r3, [r0, #16]
 802ef40:	bd10      	pop	{r4, pc}
 802ef42:	bf00      	nop
 802ef44:	08034e59 	.word	0x08034e59
 802ef48:	08034e6a 	.word	0x08034e6a

0802ef4c <__multiply>:
 802ef4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ef50:	4614      	mov	r4, r2
 802ef52:	690a      	ldr	r2, [r1, #16]
 802ef54:	6923      	ldr	r3, [r4, #16]
 802ef56:	429a      	cmp	r2, r3
 802ef58:	bfa8      	it	ge
 802ef5a:	4623      	movge	r3, r4
 802ef5c:	460f      	mov	r7, r1
 802ef5e:	bfa4      	itt	ge
 802ef60:	460c      	movge	r4, r1
 802ef62:	461f      	movge	r7, r3
 802ef64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 802ef68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802ef6c:	68a3      	ldr	r3, [r4, #8]
 802ef6e:	6861      	ldr	r1, [r4, #4]
 802ef70:	eb0a 0609 	add.w	r6, sl, r9
 802ef74:	42b3      	cmp	r3, r6
 802ef76:	b085      	sub	sp, #20
 802ef78:	bfb8      	it	lt
 802ef7a:	3101      	addlt	r1, #1
 802ef7c:	f7ff fe92 	bl	802eca4 <_Balloc>
 802ef80:	b930      	cbnz	r0, 802ef90 <__multiply+0x44>
 802ef82:	4602      	mov	r2, r0
 802ef84:	4b44      	ldr	r3, [pc, #272]	@ (802f098 <__multiply+0x14c>)
 802ef86:	4845      	ldr	r0, [pc, #276]	@ (802f09c <__multiply+0x150>)
 802ef88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 802ef8c:	f7fd fc3c 	bl	802c808 <__assert_func>
 802ef90:	f100 0514 	add.w	r5, r0, #20
 802ef94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802ef98:	462b      	mov	r3, r5
 802ef9a:	2200      	movs	r2, #0
 802ef9c:	4543      	cmp	r3, r8
 802ef9e:	d321      	bcc.n	802efe4 <__multiply+0x98>
 802efa0:	f107 0114 	add.w	r1, r7, #20
 802efa4:	f104 0214 	add.w	r2, r4, #20
 802efa8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802efac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 802efb0:	9302      	str	r3, [sp, #8]
 802efb2:	1b13      	subs	r3, r2, r4
 802efb4:	3b15      	subs	r3, #21
 802efb6:	f023 0303 	bic.w	r3, r3, #3
 802efba:	3304      	adds	r3, #4
 802efbc:	f104 0715 	add.w	r7, r4, #21
 802efc0:	42ba      	cmp	r2, r7
 802efc2:	bf38      	it	cc
 802efc4:	2304      	movcc	r3, #4
 802efc6:	9301      	str	r3, [sp, #4]
 802efc8:	9b02      	ldr	r3, [sp, #8]
 802efca:	9103      	str	r1, [sp, #12]
 802efcc:	428b      	cmp	r3, r1
 802efce:	d80c      	bhi.n	802efea <__multiply+0x9e>
 802efd0:	2e00      	cmp	r6, #0
 802efd2:	dd03      	ble.n	802efdc <__multiply+0x90>
 802efd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802efd8:	2b00      	cmp	r3, #0
 802efda:	d05b      	beq.n	802f094 <__multiply+0x148>
 802efdc:	6106      	str	r6, [r0, #16]
 802efde:	b005      	add	sp, #20
 802efe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802efe4:	f843 2b04 	str.w	r2, [r3], #4
 802efe8:	e7d8      	b.n	802ef9c <__multiply+0x50>
 802efea:	f8b1 a000 	ldrh.w	sl, [r1]
 802efee:	f1ba 0f00 	cmp.w	sl, #0
 802eff2:	d024      	beq.n	802f03e <__multiply+0xf2>
 802eff4:	f104 0e14 	add.w	lr, r4, #20
 802eff8:	46a9      	mov	r9, r5
 802effa:	f04f 0c00 	mov.w	ip, #0
 802effe:	f85e 7b04 	ldr.w	r7, [lr], #4
 802f002:	f8d9 3000 	ldr.w	r3, [r9]
 802f006:	fa1f fb87 	uxth.w	fp, r7
 802f00a:	b29b      	uxth	r3, r3
 802f00c:	fb0a 330b 	mla	r3, sl, fp, r3
 802f010:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 802f014:	f8d9 7000 	ldr.w	r7, [r9]
 802f018:	4463      	add	r3, ip
 802f01a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802f01e:	fb0a c70b 	mla	r7, sl, fp, ip
 802f022:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802f026:	b29b      	uxth	r3, r3
 802f028:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802f02c:	4572      	cmp	r2, lr
 802f02e:	f849 3b04 	str.w	r3, [r9], #4
 802f032:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802f036:	d8e2      	bhi.n	802effe <__multiply+0xb2>
 802f038:	9b01      	ldr	r3, [sp, #4]
 802f03a:	f845 c003 	str.w	ip, [r5, r3]
 802f03e:	9b03      	ldr	r3, [sp, #12]
 802f040:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 802f044:	3104      	adds	r1, #4
 802f046:	f1b9 0f00 	cmp.w	r9, #0
 802f04a:	d021      	beq.n	802f090 <__multiply+0x144>
 802f04c:	682b      	ldr	r3, [r5, #0]
 802f04e:	f104 0c14 	add.w	ip, r4, #20
 802f052:	46ae      	mov	lr, r5
 802f054:	f04f 0a00 	mov.w	sl, #0
 802f058:	f8bc b000 	ldrh.w	fp, [ip]
 802f05c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 802f060:	fb09 770b 	mla	r7, r9, fp, r7
 802f064:	4457      	add	r7, sl
 802f066:	b29b      	uxth	r3, r3
 802f068:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802f06c:	f84e 3b04 	str.w	r3, [lr], #4
 802f070:	f85c 3b04 	ldr.w	r3, [ip], #4
 802f074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802f078:	f8be 3000 	ldrh.w	r3, [lr]
 802f07c:	fb09 330a 	mla	r3, r9, sl, r3
 802f080:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 802f084:	4562      	cmp	r2, ip
 802f086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802f08a:	d8e5      	bhi.n	802f058 <__multiply+0x10c>
 802f08c:	9f01      	ldr	r7, [sp, #4]
 802f08e:	51eb      	str	r3, [r5, r7]
 802f090:	3504      	adds	r5, #4
 802f092:	e799      	b.n	802efc8 <__multiply+0x7c>
 802f094:	3e01      	subs	r6, #1
 802f096:	e79b      	b.n	802efd0 <__multiply+0x84>
 802f098:	08034e59 	.word	0x08034e59
 802f09c:	08034e6a 	.word	0x08034e6a

0802f0a0 <__pow5mult>:
 802f0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f0a4:	4615      	mov	r5, r2
 802f0a6:	f012 0203 	ands.w	r2, r2, #3
 802f0aa:	4607      	mov	r7, r0
 802f0ac:	460e      	mov	r6, r1
 802f0ae:	d007      	beq.n	802f0c0 <__pow5mult+0x20>
 802f0b0:	4c25      	ldr	r4, [pc, #148]	@ (802f148 <__pow5mult+0xa8>)
 802f0b2:	3a01      	subs	r2, #1
 802f0b4:	2300      	movs	r3, #0
 802f0b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802f0ba:	f7ff fe55 	bl	802ed68 <__multadd>
 802f0be:	4606      	mov	r6, r0
 802f0c0:	10ad      	asrs	r5, r5, #2
 802f0c2:	d03d      	beq.n	802f140 <__pow5mult+0xa0>
 802f0c4:	69fc      	ldr	r4, [r7, #28]
 802f0c6:	b97c      	cbnz	r4, 802f0e8 <__pow5mult+0x48>
 802f0c8:	2010      	movs	r0, #16
 802f0ca:	f7fd fbcf 	bl	802c86c <malloc>
 802f0ce:	4602      	mov	r2, r0
 802f0d0:	61f8      	str	r0, [r7, #28]
 802f0d2:	b928      	cbnz	r0, 802f0e0 <__pow5mult+0x40>
 802f0d4:	4b1d      	ldr	r3, [pc, #116]	@ (802f14c <__pow5mult+0xac>)
 802f0d6:	481e      	ldr	r0, [pc, #120]	@ (802f150 <__pow5mult+0xb0>)
 802f0d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802f0dc:	f7fd fb94 	bl	802c808 <__assert_func>
 802f0e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802f0e4:	6004      	str	r4, [r0, #0]
 802f0e6:	60c4      	str	r4, [r0, #12]
 802f0e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802f0ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802f0f0:	b94c      	cbnz	r4, 802f106 <__pow5mult+0x66>
 802f0f2:	f240 2171 	movw	r1, #625	@ 0x271
 802f0f6:	4638      	mov	r0, r7
 802f0f8:	f7ff ff12 	bl	802ef20 <__i2b>
 802f0fc:	2300      	movs	r3, #0
 802f0fe:	f8c8 0008 	str.w	r0, [r8, #8]
 802f102:	4604      	mov	r4, r0
 802f104:	6003      	str	r3, [r0, #0]
 802f106:	f04f 0900 	mov.w	r9, #0
 802f10a:	07eb      	lsls	r3, r5, #31
 802f10c:	d50a      	bpl.n	802f124 <__pow5mult+0x84>
 802f10e:	4631      	mov	r1, r6
 802f110:	4622      	mov	r2, r4
 802f112:	4638      	mov	r0, r7
 802f114:	f7ff ff1a 	bl	802ef4c <__multiply>
 802f118:	4631      	mov	r1, r6
 802f11a:	4680      	mov	r8, r0
 802f11c:	4638      	mov	r0, r7
 802f11e:	f7ff fe01 	bl	802ed24 <_Bfree>
 802f122:	4646      	mov	r6, r8
 802f124:	106d      	asrs	r5, r5, #1
 802f126:	d00b      	beq.n	802f140 <__pow5mult+0xa0>
 802f128:	6820      	ldr	r0, [r4, #0]
 802f12a:	b938      	cbnz	r0, 802f13c <__pow5mult+0x9c>
 802f12c:	4622      	mov	r2, r4
 802f12e:	4621      	mov	r1, r4
 802f130:	4638      	mov	r0, r7
 802f132:	f7ff ff0b 	bl	802ef4c <__multiply>
 802f136:	6020      	str	r0, [r4, #0]
 802f138:	f8c0 9000 	str.w	r9, [r0]
 802f13c:	4604      	mov	r4, r0
 802f13e:	e7e4      	b.n	802f10a <__pow5mult+0x6a>
 802f140:	4630      	mov	r0, r6
 802f142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f146:	bf00      	nop
 802f148:	08034ec4 	.word	0x08034ec4
 802f14c:	08034d83 	.word	0x08034d83
 802f150:	08034e6a 	.word	0x08034e6a

0802f154 <__lshift>:
 802f154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f158:	460c      	mov	r4, r1
 802f15a:	6849      	ldr	r1, [r1, #4]
 802f15c:	6923      	ldr	r3, [r4, #16]
 802f15e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802f162:	68a3      	ldr	r3, [r4, #8]
 802f164:	4607      	mov	r7, r0
 802f166:	4691      	mov	r9, r2
 802f168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802f16c:	f108 0601 	add.w	r6, r8, #1
 802f170:	42b3      	cmp	r3, r6
 802f172:	db0b      	blt.n	802f18c <__lshift+0x38>
 802f174:	4638      	mov	r0, r7
 802f176:	f7ff fd95 	bl	802eca4 <_Balloc>
 802f17a:	4605      	mov	r5, r0
 802f17c:	b948      	cbnz	r0, 802f192 <__lshift+0x3e>
 802f17e:	4602      	mov	r2, r0
 802f180:	4b28      	ldr	r3, [pc, #160]	@ (802f224 <__lshift+0xd0>)
 802f182:	4829      	ldr	r0, [pc, #164]	@ (802f228 <__lshift+0xd4>)
 802f184:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 802f188:	f7fd fb3e 	bl	802c808 <__assert_func>
 802f18c:	3101      	adds	r1, #1
 802f18e:	005b      	lsls	r3, r3, #1
 802f190:	e7ee      	b.n	802f170 <__lshift+0x1c>
 802f192:	2300      	movs	r3, #0
 802f194:	f100 0114 	add.w	r1, r0, #20
 802f198:	f100 0210 	add.w	r2, r0, #16
 802f19c:	4618      	mov	r0, r3
 802f19e:	4553      	cmp	r3, sl
 802f1a0:	db33      	blt.n	802f20a <__lshift+0xb6>
 802f1a2:	6920      	ldr	r0, [r4, #16]
 802f1a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802f1a8:	f104 0314 	add.w	r3, r4, #20
 802f1ac:	f019 091f 	ands.w	r9, r9, #31
 802f1b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802f1b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802f1b8:	d02b      	beq.n	802f212 <__lshift+0xbe>
 802f1ba:	f1c9 0e20 	rsb	lr, r9, #32
 802f1be:	468a      	mov	sl, r1
 802f1c0:	2200      	movs	r2, #0
 802f1c2:	6818      	ldr	r0, [r3, #0]
 802f1c4:	fa00 f009 	lsl.w	r0, r0, r9
 802f1c8:	4310      	orrs	r0, r2
 802f1ca:	f84a 0b04 	str.w	r0, [sl], #4
 802f1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 802f1d2:	459c      	cmp	ip, r3
 802f1d4:	fa22 f20e 	lsr.w	r2, r2, lr
 802f1d8:	d8f3      	bhi.n	802f1c2 <__lshift+0x6e>
 802f1da:	ebac 0304 	sub.w	r3, ip, r4
 802f1de:	3b15      	subs	r3, #21
 802f1e0:	f023 0303 	bic.w	r3, r3, #3
 802f1e4:	3304      	adds	r3, #4
 802f1e6:	f104 0015 	add.w	r0, r4, #21
 802f1ea:	4584      	cmp	ip, r0
 802f1ec:	bf38      	it	cc
 802f1ee:	2304      	movcc	r3, #4
 802f1f0:	50ca      	str	r2, [r1, r3]
 802f1f2:	b10a      	cbz	r2, 802f1f8 <__lshift+0xa4>
 802f1f4:	f108 0602 	add.w	r6, r8, #2
 802f1f8:	3e01      	subs	r6, #1
 802f1fa:	4638      	mov	r0, r7
 802f1fc:	612e      	str	r6, [r5, #16]
 802f1fe:	4621      	mov	r1, r4
 802f200:	f7ff fd90 	bl	802ed24 <_Bfree>
 802f204:	4628      	mov	r0, r5
 802f206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f20a:	f842 0f04 	str.w	r0, [r2, #4]!
 802f20e:	3301      	adds	r3, #1
 802f210:	e7c5      	b.n	802f19e <__lshift+0x4a>
 802f212:	3904      	subs	r1, #4
 802f214:	f853 2b04 	ldr.w	r2, [r3], #4
 802f218:	f841 2f04 	str.w	r2, [r1, #4]!
 802f21c:	459c      	cmp	ip, r3
 802f21e:	d8f9      	bhi.n	802f214 <__lshift+0xc0>
 802f220:	e7ea      	b.n	802f1f8 <__lshift+0xa4>
 802f222:	bf00      	nop
 802f224:	08034e59 	.word	0x08034e59
 802f228:	08034e6a 	.word	0x08034e6a

0802f22c <__mcmp>:
 802f22c:	690a      	ldr	r2, [r1, #16]
 802f22e:	4603      	mov	r3, r0
 802f230:	6900      	ldr	r0, [r0, #16]
 802f232:	1a80      	subs	r0, r0, r2
 802f234:	b530      	push	{r4, r5, lr}
 802f236:	d10e      	bne.n	802f256 <__mcmp+0x2a>
 802f238:	3314      	adds	r3, #20
 802f23a:	3114      	adds	r1, #20
 802f23c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 802f240:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 802f244:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802f248:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802f24c:	4295      	cmp	r5, r2
 802f24e:	d003      	beq.n	802f258 <__mcmp+0x2c>
 802f250:	d205      	bcs.n	802f25e <__mcmp+0x32>
 802f252:	f04f 30ff 	mov.w	r0, #4294967295
 802f256:	bd30      	pop	{r4, r5, pc}
 802f258:	42a3      	cmp	r3, r4
 802f25a:	d3f3      	bcc.n	802f244 <__mcmp+0x18>
 802f25c:	e7fb      	b.n	802f256 <__mcmp+0x2a>
 802f25e:	2001      	movs	r0, #1
 802f260:	e7f9      	b.n	802f256 <__mcmp+0x2a>
	...

0802f264 <__mdiff>:
 802f264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f268:	4689      	mov	r9, r1
 802f26a:	4606      	mov	r6, r0
 802f26c:	4611      	mov	r1, r2
 802f26e:	4648      	mov	r0, r9
 802f270:	4614      	mov	r4, r2
 802f272:	f7ff ffdb 	bl	802f22c <__mcmp>
 802f276:	1e05      	subs	r5, r0, #0
 802f278:	d112      	bne.n	802f2a0 <__mdiff+0x3c>
 802f27a:	4629      	mov	r1, r5
 802f27c:	4630      	mov	r0, r6
 802f27e:	f7ff fd11 	bl	802eca4 <_Balloc>
 802f282:	4602      	mov	r2, r0
 802f284:	b928      	cbnz	r0, 802f292 <__mdiff+0x2e>
 802f286:	4b3f      	ldr	r3, [pc, #252]	@ (802f384 <__mdiff+0x120>)
 802f288:	f240 2137 	movw	r1, #567	@ 0x237
 802f28c:	483e      	ldr	r0, [pc, #248]	@ (802f388 <__mdiff+0x124>)
 802f28e:	f7fd fabb 	bl	802c808 <__assert_func>
 802f292:	2301      	movs	r3, #1
 802f294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802f298:	4610      	mov	r0, r2
 802f29a:	b003      	add	sp, #12
 802f29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f2a0:	bfbc      	itt	lt
 802f2a2:	464b      	movlt	r3, r9
 802f2a4:	46a1      	movlt	r9, r4
 802f2a6:	4630      	mov	r0, r6
 802f2a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802f2ac:	bfba      	itte	lt
 802f2ae:	461c      	movlt	r4, r3
 802f2b0:	2501      	movlt	r5, #1
 802f2b2:	2500      	movge	r5, #0
 802f2b4:	f7ff fcf6 	bl	802eca4 <_Balloc>
 802f2b8:	4602      	mov	r2, r0
 802f2ba:	b918      	cbnz	r0, 802f2c4 <__mdiff+0x60>
 802f2bc:	4b31      	ldr	r3, [pc, #196]	@ (802f384 <__mdiff+0x120>)
 802f2be:	f240 2145 	movw	r1, #581	@ 0x245
 802f2c2:	e7e3      	b.n	802f28c <__mdiff+0x28>
 802f2c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802f2c8:	6926      	ldr	r6, [r4, #16]
 802f2ca:	60c5      	str	r5, [r0, #12]
 802f2cc:	f109 0310 	add.w	r3, r9, #16
 802f2d0:	f109 0514 	add.w	r5, r9, #20
 802f2d4:	f104 0e14 	add.w	lr, r4, #20
 802f2d8:	f100 0b14 	add.w	fp, r0, #20
 802f2dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 802f2e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 802f2e4:	9301      	str	r3, [sp, #4]
 802f2e6:	46d9      	mov	r9, fp
 802f2e8:	f04f 0c00 	mov.w	ip, #0
 802f2ec:	9b01      	ldr	r3, [sp, #4]
 802f2ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 802f2f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 802f2f6:	9301      	str	r3, [sp, #4]
 802f2f8:	fa1f f38a 	uxth.w	r3, sl
 802f2fc:	4619      	mov	r1, r3
 802f2fe:	b283      	uxth	r3, r0
 802f300:	1acb      	subs	r3, r1, r3
 802f302:	0c00      	lsrs	r0, r0, #16
 802f304:	4463      	add	r3, ip
 802f306:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802f30a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802f30e:	b29b      	uxth	r3, r3
 802f310:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 802f314:	4576      	cmp	r6, lr
 802f316:	f849 3b04 	str.w	r3, [r9], #4
 802f31a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802f31e:	d8e5      	bhi.n	802f2ec <__mdiff+0x88>
 802f320:	1b33      	subs	r3, r6, r4
 802f322:	3b15      	subs	r3, #21
 802f324:	f023 0303 	bic.w	r3, r3, #3
 802f328:	3415      	adds	r4, #21
 802f32a:	3304      	adds	r3, #4
 802f32c:	42a6      	cmp	r6, r4
 802f32e:	bf38      	it	cc
 802f330:	2304      	movcc	r3, #4
 802f332:	441d      	add	r5, r3
 802f334:	445b      	add	r3, fp
 802f336:	461e      	mov	r6, r3
 802f338:	462c      	mov	r4, r5
 802f33a:	4544      	cmp	r4, r8
 802f33c:	d30e      	bcc.n	802f35c <__mdiff+0xf8>
 802f33e:	f108 0103 	add.w	r1, r8, #3
 802f342:	1b49      	subs	r1, r1, r5
 802f344:	f021 0103 	bic.w	r1, r1, #3
 802f348:	3d03      	subs	r5, #3
 802f34a:	45a8      	cmp	r8, r5
 802f34c:	bf38      	it	cc
 802f34e:	2100      	movcc	r1, #0
 802f350:	440b      	add	r3, r1
 802f352:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f356:	b191      	cbz	r1, 802f37e <__mdiff+0x11a>
 802f358:	6117      	str	r7, [r2, #16]
 802f35a:	e79d      	b.n	802f298 <__mdiff+0x34>
 802f35c:	f854 1b04 	ldr.w	r1, [r4], #4
 802f360:	46e6      	mov	lr, ip
 802f362:	0c08      	lsrs	r0, r1, #16
 802f364:	fa1c fc81 	uxtah	ip, ip, r1
 802f368:	4471      	add	r1, lr
 802f36a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802f36e:	b289      	uxth	r1, r1
 802f370:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 802f374:	f846 1b04 	str.w	r1, [r6], #4
 802f378:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802f37c:	e7dd      	b.n	802f33a <__mdiff+0xd6>
 802f37e:	3f01      	subs	r7, #1
 802f380:	e7e7      	b.n	802f352 <__mdiff+0xee>
 802f382:	bf00      	nop
 802f384:	08034e59 	.word	0x08034e59
 802f388:	08034e6a 	.word	0x08034e6a

0802f38c <__ulp>:
 802f38c:	b082      	sub	sp, #8
 802f38e:	ed8d 0b00 	vstr	d0, [sp]
 802f392:	9a01      	ldr	r2, [sp, #4]
 802f394:	4b0f      	ldr	r3, [pc, #60]	@ (802f3d4 <__ulp+0x48>)
 802f396:	4013      	ands	r3, r2
 802f398:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802f39c:	2b00      	cmp	r3, #0
 802f39e:	dc08      	bgt.n	802f3b2 <__ulp+0x26>
 802f3a0:	425b      	negs	r3, r3
 802f3a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 802f3a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 802f3aa:	da04      	bge.n	802f3b6 <__ulp+0x2a>
 802f3ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802f3b0:	4113      	asrs	r3, r2
 802f3b2:	2200      	movs	r2, #0
 802f3b4:	e008      	b.n	802f3c8 <__ulp+0x3c>
 802f3b6:	f1a2 0314 	sub.w	r3, r2, #20
 802f3ba:	2b1e      	cmp	r3, #30
 802f3bc:	bfda      	itte	le
 802f3be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 802f3c2:	40da      	lsrle	r2, r3
 802f3c4:	2201      	movgt	r2, #1
 802f3c6:	2300      	movs	r3, #0
 802f3c8:	4619      	mov	r1, r3
 802f3ca:	4610      	mov	r0, r2
 802f3cc:	ec41 0b10 	vmov	d0, r0, r1
 802f3d0:	b002      	add	sp, #8
 802f3d2:	4770      	bx	lr
 802f3d4:	7ff00000 	.word	0x7ff00000

0802f3d8 <__b2d>:
 802f3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f3dc:	6906      	ldr	r6, [r0, #16]
 802f3de:	f100 0814 	add.w	r8, r0, #20
 802f3e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802f3e6:	1f37      	subs	r7, r6, #4
 802f3e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802f3ec:	4610      	mov	r0, r2
 802f3ee:	f7ff fd4b 	bl	802ee88 <__hi0bits>
 802f3f2:	f1c0 0320 	rsb	r3, r0, #32
 802f3f6:	280a      	cmp	r0, #10
 802f3f8:	600b      	str	r3, [r1, #0]
 802f3fa:	491b      	ldr	r1, [pc, #108]	@ (802f468 <__b2d+0x90>)
 802f3fc:	dc15      	bgt.n	802f42a <__b2d+0x52>
 802f3fe:	f1c0 0c0b 	rsb	ip, r0, #11
 802f402:	fa22 f30c 	lsr.w	r3, r2, ip
 802f406:	45b8      	cmp	r8, r7
 802f408:	ea43 0501 	orr.w	r5, r3, r1
 802f40c:	bf34      	ite	cc
 802f40e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f412:	2300      	movcs	r3, #0
 802f414:	3015      	adds	r0, #21
 802f416:	fa02 f000 	lsl.w	r0, r2, r0
 802f41a:	fa23 f30c 	lsr.w	r3, r3, ip
 802f41e:	4303      	orrs	r3, r0
 802f420:	461c      	mov	r4, r3
 802f422:	ec45 4b10 	vmov	d0, r4, r5
 802f426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f42a:	45b8      	cmp	r8, r7
 802f42c:	bf3a      	itte	cc
 802f42e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f432:	f1a6 0708 	subcc.w	r7, r6, #8
 802f436:	2300      	movcs	r3, #0
 802f438:	380b      	subs	r0, #11
 802f43a:	d012      	beq.n	802f462 <__b2d+0x8a>
 802f43c:	f1c0 0120 	rsb	r1, r0, #32
 802f440:	fa23 f401 	lsr.w	r4, r3, r1
 802f444:	4082      	lsls	r2, r0
 802f446:	4322      	orrs	r2, r4
 802f448:	4547      	cmp	r7, r8
 802f44a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802f44e:	bf8c      	ite	hi
 802f450:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802f454:	2200      	movls	r2, #0
 802f456:	4083      	lsls	r3, r0
 802f458:	40ca      	lsrs	r2, r1
 802f45a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802f45e:	4313      	orrs	r3, r2
 802f460:	e7de      	b.n	802f420 <__b2d+0x48>
 802f462:	ea42 0501 	orr.w	r5, r2, r1
 802f466:	e7db      	b.n	802f420 <__b2d+0x48>
 802f468:	3ff00000 	.word	0x3ff00000

0802f46c <__d2b>:
 802f46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f470:	460f      	mov	r7, r1
 802f472:	2101      	movs	r1, #1
 802f474:	ec59 8b10 	vmov	r8, r9, d0
 802f478:	4616      	mov	r6, r2
 802f47a:	f7ff fc13 	bl	802eca4 <_Balloc>
 802f47e:	4604      	mov	r4, r0
 802f480:	b930      	cbnz	r0, 802f490 <__d2b+0x24>
 802f482:	4602      	mov	r2, r0
 802f484:	4b23      	ldr	r3, [pc, #140]	@ (802f514 <__d2b+0xa8>)
 802f486:	4824      	ldr	r0, [pc, #144]	@ (802f518 <__d2b+0xac>)
 802f488:	f240 310f 	movw	r1, #783	@ 0x30f
 802f48c:	f7fd f9bc 	bl	802c808 <__assert_func>
 802f490:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802f494:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f498:	b10d      	cbz	r5, 802f49e <__d2b+0x32>
 802f49a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802f49e:	9301      	str	r3, [sp, #4]
 802f4a0:	f1b8 0300 	subs.w	r3, r8, #0
 802f4a4:	d023      	beq.n	802f4ee <__d2b+0x82>
 802f4a6:	4668      	mov	r0, sp
 802f4a8:	9300      	str	r3, [sp, #0]
 802f4aa:	f7ff fd0c 	bl	802eec6 <__lo0bits>
 802f4ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 802f4b2:	b1d0      	cbz	r0, 802f4ea <__d2b+0x7e>
 802f4b4:	f1c0 0320 	rsb	r3, r0, #32
 802f4b8:	fa02 f303 	lsl.w	r3, r2, r3
 802f4bc:	430b      	orrs	r3, r1
 802f4be:	40c2      	lsrs	r2, r0
 802f4c0:	6163      	str	r3, [r4, #20]
 802f4c2:	9201      	str	r2, [sp, #4]
 802f4c4:	9b01      	ldr	r3, [sp, #4]
 802f4c6:	61a3      	str	r3, [r4, #24]
 802f4c8:	2b00      	cmp	r3, #0
 802f4ca:	bf0c      	ite	eq
 802f4cc:	2201      	moveq	r2, #1
 802f4ce:	2202      	movne	r2, #2
 802f4d0:	6122      	str	r2, [r4, #16]
 802f4d2:	b1a5      	cbz	r5, 802f4fe <__d2b+0x92>
 802f4d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802f4d8:	4405      	add	r5, r0
 802f4da:	603d      	str	r5, [r7, #0]
 802f4dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 802f4e0:	6030      	str	r0, [r6, #0]
 802f4e2:	4620      	mov	r0, r4
 802f4e4:	b003      	add	sp, #12
 802f4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802f4ea:	6161      	str	r1, [r4, #20]
 802f4ec:	e7ea      	b.n	802f4c4 <__d2b+0x58>
 802f4ee:	a801      	add	r0, sp, #4
 802f4f0:	f7ff fce9 	bl	802eec6 <__lo0bits>
 802f4f4:	9b01      	ldr	r3, [sp, #4]
 802f4f6:	6163      	str	r3, [r4, #20]
 802f4f8:	3020      	adds	r0, #32
 802f4fa:	2201      	movs	r2, #1
 802f4fc:	e7e8      	b.n	802f4d0 <__d2b+0x64>
 802f4fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802f502:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802f506:	6038      	str	r0, [r7, #0]
 802f508:	6918      	ldr	r0, [r3, #16]
 802f50a:	f7ff fcbd 	bl	802ee88 <__hi0bits>
 802f50e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802f512:	e7e5      	b.n	802f4e0 <__d2b+0x74>
 802f514:	08034e59 	.word	0x08034e59
 802f518:	08034e6a 	.word	0x08034e6a

0802f51c <__ratio>:
 802f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f520:	b085      	sub	sp, #20
 802f522:	e9cd 1000 	strd	r1, r0, [sp]
 802f526:	a902      	add	r1, sp, #8
 802f528:	f7ff ff56 	bl	802f3d8 <__b2d>
 802f52c:	9800      	ldr	r0, [sp, #0]
 802f52e:	a903      	add	r1, sp, #12
 802f530:	ec55 4b10 	vmov	r4, r5, d0
 802f534:	f7ff ff50 	bl	802f3d8 <__b2d>
 802f538:	9b01      	ldr	r3, [sp, #4]
 802f53a:	6919      	ldr	r1, [r3, #16]
 802f53c:	9b00      	ldr	r3, [sp, #0]
 802f53e:	691b      	ldr	r3, [r3, #16]
 802f540:	1ac9      	subs	r1, r1, r3
 802f542:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 802f546:	1a9b      	subs	r3, r3, r2
 802f548:	ec5b ab10 	vmov	sl, fp, d0
 802f54c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 802f550:	2b00      	cmp	r3, #0
 802f552:	bfce      	itee	gt
 802f554:	462a      	movgt	r2, r5
 802f556:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802f55a:	465a      	movle	r2, fp
 802f55c:	462f      	mov	r7, r5
 802f55e:	46d9      	mov	r9, fp
 802f560:	bfcc      	ite	gt
 802f562:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802f566:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802f56a:	464b      	mov	r3, r9
 802f56c:	4652      	mov	r2, sl
 802f56e:	4620      	mov	r0, r4
 802f570:	4639      	mov	r1, r7
 802f572:	f7e1 f983 	bl	801087c <__aeabi_ddiv>
 802f576:	ec41 0b10 	vmov	d0, r0, r1
 802f57a:	b005      	add	sp, #20
 802f57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802f580 <__copybits>:
 802f580:	3901      	subs	r1, #1
 802f582:	b570      	push	{r4, r5, r6, lr}
 802f584:	1149      	asrs	r1, r1, #5
 802f586:	6914      	ldr	r4, [r2, #16]
 802f588:	3101      	adds	r1, #1
 802f58a:	f102 0314 	add.w	r3, r2, #20
 802f58e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802f592:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802f596:	1f05      	subs	r5, r0, #4
 802f598:	42a3      	cmp	r3, r4
 802f59a:	d30c      	bcc.n	802f5b6 <__copybits+0x36>
 802f59c:	1aa3      	subs	r3, r4, r2
 802f59e:	3b11      	subs	r3, #17
 802f5a0:	f023 0303 	bic.w	r3, r3, #3
 802f5a4:	3211      	adds	r2, #17
 802f5a6:	42a2      	cmp	r2, r4
 802f5a8:	bf88      	it	hi
 802f5aa:	2300      	movhi	r3, #0
 802f5ac:	4418      	add	r0, r3
 802f5ae:	2300      	movs	r3, #0
 802f5b0:	4288      	cmp	r0, r1
 802f5b2:	d305      	bcc.n	802f5c0 <__copybits+0x40>
 802f5b4:	bd70      	pop	{r4, r5, r6, pc}
 802f5b6:	f853 6b04 	ldr.w	r6, [r3], #4
 802f5ba:	f845 6f04 	str.w	r6, [r5, #4]!
 802f5be:	e7eb      	b.n	802f598 <__copybits+0x18>
 802f5c0:	f840 3b04 	str.w	r3, [r0], #4
 802f5c4:	e7f4      	b.n	802f5b0 <__copybits+0x30>

0802f5c6 <__any_on>:
 802f5c6:	f100 0214 	add.w	r2, r0, #20
 802f5ca:	6900      	ldr	r0, [r0, #16]
 802f5cc:	114b      	asrs	r3, r1, #5
 802f5ce:	4298      	cmp	r0, r3
 802f5d0:	b510      	push	{r4, lr}
 802f5d2:	db11      	blt.n	802f5f8 <__any_on+0x32>
 802f5d4:	dd0a      	ble.n	802f5ec <__any_on+0x26>
 802f5d6:	f011 011f 	ands.w	r1, r1, #31
 802f5da:	d007      	beq.n	802f5ec <__any_on+0x26>
 802f5dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f5e0:	fa24 f001 	lsr.w	r0, r4, r1
 802f5e4:	fa00 f101 	lsl.w	r1, r0, r1
 802f5e8:	428c      	cmp	r4, r1
 802f5ea:	d10b      	bne.n	802f604 <__any_on+0x3e>
 802f5ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f5f0:	4293      	cmp	r3, r2
 802f5f2:	d803      	bhi.n	802f5fc <__any_on+0x36>
 802f5f4:	2000      	movs	r0, #0
 802f5f6:	bd10      	pop	{r4, pc}
 802f5f8:	4603      	mov	r3, r0
 802f5fa:	e7f7      	b.n	802f5ec <__any_on+0x26>
 802f5fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f600:	2900      	cmp	r1, #0
 802f602:	d0f5      	beq.n	802f5f0 <__any_on+0x2a>
 802f604:	2001      	movs	r0, #1
 802f606:	e7f6      	b.n	802f5f6 <__any_on+0x30>

0802f608 <sulp>:
 802f608:	b570      	push	{r4, r5, r6, lr}
 802f60a:	4604      	mov	r4, r0
 802f60c:	460d      	mov	r5, r1
 802f60e:	ec45 4b10 	vmov	d0, r4, r5
 802f612:	4616      	mov	r6, r2
 802f614:	f7ff feba 	bl	802f38c <__ulp>
 802f618:	ec51 0b10 	vmov	r0, r1, d0
 802f61c:	b17e      	cbz	r6, 802f63e <sulp+0x36>
 802f61e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802f622:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802f626:	2b00      	cmp	r3, #0
 802f628:	dd09      	ble.n	802f63e <sulp+0x36>
 802f62a:	051b      	lsls	r3, r3, #20
 802f62c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 802f630:	2400      	movs	r4, #0
 802f632:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 802f636:	4622      	mov	r2, r4
 802f638:	462b      	mov	r3, r5
 802f63a:	f7e0 fff5 	bl	8010628 <__aeabi_dmul>
 802f63e:	ec41 0b10 	vmov	d0, r0, r1
 802f642:	bd70      	pop	{r4, r5, r6, pc}
 802f644:	0000      	movs	r0, r0
	...

0802f648 <_strtod_l>:
 802f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f64c:	b09f      	sub	sp, #124	@ 0x7c
 802f64e:	460c      	mov	r4, r1
 802f650:	9217      	str	r2, [sp, #92]	@ 0x5c
 802f652:	2200      	movs	r2, #0
 802f654:	921a      	str	r2, [sp, #104]	@ 0x68
 802f656:	9005      	str	r0, [sp, #20]
 802f658:	f04f 0a00 	mov.w	sl, #0
 802f65c:	f04f 0b00 	mov.w	fp, #0
 802f660:	460a      	mov	r2, r1
 802f662:	9219      	str	r2, [sp, #100]	@ 0x64
 802f664:	7811      	ldrb	r1, [r2, #0]
 802f666:	292b      	cmp	r1, #43	@ 0x2b
 802f668:	d04a      	beq.n	802f700 <_strtod_l+0xb8>
 802f66a:	d838      	bhi.n	802f6de <_strtod_l+0x96>
 802f66c:	290d      	cmp	r1, #13
 802f66e:	d832      	bhi.n	802f6d6 <_strtod_l+0x8e>
 802f670:	2908      	cmp	r1, #8
 802f672:	d832      	bhi.n	802f6da <_strtod_l+0x92>
 802f674:	2900      	cmp	r1, #0
 802f676:	d03b      	beq.n	802f6f0 <_strtod_l+0xa8>
 802f678:	2200      	movs	r2, #0
 802f67a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802f67c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802f67e:	782a      	ldrb	r2, [r5, #0]
 802f680:	2a30      	cmp	r2, #48	@ 0x30
 802f682:	f040 80b3 	bne.w	802f7ec <_strtod_l+0x1a4>
 802f686:	786a      	ldrb	r2, [r5, #1]
 802f688:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802f68c:	2a58      	cmp	r2, #88	@ 0x58
 802f68e:	d16e      	bne.n	802f76e <_strtod_l+0x126>
 802f690:	9302      	str	r3, [sp, #8]
 802f692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802f694:	9301      	str	r3, [sp, #4]
 802f696:	ab1a      	add	r3, sp, #104	@ 0x68
 802f698:	9300      	str	r3, [sp, #0]
 802f69a:	4a8e      	ldr	r2, [pc, #568]	@ (802f8d4 <_strtod_l+0x28c>)
 802f69c:	9805      	ldr	r0, [sp, #20]
 802f69e:	ab1b      	add	r3, sp, #108	@ 0x6c
 802f6a0:	a919      	add	r1, sp, #100	@ 0x64
 802f6a2:	f001 fe45 	bl	8031330 <__gethex>
 802f6a6:	f010 060f 	ands.w	r6, r0, #15
 802f6aa:	4604      	mov	r4, r0
 802f6ac:	d005      	beq.n	802f6ba <_strtod_l+0x72>
 802f6ae:	2e06      	cmp	r6, #6
 802f6b0:	d128      	bne.n	802f704 <_strtod_l+0xbc>
 802f6b2:	3501      	adds	r5, #1
 802f6b4:	2300      	movs	r3, #0
 802f6b6:	9519      	str	r5, [sp, #100]	@ 0x64
 802f6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 802f6ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802f6bc:	2b00      	cmp	r3, #0
 802f6be:	f040 858e 	bne.w	80301de <_strtod_l+0xb96>
 802f6c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802f6c4:	b1cb      	cbz	r3, 802f6fa <_strtod_l+0xb2>
 802f6c6:	4652      	mov	r2, sl
 802f6c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 802f6cc:	ec43 2b10 	vmov	d0, r2, r3
 802f6d0:	b01f      	add	sp, #124	@ 0x7c
 802f6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f6d6:	2920      	cmp	r1, #32
 802f6d8:	d1ce      	bne.n	802f678 <_strtod_l+0x30>
 802f6da:	3201      	adds	r2, #1
 802f6dc:	e7c1      	b.n	802f662 <_strtod_l+0x1a>
 802f6de:	292d      	cmp	r1, #45	@ 0x2d
 802f6e0:	d1ca      	bne.n	802f678 <_strtod_l+0x30>
 802f6e2:	2101      	movs	r1, #1
 802f6e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 802f6e6:	1c51      	adds	r1, r2, #1
 802f6e8:	9119      	str	r1, [sp, #100]	@ 0x64
 802f6ea:	7852      	ldrb	r2, [r2, #1]
 802f6ec:	2a00      	cmp	r2, #0
 802f6ee:	d1c5      	bne.n	802f67c <_strtod_l+0x34>
 802f6f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802f6f2:	9419      	str	r4, [sp, #100]	@ 0x64
 802f6f4:	2b00      	cmp	r3, #0
 802f6f6:	f040 8570 	bne.w	80301da <_strtod_l+0xb92>
 802f6fa:	4652      	mov	r2, sl
 802f6fc:	465b      	mov	r3, fp
 802f6fe:	e7e5      	b.n	802f6cc <_strtod_l+0x84>
 802f700:	2100      	movs	r1, #0
 802f702:	e7ef      	b.n	802f6e4 <_strtod_l+0x9c>
 802f704:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802f706:	b13a      	cbz	r2, 802f718 <_strtod_l+0xd0>
 802f708:	2135      	movs	r1, #53	@ 0x35
 802f70a:	a81c      	add	r0, sp, #112	@ 0x70
 802f70c:	f7ff ff38 	bl	802f580 <__copybits>
 802f710:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802f712:	9805      	ldr	r0, [sp, #20]
 802f714:	f7ff fb06 	bl	802ed24 <_Bfree>
 802f718:	3e01      	subs	r6, #1
 802f71a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802f71c:	2e04      	cmp	r6, #4
 802f71e:	d806      	bhi.n	802f72e <_strtod_l+0xe6>
 802f720:	e8df f006 	tbb	[pc, r6]
 802f724:	201d0314 	.word	0x201d0314
 802f728:	14          	.byte	0x14
 802f729:	00          	.byte	0x00
 802f72a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802f72e:	05e1      	lsls	r1, r4, #23
 802f730:	bf48      	it	mi
 802f732:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802f736:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802f73a:	0d1b      	lsrs	r3, r3, #20
 802f73c:	051b      	lsls	r3, r3, #20
 802f73e:	2b00      	cmp	r3, #0
 802f740:	d1bb      	bne.n	802f6ba <_strtod_l+0x72>
 802f742:	f7fe fbc5 	bl	802ded0 <__errno>
 802f746:	2322      	movs	r3, #34	@ 0x22
 802f748:	6003      	str	r3, [r0, #0]
 802f74a:	e7b6      	b.n	802f6ba <_strtod_l+0x72>
 802f74c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 802f750:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802f754:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 802f758:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802f75c:	e7e7      	b.n	802f72e <_strtod_l+0xe6>
 802f75e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 802f8dc <_strtod_l+0x294>
 802f762:	e7e4      	b.n	802f72e <_strtod_l+0xe6>
 802f764:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 802f768:	f04f 3aff 	mov.w	sl, #4294967295
 802f76c:	e7df      	b.n	802f72e <_strtod_l+0xe6>
 802f76e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f770:	1c5a      	adds	r2, r3, #1
 802f772:	9219      	str	r2, [sp, #100]	@ 0x64
 802f774:	785b      	ldrb	r3, [r3, #1]
 802f776:	2b30      	cmp	r3, #48	@ 0x30
 802f778:	d0f9      	beq.n	802f76e <_strtod_l+0x126>
 802f77a:	2b00      	cmp	r3, #0
 802f77c:	d09d      	beq.n	802f6ba <_strtod_l+0x72>
 802f77e:	2301      	movs	r3, #1
 802f780:	9309      	str	r3, [sp, #36]	@ 0x24
 802f782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f784:	930c      	str	r3, [sp, #48]	@ 0x30
 802f786:	2300      	movs	r3, #0
 802f788:	9308      	str	r3, [sp, #32]
 802f78a:	930a      	str	r3, [sp, #40]	@ 0x28
 802f78c:	461f      	mov	r7, r3
 802f78e:	220a      	movs	r2, #10
 802f790:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802f792:	7805      	ldrb	r5, [r0, #0]
 802f794:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 802f798:	b2d9      	uxtb	r1, r3
 802f79a:	2909      	cmp	r1, #9
 802f79c:	d928      	bls.n	802f7f0 <_strtod_l+0x1a8>
 802f79e:	494e      	ldr	r1, [pc, #312]	@ (802f8d8 <_strtod_l+0x290>)
 802f7a0:	2201      	movs	r2, #1
 802f7a2:	f7fe fa3d 	bl	802dc20 <strncmp>
 802f7a6:	2800      	cmp	r0, #0
 802f7a8:	d032      	beq.n	802f810 <_strtod_l+0x1c8>
 802f7aa:	2000      	movs	r0, #0
 802f7ac:	462a      	mov	r2, r5
 802f7ae:	4681      	mov	r9, r0
 802f7b0:	463d      	mov	r5, r7
 802f7b2:	4603      	mov	r3, r0
 802f7b4:	2a65      	cmp	r2, #101	@ 0x65
 802f7b6:	d001      	beq.n	802f7bc <_strtod_l+0x174>
 802f7b8:	2a45      	cmp	r2, #69	@ 0x45
 802f7ba:	d114      	bne.n	802f7e6 <_strtod_l+0x19e>
 802f7bc:	b91d      	cbnz	r5, 802f7c6 <_strtod_l+0x17e>
 802f7be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802f7c0:	4302      	orrs	r2, r0
 802f7c2:	d095      	beq.n	802f6f0 <_strtod_l+0xa8>
 802f7c4:	2500      	movs	r5, #0
 802f7c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 802f7c8:	1c62      	adds	r2, r4, #1
 802f7ca:	9219      	str	r2, [sp, #100]	@ 0x64
 802f7cc:	7862      	ldrb	r2, [r4, #1]
 802f7ce:	2a2b      	cmp	r2, #43	@ 0x2b
 802f7d0:	d077      	beq.n	802f8c2 <_strtod_l+0x27a>
 802f7d2:	2a2d      	cmp	r2, #45	@ 0x2d
 802f7d4:	d07b      	beq.n	802f8ce <_strtod_l+0x286>
 802f7d6:	f04f 0c00 	mov.w	ip, #0
 802f7da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 802f7de:	2909      	cmp	r1, #9
 802f7e0:	f240 8082 	bls.w	802f8e8 <_strtod_l+0x2a0>
 802f7e4:	9419      	str	r4, [sp, #100]	@ 0x64
 802f7e6:	f04f 0800 	mov.w	r8, #0
 802f7ea:	e0a2      	b.n	802f932 <_strtod_l+0x2ea>
 802f7ec:	2300      	movs	r3, #0
 802f7ee:	e7c7      	b.n	802f780 <_strtod_l+0x138>
 802f7f0:	2f08      	cmp	r7, #8
 802f7f2:	bfd5      	itete	le
 802f7f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 802f7f6:	9908      	ldrgt	r1, [sp, #32]
 802f7f8:	fb02 3301 	mlale	r3, r2, r1, r3
 802f7fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 802f800:	f100 0001 	add.w	r0, r0, #1
 802f804:	bfd4      	ite	le
 802f806:	930a      	strle	r3, [sp, #40]	@ 0x28
 802f808:	9308      	strgt	r3, [sp, #32]
 802f80a:	3701      	adds	r7, #1
 802f80c:	9019      	str	r0, [sp, #100]	@ 0x64
 802f80e:	e7bf      	b.n	802f790 <_strtod_l+0x148>
 802f810:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f812:	1c5a      	adds	r2, r3, #1
 802f814:	9219      	str	r2, [sp, #100]	@ 0x64
 802f816:	785a      	ldrb	r2, [r3, #1]
 802f818:	b37f      	cbz	r7, 802f87a <_strtod_l+0x232>
 802f81a:	4681      	mov	r9, r0
 802f81c:	463d      	mov	r5, r7
 802f81e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802f822:	2b09      	cmp	r3, #9
 802f824:	d912      	bls.n	802f84c <_strtod_l+0x204>
 802f826:	2301      	movs	r3, #1
 802f828:	e7c4      	b.n	802f7b4 <_strtod_l+0x16c>
 802f82a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f82c:	1c5a      	adds	r2, r3, #1
 802f82e:	9219      	str	r2, [sp, #100]	@ 0x64
 802f830:	785a      	ldrb	r2, [r3, #1]
 802f832:	3001      	adds	r0, #1
 802f834:	2a30      	cmp	r2, #48	@ 0x30
 802f836:	d0f8      	beq.n	802f82a <_strtod_l+0x1e2>
 802f838:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802f83c:	2b08      	cmp	r3, #8
 802f83e:	f200 84d3 	bhi.w	80301e8 <_strtod_l+0xba0>
 802f842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f844:	930c      	str	r3, [sp, #48]	@ 0x30
 802f846:	4681      	mov	r9, r0
 802f848:	2000      	movs	r0, #0
 802f84a:	4605      	mov	r5, r0
 802f84c:	3a30      	subs	r2, #48	@ 0x30
 802f84e:	f100 0301 	add.w	r3, r0, #1
 802f852:	d02a      	beq.n	802f8aa <_strtod_l+0x262>
 802f854:	4499      	add	r9, r3
 802f856:	eb00 0c05 	add.w	ip, r0, r5
 802f85a:	462b      	mov	r3, r5
 802f85c:	210a      	movs	r1, #10
 802f85e:	4563      	cmp	r3, ip
 802f860:	d10d      	bne.n	802f87e <_strtod_l+0x236>
 802f862:	1c69      	adds	r1, r5, #1
 802f864:	4401      	add	r1, r0
 802f866:	4428      	add	r0, r5
 802f868:	2808      	cmp	r0, #8
 802f86a:	dc16      	bgt.n	802f89a <_strtod_l+0x252>
 802f86c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802f86e:	230a      	movs	r3, #10
 802f870:	fb03 2300 	mla	r3, r3, r0, r2
 802f874:	930a      	str	r3, [sp, #40]	@ 0x28
 802f876:	2300      	movs	r3, #0
 802f878:	e018      	b.n	802f8ac <_strtod_l+0x264>
 802f87a:	4638      	mov	r0, r7
 802f87c:	e7da      	b.n	802f834 <_strtod_l+0x1ec>
 802f87e:	2b08      	cmp	r3, #8
 802f880:	f103 0301 	add.w	r3, r3, #1
 802f884:	dc03      	bgt.n	802f88e <_strtod_l+0x246>
 802f886:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802f888:	434e      	muls	r6, r1
 802f88a:	960a      	str	r6, [sp, #40]	@ 0x28
 802f88c:	e7e7      	b.n	802f85e <_strtod_l+0x216>
 802f88e:	2b10      	cmp	r3, #16
 802f890:	bfde      	ittt	le
 802f892:	9e08      	ldrle	r6, [sp, #32]
 802f894:	434e      	mulle	r6, r1
 802f896:	9608      	strle	r6, [sp, #32]
 802f898:	e7e1      	b.n	802f85e <_strtod_l+0x216>
 802f89a:	280f      	cmp	r0, #15
 802f89c:	dceb      	bgt.n	802f876 <_strtod_l+0x22e>
 802f89e:	9808      	ldr	r0, [sp, #32]
 802f8a0:	230a      	movs	r3, #10
 802f8a2:	fb03 2300 	mla	r3, r3, r0, r2
 802f8a6:	9308      	str	r3, [sp, #32]
 802f8a8:	e7e5      	b.n	802f876 <_strtod_l+0x22e>
 802f8aa:	4629      	mov	r1, r5
 802f8ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802f8ae:	1c50      	adds	r0, r2, #1
 802f8b0:	9019      	str	r0, [sp, #100]	@ 0x64
 802f8b2:	7852      	ldrb	r2, [r2, #1]
 802f8b4:	4618      	mov	r0, r3
 802f8b6:	460d      	mov	r5, r1
 802f8b8:	e7b1      	b.n	802f81e <_strtod_l+0x1d6>
 802f8ba:	f04f 0900 	mov.w	r9, #0
 802f8be:	2301      	movs	r3, #1
 802f8c0:	e77d      	b.n	802f7be <_strtod_l+0x176>
 802f8c2:	f04f 0c00 	mov.w	ip, #0
 802f8c6:	1ca2      	adds	r2, r4, #2
 802f8c8:	9219      	str	r2, [sp, #100]	@ 0x64
 802f8ca:	78a2      	ldrb	r2, [r4, #2]
 802f8cc:	e785      	b.n	802f7da <_strtod_l+0x192>
 802f8ce:	f04f 0c01 	mov.w	ip, #1
 802f8d2:	e7f8      	b.n	802f8c6 <_strtod_l+0x27e>
 802f8d4:	08034fd8 	.word	0x08034fd8
 802f8d8:	08034fc0 	.word	0x08034fc0
 802f8dc:	7ff00000 	.word	0x7ff00000
 802f8e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802f8e2:	1c51      	adds	r1, r2, #1
 802f8e4:	9119      	str	r1, [sp, #100]	@ 0x64
 802f8e6:	7852      	ldrb	r2, [r2, #1]
 802f8e8:	2a30      	cmp	r2, #48	@ 0x30
 802f8ea:	d0f9      	beq.n	802f8e0 <_strtod_l+0x298>
 802f8ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 802f8f0:	2908      	cmp	r1, #8
 802f8f2:	f63f af78 	bhi.w	802f7e6 <_strtod_l+0x19e>
 802f8f6:	3a30      	subs	r2, #48	@ 0x30
 802f8f8:	920e      	str	r2, [sp, #56]	@ 0x38
 802f8fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802f8fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 802f8fe:	f04f 080a 	mov.w	r8, #10
 802f902:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802f904:	1c56      	adds	r6, r2, #1
 802f906:	9619      	str	r6, [sp, #100]	@ 0x64
 802f908:	7852      	ldrb	r2, [r2, #1]
 802f90a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802f90e:	f1be 0f09 	cmp.w	lr, #9
 802f912:	d939      	bls.n	802f988 <_strtod_l+0x340>
 802f914:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802f916:	1a76      	subs	r6, r6, r1
 802f918:	2e08      	cmp	r6, #8
 802f91a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802f91e:	dc03      	bgt.n	802f928 <_strtod_l+0x2e0>
 802f920:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802f922:	4588      	cmp	r8, r1
 802f924:	bfa8      	it	ge
 802f926:	4688      	movge	r8, r1
 802f928:	f1bc 0f00 	cmp.w	ip, #0
 802f92c:	d001      	beq.n	802f932 <_strtod_l+0x2ea>
 802f92e:	f1c8 0800 	rsb	r8, r8, #0
 802f932:	2d00      	cmp	r5, #0
 802f934:	d14e      	bne.n	802f9d4 <_strtod_l+0x38c>
 802f936:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802f938:	4308      	orrs	r0, r1
 802f93a:	f47f aebe 	bne.w	802f6ba <_strtod_l+0x72>
 802f93e:	2b00      	cmp	r3, #0
 802f940:	f47f aed6 	bne.w	802f6f0 <_strtod_l+0xa8>
 802f944:	2a69      	cmp	r2, #105	@ 0x69
 802f946:	d028      	beq.n	802f99a <_strtod_l+0x352>
 802f948:	dc25      	bgt.n	802f996 <_strtod_l+0x34e>
 802f94a:	2a49      	cmp	r2, #73	@ 0x49
 802f94c:	d025      	beq.n	802f99a <_strtod_l+0x352>
 802f94e:	2a4e      	cmp	r2, #78	@ 0x4e
 802f950:	f47f aece 	bne.w	802f6f0 <_strtod_l+0xa8>
 802f954:	499b      	ldr	r1, [pc, #620]	@ (802fbc4 <_strtod_l+0x57c>)
 802f956:	a819      	add	r0, sp, #100	@ 0x64
 802f958:	f001 ff0c 	bl	8031774 <__match>
 802f95c:	2800      	cmp	r0, #0
 802f95e:	f43f aec7 	beq.w	802f6f0 <_strtod_l+0xa8>
 802f962:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f964:	781b      	ldrb	r3, [r3, #0]
 802f966:	2b28      	cmp	r3, #40	@ 0x28
 802f968:	d12e      	bne.n	802f9c8 <_strtod_l+0x380>
 802f96a:	4997      	ldr	r1, [pc, #604]	@ (802fbc8 <_strtod_l+0x580>)
 802f96c:	aa1c      	add	r2, sp, #112	@ 0x70
 802f96e:	a819      	add	r0, sp, #100	@ 0x64
 802f970:	f001 ff14 	bl	803179c <__hexnan>
 802f974:	2805      	cmp	r0, #5
 802f976:	d127      	bne.n	802f9c8 <_strtod_l+0x380>
 802f978:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802f97a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802f97e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802f982:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 802f986:	e698      	b.n	802f6ba <_strtod_l+0x72>
 802f988:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802f98a:	fb08 2101 	mla	r1, r8, r1, r2
 802f98e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802f992:	920e      	str	r2, [sp, #56]	@ 0x38
 802f994:	e7b5      	b.n	802f902 <_strtod_l+0x2ba>
 802f996:	2a6e      	cmp	r2, #110	@ 0x6e
 802f998:	e7da      	b.n	802f950 <_strtod_l+0x308>
 802f99a:	498c      	ldr	r1, [pc, #560]	@ (802fbcc <_strtod_l+0x584>)
 802f99c:	a819      	add	r0, sp, #100	@ 0x64
 802f99e:	f001 fee9 	bl	8031774 <__match>
 802f9a2:	2800      	cmp	r0, #0
 802f9a4:	f43f aea4 	beq.w	802f6f0 <_strtod_l+0xa8>
 802f9a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f9aa:	4989      	ldr	r1, [pc, #548]	@ (802fbd0 <_strtod_l+0x588>)
 802f9ac:	3b01      	subs	r3, #1
 802f9ae:	a819      	add	r0, sp, #100	@ 0x64
 802f9b0:	9319      	str	r3, [sp, #100]	@ 0x64
 802f9b2:	f001 fedf 	bl	8031774 <__match>
 802f9b6:	b910      	cbnz	r0, 802f9be <_strtod_l+0x376>
 802f9b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802f9ba:	3301      	adds	r3, #1
 802f9bc:	9319      	str	r3, [sp, #100]	@ 0x64
 802f9be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 802fbe0 <_strtod_l+0x598>
 802f9c2:	f04f 0a00 	mov.w	sl, #0
 802f9c6:	e678      	b.n	802f6ba <_strtod_l+0x72>
 802f9c8:	4882      	ldr	r0, [pc, #520]	@ (802fbd4 <_strtod_l+0x58c>)
 802f9ca:	f001 fc41 	bl	8031250 <nan>
 802f9ce:	ec5b ab10 	vmov	sl, fp, d0
 802f9d2:	e672      	b.n	802f6ba <_strtod_l+0x72>
 802f9d4:	eba8 0309 	sub.w	r3, r8, r9
 802f9d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802f9da:	9309      	str	r3, [sp, #36]	@ 0x24
 802f9dc:	2f00      	cmp	r7, #0
 802f9de:	bf08      	it	eq
 802f9e0:	462f      	moveq	r7, r5
 802f9e2:	2d10      	cmp	r5, #16
 802f9e4:	462c      	mov	r4, r5
 802f9e6:	bfa8      	it	ge
 802f9e8:	2410      	movge	r4, #16
 802f9ea:	f7e0 fda3 	bl	8010534 <__aeabi_ui2d>
 802f9ee:	2d09      	cmp	r5, #9
 802f9f0:	4682      	mov	sl, r0
 802f9f2:	468b      	mov	fp, r1
 802f9f4:	dc13      	bgt.n	802fa1e <_strtod_l+0x3d6>
 802f9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802f9f8:	2b00      	cmp	r3, #0
 802f9fa:	f43f ae5e 	beq.w	802f6ba <_strtod_l+0x72>
 802f9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fa00:	dd78      	ble.n	802faf4 <_strtod_l+0x4ac>
 802fa02:	2b16      	cmp	r3, #22
 802fa04:	dc5f      	bgt.n	802fac6 <_strtod_l+0x47e>
 802fa06:	4974      	ldr	r1, [pc, #464]	@ (802fbd8 <_strtod_l+0x590>)
 802fa08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802fa0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fa10:	4652      	mov	r2, sl
 802fa12:	465b      	mov	r3, fp
 802fa14:	f7e0 fe08 	bl	8010628 <__aeabi_dmul>
 802fa18:	4682      	mov	sl, r0
 802fa1a:	468b      	mov	fp, r1
 802fa1c:	e64d      	b.n	802f6ba <_strtod_l+0x72>
 802fa1e:	4b6e      	ldr	r3, [pc, #440]	@ (802fbd8 <_strtod_l+0x590>)
 802fa20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802fa24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 802fa28:	f7e0 fdfe 	bl	8010628 <__aeabi_dmul>
 802fa2c:	4682      	mov	sl, r0
 802fa2e:	9808      	ldr	r0, [sp, #32]
 802fa30:	468b      	mov	fp, r1
 802fa32:	f7e0 fd7f 	bl	8010534 <__aeabi_ui2d>
 802fa36:	4602      	mov	r2, r0
 802fa38:	460b      	mov	r3, r1
 802fa3a:	4650      	mov	r0, sl
 802fa3c:	4659      	mov	r1, fp
 802fa3e:	f7e0 fc3d 	bl	80102bc <__adddf3>
 802fa42:	2d0f      	cmp	r5, #15
 802fa44:	4682      	mov	sl, r0
 802fa46:	468b      	mov	fp, r1
 802fa48:	ddd5      	ble.n	802f9f6 <_strtod_l+0x3ae>
 802fa4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fa4c:	1b2c      	subs	r4, r5, r4
 802fa4e:	441c      	add	r4, r3
 802fa50:	2c00      	cmp	r4, #0
 802fa52:	f340 8096 	ble.w	802fb82 <_strtod_l+0x53a>
 802fa56:	f014 030f 	ands.w	r3, r4, #15
 802fa5a:	d00a      	beq.n	802fa72 <_strtod_l+0x42a>
 802fa5c:	495e      	ldr	r1, [pc, #376]	@ (802fbd8 <_strtod_l+0x590>)
 802fa5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802fa62:	4652      	mov	r2, sl
 802fa64:	465b      	mov	r3, fp
 802fa66:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fa6a:	f7e0 fddd 	bl	8010628 <__aeabi_dmul>
 802fa6e:	4682      	mov	sl, r0
 802fa70:	468b      	mov	fp, r1
 802fa72:	f034 040f 	bics.w	r4, r4, #15
 802fa76:	d073      	beq.n	802fb60 <_strtod_l+0x518>
 802fa78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802fa7c:	dd48      	ble.n	802fb10 <_strtod_l+0x4c8>
 802fa7e:	2400      	movs	r4, #0
 802fa80:	46a0      	mov	r8, r4
 802fa82:	940a      	str	r4, [sp, #40]	@ 0x28
 802fa84:	46a1      	mov	r9, r4
 802fa86:	9a05      	ldr	r2, [sp, #20]
 802fa88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 802fbe0 <_strtod_l+0x598>
 802fa8c:	2322      	movs	r3, #34	@ 0x22
 802fa8e:	6013      	str	r3, [r2, #0]
 802fa90:	f04f 0a00 	mov.w	sl, #0
 802fa94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fa96:	2b00      	cmp	r3, #0
 802fa98:	f43f ae0f 	beq.w	802f6ba <_strtod_l+0x72>
 802fa9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802fa9e:	9805      	ldr	r0, [sp, #20]
 802faa0:	f7ff f940 	bl	802ed24 <_Bfree>
 802faa4:	9805      	ldr	r0, [sp, #20]
 802faa6:	4649      	mov	r1, r9
 802faa8:	f7ff f93c 	bl	802ed24 <_Bfree>
 802faac:	9805      	ldr	r0, [sp, #20]
 802faae:	4641      	mov	r1, r8
 802fab0:	f7ff f938 	bl	802ed24 <_Bfree>
 802fab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802fab6:	9805      	ldr	r0, [sp, #20]
 802fab8:	f7ff f934 	bl	802ed24 <_Bfree>
 802fabc:	9805      	ldr	r0, [sp, #20]
 802fabe:	4621      	mov	r1, r4
 802fac0:	f7ff f930 	bl	802ed24 <_Bfree>
 802fac4:	e5f9      	b.n	802f6ba <_strtod_l+0x72>
 802fac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802fac8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 802facc:	4293      	cmp	r3, r2
 802face:	dbbc      	blt.n	802fa4a <_strtod_l+0x402>
 802fad0:	4c41      	ldr	r4, [pc, #260]	@ (802fbd8 <_strtod_l+0x590>)
 802fad2:	f1c5 050f 	rsb	r5, r5, #15
 802fad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 802fada:	4652      	mov	r2, sl
 802fadc:	465b      	mov	r3, fp
 802fade:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fae2:	f7e0 fda1 	bl	8010628 <__aeabi_dmul>
 802fae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fae8:	1b5d      	subs	r5, r3, r5
 802faea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802faee:	e9d4 2300 	ldrd	r2, r3, [r4]
 802faf2:	e78f      	b.n	802fa14 <_strtod_l+0x3cc>
 802faf4:	3316      	adds	r3, #22
 802faf6:	dba8      	blt.n	802fa4a <_strtod_l+0x402>
 802faf8:	4b37      	ldr	r3, [pc, #220]	@ (802fbd8 <_strtod_l+0x590>)
 802fafa:	eba9 0808 	sub.w	r8, r9, r8
 802fafe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802fb02:	e9d8 2300 	ldrd	r2, r3, [r8]
 802fb06:	4650      	mov	r0, sl
 802fb08:	4659      	mov	r1, fp
 802fb0a:	f7e0 feb7 	bl	801087c <__aeabi_ddiv>
 802fb0e:	e783      	b.n	802fa18 <_strtod_l+0x3d0>
 802fb10:	4b32      	ldr	r3, [pc, #200]	@ (802fbdc <_strtod_l+0x594>)
 802fb12:	9308      	str	r3, [sp, #32]
 802fb14:	2300      	movs	r3, #0
 802fb16:	1124      	asrs	r4, r4, #4
 802fb18:	4650      	mov	r0, sl
 802fb1a:	4659      	mov	r1, fp
 802fb1c:	461e      	mov	r6, r3
 802fb1e:	2c01      	cmp	r4, #1
 802fb20:	dc21      	bgt.n	802fb66 <_strtod_l+0x51e>
 802fb22:	b10b      	cbz	r3, 802fb28 <_strtod_l+0x4e0>
 802fb24:	4682      	mov	sl, r0
 802fb26:	468b      	mov	fp, r1
 802fb28:	492c      	ldr	r1, [pc, #176]	@ (802fbdc <_strtod_l+0x594>)
 802fb2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802fb2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 802fb32:	4652      	mov	r2, sl
 802fb34:	465b      	mov	r3, fp
 802fb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fb3a:	f7e0 fd75 	bl	8010628 <__aeabi_dmul>
 802fb3e:	4b28      	ldr	r3, [pc, #160]	@ (802fbe0 <_strtod_l+0x598>)
 802fb40:	460a      	mov	r2, r1
 802fb42:	400b      	ands	r3, r1
 802fb44:	4927      	ldr	r1, [pc, #156]	@ (802fbe4 <_strtod_l+0x59c>)
 802fb46:	428b      	cmp	r3, r1
 802fb48:	4682      	mov	sl, r0
 802fb4a:	d898      	bhi.n	802fa7e <_strtod_l+0x436>
 802fb4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 802fb50:	428b      	cmp	r3, r1
 802fb52:	bf86      	itte	hi
 802fb54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 802fbe8 <_strtod_l+0x5a0>
 802fb58:	f04f 3aff 	movhi.w	sl, #4294967295
 802fb5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 802fb60:	2300      	movs	r3, #0
 802fb62:	9308      	str	r3, [sp, #32]
 802fb64:	e07a      	b.n	802fc5c <_strtod_l+0x614>
 802fb66:	07e2      	lsls	r2, r4, #31
 802fb68:	d505      	bpl.n	802fb76 <_strtod_l+0x52e>
 802fb6a:	9b08      	ldr	r3, [sp, #32]
 802fb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb70:	f7e0 fd5a 	bl	8010628 <__aeabi_dmul>
 802fb74:	2301      	movs	r3, #1
 802fb76:	9a08      	ldr	r2, [sp, #32]
 802fb78:	3208      	adds	r2, #8
 802fb7a:	3601      	adds	r6, #1
 802fb7c:	1064      	asrs	r4, r4, #1
 802fb7e:	9208      	str	r2, [sp, #32]
 802fb80:	e7cd      	b.n	802fb1e <_strtod_l+0x4d6>
 802fb82:	d0ed      	beq.n	802fb60 <_strtod_l+0x518>
 802fb84:	4264      	negs	r4, r4
 802fb86:	f014 020f 	ands.w	r2, r4, #15
 802fb8a:	d00a      	beq.n	802fba2 <_strtod_l+0x55a>
 802fb8c:	4b12      	ldr	r3, [pc, #72]	@ (802fbd8 <_strtod_l+0x590>)
 802fb8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802fb92:	4650      	mov	r0, sl
 802fb94:	4659      	mov	r1, fp
 802fb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb9a:	f7e0 fe6f 	bl	801087c <__aeabi_ddiv>
 802fb9e:	4682      	mov	sl, r0
 802fba0:	468b      	mov	fp, r1
 802fba2:	1124      	asrs	r4, r4, #4
 802fba4:	d0dc      	beq.n	802fb60 <_strtod_l+0x518>
 802fba6:	2c1f      	cmp	r4, #31
 802fba8:	dd20      	ble.n	802fbec <_strtod_l+0x5a4>
 802fbaa:	2400      	movs	r4, #0
 802fbac:	46a0      	mov	r8, r4
 802fbae:	940a      	str	r4, [sp, #40]	@ 0x28
 802fbb0:	46a1      	mov	r9, r4
 802fbb2:	9a05      	ldr	r2, [sp, #20]
 802fbb4:	2322      	movs	r3, #34	@ 0x22
 802fbb6:	f04f 0a00 	mov.w	sl, #0
 802fbba:	f04f 0b00 	mov.w	fp, #0
 802fbbe:	6013      	str	r3, [r2, #0]
 802fbc0:	e768      	b.n	802fa94 <_strtod_l+0x44c>
 802fbc2:	bf00      	nop
 802fbc4:	08034d59 	.word	0x08034d59
 802fbc8:	08034fc4 	.word	0x08034fc4
 802fbcc:	08034d51 	.word	0x08034d51
 802fbd0:	08034df7 	.word	0x08034df7
 802fbd4:	08034d4b 	.word	0x08034d4b
 802fbd8:	08034ef8 	.word	0x08034ef8
 802fbdc:	08034ed0 	.word	0x08034ed0
 802fbe0:	7ff00000 	.word	0x7ff00000
 802fbe4:	7ca00000 	.word	0x7ca00000
 802fbe8:	7fefffff 	.word	0x7fefffff
 802fbec:	f014 0310 	ands.w	r3, r4, #16
 802fbf0:	bf18      	it	ne
 802fbf2:	236a      	movne	r3, #106	@ 0x6a
 802fbf4:	4ea9      	ldr	r6, [pc, #676]	@ (802fe9c <_strtod_l+0x854>)
 802fbf6:	9308      	str	r3, [sp, #32]
 802fbf8:	4650      	mov	r0, sl
 802fbfa:	4659      	mov	r1, fp
 802fbfc:	2300      	movs	r3, #0
 802fbfe:	07e2      	lsls	r2, r4, #31
 802fc00:	d504      	bpl.n	802fc0c <_strtod_l+0x5c4>
 802fc02:	e9d6 2300 	ldrd	r2, r3, [r6]
 802fc06:	f7e0 fd0f 	bl	8010628 <__aeabi_dmul>
 802fc0a:	2301      	movs	r3, #1
 802fc0c:	1064      	asrs	r4, r4, #1
 802fc0e:	f106 0608 	add.w	r6, r6, #8
 802fc12:	d1f4      	bne.n	802fbfe <_strtod_l+0x5b6>
 802fc14:	b10b      	cbz	r3, 802fc1a <_strtod_l+0x5d2>
 802fc16:	4682      	mov	sl, r0
 802fc18:	468b      	mov	fp, r1
 802fc1a:	9b08      	ldr	r3, [sp, #32]
 802fc1c:	b1b3      	cbz	r3, 802fc4c <_strtod_l+0x604>
 802fc1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802fc22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802fc26:	2b00      	cmp	r3, #0
 802fc28:	4659      	mov	r1, fp
 802fc2a:	dd0f      	ble.n	802fc4c <_strtod_l+0x604>
 802fc2c:	2b1f      	cmp	r3, #31
 802fc2e:	dd55      	ble.n	802fcdc <_strtod_l+0x694>
 802fc30:	2b34      	cmp	r3, #52	@ 0x34
 802fc32:	bfde      	ittt	le
 802fc34:	f04f 33ff 	movle.w	r3, #4294967295
 802fc38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802fc3c:	4093      	lslle	r3, r2
 802fc3e:	f04f 0a00 	mov.w	sl, #0
 802fc42:	bfcc      	ite	gt
 802fc44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 802fc48:	ea03 0b01 	andle.w	fp, r3, r1
 802fc4c:	2200      	movs	r2, #0
 802fc4e:	2300      	movs	r3, #0
 802fc50:	4650      	mov	r0, sl
 802fc52:	4659      	mov	r1, fp
 802fc54:	f7e0 ff50 	bl	8010af8 <__aeabi_dcmpeq>
 802fc58:	2800      	cmp	r0, #0
 802fc5a:	d1a6      	bne.n	802fbaa <_strtod_l+0x562>
 802fc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fc5e:	9300      	str	r3, [sp, #0]
 802fc60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802fc62:	9805      	ldr	r0, [sp, #20]
 802fc64:	462b      	mov	r3, r5
 802fc66:	463a      	mov	r2, r7
 802fc68:	f7ff f8c4 	bl	802edf4 <__s2b>
 802fc6c:	900a      	str	r0, [sp, #40]	@ 0x28
 802fc6e:	2800      	cmp	r0, #0
 802fc70:	f43f af05 	beq.w	802fa7e <_strtod_l+0x436>
 802fc74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802fc76:	2a00      	cmp	r2, #0
 802fc78:	eba9 0308 	sub.w	r3, r9, r8
 802fc7c:	bfa8      	it	ge
 802fc7e:	2300      	movge	r3, #0
 802fc80:	9312      	str	r3, [sp, #72]	@ 0x48
 802fc82:	2400      	movs	r4, #0
 802fc84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802fc88:	9316      	str	r3, [sp, #88]	@ 0x58
 802fc8a:	46a0      	mov	r8, r4
 802fc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fc8e:	9805      	ldr	r0, [sp, #20]
 802fc90:	6859      	ldr	r1, [r3, #4]
 802fc92:	f7ff f807 	bl	802eca4 <_Balloc>
 802fc96:	4681      	mov	r9, r0
 802fc98:	2800      	cmp	r0, #0
 802fc9a:	f43f aef4 	beq.w	802fa86 <_strtod_l+0x43e>
 802fc9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802fca0:	691a      	ldr	r2, [r3, #16]
 802fca2:	3202      	adds	r2, #2
 802fca4:	f103 010c 	add.w	r1, r3, #12
 802fca8:	0092      	lsls	r2, r2, #2
 802fcaa:	300c      	adds	r0, #12
 802fcac:	f7fe f945 	bl	802df3a <memcpy>
 802fcb0:	ec4b ab10 	vmov	d0, sl, fp
 802fcb4:	9805      	ldr	r0, [sp, #20]
 802fcb6:	aa1c      	add	r2, sp, #112	@ 0x70
 802fcb8:	a91b      	add	r1, sp, #108	@ 0x6c
 802fcba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802fcbe:	f7ff fbd5 	bl	802f46c <__d2b>
 802fcc2:	901a      	str	r0, [sp, #104]	@ 0x68
 802fcc4:	2800      	cmp	r0, #0
 802fcc6:	f43f aede 	beq.w	802fa86 <_strtod_l+0x43e>
 802fcca:	9805      	ldr	r0, [sp, #20]
 802fccc:	2101      	movs	r1, #1
 802fcce:	f7ff f927 	bl	802ef20 <__i2b>
 802fcd2:	4680      	mov	r8, r0
 802fcd4:	b948      	cbnz	r0, 802fcea <_strtod_l+0x6a2>
 802fcd6:	f04f 0800 	mov.w	r8, #0
 802fcda:	e6d4      	b.n	802fa86 <_strtod_l+0x43e>
 802fcdc:	f04f 32ff 	mov.w	r2, #4294967295
 802fce0:	fa02 f303 	lsl.w	r3, r2, r3
 802fce4:	ea03 0a0a 	and.w	sl, r3, sl
 802fce8:	e7b0      	b.n	802fc4c <_strtod_l+0x604>
 802fcea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 802fcec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 802fcee:	2d00      	cmp	r5, #0
 802fcf0:	bfab      	itete	ge
 802fcf2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802fcf4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802fcf6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 802fcf8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 802fcfa:	bfac      	ite	ge
 802fcfc:	18ef      	addge	r7, r5, r3
 802fcfe:	1b5e      	sublt	r6, r3, r5
 802fd00:	9b08      	ldr	r3, [sp, #32]
 802fd02:	1aed      	subs	r5, r5, r3
 802fd04:	4415      	add	r5, r2
 802fd06:	4b66      	ldr	r3, [pc, #408]	@ (802fea0 <_strtod_l+0x858>)
 802fd08:	3d01      	subs	r5, #1
 802fd0a:	429d      	cmp	r5, r3
 802fd0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 802fd10:	da50      	bge.n	802fdb4 <_strtod_l+0x76c>
 802fd12:	1b5b      	subs	r3, r3, r5
 802fd14:	2b1f      	cmp	r3, #31
 802fd16:	eba2 0203 	sub.w	r2, r2, r3
 802fd1a:	f04f 0101 	mov.w	r1, #1
 802fd1e:	dc3d      	bgt.n	802fd9c <_strtod_l+0x754>
 802fd20:	fa01 f303 	lsl.w	r3, r1, r3
 802fd24:	9313      	str	r3, [sp, #76]	@ 0x4c
 802fd26:	2300      	movs	r3, #0
 802fd28:	9310      	str	r3, [sp, #64]	@ 0x40
 802fd2a:	18bd      	adds	r5, r7, r2
 802fd2c:	9b08      	ldr	r3, [sp, #32]
 802fd2e:	42af      	cmp	r7, r5
 802fd30:	4416      	add	r6, r2
 802fd32:	441e      	add	r6, r3
 802fd34:	463b      	mov	r3, r7
 802fd36:	bfa8      	it	ge
 802fd38:	462b      	movge	r3, r5
 802fd3a:	42b3      	cmp	r3, r6
 802fd3c:	bfa8      	it	ge
 802fd3e:	4633      	movge	r3, r6
 802fd40:	2b00      	cmp	r3, #0
 802fd42:	bfc2      	ittt	gt
 802fd44:	1aed      	subgt	r5, r5, r3
 802fd46:	1af6      	subgt	r6, r6, r3
 802fd48:	1aff      	subgt	r7, r7, r3
 802fd4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802fd4c:	2b00      	cmp	r3, #0
 802fd4e:	dd16      	ble.n	802fd7e <_strtod_l+0x736>
 802fd50:	4641      	mov	r1, r8
 802fd52:	9805      	ldr	r0, [sp, #20]
 802fd54:	461a      	mov	r2, r3
 802fd56:	f7ff f9a3 	bl	802f0a0 <__pow5mult>
 802fd5a:	4680      	mov	r8, r0
 802fd5c:	2800      	cmp	r0, #0
 802fd5e:	d0ba      	beq.n	802fcd6 <_strtod_l+0x68e>
 802fd60:	4601      	mov	r1, r0
 802fd62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802fd64:	9805      	ldr	r0, [sp, #20]
 802fd66:	f7ff f8f1 	bl	802ef4c <__multiply>
 802fd6a:	900e      	str	r0, [sp, #56]	@ 0x38
 802fd6c:	2800      	cmp	r0, #0
 802fd6e:	f43f ae8a 	beq.w	802fa86 <_strtod_l+0x43e>
 802fd72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802fd74:	9805      	ldr	r0, [sp, #20]
 802fd76:	f7fe ffd5 	bl	802ed24 <_Bfree>
 802fd7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802fd7c:	931a      	str	r3, [sp, #104]	@ 0x68
 802fd7e:	2d00      	cmp	r5, #0
 802fd80:	dc1d      	bgt.n	802fdbe <_strtod_l+0x776>
 802fd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802fd84:	2b00      	cmp	r3, #0
 802fd86:	dd23      	ble.n	802fdd0 <_strtod_l+0x788>
 802fd88:	4649      	mov	r1, r9
 802fd8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802fd8c:	9805      	ldr	r0, [sp, #20]
 802fd8e:	f7ff f987 	bl	802f0a0 <__pow5mult>
 802fd92:	4681      	mov	r9, r0
 802fd94:	b9e0      	cbnz	r0, 802fdd0 <_strtod_l+0x788>
 802fd96:	f04f 0900 	mov.w	r9, #0
 802fd9a:	e674      	b.n	802fa86 <_strtod_l+0x43e>
 802fd9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 802fda0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802fda4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 802fda8:	35e2      	adds	r5, #226	@ 0xe2
 802fdaa:	fa01 f305 	lsl.w	r3, r1, r5
 802fdae:	9310      	str	r3, [sp, #64]	@ 0x40
 802fdb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 802fdb2:	e7ba      	b.n	802fd2a <_strtod_l+0x6e2>
 802fdb4:	2300      	movs	r3, #0
 802fdb6:	9310      	str	r3, [sp, #64]	@ 0x40
 802fdb8:	2301      	movs	r3, #1
 802fdba:	9313      	str	r3, [sp, #76]	@ 0x4c
 802fdbc:	e7b5      	b.n	802fd2a <_strtod_l+0x6e2>
 802fdbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802fdc0:	9805      	ldr	r0, [sp, #20]
 802fdc2:	462a      	mov	r2, r5
 802fdc4:	f7ff f9c6 	bl	802f154 <__lshift>
 802fdc8:	901a      	str	r0, [sp, #104]	@ 0x68
 802fdca:	2800      	cmp	r0, #0
 802fdcc:	d1d9      	bne.n	802fd82 <_strtod_l+0x73a>
 802fdce:	e65a      	b.n	802fa86 <_strtod_l+0x43e>
 802fdd0:	2e00      	cmp	r6, #0
 802fdd2:	dd07      	ble.n	802fde4 <_strtod_l+0x79c>
 802fdd4:	4649      	mov	r1, r9
 802fdd6:	9805      	ldr	r0, [sp, #20]
 802fdd8:	4632      	mov	r2, r6
 802fdda:	f7ff f9bb 	bl	802f154 <__lshift>
 802fdde:	4681      	mov	r9, r0
 802fde0:	2800      	cmp	r0, #0
 802fde2:	d0d8      	beq.n	802fd96 <_strtod_l+0x74e>
 802fde4:	2f00      	cmp	r7, #0
 802fde6:	dd08      	ble.n	802fdfa <_strtod_l+0x7b2>
 802fde8:	4641      	mov	r1, r8
 802fdea:	9805      	ldr	r0, [sp, #20]
 802fdec:	463a      	mov	r2, r7
 802fdee:	f7ff f9b1 	bl	802f154 <__lshift>
 802fdf2:	4680      	mov	r8, r0
 802fdf4:	2800      	cmp	r0, #0
 802fdf6:	f43f ae46 	beq.w	802fa86 <_strtod_l+0x43e>
 802fdfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802fdfc:	9805      	ldr	r0, [sp, #20]
 802fdfe:	464a      	mov	r2, r9
 802fe00:	f7ff fa30 	bl	802f264 <__mdiff>
 802fe04:	4604      	mov	r4, r0
 802fe06:	2800      	cmp	r0, #0
 802fe08:	f43f ae3d 	beq.w	802fa86 <_strtod_l+0x43e>
 802fe0c:	68c3      	ldr	r3, [r0, #12]
 802fe0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802fe10:	2300      	movs	r3, #0
 802fe12:	60c3      	str	r3, [r0, #12]
 802fe14:	4641      	mov	r1, r8
 802fe16:	f7ff fa09 	bl	802f22c <__mcmp>
 802fe1a:	2800      	cmp	r0, #0
 802fe1c:	da46      	bge.n	802feac <_strtod_l+0x864>
 802fe1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802fe20:	ea53 030a 	orrs.w	r3, r3, sl
 802fe24:	d16c      	bne.n	802ff00 <_strtod_l+0x8b8>
 802fe26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802fe2a:	2b00      	cmp	r3, #0
 802fe2c:	d168      	bne.n	802ff00 <_strtod_l+0x8b8>
 802fe2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802fe32:	0d1b      	lsrs	r3, r3, #20
 802fe34:	051b      	lsls	r3, r3, #20
 802fe36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802fe3a:	d961      	bls.n	802ff00 <_strtod_l+0x8b8>
 802fe3c:	6963      	ldr	r3, [r4, #20]
 802fe3e:	b913      	cbnz	r3, 802fe46 <_strtod_l+0x7fe>
 802fe40:	6923      	ldr	r3, [r4, #16]
 802fe42:	2b01      	cmp	r3, #1
 802fe44:	dd5c      	ble.n	802ff00 <_strtod_l+0x8b8>
 802fe46:	4621      	mov	r1, r4
 802fe48:	2201      	movs	r2, #1
 802fe4a:	9805      	ldr	r0, [sp, #20]
 802fe4c:	f7ff f982 	bl	802f154 <__lshift>
 802fe50:	4641      	mov	r1, r8
 802fe52:	4604      	mov	r4, r0
 802fe54:	f7ff f9ea 	bl	802f22c <__mcmp>
 802fe58:	2800      	cmp	r0, #0
 802fe5a:	dd51      	ble.n	802ff00 <_strtod_l+0x8b8>
 802fe5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802fe60:	9a08      	ldr	r2, [sp, #32]
 802fe62:	0d1b      	lsrs	r3, r3, #20
 802fe64:	051b      	lsls	r3, r3, #20
 802fe66:	2a00      	cmp	r2, #0
 802fe68:	d06b      	beq.n	802ff42 <_strtod_l+0x8fa>
 802fe6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802fe6e:	d868      	bhi.n	802ff42 <_strtod_l+0x8fa>
 802fe70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 802fe74:	f67f ae9d 	bls.w	802fbb2 <_strtod_l+0x56a>
 802fe78:	4b0a      	ldr	r3, [pc, #40]	@ (802fea4 <_strtod_l+0x85c>)
 802fe7a:	4650      	mov	r0, sl
 802fe7c:	4659      	mov	r1, fp
 802fe7e:	2200      	movs	r2, #0
 802fe80:	f7e0 fbd2 	bl	8010628 <__aeabi_dmul>
 802fe84:	4b08      	ldr	r3, [pc, #32]	@ (802fea8 <_strtod_l+0x860>)
 802fe86:	400b      	ands	r3, r1
 802fe88:	4682      	mov	sl, r0
 802fe8a:	468b      	mov	fp, r1
 802fe8c:	2b00      	cmp	r3, #0
 802fe8e:	f47f ae05 	bne.w	802fa9c <_strtod_l+0x454>
 802fe92:	9a05      	ldr	r2, [sp, #20]
 802fe94:	2322      	movs	r3, #34	@ 0x22
 802fe96:	6013      	str	r3, [r2, #0]
 802fe98:	e600      	b.n	802fa9c <_strtod_l+0x454>
 802fe9a:	bf00      	nop
 802fe9c:	08034ff0 	.word	0x08034ff0
 802fea0:	fffffc02 	.word	0xfffffc02
 802fea4:	39500000 	.word	0x39500000
 802fea8:	7ff00000 	.word	0x7ff00000
 802feac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 802feb0:	d165      	bne.n	802ff7e <_strtod_l+0x936>
 802feb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802feb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802feb8:	b35a      	cbz	r2, 802ff12 <_strtod_l+0x8ca>
 802feba:	4a9f      	ldr	r2, [pc, #636]	@ (8030138 <_strtod_l+0xaf0>)
 802febc:	4293      	cmp	r3, r2
 802febe:	d12b      	bne.n	802ff18 <_strtod_l+0x8d0>
 802fec0:	9b08      	ldr	r3, [sp, #32]
 802fec2:	4651      	mov	r1, sl
 802fec4:	b303      	cbz	r3, 802ff08 <_strtod_l+0x8c0>
 802fec6:	4b9d      	ldr	r3, [pc, #628]	@ (803013c <_strtod_l+0xaf4>)
 802fec8:	465a      	mov	r2, fp
 802feca:	4013      	ands	r3, r2
 802fecc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 802fed0:	f04f 32ff 	mov.w	r2, #4294967295
 802fed4:	d81b      	bhi.n	802ff0e <_strtod_l+0x8c6>
 802fed6:	0d1b      	lsrs	r3, r3, #20
 802fed8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 802fedc:	fa02 f303 	lsl.w	r3, r2, r3
 802fee0:	4299      	cmp	r1, r3
 802fee2:	d119      	bne.n	802ff18 <_strtod_l+0x8d0>
 802fee4:	4b96      	ldr	r3, [pc, #600]	@ (8030140 <_strtod_l+0xaf8>)
 802fee6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802fee8:	429a      	cmp	r2, r3
 802feea:	d102      	bne.n	802fef2 <_strtod_l+0x8aa>
 802feec:	3101      	adds	r1, #1
 802feee:	f43f adca 	beq.w	802fa86 <_strtod_l+0x43e>
 802fef2:	4b92      	ldr	r3, [pc, #584]	@ (803013c <_strtod_l+0xaf4>)
 802fef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802fef6:	401a      	ands	r2, r3
 802fef8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 802fefc:	f04f 0a00 	mov.w	sl, #0
 802ff00:	9b08      	ldr	r3, [sp, #32]
 802ff02:	2b00      	cmp	r3, #0
 802ff04:	d1b8      	bne.n	802fe78 <_strtod_l+0x830>
 802ff06:	e5c9      	b.n	802fa9c <_strtod_l+0x454>
 802ff08:	f04f 33ff 	mov.w	r3, #4294967295
 802ff0c:	e7e8      	b.n	802fee0 <_strtod_l+0x898>
 802ff0e:	4613      	mov	r3, r2
 802ff10:	e7e6      	b.n	802fee0 <_strtod_l+0x898>
 802ff12:	ea53 030a 	orrs.w	r3, r3, sl
 802ff16:	d0a1      	beq.n	802fe5c <_strtod_l+0x814>
 802ff18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802ff1a:	b1db      	cbz	r3, 802ff54 <_strtod_l+0x90c>
 802ff1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802ff1e:	4213      	tst	r3, r2
 802ff20:	d0ee      	beq.n	802ff00 <_strtod_l+0x8b8>
 802ff22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ff24:	9a08      	ldr	r2, [sp, #32]
 802ff26:	4650      	mov	r0, sl
 802ff28:	4659      	mov	r1, fp
 802ff2a:	b1bb      	cbz	r3, 802ff5c <_strtod_l+0x914>
 802ff2c:	f7ff fb6c 	bl	802f608 <sulp>
 802ff30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802ff34:	ec53 2b10 	vmov	r2, r3, d0
 802ff38:	f7e0 f9c0 	bl	80102bc <__adddf3>
 802ff3c:	4682      	mov	sl, r0
 802ff3e:	468b      	mov	fp, r1
 802ff40:	e7de      	b.n	802ff00 <_strtod_l+0x8b8>
 802ff42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 802ff46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802ff4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802ff4e:	f04f 3aff 	mov.w	sl, #4294967295
 802ff52:	e7d5      	b.n	802ff00 <_strtod_l+0x8b8>
 802ff54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802ff56:	ea13 0f0a 	tst.w	r3, sl
 802ff5a:	e7e1      	b.n	802ff20 <_strtod_l+0x8d8>
 802ff5c:	f7ff fb54 	bl	802f608 <sulp>
 802ff60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802ff64:	ec53 2b10 	vmov	r2, r3, d0
 802ff68:	f7e0 f9a6 	bl	80102b8 <__aeabi_dsub>
 802ff6c:	2200      	movs	r2, #0
 802ff6e:	2300      	movs	r3, #0
 802ff70:	4682      	mov	sl, r0
 802ff72:	468b      	mov	fp, r1
 802ff74:	f7e0 fdc0 	bl	8010af8 <__aeabi_dcmpeq>
 802ff78:	2800      	cmp	r0, #0
 802ff7a:	d0c1      	beq.n	802ff00 <_strtod_l+0x8b8>
 802ff7c:	e619      	b.n	802fbb2 <_strtod_l+0x56a>
 802ff7e:	4641      	mov	r1, r8
 802ff80:	4620      	mov	r0, r4
 802ff82:	f7ff facb 	bl	802f51c <__ratio>
 802ff86:	ec57 6b10 	vmov	r6, r7, d0
 802ff8a:	2200      	movs	r2, #0
 802ff8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802ff90:	4630      	mov	r0, r6
 802ff92:	4639      	mov	r1, r7
 802ff94:	f7e0 fdc4 	bl	8010b20 <__aeabi_dcmple>
 802ff98:	2800      	cmp	r0, #0
 802ff9a:	d06f      	beq.n	803007c <_strtod_l+0xa34>
 802ff9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802ff9e:	2b00      	cmp	r3, #0
 802ffa0:	d17a      	bne.n	8030098 <_strtod_l+0xa50>
 802ffa2:	f1ba 0f00 	cmp.w	sl, #0
 802ffa6:	d158      	bne.n	803005a <_strtod_l+0xa12>
 802ffa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ffaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802ffae:	2b00      	cmp	r3, #0
 802ffb0:	d15a      	bne.n	8030068 <_strtod_l+0xa20>
 802ffb2:	4b64      	ldr	r3, [pc, #400]	@ (8030144 <_strtod_l+0xafc>)
 802ffb4:	2200      	movs	r2, #0
 802ffb6:	4630      	mov	r0, r6
 802ffb8:	4639      	mov	r1, r7
 802ffba:	f7e0 fda7 	bl	8010b0c <__aeabi_dcmplt>
 802ffbe:	2800      	cmp	r0, #0
 802ffc0:	d159      	bne.n	8030076 <_strtod_l+0xa2e>
 802ffc2:	4630      	mov	r0, r6
 802ffc4:	4639      	mov	r1, r7
 802ffc6:	4b60      	ldr	r3, [pc, #384]	@ (8030148 <_strtod_l+0xb00>)
 802ffc8:	2200      	movs	r2, #0
 802ffca:	f7e0 fb2d 	bl	8010628 <__aeabi_dmul>
 802ffce:	4606      	mov	r6, r0
 802ffd0:	460f      	mov	r7, r1
 802ffd2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802ffd6:	9606      	str	r6, [sp, #24]
 802ffd8:	9307      	str	r3, [sp, #28]
 802ffda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802ffde:	4d57      	ldr	r5, [pc, #348]	@ (803013c <_strtod_l+0xaf4>)
 802ffe0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802ffe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ffe6:	401d      	ands	r5, r3
 802ffe8:	4b58      	ldr	r3, [pc, #352]	@ (803014c <_strtod_l+0xb04>)
 802ffea:	429d      	cmp	r5, r3
 802ffec:	f040 80b2 	bne.w	8030154 <_strtod_l+0xb0c>
 802fff0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802fff2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 802fff6:	ec4b ab10 	vmov	d0, sl, fp
 802fffa:	f7ff f9c7 	bl	802f38c <__ulp>
 802fffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8030002:	ec51 0b10 	vmov	r0, r1, d0
 8030006:	f7e0 fb0f 	bl	8010628 <__aeabi_dmul>
 803000a:	4652      	mov	r2, sl
 803000c:	465b      	mov	r3, fp
 803000e:	f7e0 f955 	bl	80102bc <__adddf3>
 8030012:	460b      	mov	r3, r1
 8030014:	4949      	ldr	r1, [pc, #292]	@ (803013c <_strtod_l+0xaf4>)
 8030016:	4a4e      	ldr	r2, [pc, #312]	@ (8030150 <_strtod_l+0xb08>)
 8030018:	4019      	ands	r1, r3
 803001a:	4291      	cmp	r1, r2
 803001c:	4682      	mov	sl, r0
 803001e:	d942      	bls.n	80300a6 <_strtod_l+0xa5e>
 8030020:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8030022:	4b47      	ldr	r3, [pc, #284]	@ (8030140 <_strtod_l+0xaf8>)
 8030024:	429a      	cmp	r2, r3
 8030026:	d103      	bne.n	8030030 <_strtod_l+0x9e8>
 8030028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 803002a:	3301      	adds	r3, #1
 803002c:	f43f ad2b 	beq.w	802fa86 <_strtod_l+0x43e>
 8030030:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8030140 <_strtod_l+0xaf8>
 8030034:	f04f 3aff 	mov.w	sl, #4294967295
 8030038:	991a      	ldr	r1, [sp, #104]	@ 0x68
 803003a:	9805      	ldr	r0, [sp, #20]
 803003c:	f7fe fe72 	bl	802ed24 <_Bfree>
 8030040:	9805      	ldr	r0, [sp, #20]
 8030042:	4649      	mov	r1, r9
 8030044:	f7fe fe6e 	bl	802ed24 <_Bfree>
 8030048:	9805      	ldr	r0, [sp, #20]
 803004a:	4641      	mov	r1, r8
 803004c:	f7fe fe6a 	bl	802ed24 <_Bfree>
 8030050:	9805      	ldr	r0, [sp, #20]
 8030052:	4621      	mov	r1, r4
 8030054:	f7fe fe66 	bl	802ed24 <_Bfree>
 8030058:	e618      	b.n	802fc8c <_strtod_l+0x644>
 803005a:	f1ba 0f01 	cmp.w	sl, #1
 803005e:	d103      	bne.n	8030068 <_strtod_l+0xa20>
 8030060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8030062:	2b00      	cmp	r3, #0
 8030064:	f43f ada5 	beq.w	802fbb2 <_strtod_l+0x56a>
 8030068:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8030118 <_strtod_l+0xad0>
 803006c:	4f35      	ldr	r7, [pc, #212]	@ (8030144 <_strtod_l+0xafc>)
 803006e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8030072:	2600      	movs	r6, #0
 8030074:	e7b1      	b.n	802ffda <_strtod_l+0x992>
 8030076:	4f34      	ldr	r7, [pc, #208]	@ (8030148 <_strtod_l+0xb00>)
 8030078:	2600      	movs	r6, #0
 803007a:	e7aa      	b.n	802ffd2 <_strtod_l+0x98a>
 803007c:	4b32      	ldr	r3, [pc, #200]	@ (8030148 <_strtod_l+0xb00>)
 803007e:	4630      	mov	r0, r6
 8030080:	4639      	mov	r1, r7
 8030082:	2200      	movs	r2, #0
 8030084:	f7e0 fad0 	bl	8010628 <__aeabi_dmul>
 8030088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803008a:	4606      	mov	r6, r0
 803008c:	460f      	mov	r7, r1
 803008e:	2b00      	cmp	r3, #0
 8030090:	d09f      	beq.n	802ffd2 <_strtod_l+0x98a>
 8030092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8030096:	e7a0      	b.n	802ffda <_strtod_l+0x992>
 8030098:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8030120 <_strtod_l+0xad8>
 803009c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80300a0:	ec57 6b17 	vmov	r6, r7, d7
 80300a4:	e799      	b.n	802ffda <_strtod_l+0x992>
 80300a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80300aa:	9b08      	ldr	r3, [sp, #32]
 80300ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80300b0:	2b00      	cmp	r3, #0
 80300b2:	d1c1      	bne.n	8030038 <_strtod_l+0x9f0>
 80300b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80300b8:	0d1b      	lsrs	r3, r3, #20
 80300ba:	051b      	lsls	r3, r3, #20
 80300bc:	429d      	cmp	r5, r3
 80300be:	d1bb      	bne.n	8030038 <_strtod_l+0x9f0>
 80300c0:	4630      	mov	r0, r6
 80300c2:	4639      	mov	r1, r7
 80300c4:	f7e0 fe24 	bl	8010d10 <__aeabi_d2lz>
 80300c8:	f7e0 fa80 	bl	80105cc <__aeabi_l2d>
 80300cc:	4602      	mov	r2, r0
 80300ce:	460b      	mov	r3, r1
 80300d0:	4630      	mov	r0, r6
 80300d2:	4639      	mov	r1, r7
 80300d4:	f7e0 f8f0 	bl	80102b8 <__aeabi_dsub>
 80300d8:	460b      	mov	r3, r1
 80300da:	4602      	mov	r2, r0
 80300dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80300e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80300e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80300e6:	ea46 060a 	orr.w	r6, r6, sl
 80300ea:	431e      	orrs	r6, r3
 80300ec:	d06f      	beq.n	80301ce <_strtod_l+0xb86>
 80300ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8030128 <_strtod_l+0xae0>)
 80300f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80300f4:	f7e0 fd0a 	bl	8010b0c <__aeabi_dcmplt>
 80300f8:	2800      	cmp	r0, #0
 80300fa:	f47f accf 	bne.w	802fa9c <_strtod_l+0x454>
 80300fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8030130 <_strtod_l+0xae8>)
 8030100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8030108:	f7e0 fd1e 	bl	8010b48 <__aeabi_dcmpgt>
 803010c:	2800      	cmp	r0, #0
 803010e:	d093      	beq.n	8030038 <_strtod_l+0x9f0>
 8030110:	e4c4      	b.n	802fa9c <_strtod_l+0x454>
 8030112:	bf00      	nop
 8030114:	f3af 8000 	nop.w
 8030118:	00000000 	.word	0x00000000
 803011c:	bff00000 	.word	0xbff00000
 8030120:	00000000 	.word	0x00000000
 8030124:	3ff00000 	.word	0x3ff00000
 8030128:	94a03595 	.word	0x94a03595
 803012c:	3fdfffff 	.word	0x3fdfffff
 8030130:	35afe535 	.word	0x35afe535
 8030134:	3fe00000 	.word	0x3fe00000
 8030138:	000fffff 	.word	0x000fffff
 803013c:	7ff00000 	.word	0x7ff00000
 8030140:	7fefffff 	.word	0x7fefffff
 8030144:	3ff00000 	.word	0x3ff00000
 8030148:	3fe00000 	.word	0x3fe00000
 803014c:	7fe00000 	.word	0x7fe00000
 8030150:	7c9fffff 	.word	0x7c9fffff
 8030154:	9b08      	ldr	r3, [sp, #32]
 8030156:	b323      	cbz	r3, 80301a2 <_strtod_l+0xb5a>
 8030158:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 803015c:	d821      	bhi.n	80301a2 <_strtod_l+0xb5a>
 803015e:	a328      	add	r3, pc, #160	@ (adr r3, 8030200 <_strtod_l+0xbb8>)
 8030160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030164:	4630      	mov	r0, r6
 8030166:	4639      	mov	r1, r7
 8030168:	f7e0 fcda 	bl	8010b20 <__aeabi_dcmple>
 803016c:	b1a0      	cbz	r0, 8030198 <_strtod_l+0xb50>
 803016e:	4639      	mov	r1, r7
 8030170:	4630      	mov	r0, r6
 8030172:	f7e0 fd31 	bl	8010bd8 <__aeabi_d2uiz>
 8030176:	2801      	cmp	r0, #1
 8030178:	bf38      	it	cc
 803017a:	2001      	movcc	r0, #1
 803017c:	f7e0 f9da 	bl	8010534 <__aeabi_ui2d>
 8030180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8030182:	4606      	mov	r6, r0
 8030184:	460f      	mov	r7, r1
 8030186:	b9fb      	cbnz	r3, 80301c8 <_strtod_l+0xb80>
 8030188:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 803018c:	9014      	str	r0, [sp, #80]	@ 0x50
 803018e:	9315      	str	r3, [sp, #84]	@ 0x54
 8030190:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8030194:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8030198:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 803019a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 803019e:	1b5b      	subs	r3, r3, r5
 80301a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80301a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80301a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80301aa:	f7ff f8ef 	bl	802f38c <__ulp>
 80301ae:	4650      	mov	r0, sl
 80301b0:	ec53 2b10 	vmov	r2, r3, d0
 80301b4:	4659      	mov	r1, fp
 80301b6:	f7e0 fa37 	bl	8010628 <__aeabi_dmul>
 80301ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80301be:	f7e0 f87d 	bl	80102bc <__adddf3>
 80301c2:	4682      	mov	sl, r0
 80301c4:	468b      	mov	fp, r1
 80301c6:	e770      	b.n	80300aa <_strtod_l+0xa62>
 80301c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80301cc:	e7e0      	b.n	8030190 <_strtod_l+0xb48>
 80301ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8030208 <_strtod_l+0xbc0>)
 80301d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80301d4:	f7e0 fc9a 	bl	8010b0c <__aeabi_dcmplt>
 80301d8:	e798      	b.n	803010c <_strtod_l+0xac4>
 80301da:	2300      	movs	r3, #0
 80301dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80301de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80301e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80301e2:	6013      	str	r3, [r2, #0]
 80301e4:	f7ff ba6d 	b.w	802f6c2 <_strtod_l+0x7a>
 80301e8:	2a65      	cmp	r2, #101	@ 0x65
 80301ea:	f43f ab66 	beq.w	802f8ba <_strtod_l+0x272>
 80301ee:	2a45      	cmp	r2, #69	@ 0x45
 80301f0:	f43f ab63 	beq.w	802f8ba <_strtod_l+0x272>
 80301f4:	2301      	movs	r3, #1
 80301f6:	f7ff bb9e 	b.w	802f936 <_strtod_l+0x2ee>
 80301fa:	bf00      	nop
 80301fc:	f3af 8000 	nop.w
 8030200:	ffc00000 	.word	0xffc00000
 8030204:	41dfffff 	.word	0x41dfffff
 8030208:	94a03595 	.word	0x94a03595
 803020c:	3fcfffff 	.word	0x3fcfffff

08030210 <_strtod_r>:
 8030210:	4b01      	ldr	r3, [pc, #4]	@ (8030218 <_strtod_r+0x8>)
 8030212:	f7ff ba19 	b.w	802f648 <_strtod_l>
 8030216:	bf00      	nop
 8030218:	2000018c 	.word	0x2000018c

0803021c <_strtol_l.constprop.0>:
 803021c:	2b24      	cmp	r3, #36	@ 0x24
 803021e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030222:	4686      	mov	lr, r0
 8030224:	4690      	mov	r8, r2
 8030226:	d801      	bhi.n	803022c <_strtol_l.constprop.0+0x10>
 8030228:	2b01      	cmp	r3, #1
 803022a:	d106      	bne.n	803023a <_strtol_l.constprop.0+0x1e>
 803022c:	f7fd fe50 	bl	802ded0 <__errno>
 8030230:	2316      	movs	r3, #22
 8030232:	6003      	str	r3, [r0, #0]
 8030234:	2000      	movs	r0, #0
 8030236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803023a:	4834      	ldr	r0, [pc, #208]	@ (803030c <_strtol_l.constprop.0+0xf0>)
 803023c:	460d      	mov	r5, r1
 803023e:	462a      	mov	r2, r5
 8030240:	f815 4b01 	ldrb.w	r4, [r5], #1
 8030244:	5d06      	ldrb	r6, [r0, r4]
 8030246:	f016 0608 	ands.w	r6, r6, #8
 803024a:	d1f8      	bne.n	803023e <_strtol_l.constprop.0+0x22>
 803024c:	2c2d      	cmp	r4, #45	@ 0x2d
 803024e:	d12d      	bne.n	80302ac <_strtol_l.constprop.0+0x90>
 8030250:	782c      	ldrb	r4, [r5, #0]
 8030252:	2601      	movs	r6, #1
 8030254:	1c95      	adds	r5, r2, #2
 8030256:	f033 0210 	bics.w	r2, r3, #16
 803025a:	d109      	bne.n	8030270 <_strtol_l.constprop.0+0x54>
 803025c:	2c30      	cmp	r4, #48	@ 0x30
 803025e:	d12a      	bne.n	80302b6 <_strtol_l.constprop.0+0x9a>
 8030260:	782a      	ldrb	r2, [r5, #0]
 8030262:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8030266:	2a58      	cmp	r2, #88	@ 0x58
 8030268:	d125      	bne.n	80302b6 <_strtol_l.constprop.0+0x9a>
 803026a:	786c      	ldrb	r4, [r5, #1]
 803026c:	2310      	movs	r3, #16
 803026e:	3502      	adds	r5, #2
 8030270:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8030274:	f10c 3cff 	add.w	ip, ip, #4294967295
 8030278:	2200      	movs	r2, #0
 803027a:	fbbc f9f3 	udiv	r9, ip, r3
 803027e:	4610      	mov	r0, r2
 8030280:	fb03 ca19 	mls	sl, r3, r9, ip
 8030284:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8030288:	2f09      	cmp	r7, #9
 803028a:	d81b      	bhi.n	80302c4 <_strtol_l.constprop.0+0xa8>
 803028c:	463c      	mov	r4, r7
 803028e:	42a3      	cmp	r3, r4
 8030290:	dd27      	ble.n	80302e2 <_strtol_l.constprop.0+0xc6>
 8030292:	1c57      	adds	r7, r2, #1
 8030294:	d007      	beq.n	80302a6 <_strtol_l.constprop.0+0x8a>
 8030296:	4581      	cmp	r9, r0
 8030298:	d320      	bcc.n	80302dc <_strtol_l.constprop.0+0xc0>
 803029a:	d101      	bne.n	80302a0 <_strtol_l.constprop.0+0x84>
 803029c:	45a2      	cmp	sl, r4
 803029e:	db1d      	blt.n	80302dc <_strtol_l.constprop.0+0xc0>
 80302a0:	fb00 4003 	mla	r0, r0, r3, r4
 80302a4:	2201      	movs	r2, #1
 80302a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80302aa:	e7eb      	b.n	8030284 <_strtol_l.constprop.0+0x68>
 80302ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80302ae:	bf04      	itt	eq
 80302b0:	782c      	ldrbeq	r4, [r5, #0]
 80302b2:	1c95      	addeq	r5, r2, #2
 80302b4:	e7cf      	b.n	8030256 <_strtol_l.constprop.0+0x3a>
 80302b6:	2b00      	cmp	r3, #0
 80302b8:	d1da      	bne.n	8030270 <_strtol_l.constprop.0+0x54>
 80302ba:	2c30      	cmp	r4, #48	@ 0x30
 80302bc:	bf0c      	ite	eq
 80302be:	2308      	moveq	r3, #8
 80302c0:	230a      	movne	r3, #10
 80302c2:	e7d5      	b.n	8030270 <_strtol_l.constprop.0+0x54>
 80302c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80302c8:	2f19      	cmp	r7, #25
 80302ca:	d801      	bhi.n	80302d0 <_strtol_l.constprop.0+0xb4>
 80302cc:	3c37      	subs	r4, #55	@ 0x37
 80302ce:	e7de      	b.n	803028e <_strtol_l.constprop.0+0x72>
 80302d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80302d4:	2f19      	cmp	r7, #25
 80302d6:	d804      	bhi.n	80302e2 <_strtol_l.constprop.0+0xc6>
 80302d8:	3c57      	subs	r4, #87	@ 0x57
 80302da:	e7d8      	b.n	803028e <_strtol_l.constprop.0+0x72>
 80302dc:	f04f 32ff 	mov.w	r2, #4294967295
 80302e0:	e7e1      	b.n	80302a6 <_strtol_l.constprop.0+0x8a>
 80302e2:	1c53      	adds	r3, r2, #1
 80302e4:	d108      	bne.n	80302f8 <_strtol_l.constprop.0+0xdc>
 80302e6:	2322      	movs	r3, #34	@ 0x22
 80302e8:	f8ce 3000 	str.w	r3, [lr]
 80302ec:	4660      	mov	r0, ip
 80302ee:	f1b8 0f00 	cmp.w	r8, #0
 80302f2:	d0a0      	beq.n	8030236 <_strtol_l.constprop.0+0x1a>
 80302f4:	1e69      	subs	r1, r5, #1
 80302f6:	e006      	b.n	8030306 <_strtol_l.constprop.0+0xea>
 80302f8:	b106      	cbz	r6, 80302fc <_strtol_l.constprop.0+0xe0>
 80302fa:	4240      	negs	r0, r0
 80302fc:	f1b8 0f00 	cmp.w	r8, #0
 8030300:	d099      	beq.n	8030236 <_strtol_l.constprop.0+0x1a>
 8030302:	2a00      	cmp	r2, #0
 8030304:	d1f6      	bne.n	80302f4 <_strtol_l.constprop.0+0xd8>
 8030306:	f8c8 1000 	str.w	r1, [r8]
 803030a:	e794      	b.n	8030236 <_strtol_l.constprop.0+0x1a>
 803030c:	08035019 	.word	0x08035019

08030310 <_strtol_r>:
 8030310:	f7ff bf84 	b.w	803021c <_strtol_l.constprop.0>

08030314 <__ssputs_r>:
 8030314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030318:	688e      	ldr	r6, [r1, #8]
 803031a:	461f      	mov	r7, r3
 803031c:	42be      	cmp	r6, r7
 803031e:	680b      	ldr	r3, [r1, #0]
 8030320:	4682      	mov	sl, r0
 8030322:	460c      	mov	r4, r1
 8030324:	4690      	mov	r8, r2
 8030326:	d82d      	bhi.n	8030384 <__ssputs_r+0x70>
 8030328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 803032c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8030330:	d026      	beq.n	8030380 <__ssputs_r+0x6c>
 8030332:	6965      	ldr	r5, [r4, #20]
 8030334:	6909      	ldr	r1, [r1, #16]
 8030336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803033a:	eba3 0901 	sub.w	r9, r3, r1
 803033e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8030342:	1c7b      	adds	r3, r7, #1
 8030344:	444b      	add	r3, r9
 8030346:	106d      	asrs	r5, r5, #1
 8030348:	429d      	cmp	r5, r3
 803034a:	bf38      	it	cc
 803034c:	461d      	movcc	r5, r3
 803034e:	0553      	lsls	r3, r2, #21
 8030350:	d527      	bpl.n	80303a2 <__ssputs_r+0x8e>
 8030352:	4629      	mov	r1, r5
 8030354:	f7fc fabc 	bl	802c8d0 <_malloc_r>
 8030358:	4606      	mov	r6, r0
 803035a:	b360      	cbz	r0, 80303b6 <__ssputs_r+0xa2>
 803035c:	6921      	ldr	r1, [r4, #16]
 803035e:	464a      	mov	r2, r9
 8030360:	f7fd fdeb 	bl	802df3a <memcpy>
 8030364:	89a3      	ldrh	r3, [r4, #12]
 8030366:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 803036a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803036e:	81a3      	strh	r3, [r4, #12]
 8030370:	6126      	str	r6, [r4, #16]
 8030372:	6165      	str	r5, [r4, #20]
 8030374:	444e      	add	r6, r9
 8030376:	eba5 0509 	sub.w	r5, r5, r9
 803037a:	6026      	str	r6, [r4, #0]
 803037c:	60a5      	str	r5, [r4, #8]
 803037e:	463e      	mov	r6, r7
 8030380:	42be      	cmp	r6, r7
 8030382:	d900      	bls.n	8030386 <__ssputs_r+0x72>
 8030384:	463e      	mov	r6, r7
 8030386:	6820      	ldr	r0, [r4, #0]
 8030388:	4632      	mov	r2, r6
 803038a:	4641      	mov	r1, r8
 803038c:	f7fd fbe6 	bl	802db5c <memmove>
 8030390:	68a3      	ldr	r3, [r4, #8]
 8030392:	1b9b      	subs	r3, r3, r6
 8030394:	60a3      	str	r3, [r4, #8]
 8030396:	6823      	ldr	r3, [r4, #0]
 8030398:	4433      	add	r3, r6
 803039a:	6023      	str	r3, [r4, #0]
 803039c:	2000      	movs	r0, #0
 803039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80303a2:	462a      	mov	r2, r5
 80303a4:	f001 faa7 	bl	80318f6 <_realloc_r>
 80303a8:	4606      	mov	r6, r0
 80303aa:	2800      	cmp	r0, #0
 80303ac:	d1e0      	bne.n	8030370 <__ssputs_r+0x5c>
 80303ae:	6921      	ldr	r1, [r4, #16]
 80303b0:	4650      	mov	r0, sl
 80303b2:	f7fe fc2d 	bl	802ec10 <_free_r>
 80303b6:	230c      	movs	r3, #12
 80303b8:	f8ca 3000 	str.w	r3, [sl]
 80303bc:	89a3      	ldrh	r3, [r4, #12]
 80303be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80303c2:	81a3      	strh	r3, [r4, #12]
 80303c4:	f04f 30ff 	mov.w	r0, #4294967295
 80303c8:	e7e9      	b.n	803039e <__ssputs_r+0x8a>
	...

080303cc <_svfiprintf_r>:
 80303cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80303d0:	4698      	mov	r8, r3
 80303d2:	898b      	ldrh	r3, [r1, #12]
 80303d4:	061b      	lsls	r3, r3, #24
 80303d6:	b09d      	sub	sp, #116	@ 0x74
 80303d8:	4607      	mov	r7, r0
 80303da:	460d      	mov	r5, r1
 80303dc:	4614      	mov	r4, r2
 80303de:	d510      	bpl.n	8030402 <_svfiprintf_r+0x36>
 80303e0:	690b      	ldr	r3, [r1, #16]
 80303e2:	b973      	cbnz	r3, 8030402 <_svfiprintf_r+0x36>
 80303e4:	2140      	movs	r1, #64	@ 0x40
 80303e6:	f7fc fa73 	bl	802c8d0 <_malloc_r>
 80303ea:	6028      	str	r0, [r5, #0]
 80303ec:	6128      	str	r0, [r5, #16]
 80303ee:	b930      	cbnz	r0, 80303fe <_svfiprintf_r+0x32>
 80303f0:	230c      	movs	r3, #12
 80303f2:	603b      	str	r3, [r7, #0]
 80303f4:	f04f 30ff 	mov.w	r0, #4294967295
 80303f8:	b01d      	add	sp, #116	@ 0x74
 80303fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80303fe:	2340      	movs	r3, #64	@ 0x40
 8030400:	616b      	str	r3, [r5, #20]
 8030402:	2300      	movs	r3, #0
 8030404:	9309      	str	r3, [sp, #36]	@ 0x24
 8030406:	2320      	movs	r3, #32
 8030408:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 803040c:	f8cd 800c 	str.w	r8, [sp, #12]
 8030410:	2330      	movs	r3, #48	@ 0x30
 8030412:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80305b0 <_svfiprintf_r+0x1e4>
 8030416:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 803041a:	f04f 0901 	mov.w	r9, #1
 803041e:	4623      	mov	r3, r4
 8030420:	469a      	mov	sl, r3
 8030422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030426:	b10a      	cbz	r2, 803042c <_svfiprintf_r+0x60>
 8030428:	2a25      	cmp	r2, #37	@ 0x25
 803042a:	d1f9      	bne.n	8030420 <_svfiprintf_r+0x54>
 803042c:	ebba 0b04 	subs.w	fp, sl, r4
 8030430:	d00b      	beq.n	803044a <_svfiprintf_r+0x7e>
 8030432:	465b      	mov	r3, fp
 8030434:	4622      	mov	r2, r4
 8030436:	4629      	mov	r1, r5
 8030438:	4638      	mov	r0, r7
 803043a:	f7ff ff6b 	bl	8030314 <__ssputs_r>
 803043e:	3001      	adds	r0, #1
 8030440:	f000 80a7 	beq.w	8030592 <_svfiprintf_r+0x1c6>
 8030444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8030446:	445a      	add	r2, fp
 8030448:	9209      	str	r2, [sp, #36]	@ 0x24
 803044a:	f89a 3000 	ldrb.w	r3, [sl]
 803044e:	2b00      	cmp	r3, #0
 8030450:	f000 809f 	beq.w	8030592 <_svfiprintf_r+0x1c6>
 8030454:	2300      	movs	r3, #0
 8030456:	f04f 32ff 	mov.w	r2, #4294967295
 803045a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803045e:	f10a 0a01 	add.w	sl, sl, #1
 8030462:	9304      	str	r3, [sp, #16]
 8030464:	9307      	str	r3, [sp, #28]
 8030466:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 803046a:	931a      	str	r3, [sp, #104]	@ 0x68
 803046c:	4654      	mov	r4, sl
 803046e:	2205      	movs	r2, #5
 8030470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030474:	484e      	ldr	r0, [pc, #312]	@ (80305b0 <_svfiprintf_r+0x1e4>)
 8030476:	f7df fec3 	bl	8010200 <memchr>
 803047a:	9a04      	ldr	r2, [sp, #16]
 803047c:	b9d8      	cbnz	r0, 80304b6 <_svfiprintf_r+0xea>
 803047e:	06d0      	lsls	r0, r2, #27
 8030480:	bf44      	itt	mi
 8030482:	2320      	movmi	r3, #32
 8030484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8030488:	0711      	lsls	r1, r2, #28
 803048a:	bf44      	itt	mi
 803048c:	232b      	movmi	r3, #43	@ 0x2b
 803048e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8030492:	f89a 3000 	ldrb.w	r3, [sl]
 8030496:	2b2a      	cmp	r3, #42	@ 0x2a
 8030498:	d015      	beq.n	80304c6 <_svfiprintf_r+0xfa>
 803049a:	9a07      	ldr	r2, [sp, #28]
 803049c:	4654      	mov	r4, sl
 803049e:	2000      	movs	r0, #0
 80304a0:	f04f 0c0a 	mov.w	ip, #10
 80304a4:	4621      	mov	r1, r4
 80304a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80304aa:	3b30      	subs	r3, #48	@ 0x30
 80304ac:	2b09      	cmp	r3, #9
 80304ae:	d94b      	bls.n	8030548 <_svfiprintf_r+0x17c>
 80304b0:	b1b0      	cbz	r0, 80304e0 <_svfiprintf_r+0x114>
 80304b2:	9207      	str	r2, [sp, #28]
 80304b4:	e014      	b.n	80304e0 <_svfiprintf_r+0x114>
 80304b6:	eba0 0308 	sub.w	r3, r0, r8
 80304ba:	fa09 f303 	lsl.w	r3, r9, r3
 80304be:	4313      	orrs	r3, r2
 80304c0:	9304      	str	r3, [sp, #16]
 80304c2:	46a2      	mov	sl, r4
 80304c4:	e7d2      	b.n	803046c <_svfiprintf_r+0xa0>
 80304c6:	9b03      	ldr	r3, [sp, #12]
 80304c8:	1d19      	adds	r1, r3, #4
 80304ca:	681b      	ldr	r3, [r3, #0]
 80304cc:	9103      	str	r1, [sp, #12]
 80304ce:	2b00      	cmp	r3, #0
 80304d0:	bfbb      	ittet	lt
 80304d2:	425b      	neglt	r3, r3
 80304d4:	f042 0202 	orrlt.w	r2, r2, #2
 80304d8:	9307      	strge	r3, [sp, #28]
 80304da:	9307      	strlt	r3, [sp, #28]
 80304dc:	bfb8      	it	lt
 80304de:	9204      	strlt	r2, [sp, #16]
 80304e0:	7823      	ldrb	r3, [r4, #0]
 80304e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80304e4:	d10a      	bne.n	80304fc <_svfiprintf_r+0x130>
 80304e6:	7863      	ldrb	r3, [r4, #1]
 80304e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80304ea:	d132      	bne.n	8030552 <_svfiprintf_r+0x186>
 80304ec:	9b03      	ldr	r3, [sp, #12]
 80304ee:	1d1a      	adds	r2, r3, #4
 80304f0:	681b      	ldr	r3, [r3, #0]
 80304f2:	9203      	str	r2, [sp, #12]
 80304f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80304f8:	3402      	adds	r4, #2
 80304fa:	9305      	str	r3, [sp, #20]
 80304fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80305c0 <_svfiprintf_r+0x1f4>
 8030500:	7821      	ldrb	r1, [r4, #0]
 8030502:	2203      	movs	r2, #3
 8030504:	4650      	mov	r0, sl
 8030506:	f7df fe7b 	bl	8010200 <memchr>
 803050a:	b138      	cbz	r0, 803051c <_svfiprintf_r+0x150>
 803050c:	9b04      	ldr	r3, [sp, #16]
 803050e:	eba0 000a 	sub.w	r0, r0, sl
 8030512:	2240      	movs	r2, #64	@ 0x40
 8030514:	4082      	lsls	r2, r0
 8030516:	4313      	orrs	r3, r2
 8030518:	3401      	adds	r4, #1
 803051a:	9304      	str	r3, [sp, #16]
 803051c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030520:	4824      	ldr	r0, [pc, #144]	@ (80305b4 <_svfiprintf_r+0x1e8>)
 8030522:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8030526:	2206      	movs	r2, #6
 8030528:	f7df fe6a 	bl	8010200 <memchr>
 803052c:	2800      	cmp	r0, #0
 803052e:	d036      	beq.n	803059e <_svfiprintf_r+0x1d2>
 8030530:	4b21      	ldr	r3, [pc, #132]	@ (80305b8 <_svfiprintf_r+0x1ec>)
 8030532:	bb1b      	cbnz	r3, 803057c <_svfiprintf_r+0x1b0>
 8030534:	9b03      	ldr	r3, [sp, #12]
 8030536:	3307      	adds	r3, #7
 8030538:	f023 0307 	bic.w	r3, r3, #7
 803053c:	3308      	adds	r3, #8
 803053e:	9303      	str	r3, [sp, #12]
 8030540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030542:	4433      	add	r3, r6
 8030544:	9309      	str	r3, [sp, #36]	@ 0x24
 8030546:	e76a      	b.n	803041e <_svfiprintf_r+0x52>
 8030548:	fb0c 3202 	mla	r2, ip, r2, r3
 803054c:	460c      	mov	r4, r1
 803054e:	2001      	movs	r0, #1
 8030550:	e7a8      	b.n	80304a4 <_svfiprintf_r+0xd8>
 8030552:	2300      	movs	r3, #0
 8030554:	3401      	adds	r4, #1
 8030556:	9305      	str	r3, [sp, #20]
 8030558:	4619      	mov	r1, r3
 803055a:	f04f 0c0a 	mov.w	ip, #10
 803055e:	4620      	mov	r0, r4
 8030560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030564:	3a30      	subs	r2, #48	@ 0x30
 8030566:	2a09      	cmp	r2, #9
 8030568:	d903      	bls.n	8030572 <_svfiprintf_r+0x1a6>
 803056a:	2b00      	cmp	r3, #0
 803056c:	d0c6      	beq.n	80304fc <_svfiprintf_r+0x130>
 803056e:	9105      	str	r1, [sp, #20]
 8030570:	e7c4      	b.n	80304fc <_svfiprintf_r+0x130>
 8030572:	fb0c 2101 	mla	r1, ip, r1, r2
 8030576:	4604      	mov	r4, r0
 8030578:	2301      	movs	r3, #1
 803057a:	e7f0      	b.n	803055e <_svfiprintf_r+0x192>
 803057c:	ab03      	add	r3, sp, #12
 803057e:	9300      	str	r3, [sp, #0]
 8030580:	462a      	mov	r2, r5
 8030582:	4b0e      	ldr	r3, [pc, #56]	@ (80305bc <_svfiprintf_r+0x1f0>)
 8030584:	a904      	add	r1, sp, #16
 8030586:	4638      	mov	r0, r7
 8030588:	f7fc face 	bl	802cb28 <_printf_float>
 803058c:	1c42      	adds	r2, r0, #1
 803058e:	4606      	mov	r6, r0
 8030590:	d1d6      	bne.n	8030540 <_svfiprintf_r+0x174>
 8030592:	89ab      	ldrh	r3, [r5, #12]
 8030594:	065b      	lsls	r3, r3, #25
 8030596:	f53f af2d 	bmi.w	80303f4 <_svfiprintf_r+0x28>
 803059a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 803059c:	e72c      	b.n	80303f8 <_svfiprintf_r+0x2c>
 803059e:	ab03      	add	r3, sp, #12
 80305a0:	9300      	str	r3, [sp, #0]
 80305a2:	462a      	mov	r2, r5
 80305a4:	4b05      	ldr	r3, [pc, #20]	@ (80305bc <_svfiprintf_r+0x1f0>)
 80305a6:	a904      	add	r1, sp, #16
 80305a8:	4638      	mov	r0, r7
 80305aa:	f7fc fd55 	bl	802d058 <_printf_i>
 80305ae:	e7ed      	b.n	803058c <_svfiprintf_r+0x1c0>
 80305b0:	08035119 	.word	0x08035119
 80305b4:	08035123 	.word	0x08035123
 80305b8:	0802cb29 	.word	0x0802cb29
 80305bc:	08030315 	.word	0x08030315
 80305c0:	0803511f 	.word	0x0803511f

080305c4 <_sungetc_r>:
 80305c4:	b538      	push	{r3, r4, r5, lr}
 80305c6:	1c4b      	adds	r3, r1, #1
 80305c8:	4614      	mov	r4, r2
 80305ca:	d103      	bne.n	80305d4 <_sungetc_r+0x10>
 80305cc:	f04f 35ff 	mov.w	r5, #4294967295
 80305d0:	4628      	mov	r0, r5
 80305d2:	bd38      	pop	{r3, r4, r5, pc}
 80305d4:	8993      	ldrh	r3, [r2, #12]
 80305d6:	f023 0320 	bic.w	r3, r3, #32
 80305da:	8193      	strh	r3, [r2, #12]
 80305dc:	6853      	ldr	r3, [r2, #4]
 80305de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80305e0:	b2cd      	uxtb	r5, r1
 80305e2:	b18a      	cbz	r2, 8030608 <_sungetc_r+0x44>
 80305e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80305e6:	429a      	cmp	r2, r3
 80305e8:	dd08      	ble.n	80305fc <_sungetc_r+0x38>
 80305ea:	6823      	ldr	r3, [r4, #0]
 80305ec:	1e5a      	subs	r2, r3, #1
 80305ee:	6022      	str	r2, [r4, #0]
 80305f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80305f4:	6863      	ldr	r3, [r4, #4]
 80305f6:	3301      	adds	r3, #1
 80305f8:	6063      	str	r3, [r4, #4]
 80305fa:	e7e9      	b.n	80305d0 <_sungetc_r+0xc>
 80305fc:	4621      	mov	r1, r4
 80305fe:	f000 fd84 	bl	803110a <__submore>
 8030602:	2800      	cmp	r0, #0
 8030604:	d0f1      	beq.n	80305ea <_sungetc_r+0x26>
 8030606:	e7e1      	b.n	80305cc <_sungetc_r+0x8>
 8030608:	6921      	ldr	r1, [r4, #16]
 803060a:	6822      	ldr	r2, [r4, #0]
 803060c:	b141      	cbz	r1, 8030620 <_sungetc_r+0x5c>
 803060e:	4291      	cmp	r1, r2
 8030610:	d206      	bcs.n	8030620 <_sungetc_r+0x5c>
 8030612:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8030616:	42a9      	cmp	r1, r5
 8030618:	d102      	bne.n	8030620 <_sungetc_r+0x5c>
 803061a:	3a01      	subs	r2, #1
 803061c:	6022      	str	r2, [r4, #0]
 803061e:	e7ea      	b.n	80305f6 <_sungetc_r+0x32>
 8030620:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8030624:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8030628:	6363      	str	r3, [r4, #52]	@ 0x34
 803062a:	2303      	movs	r3, #3
 803062c:	63a3      	str	r3, [r4, #56]	@ 0x38
 803062e:	4623      	mov	r3, r4
 8030630:	f803 5f46 	strb.w	r5, [r3, #70]!
 8030634:	6023      	str	r3, [r4, #0]
 8030636:	2301      	movs	r3, #1
 8030638:	e7de      	b.n	80305f8 <_sungetc_r+0x34>

0803063a <__ssrefill_r>:
 803063a:	b510      	push	{r4, lr}
 803063c:	460c      	mov	r4, r1
 803063e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8030640:	b169      	cbz	r1, 803065e <__ssrefill_r+0x24>
 8030642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8030646:	4299      	cmp	r1, r3
 8030648:	d001      	beq.n	803064e <__ssrefill_r+0x14>
 803064a:	f7fe fae1 	bl	802ec10 <_free_r>
 803064e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8030650:	6063      	str	r3, [r4, #4]
 8030652:	2000      	movs	r0, #0
 8030654:	6360      	str	r0, [r4, #52]	@ 0x34
 8030656:	b113      	cbz	r3, 803065e <__ssrefill_r+0x24>
 8030658:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 803065a:	6023      	str	r3, [r4, #0]
 803065c:	bd10      	pop	{r4, pc}
 803065e:	6923      	ldr	r3, [r4, #16]
 8030660:	6023      	str	r3, [r4, #0]
 8030662:	2300      	movs	r3, #0
 8030664:	6063      	str	r3, [r4, #4]
 8030666:	89a3      	ldrh	r3, [r4, #12]
 8030668:	f043 0320 	orr.w	r3, r3, #32
 803066c:	81a3      	strh	r3, [r4, #12]
 803066e:	f04f 30ff 	mov.w	r0, #4294967295
 8030672:	e7f3      	b.n	803065c <__ssrefill_r+0x22>

08030674 <__ssvfiscanf_r>:
 8030674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8030678:	460c      	mov	r4, r1
 803067a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 803067e:	2100      	movs	r1, #0
 8030680:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8030684:	49a5      	ldr	r1, [pc, #660]	@ (803091c <__ssvfiscanf_r+0x2a8>)
 8030686:	91a0      	str	r1, [sp, #640]	@ 0x280
 8030688:	f10d 0804 	add.w	r8, sp, #4
 803068c:	49a4      	ldr	r1, [pc, #656]	@ (8030920 <__ssvfiscanf_r+0x2ac>)
 803068e:	4fa5      	ldr	r7, [pc, #660]	@ (8030924 <__ssvfiscanf_r+0x2b0>)
 8030690:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8030694:	4606      	mov	r6, r0
 8030696:	91a1      	str	r1, [sp, #644]	@ 0x284
 8030698:	9300      	str	r3, [sp, #0]
 803069a:	7813      	ldrb	r3, [r2, #0]
 803069c:	2b00      	cmp	r3, #0
 803069e:	f000 8158 	beq.w	8030952 <__ssvfiscanf_r+0x2de>
 80306a2:	5cf9      	ldrb	r1, [r7, r3]
 80306a4:	f011 0108 	ands.w	r1, r1, #8
 80306a8:	f102 0501 	add.w	r5, r2, #1
 80306ac:	d019      	beq.n	80306e2 <__ssvfiscanf_r+0x6e>
 80306ae:	6863      	ldr	r3, [r4, #4]
 80306b0:	2b00      	cmp	r3, #0
 80306b2:	dd0f      	ble.n	80306d4 <__ssvfiscanf_r+0x60>
 80306b4:	6823      	ldr	r3, [r4, #0]
 80306b6:	781a      	ldrb	r2, [r3, #0]
 80306b8:	5cba      	ldrb	r2, [r7, r2]
 80306ba:	0712      	lsls	r2, r2, #28
 80306bc:	d401      	bmi.n	80306c2 <__ssvfiscanf_r+0x4e>
 80306be:	462a      	mov	r2, r5
 80306c0:	e7eb      	b.n	803069a <__ssvfiscanf_r+0x26>
 80306c2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80306c4:	3201      	adds	r2, #1
 80306c6:	9245      	str	r2, [sp, #276]	@ 0x114
 80306c8:	6862      	ldr	r2, [r4, #4]
 80306ca:	3301      	adds	r3, #1
 80306cc:	3a01      	subs	r2, #1
 80306ce:	6062      	str	r2, [r4, #4]
 80306d0:	6023      	str	r3, [r4, #0]
 80306d2:	e7ec      	b.n	80306ae <__ssvfiscanf_r+0x3a>
 80306d4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80306d6:	4621      	mov	r1, r4
 80306d8:	4630      	mov	r0, r6
 80306da:	4798      	blx	r3
 80306dc:	2800      	cmp	r0, #0
 80306de:	d0e9      	beq.n	80306b4 <__ssvfiscanf_r+0x40>
 80306e0:	e7ed      	b.n	80306be <__ssvfiscanf_r+0x4a>
 80306e2:	2b25      	cmp	r3, #37	@ 0x25
 80306e4:	d012      	beq.n	803070c <__ssvfiscanf_r+0x98>
 80306e6:	4699      	mov	r9, r3
 80306e8:	6863      	ldr	r3, [r4, #4]
 80306ea:	2b00      	cmp	r3, #0
 80306ec:	f340 8093 	ble.w	8030816 <__ssvfiscanf_r+0x1a2>
 80306f0:	6822      	ldr	r2, [r4, #0]
 80306f2:	7813      	ldrb	r3, [r2, #0]
 80306f4:	454b      	cmp	r3, r9
 80306f6:	f040 812c 	bne.w	8030952 <__ssvfiscanf_r+0x2de>
 80306fa:	6863      	ldr	r3, [r4, #4]
 80306fc:	3b01      	subs	r3, #1
 80306fe:	6063      	str	r3, [r4, #4]
 8030700:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8030702:	3201      	adds	r2, #1
 8030704:	3301      	adds	r3, #1
 8030706:	6022      	str	r2, [r4, #0]
 8030708:	9345      	str	r3, [sp, #276]	@ 0x114
 803070a:	e7d8      	b.n	80306be <__ssvfiscanf_r+0x4a>
 803070c:	9141      	str	r1, [sp, #260]	@ 0x104
 803070e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8030710:	7853      	ldrb	r3, [r2, #1]
 8030712:	2b2a      	cmp	r3, #42	@ 0x2a
 8030714:	bf02      	ittt	eq
 8030716:	2310      	moveq	r3, #16
 8030718:	1c95      	addeq	r5, r2, #2
 803071a:	9341      	streq	r3, [sp, #260]	@ 0x104
 803071c:	220a      	movs	r2, #10
 803071e:	46a9      	mov	r9, r5
 8030720:	f819 1b01 	ldrb.w	r1, [r9], #1
 8030724:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8030728:	2b09      	cmp	r3, #9
 803072a:	d91e      	bls.n	803076a <__ssvfiscanf_r+0xf6>
 803072c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8030928 <__ssvfiscanf_r+0x2b4>
 8030730:	2203      	movs	r2, #3
 8030732:	4650      	mov	r0, sl
 8030734:	f7df fd64 	bl	8010200 <memchr>
 8030738:	b138      	cbz	r0, 803074a <__ssvfiscanf_r+0xd6>
 803073a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 803073c:	eba0 000a 	sub.w	r0, r0, sl
 8030740:	2301      	movs	r3, #1
 8030742:	4083      	lsls	r3, r0
 8030744:	4313      	orrs	r3, r2
 8030746:	9341      	str	r3, [sp, #260]	@ 0x104
 8030748:	464d      	mov	r5, r9
 803074a:	f815 3b01 	ldrb.w	r3, [r5], #1
 803074e:	2b78      	cmp	r3, #120	@ 0x78
 8030750:	d806      	bhi.n	8030760 <__ssvfiscanf_r+0xec>
 8030752:	2b57      	cmp	r3, #87	@ 0x57
 8030754:	d810      	bhi.n	8030778 <__ssvfiscanf_r+0x104>
 8030756:	2b25      	cmp	r3, #37	@ 0x25
 8030758:	d0c5      	beq.n	80306e6 <__ssvfiscanf_r+0x72>
 803075a:	d857      	bhi.n	803080c <__ssvfiscanf_r+0x198>
 803075c:	2b00      	cmp	r3, #0
 803075e:	d065      	beq.n	803082c <__ssvfiscanf_r+0x1b8>
 8030760:	2303      	movs	r3, #3
 8030762:	9347      	str	r3, [sp, #284]	@ 0x11c
 8030764:	230a      	movs	r3, #10
 8030766:	9342      	str	r3, [sp, #264]	@ 0x108
 8030768:	e078      	b.n	803085c <__ssvfiscanf_r+0x1e8>
 803076a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 803076c:	fb02 1103 	mla	r1, r2, r3, r1
 8030770:	3930      	subs	r1, #48	@ 0x30
 8030772:	9143      	str	r1, [sp, #268]	@ 0x10c
 8030774:	464d      	mov	r5, r9
 8030776:	e7d2      	b.n	803071e <__ssvfiscanf_r+0xaa>
 8030778:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 803077c:	2a20      	cmp	r2, #32
 803077e:	d8ef      	bhi.n	8030760 <__ssvfiscanf_r+0xec>
 8030780:	a101      	add	r1, pc, #4	@ (adr r1, 8030788 <__ssvfiscanf_r+0x114>)
 8030782:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8030786:	bf00      	nop
 8030788:	0803083b 	.word	0x0803083b
 803078c:	08030761 	.word	0x08030761
 8030790:	08030761 	.word	0x08030761
 8030794:	08030895 	.word	0x08030895
 8030798:	08030761 	.word	0x08030761
 803079c:	08030761 	.word	0x08030761
 80307a0:	08030761 	.word	0x08030761
 80307a4:	08030761 	.word	0x08030761
 80307a8:	08030761 	.word	0x08030761
 80307ac:	08030761 	.word	0x08030761
 80307b0:	08030761 	.word	0x08030761
 80307b4:	080308ab 	.word	0x080308ab
 80307b8:	08030891 	.word	0x08030891
 80307bc:	08030813 	.word	0x08030813
 80307c0:	08030813 	.word	0x08030813
 80307c4:	08030813 	.word	0x08030813
 80307c8:	08030761 	.word	0x08030761
 80307cc:	0803084d 	.word	0x0803084d
 80307d0:	08030761 	.word	0x08030761
 80307d4:	08030761 	.word	0x08030761
 80307d8:	08030761 	.word	0x08030761
 80307dc:	08030761 	.word	0x08030761
 80307e0:	080308bb 	.word	0x080308bb
 80307e4:	08030855 	.word	0x08030855
 80307e8:	08030833 	.word	0x08030833
 80307ec:	08030761 	.word	0x08030761
 80307f0:	08030761 	.word	0x08030761
 80307f4:	080308b7 	.word	0x080308b7
 80307f8:	08030761 	.word	0x08030761
 80307fc:	08030891 	.word	0x08030891
 8030800:	08030761 	.word	0x08030761
 8030804:	08030761 	.word	0x08030761
 8030808:	0803083b 	.word	0x0803083b
 803080c:	3b45      	subs	r3, #69	@ 0x45
 803080e:	2b02      	cmp	r3, #2
 8030810:	d8a6      	bhi.n	8030760 <__ssvfiscanf_r+0xec>
 8030812:	2305      	movs	r3, #5
 8030814:	e021      	b.n	803085a <__ssvfiscanf_r+0x1e6>
 8030816:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8030818:	4621      	mov	r1, r4
 803081a:	4630      	mov	r0, r6
 803081c:	4798      	blx	r3
 803081e:	2800      	cmp	r0, #0
 8030820:	f43f af66 	beq.w	80306f0 <__ssvfiscanf_r+0x7c>
 8030824:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8030826:	2800      	cmp	r0, #0
 8030828:	f040 808b 	bne.w	8030942 <__ssvfiscanf_r+0x2ce>
 803082c:	f04f 30ff 	mov.w	r0, #4294967295
 8030830:	e08b      	b.n	803094a <__ssvfiscanf_r+0x2d6>
 8030832:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8030834:	f042 0220 	orr.w	r2, r2, #32
 8030838:	9241      	str	r2, [sp, #260]	@ 0x104
 803083a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 803083c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8030840:	9241      	str	r2, [sp, #260]	@ 0x104
 8030842:	2210      	movs	r2, #16
 8030844:	2b6e      	cmp	r3, #110	@ 0x6e
 8030846:	9242      	str	r2, [sp, #264]	@ 0x108
 8030848:	d902      	bls.n	8030850 <__ssvfiscanf_r+0x1dc>
 803084a:	e005      	b.n	8030858 <__ssvfiscanf_r+0x1e4>
 803084c:	2300      	movs	r3, #0
 803084e:	9342      	str	r3, [sp, #264]	@ 0x108
 8030850:	2303      	movs	r3, #3
 8030852:	e002      	b.n	803085a <__ssvfiscanf_r+0x1e6>
 8030854:	2308      	movs	r3, #8
 8030856:	9342      	str	r3, [sp, #264]	@ 0x108
 8030858:	2304      	movs	r3, #4
 803085a:	9347      	str	r3, [sp, #284]	@ 0x11c
 803085c:	6863      	ldr	r3, [r4, #4]
 803085e:	2b00      	cmp	r3, #0
 8030860:	dd39      	ble.n	80308d6 <__ssvfiscanf_r+0x262>
 8030862:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8030864:	0659      	lsls	r1, r3, #25
 8030866:	d404      	bmi.n	8030872 <__ssvfiscanf_r+0x1fe>
 8030868:	6823      	ldr	r3, [r4, #0]
 803086a:	781a      	ldrb	r2, [r3, #0]
 803086c:	5cba      	ldrb	r2, [r7, r2]
 803086e:	0712      	lsls	r2, r2, #28
 8030870:	d438      	bmi.n	80308e4 <__ssvfiscanf_r+0x270>
 8030872:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8030874:	2b02      	cmp	r3, #2
 8030876:	dc47      	bgt.n	8030908 <__ssvfiscanf_r+0x294>
 8030878:	466b      	mov	r3, sp
 803087a:	4622      	mov	r2, r4
 803087c:	a941      	add	r1, sp, #260	@ 0x104
 803087e:	4630      	mov	r0, r6
 8030880:	f000 f9ae 	bl	8030be0 <_scanf_chars>
 8030884:	2801      	cmp	r0, #1
 8030886:	d064      	beq.n	8030952 <__ssvfiscanf_r+0x2de>
 8030888:	2802      	cmp	r0, #2
 803088a:	f47f af18 	bne.w	80306be <__ssvfiscanf_r+0x4a>
 803088e:	e7c9      	b.n	8030824 <__ssvfiscanf_r+0x1b0>
 8030890:	220a      	movs	r2, #10
 8030892:	e7d7      	b.n	8030844 <__ssvfiscanf_r+0x1d0>
 8030894:	4629      	mov	r1, r5
 8030896:	4640      	mov	r0, r8
 8030898:	f000 fbfe 	bl	8031098 <__sccl>
 803089c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 803089e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80308a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80308a4:	4605      	mov	r5, r0
 80308a6:	2301      	movs	r3, #1
 80308a8:	e7d7      	b.n	803085a <__ssvfiscanf_r+0x1e6>
 80308aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80308ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80308b0:	9341      	str	r3, [sp, #260]	@ 0x104
 80308b2:	2300      	movs	r3, #0
 80308b4:	e7d1      	b.n	803085a <__ssvfiscanf_r+0x1e6>
 80308b6:	2302      	movs	r3, #2
 80308b8:	e7cf      	b.n	803085a <__ssvfiscanf_r+0x1e6>
 80308ba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80308bc:	06c3      	lsls	r3, r0, #27
 80308be:	f53f aefe 	bmi.w	80306be <__ssvfiscanf_r+0x4a>
 80308c2:	9b00      	ldr	r3, [sp, #0]
 80308c4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80308c6:	1d19      	adds	r1, r3, #4
 80308c8:	9100      	str	r1, [sp, #0]
 80308ca:	681b      	ldr	r3, [r3, #0]
 80308cc:	07c0      	lsls	r0, r0, #31
 80308ce:	bf4c      	ite	mi
 80308d0:	801a      	strhmi	r2, [r3, #0]
 80308d2:	601a      	strpl	r2, [r3, #0]
 80308d4:	e6f3      	b.n	80306be <__ssvfiscanf_r+0x4a>
 80308d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80308d8:	4621      	mov	r1, r4
 80308da:	4630      	mov	r0, r6
 80308dc:	4798      	blx	r3
 80308de:	2800      	cmp	r0, #0
 80308e0:	d0bf      	beq.n	8030862 <__ssvfiscanf_r+0x1ee>
 80308e2:	e79f      	b.n	8030824 <__ssvfiscanf_r+0x1b0>
 80308e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80308e6:	3201      	adds	r2, #1
 80308e8:	9245      	str	r2, [sp, #276]	@ 0x114
 80308ea:	6862      	ldr	r2, [r4, #4]
 80308ec:	3a01      	subs	r2, #1
 80308ee:	2a00      	cmp	r2, #0
 80308f0:	6062      	str	r2, [r4, #4]
 80308f2:	dd02      	ble.n	80308fa <__ssvfiscanf_r+0x286>
 80308f4:	3301      	adds	r3, #1
 80308f6:	6023      	str	r3, [r4, #0]
 80308f8:	e7b6      	b.n	8030868 <__ssvfiscanf_r+0x1f4>
 80308fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80308fc:	4621      	mov	r1, r4
 80308fe:	4630      	mov	r0, r6
 8030900:	4798      	blx	r3
 8030902:	2800      	cmp	r0, #0
 8030904:	d0b0      	beq.n	8030868 <__ssvfiscanf_r+0x1f4>
 8030906:	e78d      	b.n	8030824 <__ssvfiscanf_r+0x1b0>
 8030908:	2b04      	cmp	r3, #4
 803090a:	dc0f      	bgt.n	803092c <__ssvfiscanf_r+0x2b8>
 803090c:	466b      	mov	r3, sp
 803090e:	4622      	mov	r2, r4
 8030910:	a941      	add	r1, sp, #260	@ 0x104
 8030912:	4630      	mov	r0, r6
 8030914:	f000 f9be 	bl	8030c94 <_scanf_i>
 8030918:	e7b4      	b.n	8030884 <__ssvfiscanf_r+0x210>
 803091a:	bf00      	nop
 803091c:	080305c5 	.word	0x080305c5
 8030920:	0803063b 	.word	0x0803063b
 8030924:	08035019 	.word	0x08035019
 8030928:	0803511f 	.word	0x0803511f
 803092c:	4b0a      	ldr	r3, [pc, #40]	@ (8030958 <__ssvfiscanf_r+0x2e4>)
 803092e:	2b00      	cmp	r3, #0
 8030930:	f43f aec5 	beq.w	80306be <__ssvfiscanf_r+0x4a>
 8030934:	466b      	mov	r3, sp
 8030936:	4622      	mov	r2, r4
 8030938:	a941      	add	r1, sp, #260	@ 0x104
 803093a:	4630      	mov	r0, r6
 803093c:	f7fc fcac 	bl	802d298 <_scanf_float>
 8030940:	e7a0      	b.n	8030884 <__ssvfiscanf_r+0x210>
 8030942:	89a3      	ldrh	r3, [r4, #12]
 8030944:	065b      	lsls	r3, r3, #25
 8030946:	f53f af71 	bmi.w	803082c <__ssvfiscanf_r+0x1b8>
 803094a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 803094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030952:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8030954:	e7f9      	b.n	803094a <__ssvfiscanf_r+0x2d6>
 8030956:	bf00      	nop
 8030958:	0802d299 	.word	0x0802d299

0803095c <__sfputc_r>:
 803095c:	6893      	ldr	r3, [r2, #8]
 803095e:	3b01      	subs	r3, #1
 8030960:	2b00      	cmp	r3, #0
 8030962:	b410      	push	{r4}
 8030964:	6093      	str	r3, [r2, #8]
 8030966:	da08      	bge.n	803097a <__sfputc_r+0x1e>
 8030968:	6994      	ldr	r4, [r2, #24]
 803096a:	42a3      	cmp	r3, r4
 803096c:	db01      	blt.n	8030972 <__sfputc_r+0x16>
 803096e:	290a      	cmp	r1, #10
 8030970:	d103      	bne.n	803097a <__sfputc_r+0x1e>
 8030972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030976:	f7fd b84c 	b.w	802da12 <__swbuf_r>
 803097a:	6813      	ldr	r3, [r2, #0]
 803097c:	1c58      	adds	r0, r3, #1
 803097e:	6010      	str	r0, [r2, #0]
 8030980:	7019      	strb	r1, [r3, #0]
 8030982:	4608      	mov	r0, r1
 8030984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030988:	4770      	bx	lr

0803098a <__sfputs_r>:
 803098a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803098c:	4606      	mov	r6, r0
 803098e:	460f      	mov	r7, r1
 8030990:	4614      	mov	r4, r2
 8030992:	18d5      	adds	r5, r2, r3
 8030994:	42ac      	cmp	r4, r5
 8030996:	d101      	bne.n	803099c <__sfputs_r+0x12>
 8030998:	2000      	movs	r0, #0
 803099a:	e007      	b.n	80309ac <__sfputs_r+0x22>
 803099c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80309a0:	463a      	mov	r2, r7
 80309a2:	4630      	mov	r0, r6
 80309a4:	f7ff ffda 	bl	803095c <__sfputc_r>
 80309a8:	1c43      	adds	r3, r0, #1
 80309aa:	d1f3      	bne.n	8030994 <__sfputs_r+0xa>
 80309ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080309b0 <_vfiprintf_r>:
 80309b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80309b4:	460d      	mov	r5, r1
 80309b6:	b09d      	sub	sp, #116	@ 0x74
 80309b8:	4614      	mov	r4, r2
 80309ba:	4698      	mov	r8, r3
 80309bc:	4606      	mov	r6, r0
 80309be:	b118      	cbz	r0, 80309c8 <_vfiprintf_r+0x18>
 80309c0:	6a03      	ldr	r3, [r0, #32]
 80309c2:	b90b      	cbnz	r3, 80309c8 <_vfiprintf_r+0x18>
 80309c4:	f7fc ff08 	bl	802d7d8 <__sinit>
 80309c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80309ca:	07d9      	lsls	r1, r3, #31
 80309cc:	d405      	bmi.n	80309da <_vfiprintf_r+0x2a>
 80309ce:	89ab      	ldrh	r3, [r5, #12]
 80309d0:	059a      	lsls	r2, r3, #22
 80309d2:	d402      	bmi.n	80309da <_vfiprintf_r+0x2a>
 80309d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80309d6:	f7fd faa6 	bl	802df26 <__retarget_lock_acquire_recursive>
 80309da:	89ab      	ldrh	r3, [r5, #12]
 80309dc:	071b      	lsls	r3, r3, #28
 80309de:	d501      	bpl.n	80309e4 <_vfiprintf_r+0x34>
 80309e0:	692b      	ldr	r3, [r5, #16]
 80309e2:	b99b      	cbnz	r3, 8030a0c <_vfiprintf_r+0x5c>
 80309e4:	4629      	mov	r1, r5
 80309e6:	4630      	mov	r0, r6
 80309e8:	f7fd f852 	bl	802da90 <__swsetup_r>
 80309ec:	b170      	cbz	r0, 8030a0c <_vfiprintf_r+0x5c>
 80309ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80309f0:	07dc      	lsls	r4, r3, #31
 80309f2:	d504      	bpl.n	80309fe <_vfiprintf_r+0x4e>
 80309f4:	f04f 30ff 	mov.w	r0, #4294967295
 80309f8:	b01d      	add	sp, #116	@ 0x74
 80309fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80309fe:	89ab      	ldrh	r3, [r5, #12]
 8030a00:	0598      	lsls	r0, r3, #22
 8030a02:	d4f7      	bmi.n	80309f4 <_vfiprintf_r+0x44>
 8030a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8030a06:	f7fd fa8f 	bl	802df28 <__retarget_lock_release_recursive>
 8030a0a:	e7f3      	b.n	80309f4 <_vfiprintf_r+0x44>
 8030a0c:	2300      	movs	r3, #0
 8030a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8030a10:	2320      	movs	r3, #32
 8030a12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8030a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8030a1a:	2330      	movs	r3, #48	@ 0x30
 8030a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8030bcc <_vfiprintf_r+0x21c>
 8030a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8030a24:	f04f 0901 	mov.w	r9, #1
 8030a28:	4623      	mov	r3, r4
 8030a2a:	469a      	mov	sl, r3
 8030a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030a30:	b10a      	cbz	r2, 8030a36 <_vfiprintf_r+0x86>
 8030a32:	2a25      	cmp	r2, #37	@ 0x25
 8030a34:	d1f9      	bne.n	8030a2a <_vfiprintf_r+0x7a>
 8030a36:	ebba 0b04 	subs.w	fp, sl, r4
 8030a3a:	d00b      	beq.n	8030a54 <_vfiprintf_r+0xa4>
 8030a3c:	465b      	mov	r3, fp
 8030a3e:	4622      	mov	r2, r4
 8030a40:	4629      	mov	r1, r5
 8030a42:	4630      	mov	r0, r6
 8030a44:	f7ff ffa1 	bl	803098a <__sfputs_r>
 8030a48:	3001      	adds	r0, #1
 8030a4a:	f000 80a7 	beq.w	8030b9c <_vfiprintf_r+0x1ec>
 8030a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8030a50:	445a      	add	r2, fp
 8030a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8030a54:	f89a 3000 	ldrb.w	r3, [sl]
 8030a58:	2b00      	cmp	r3, #0
 8030a5a:	f000 809f 	beq.w	8030b9c <_vfiprintf_r+0x1ec>
 8030a5e:	2300      	movs	r3, #0
 8030a60:	f04f 32ff 	mov.w	r2, #4294967295
 8030a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030a68:	f10a 0a01 	add.w	sl, sl, #1
 8030a6c:	9304      	str	r3, [sp, #16]
 8030a6e:	9307      	str	r3, [sp, #28]
 8030a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8030a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8030a76:	4654      	mov	r4, sl
 8030a78:	2205      	movs	r2, #5
 8030a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030a7e:	4853      	ldr	r0, [pc, #332]	@ (8030bcc <_vfiprintf_r+0x21c>)
 8030a80:	f7df fbbe 	bl	8010200 <memchr>
 8030a84:	9a04      	ldr	r2, [sp, #16]
 8030a86:	b9d8      	cbnz	r0, 8030ac0 <_vfiprintf_r+0x110>
 8030a88:	06d1      	lsls	r1, r2, #27
 8030a8a:	bf44      	itt	mi
 8030a8c:	2320      	movmi	r3, #32
 8030a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8030a92:	0713      	lsls	r3, r2, #28
 8030a94:	bf44      	itt	mi
 8030a96:	232b      	movmi	r3, #43	@ 0x2b
 8030a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8030a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8030aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8030aa2:	d015      	beq.n	8030ad0 <_vfiprintf_r+0x120>
 8030aa4:	9a07      	ldr	r2, [sp, #28]
 8030aa6:	4654      	mov	r4, sl
 8030aa8:	2000      	movs	r0, #0
 8030aaa:	f04f 0c0a 	mov.w	ip, #10
 8030aae:	4621      	mov	r1, r4
 8030ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030ab4:	3b30      	subs	r3, #48	@ 0x30
 8030ab6:	2b09      	cmp	r3, #9
 8030ab8:	d94b      	bls.n	8030b52 <_vfiprintf_r+0x1a2>
 8030aba:	b1b0      	cbz	r0, 8030aea <_vfiprintf_r+0x13a>
 8030abc:	9207      	str	r2, [sp, #28]
 8030abe:	e014      	b.n	8030aea <_vfiprintf_r+0x13a>
 8030ac0:	eba0 0308 	sub.w	r3, r0, r8
 8030ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8030ac8:	4313      	orrs	r3, r2
 8030aca:	9304      	str	r3, [sp, #16]
 8030acc:	46a2      	mov	sl, r4
 8030ace:	e7d2      	b.n	8030a76 <_vfiprintf_r+0xc6>
 8030ad0:	9b03      	ldr	r3, [sp, #12]
 8030ad2:	1d19      	adds	r1, r3, #4
 8030ad4:	681b      	ldr	r3, [r3, #0]
 8030ad6:	9103      	str	r1, [sp, #12]
 8030ad8:	2b00      	cmp	r3, #0
 8030ada:	bfbb      	ittet	lt
 8030adc:	425b      	neglt	r3, r3
 8030ade:	f042 0202 	orrlt.w	r2, r2, #2
 8030ae2:	9307      	strge	r3, [sp, #28]
 8030ae4:	9307      	strlt	r3, [sp, #28]
 8030ae6:	bfb8      	it	lt
 8030ae8:	9204      	strlt	r2, [sp, #16]
 8030aea:	7823      	ldrb	r3, [r4, #0]
 8030aec:	2b2e      	cmp	r3, #46	@ 0x2e
 8030aee:	d10a      	bne.n	8030b06 <_vfiprintf_r+0x156>
 8030af0:	7863      	ldrb	r3, [r4, #1]
 8030af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8030af4:	d132      	bne.n	8030b5c <_vfiprintf_r+0x1ac>
 8030af6:	9b03      	ldr	r3, [sp, #12]
 8030af8:	1d1a      	adds	r2, r3, #4
 8030afa:	681b      	ldr	r3, [r3, #0]
 8030afc:	9203      	str	r2, [sp, #12]
 8030afe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8030b02:	3402      	adds	r4, #2
 8030b04:	9305      	str	r3, [sp, #20]
 8030b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8030bdc <_vfiprintf_r+0x22c>
 8030b0a:	7821      	ldrb	r1, [r4, #0]
 8030b0c:	2203      	movs	r2, #3
 8030b0e:	4650      	mov	r0, sl
 8030b10:	f7df fb76 	bl	8010200 <memchr>
 8030b14:	b138      	cbz	r0, 8030b26 <_vfiprintf_r+0x176>
 8030b16:	9b04      	ldr	r3, [sp, #16]
 8030b18:	eba0 000a 	sub.w	r0, r0, sl
 8030b1c:	2240      	movs	r2, #64	@ 0x40
 8030b1e:	4082      	lsls	r2, r0
 8030b20:	4313      	orrs	r3, r2
 8030b22:	3401      	adds	r4, #1
 8030b24:	9304      	str	r3, [sp, #16]
 8030b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030b2a:	4829      	ldr	r0, [pc, #164]	@ (8030bd0 <_vfiprintf_r+0x220>)
 8030b2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8030b30:	2206      	movs	r2, #6
 8030b32:	f7df fb65 	bl	8010200 <memchr>
 8030b36:	2800      	cmp	r0, #0
 8030b38:	d03f      	beq.n	8030bba <_vfiprintf_r+0x20a>
 8030b3a:	4b26      	ldr	r3, [pc, #152]	@ (8030bd4 <_vfiprintf_r+0x224>)
 8030b3c:	bb1b      	cbnz	r3, 8030b86 <_vfiprintf_r+0x1d6>
 8030b3e:	9b03      	ldr	r3, [sp, #12]
 8030b40:	3307      	adds	r3, #7
 8030b42:	f023 0307 	bic.w	r3, r3, #7
 8030b46:	3308      	adds	r3, #8
 8030b48:	9303      	str	r3, [sp, #12]
 8030b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8030b4c:	443b      	add	r3, r7
 8030b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8030b50:	e76a      	b.n	8030a28 <_vfiprintf_r+0x78>
 8030b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8030b56:	460c      	mov	r4, r1
 8030b58:	2001      	movs	r0, #1
 8030b5a:	e7a8      	b.n	8030aae <_vfiprintf_r+0xfe>
 8030b5c:	2300      	movs	r3, #0
 8030b5e:	3401      	adds	r4, #1
 8030b60:	9305      	str	r3, [sp, #20]
 8030b62:	4619      	mov	r1, r3
 8030b64:	f04f 0c0a 	mov.w	ip, #10
 8030b68:	4620      	mov	r0, r4
 8030b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030b6e:	3a30      	subs	r2, #48	@ 0x30
 8030b70:	2a09      	cmp	r2, #9
 8030b72:	d903      	bls.n	8030b7c <_vfiprintf_r+0x1cc>
 8030b74:	2b00      	cmp	r3, #0
 8030b76:	d0c6      	beq.n	8030b06 <_vfiprintf_r+0x156>
 8030b78:	9105      	str	r1, [sp, #20]
 8030b7a:	e7c4      	b.n	8030b06 <_vfiprintf_r+0x156>
 8030b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8030b80:	4604      	mov	r4, r0
 8030b82:	2301      	movs	r3, #1
 8030b84:	e7f0      	b.n	8030b68 <_vfiprintf_r+0x1b8>
 8030b86:	ab03      	add	r3, sp, #12
 8030b88:	9300      	str	r3, [sp, #0]
 8030b8a:	462a      	mov	r2, r5
 8030b8c:	4b12      	ldr	r3, [pc, #72]	@ (8030bd8 <_vfiprintf_r+0x228>)
 8030b8e:	a904      	add	r1, sp, #16
 8030b90:	4630      	mov	r0, r6
 8030b92:	f7fb ffc9 	bl	802cb28 <_printf_float>
 8030b96:	4607      	mov	r7, r0
 8030b98:	1c78      	adds	r0, r7, #1
 8030b9a:	d1d6      	bne.n	8030b4a <_vfiprintf_r+0x19a>
 8030b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8030b9e:	07d9      	lsls	r1, r3, #31
 8030ba0:	d405      	bmi.n	8030bae <_vfiprintf_r+0x1fe>
 8030ba2:	89ab      	ldrh	r3, [r5, #12]
 8030ba4:	059a      	lsls	r2, r3, #22
 8030ba6:	d402      	bmi.n	8030bae <_vfiprintf_r+0x1fe>
 8030ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8030baa:	f7fd f9bd 	bl	802df28 <__retarget_lock_release_recursive>
 8030bae:	89ab      	ldrh	r3, [r5, #12]
 8030bb0:	065b      	lsls	r3, r3, #25
 8030bb2:	f53f af1f 	bmi.w	80309f4 <_vfiprintf_r+0x44>
 8030bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8030bb8:	e71e      	b.n	80309f8 <_vfiprintf_r+0x48>
 8030bba:	ab03      	add	r3, sp, #12
 8030bbc:	9300      	str	r3, [sp, #0]
 8030bbe:	462a      	mov	r2, r5
 8030bc0:	4b05      	ldr	r3, [pc, #20]	@ (8030bd8 <_vfiprintf_r+0x228>)
 8030bc2:	a904      	add	r1, sp, #16
 8030bc4:	4630      	mov	r0, r6
 8030bc6:	f7fc fa47 	bl	802d058 <_printf_i>
 8030bca:	e7e4      	b.n	8030b96 <_vfiprintf_r+0x1e6>
 8030bcc:	08035119 	.word	0x08035119
 8030bd0:	08035123 	.word	0x08035123
 8030bd4:	0802cb29 	.word	0x0802cb29
 8030bd8:	0803098b 	.word	0x0803098b
 8030bdc:	0803511f 	.word	0x0803511f

08030be0 <_scanf_chars>:
 8030be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030be4:	4615      	mov	r5, r2
 8030be6:	688a      	ldr	r2, [r1, #8]
 8030be8:	4680      	mov	r8, r0
 8030bea:	460c      	mov	r4, r1
 8030bec:	b932      	cbnz	r2, 8030bfc <_scanf_chars+0x1c>
 8030bee:	698a      	ldr	r2, [r1, #24]
 8030bf0:	2a00      	cmp	r2, #0
 8030bf2:	bf14      	ite	ne
 8030bf4:	f04f 32ff 	movne.w	r2, #4294967295
 8030bf8:	2201      	moveq	r2, #1
 8030bfa:	608a      	str	r2, [r1, #8]
 8030bfc:	6822      	ldr	r2, [r4, #0]
 8030bfe:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8030c90 <_scanf_chars+0xb0>
 8030c02:	06d1      	lsls	r1, r2, #27
 8030c04:	bf5f      	itttt	pl
 8030c06:	681a      	ldrpl	r2, [r3, #0]
 8030c08:	1d11      	addpl	r1, r2, #4
 8030c0a:	6019      	strpl	r1, [r3, #0]
 8030c0c:	6816      	ldrpl	r6, [r2, #0]
 8030c0e:	2700      	movs	r7, #0
 8030c10:	69a0      	ldr	r0, [r4, #24]
 8030c12:	b188      	cbz	r0, 8030c38 <_scanf_chars+0x58>
 8030c14:	2801      	cmp	r0, #1
 8030c16:	d107      	bne.n	8030c28 <_scanf_chars+0x48>
 8030c18:	682b      	ldr	r3, [r5, #0]
 8030c1a:	781a      	ldrb	r2, [r3, #0]
 8030c1c:	6963      	ldr	r3, [r4, #20]
 8030c1e:	5c9b      	ldrb	r3, [r3, r2]
 8030c20:	b953      	cbnz	r3, 8030c38 <_scanf_chars+0x58>
 8030c22:	2f00      	cmp	r7, #0
 8030c24:	d031      	beq.n	8030c8a <_scanf_chars+0xaa>
 8030c26:	e022      	b.n	8030c6e <_scanf_chars+0x8e>
 8030c28:	2802      	cmp	r0, #2
 8030c2a:	d120      	bne.n	8030c6e <_scanf_chars+0x8e>
 8030c2c:	682b      	ldr	r3, [r5, #0]
 8030c2e:	781b      	ldrb	r3, [r3, #0]
 8030c30:	f819 3003 	ldrb.w	r3, [r9, r3]
 8030c34:	071b      	lsls	r3, r3, #28
 8030c36:	d41a      	bmi.n	8030c6e <_scanf_chars+0x8e>
 8030c38:	6823      	ldr	r3, [r4, #0]
 8030c3a:	06da      	lsls	r2, r3, #27
 8030c3c:	bf5e      	ittt	pl
 8030c3e:	682b      	ldrpl	r3, [r5, #0]
 8030c40:	781b      	ldrbpl	r3, [r3, #0]
 8030c42:	f806 3b01 	strbpl.w	r3, [r6], #1
 8030c46:	682a      	ldr	r2, [r5, #0]
 8030c48:	686b      	ldr	r3, [r5, #4]
 8030c4a:	3201      	adds	r2, #1
 8030c4c:	602a      	str	r2, [r5, #0]
 8030c4e:	68a2      	ldr	r2, [r4, #8]
 8030c50:	3b01      	subs	r3, #1
 8030c52:	3a01      	subs	r2, #1
 8030c54:	606b      	str	r3, [r5, #4]
 8030c56:	3701      	adds	r7, #1
 8030c58:	60a2      	str	r2, [r4, #8]
 8030c5a:	b142      	cbz	r2, 8030c6e <_scanf_chars+0x8e>
 8030c5c:	2b00      	cmp	r3, #0
 8030c5e:	dcd7      	bgt.n	8030c10 <_scanf_chars+0x30>
 8030c60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8030c64:	4629      	mov	r1, r5
 8030c66:	4640      	mov	r0, r8
 8030c68:	4798      	blx	r3
 8030c6a:	2800      	cmp	r0, #0
 8030c6c:	d0d0      	beq.n	8030c10 <_scanf_chars+0x30>
 8030c6e:	6823      	ldr	r3, [r4, #0]
 8030c70:	f013 0310 	ands.w	r3, r3, #16
 8030c74:	d105      	bne.n	8030c82 <_scanf_chars+0xa2>
 8030c76:	68e2      	ldr	r2, [r4, #12]
 8030c78:	3201      	adds	r2, #1
 8030c7a:	60e2      	str	r2, [r4, #12]
 8030c7c:	69a2      	ldr	r2, [r4, #24]
 8030c7e:	b102      	cbz	r2, 8030c82 <_scanf_chars+0xa2>
 8030c80:	7033      	strb	r3, [r6, #0]
 8030c82:	6923      	ldr	r3, [r4, #16]
 8030c84:	443b      	add	r3, r7
 8030c86:	6123      	str	r3, [r4, #16]
 8030c88:	2000      	movs	r0, #0
 8030c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030c8e:	bf00      	nop
 8030c90:	08035019 	.word	0x08035019

08030c94 <_scanf_i>:
 8030c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030c98:	4698      	mov	r8, r3
 8030c9a:	4b74      	ldr	r3, [pc, #464]	@ (8030e6c <_scanf_i+0x1d8>)
 8030c9c:	460c      	mov	r4, r1
 8030c9e:	4682      	mov	sl, r0
 8030ca0:	4616      	mov	r6, r2
 8030ca2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030ca6:	b087      	sub	sp, #28
 8030ca8:	ab03      	add	r3, sp, #12
 8030caa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8030cae:	4b70      	ldr	r3, [pc, #448]	@ (8030e70 <_scanf_i+0x1dc>)
 8030cb0:	69a1      	ldr	r1, [r4, #24]
 8030cb2:	4a70      	ldr	r2, [pc, #448]	@ (8030e74 <_scanf_i+0x1e0>)
 8030cb4:	2903      	cmp	r1, #3
 8030cb6:	bf08      	it	eq
 8030cb8:	461a      	moveq	r2, r3
 8030cba:	68a3      	ldr	r3, [r4, #8]
 8030cbc:	9201      	str	r2, [sp, #4]
 8030cbe:	1e5a      	subs	r2, r3, #1
 8030cc0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8030cc4:	bf88      	it	hi
 8030cc6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8030cca:	4627      	mov	r7, r4
 8030ccc:	bf82      	ittt	hi
 8030cce:	eb03 0905 	addhi.w	r9, r3, r5
 8030cd2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8030cd6:	60a3      	strhi	r3, [r4, #8]
 8030cd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8030cdc:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8030ce0:	bf98      	it	ls
 8030ce2:	f04f 0900 	movls.w	r9, #0
 8030ce6:	6023      	str	r3, [r4, #0]
 8030ce8:	463d      	mov	r5, r7
 8030cea:	f04f 0b00 	mov.w	fp, #0
 8030cee:	6831      	ldr	r1, [r6, #0]
 8030cf0:	ab03      	add	r3, sp, #12
 8030cf2:	7809      	ldrb	r1, [r1, #0]
 8030cf4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8030cf8:	2202      	movs	r2, #2
 8030cfa:	f7df fa81 	bl	8010200 <memchr>
 8030cfe:	b328      	cbz	r0, 8030d4c <_scanf_i+0xb8>
 8030d00:	f1bb 0f01 	cmp.w	fp, #1
 8030d04:	d159      	bne.n	8030dba <_scanf_i+0x126>
 8030d06:	6862      	ldr	r2, [r4, #4]
 8030d08:	b92a      	cbnz	r2, 8030d16 <_scanf_i+0x82>
 8030d0a:	6822      	ldr	r2, [r4, #0]
 8030d0c:	2108      	movs	r1, #8
 8030d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8030d12:	6061      	str	r1, [r4, #4]
 8030d14:	6022      	str	r2, [r4, #0]
 8030d16:	6822      	ldr	r2, [r4, #0]
 8030d18:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8030d1c:	6022      	str	r2, [r4, #0]
 8030d1e:	68a2      	ldr	r2, [r4, #8]
 8030d20:	1e51      	subs	r1, r2, #1
 8030d22:	60a1      	str	r1, [r4, #8]
 8030d24:	b192      	cbz	r2, 8030d4c <_scanf_i+0xb8>
 8030d26:	6832      	ldr	r2, [r6, #0]
 8030d28:	1c51      	adds	r1, r2, #1
 8030d2a:	6031      	str	r1, [r6, #0]
 8030d2c:	7812      	ldrb	r2, [r2, #0]
 8030d2e:	f805 2b01 	strb.w	r2, [r5], #1
 8030d32:	6872      	ldr	r2, [r6, #4]
 8030d34:	3a01      	subs	r2, #1
 8030d36:	2a00      	cmp	r2, #0
 8030d38:	6072      	str	r2, [r6, #4]
 8030d3a:	dc07      	bgt.n	8030d4c <_scanf_i+0xb8>
 8030d3c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8030d40:	4631      	mov	r1, r6
 8030d42:	4650      	mov	r0, sl
 8030d44:	4790      	blx	r2
 8030d46:	2800      	cmp	r0, #0
 8030d48:	f040 8085 	bne.w	8030e56 <_scanf_i+0x1c2>
 8030d4c:	f10b 0b01 	add.w	fp, fp, #1
 8030d50:	f1bb 0f03 	cmp.w	fp, #3
 8030d54:	d1cb      	bne.n	8030cee <_scanf_i+0x5a>
 8030d56:	6863      	ldr	r3, [r4, #4]
 8030d58:	b90b      	cbnz	r3, 8030d5e <_scanf_i+0xca>
 8030d5a:	230a      	movs	r3, #10
 8030d5c:	6063      	str	r3, [r4, #4]
 8030d5e:	6863      	ldr	r3, [r4, #4]
 8030d60:	4945      	ldr	r1, [pc, #276]	@ (8030e78 <_scanf_i+0x1e4>)
 8030d62:	6960      	ldr	r0, [r4, #20]
 8030d64:	1ac9      	subs	r1, r1, r3
 8030d66:	f000 f997 	bl	8031098 <__sccl>
 8030d6a:	f04f 0b00 	mov.w	fp, #0
 8030d6e:	68a3      	ldr	r3, [r4, #8]
 8030d70:	6822      	ldr	r2, [r4, #0]
 8030d72:	2b00      	cmp	r3, #0
 8030d74:	d03d      	beq.n	8030df2 <_scanf_i+0x15e>
 8030d76:	6831      	ldr	r1, [r6, #0]
 8030d78:	6960      	ldr	r0, [r4, #20]
 8030d7a:	f891 c000 	ldrb.w	ip, [r1]
 8030d7e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8030d82:	2800      	cmp	r0, #0
 8030d84:	d035      	beq.n	8030df2 <_scanf_i+0x15e>
 8030d86:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8030d8a:	d124      	bne.n	8030dd6 <_scanf_i+0x142>
 8030d8c:	0510      	lsls	r0, r2, #20
 8030d8e:	d522      	bpl.n	8030dd6 <_scanf_i+0x142>
 8030d90:	f10b 0b01 	add.w	fp, fp, #1
 8030d94:	f1b9 0f00 	cmp.w	r9, #0
 8030d98:	d003      	beq.n	8030da2 <_scanf_i+0x10e>
 8030d9a:	3301      	adds	r3, #1
 8030d9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8030da0:	60a3      	str	r3, [r4, #8]
 8030da2:	6873      	ldr	r3, [r6, #4]
 8030da4:	3b01      	subs	r3, #1
 8030da6:	2b00      	cmp	r3, #0
 8030da8:	6073      	str	r3, [r6, #4]
 8030daa:	dd1b      	ble.n	8030de4 <_scanf_i+0x150>
 8030dac:	6833      	ldr	r3, [r6, #0]
 8030dae:	3301      	adds	r3, #1
 8030db0:	6033      	str	r3, [r6, #0]
 8030db2:	68a3      	ldr	r3, [r4, #8]
 8030db4:	3b01      	subs	r3, #1
 8030db6:	60a3      	str	r3, [r4, #8]
 8030db8:	e7d9      	b.n	8030d6e <_scanf_i+0xda>
 8030dba:	f1bb 0f02 	cmp.w	fp, #2
 8030dbe:	d1ae      	bne.n	8030d1e <_scanf_i+0x8a>
 8030dc0:	6822      	ldr	r2, [r4, #0]
 8030dc2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8030dc6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8030dca:	d1bf      	bne.n	8030d4c <_scanf_i+0xb8>
 8030dcc:	2110      	movs	r1, #16
 8030dce:	6061      	str	r1, [r4, #4]
 8030dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8030dd4:	e7a2      	b.n	8030d1c <_scanf_i+0x88>
 8030dd6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8030dda:	6022      	str	r2, [r4, #0]
 8030ddc:	780b      	ldrb	r3, [r1, #0]
 8030dde:	f805 3b01 	strb.w	r3, [r5], #1
 8030de2:	e7de      	b.n	8030da2 <_scanf_i+0x10e>
 8030de4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8030de8:	4631      	mov	r1, r6
 8030dea:	4650      	mov	r0, sl
 8030dec:	4798      	blx	r3
 8030dee:	2800      	cmp	r0, #0
 8030df0:	d0df      	beq.n	8030db2 <_scanf_i+0x11e>
 8030df2:	6823      	ldr	r3, [r4, #0]
 8030df4:	05d9      	lsls	r1, r3, #23
 8030df6:	d50d      	bpl.n	8030e14 <_scanf_i+0x180>
 8030df8:	42bd      	cmp	r5, r7
 8030dfa:	d909      	bls.n	8030e10 <_scanf_i+0x17c>
 8030dfc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8030e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8030e04:	4632      	mov	r2, r6
 8030e06:	4650      	mov	r0, sl
 8030e08:	4798      	blx	r3
 8030e0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8030e0e:	464d      	mov	r5, r9
 8030e10:	42bd      	cmp	r5, r7
 8030e12:	d028      	beq.n	8030e66 <_scanf_i+0x1d2>
 8030e14:	6822      	ldr	r2, [r4, #0]
 8030e16:	f012 0210 	ands.w	r2, r2, #16
 8030e1a:	d113      	bne.n	8030e44 <_scanf_i+0x1b0>
 8030e1c:	702a      	strb	r2, [r5, #0]
 8030e1e:	6863      	ldr	r3, [r4, #4]
 8030e20:	9e01      	ldr	r6, [sp, #4]
 8030e22:	4639      	mov	r1, r7
 8030e24:	4650      	mov	r0, sl
 8030e26:	47b0      	blx	r6
 8030e28:	f8d8 3000 	ldr.w	r3, [r8]
 8030e2c:	6821      	ldr	r1, [r4, #0]
 8030e2e:	1d1a      	adds	r2, r3, #4
 8030e30:	f8c8 2000 	str.w	r2, [r8]
 8030e34:	f011 0f20 	tst.w	r1, #32
 8030e38:	681b      	ldr	r3, [r3, #0]
 8030e3a:	d00f      	beq.n	8030e5c <_scanf_i+0x1c8>
 8030e3c:	6018      	str	r0, [r3, #0]
 8030e3e:	68e3      	ldr	r3, [r4, #12]
 8030e40:	3301      	adds	r3, #1
 8030e42:	60e3      	str	r3, [r4, #12]
 8030e44:	6923      	ldr	r3, [r4, #16]
 8030e46:	1bed      	subs	r5, r5, r7
 8030e48:	445d      	add	r5, fp
 8030e4a:	442b      	add	r3, r5
 8030e4c:	6123      	str	r3, [r4, #16]
 8030e4e:	2000      	movs	r0, #0
 8030e50:	b007      	add	sp, #28
 8030e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030e56:	f04f 0b00 	mov.w	fp, #0
 8030e5a:	e7ca      	b.n	8030df2 <_scanf_i+0x15e>
 8030e5c:	07ca      	lsls	r2, r1, #31
 8030e5e:	bf4c      	ite	mi
 8030e60:	8018      	strhmi	r0, [r3, #0]
 8030e62:	6018      	strpl	r0, [r3, #0]
 8030e64:	e7eb      	b.n	8030e3e <_scanf_i+0x1aa>
 8030e66:	2001      	movs	r0, #1
 8030e68:	e7f2      	b.n	8030e50 <_scanf_i+0x1bc>
 8030e6a:	bf00      	nop
 8030e6c:	080341bc 	.word	0x080341bc
 8030e70:	08030311 	.word	0x08030311
 8030e74:	08031a31 	.word	0x08031a31
 8030e78:	0803513a 	.word	0x0803513a

08030e7c <__sflush_r>:
 8030e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8030e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030e84:	0716      	lsls	r6, r2, #28
 8030e86:	4605      	mov	r5, r0
 8030e88:	460c      	mov	r4, r1
 8030e8a:	d454      	bmi.n	8030f36 <__sflush_r+0xba>
 8030e8c:	684b      	ldr	r3, [r1, #4]
 8030e8e:	2b00      	cmp	r3, #0
 8030e90:	dc02      	bgt.n	8030e98 <__sflush_r+0x1c>
 8030e92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8030e94:	2b00      	cmp	r3, #0
 8030e96:	dd48      	ble.n	8030f2a <__sflush_r+0xae>
 8030e98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8030e9a:	2e00      	cmp	r6, #0
 8030e9c:	d045      	beq.n	8030f2a <__sflush_r+0xae>
 8030e9e:	2300      	movs	r3, #0
 8030ea0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8030ea4:	682f      	ldr	r7, [r5, #0]
 8030ea6:	6a21      	ldr	r1, [r4, #32]
 8030ea8:	602b      	str	r3, [r5, #0]
 8030eaa:	d030      	beq.n	8030f0e <__sflush_r+0x92>
 8030eac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8030eae:	89a3      	ldrh	r3, [r4, #12]
 8030eb0:	0759      	lsls	r1, r3, #29
 8030eb2:	d505      	bpl.n	8030ec0 <__sflush_r+0x44>
 8030eb4:	6863      	ldr	r3, [r4, #4]
 8030eb6:	1ad2      	subs	r2, r2, r3
 8030eb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8030eba:	b10b      	cbz	r3, 8030ec0 <__sflush_r+0x44>
 8030ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8030ebe:	1ad2      	subs	r2, r2, r3
 8030ec0:	2300      	movs	r3, #0
 8030ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8030ec4:	6a21      	ldr	r1, [r4, #32]
 8030ec6:	4628      	mov	r0, r5
 8030ec8:	47b0      	blx	r6
 8030eca:	1c43      	adds	r3, r0, #1
 8030ecc:	89a3      	ldrh	r3, [r4, #12]
 8030ece:	d106      	bne.n	8030ede <__sflush_r+0x62>
 8030ed0:	6829      	ldr	r1, [r5, #0]
 8030ed2:	291d      	cmp	r1, #29
 8030ed4:	d82b      	bhi.n	8030f2e <__sflush_r+0xb2>
 8030ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8030f80 <__sflush_r+0x104>)
 8030ed8:	410a      	asrs	r2, r1
 8030eda:	07d6      	lsls	r6, r2, #31
 8030edc:	d427      	bmi.n	8030f2e <__sflush_r+0xb2>
 8030ede:	2200      	movs	r2, #0
 8030ee0:	6062      	str	r2, [r4, #4]
 8030ee2:	04d9      	lsls	r1, r3, #19
 8030ee4:	6922      	ldr	r2, [r4, #16]
 8030ee6:	6022      	str	r2, [r4, #0]
 8030ee8:	d504      	bpl.n	8030ef4 <__sflush_r+0x78>
 8030eea:	1c42      	adds	r2, r0, #1
 8030eec:	d101      	bne.n	8030ef2 <__sflush_r+0x76>
 8030eee:	682b      	ldr	r3, [r5, #0]
 8030ef0:	b903      	cbnz	r3, 8030ef4 <__sflush_r+0x78>
 8030ef2:	6560      	str	r0, [r4, #84]	@ 0x54
 8030ef4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8030ef6:	602f      	str	r7, [r5, #0]
 8030ef8:	b1b9      	cbz	r1, 8030f2a <__sflush_r+0xae>
 8030efa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8030efe:	4299      	cmp	r1, r3
 8030f00:	d002      	beq.n	8030f08 <__sflush_r+0x8c>
 8030f02:	4628      	mov	r0, r5
 8030f04:	f7fd fe84 	bl	802ec10 <_free_r>
 8030f08:	2300      	movs	r3, #0
 8030f0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8030f0c:	e00d      	b.n	8030f2a <__sflush_r+0xae>
 8030f0e:	2301      	movs	r3, #1
 8030f10:	4628      	mov	r0, r5
 8030f12:	47b0      	blx	r6
 8030f14:	4602      	mov	r2, r0
 8030f16:	1c50      	adds	r0, r2, #1
 8030f18:	d1c9      	bne.n	8030eae <__sflush_r+0x32>
 8030f1a:	682b      	ldr	r3, [r5, #0]
 8030f1c:	2b00      	cmp	r3, #0
 8030f1e:	d0c6      	beq.n	8030eae <__sflush_r+0x32>
 8030f20:	2b1d      	cmp	r3, #29
 8030f22:	d001      	beq.n	8030f28 <__sflush_r+0xac>
 8030f24:	2b16      	cmp	r3, #22
 8030f26:	d11e      	bne.n	8030f66 <__sflush_r+0xea>
 8030f28:	602f      	str	r7, [r5, #0]
 8030f2a:	2000      	movs	r0, #0
 8030f2c:	e022      	b.n	8030f74 <__sflush_r+0xf8>
 8030f2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030f32:	b21b      	sxth	r3, r3
 8030f34:	e01b      	b.n	8030f6e <__sflush_r+0xf2>
 8030f36:	690f      	ldr	r7, [r1, #16]
 8030f38:	2f00      	cmp	r7, #0
 8030f3a:	d0f6      	beq.n	8030f2a <__sflush_r+0xae>
 8030f3c:	0793      	lsls	r3, r2, #30
 8030f3e:	680e      	ldr	r6, [r1, #0]
 8030f40:	bf08      	it	eq
 8030f42:	694b      	ldreq	r3, [r1, #20]
 8030f44:	600f      	str	r7, [r1, #0]
 8030f46:	bf18      	it	ne
 8030f48:	2300      	movne	r3, #0
 8030f4a:	eba6 0807 	sub.w	r8, r6, r7
 8030f4e:	608b      	str	r3, [r1, #8]
 8030f50:	f1b8 0f00 	cmp.w	r8, #0
 8030f54:	dde9      	ble.n	8030f2a <__sflush_r+0xae>
 8030f56:	6a21      	ldr	r1, [r4, #32]
 8030f58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8030f5a:	4643      	mov	r3, r8
 8030f5c:	463a      	mov	r2, r7
 8030f5e:	4628      	mov	r0, r5
 8030f60:	47b0      	blx	r6
 8030f62:	2800      	cmp	r0, #0
 8030f64:	dc08      	bgt.n	8030f78 <__sflush_r+0xfc>
 8030f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030f6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8030f6e:	81a3      	strh	r3, [r4, #12]
 8030f70:	f04f 30ff 	mov.w	r0, #4294967295
 8030f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030f78:	4407      	add	r7, r0
 8030f7a:	eba8 0800 	sub.w	r8, r8, r0
 8030f7e:	e7e7      	b.n	8030f50 <__sflush_r+0xd4>
 8030f80:	dfbffffe 	.word	0xdfbffffe

08030f84 <_fflush_r>:
 8030f84:	b538      	push	{r3, r4, r5, lr}
 8030f86:	690b      	ldr	r3, [r1, #16]
 8030f88:	4605      	mov	r5, r0
 8030f8a:	460c      	mov	r4, r1
 8030f8c:	b913      	cbnz	r3, 8030f94 <_fflush_r+0x10>
 8030f8e:	2500      	movs	r5, #0
 8030f90:	4628      	mov	r0, r5
 8030f92:	bd38      	pop	{r3, r4, r5, pc}
 8030f94:	b118      	cbz	r0, 8030f9e <_fflush_r+0x1a>
 8030f96:	6a03      	ldr	r3, [r0, #32]
 8030f98:	b90b      	cbnz	r3, 8030f9e <_fflush_r+0x1a>
 8030f9a:	f7fc fc1d 	bl	802d7d8 <__sinit>
 8030f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030fa2:	2b00      	cmp	r3, #0
 8030fa4:	d0f3      	beq.n	8030f8e <_fflush_r+0xa>
 8030fa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8030fa8:	07d0      	lsls	r0, r2, #31
 8030faa:	d404      	bmi.n	8030fb6 <_fflush_r+0x32>
 8030fac:	0599      	lsls	r1, r3, #22
 8030fae:	d402      	bmi.n	8030fb6 <_fflush_r+0x32>
 8030fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030fb2:	f7fc ffb8 	bl	802df26 <__retarget_lock_acquire_recursive>
 8030fb6:	4628      	mov	r0, r5
 8030fb8:	4621      	mov	r1, r4
 8030fba:	f7ff ff5f 	bl	8030e7c <__sflush_r>
 8030fbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8030fc0:	07da      	lsls	r2, r3, #31
 8030fc2:	4605      	mov	r5, r0
 8030fc4:	d4e4      	bmi.n	8030f90 <_fflush_r+0xc>
 8030fc6:	89a3      	ldrh	r3, [r4, #12]
 8030fc8:	059b      	lsls	r3, r3, #22
 8030fca:	d4e1      	bmi.n	8030f90 <_fflush_r+0xc>
 8030fcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8030fce:	f7fc ffab 	bl	802df28 <__retarget_lock_release_recursive>
 8030fd2:	e7dd      	b.n	8030f90 <_fflush_r+0xc>

08030fd4 <__swhatbuf_r>:
 8030fd4:	b570      	push	{r4, r5, r6, lr}
 8030fd6:	460c      	mov	r4, r1
 8030fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030fdc:	2900      	cmp	r1, #0
 8030fde:	b096      	sub	sp, #88	@ 0x58
 8030fe0:	4615      	mov	r5, r2
 8030fe2:	461e      	mov	r6, r3
 8030fe4:	da0d      	bge.n	8031002 <__swhatbuf_r+0x2e>
 8030fe6:	89a3      	ldrh	r3, [r4, #12]
 8030fe8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8030fec:	f04f 0100 	mov.w	r1, #0
 8030ff0:	bf14      	ite	ne
 8030ff2:	2340      	movne	r3, #64	@ 0x40
 8030ff4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8030ff8:	2000      	movs	r0, #0
 8030ffa:	6031      	str	r1, [r6, #0]
 8030ffc:	602b      	str	r3, [r5, #0]
 8030ffe:	b016      	add	sp, #88	@ 0x58
 8031000:	bd70      	pop	{r4, r5, r6, pc}
 8031002:	466a      	mov	r2, sp
 8031004:	f000 f8ec 	bl	80311e0 <_fstat_r>
 8031008:	2800      	cmp	r0, #0
 803100a:	dbec      	blt.n	8030fe6 <__swhatbuf_r+0x12>
 803100c:	9901      	ldr	r1, [sp, #4]
 803100e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8031012:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8031016:	4259      	negs	r1, r3
 8031018:	4159      	adcs	r1, r3
 803101a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803101e:	e7eb      	b.n	8030ff8 <__swhatbuf_r+0x24>

08031020 <__smakebuf_r>:
 8031020:	898b      	ldrh	r3, [r1, #12]
 8031022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8031024:	079d      	lsls	r5, r3, #30
 8031026:	4606      	mov	r6, r0
 8031028:	460c      	mov	r4, r1
 803102a:	d507      	bpl.n	803103c <__smakebuf_r+0x1c>
 803102c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8031030:	6023      	str	r3, [r4, #0]
 8031032:	6123      	str	r3, [r4, #16]
 8031034:	2301      	movs	r3, #1
 8031036:	6163      	str	r3, [r4, #20]
 8031038:	b003      	add	sp, #12
 803103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803103c:	ab01      	add	r3, sp, #4
 803103e:	466a      	mov	r2, sp
 8031040:	f7ff ffc8 	bl	8030fd4 <__swhatbuf_r>
 8031044:	9f00      	ldr	r7, [sp, #0]
 8031046:	4605      	mov	r5, r0
 8031048:	4639      	mov	r1, r7
 803104a:	4630      	mov	r0, r6
 803104c:	f7fb fc40 	bl	802c8d0 <_malloc_r>
 8031050:	b948      	cbnz	r0, 8031066 <__smakebuf_r+0x46>
 8031052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031056:	059a      	lsls	r2, r3, #22
 8031058:	d4ee      	bmi.n	8031038 <__smakebuf_r+0x18>
 803105a:	f023 0303 	bic.w	r3, r3, #3
 803105e:	f043 0302 	orr.w	r3, r3, #2
 8031062:	81a3      	strh	r3, [r4, #12]
 8031064:	e7e2      	b.n	803102c <__smakebuf_r+0xc>
 8031066:	89a3      	ldrh	r3, [r4, #12]
 8031068:	6020      	str	r0, [r4, #0]
 803106a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803106e:	81a3      	strh	r3, [r4, #12]
 8031070:	9b01      	ldr	r3, [sp, #4]
 8031072:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8031076:	b15b      	cbz	r3, 8031090 <__smakebuf_r+0x70>
 8031078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803107c:	4630      	mov	r0, r6
 803107e:	f000 f8c1 	bl	8031204 <_isatty_r>
 8031082:	b128      	cbz	r0, 8031090 <__smakebuf_r+0x70>
 8031084:	89a3      	ldrh	r3, [r4, #12]
 8031086:	f023 0303 	bic.w	r3, r3, #3
 803108a:	f043 0301 	orr.w	r3, r3, #1
 803108e:	81a3      	strh	r3, [r4, #12]
 8031090:	89a3      	ldrh	r3, [r4, #12]
 8031092:	431d      	orrs	r5, r3
 8031094:	81a5      	strh	r5, [r4, #12]
 8031096:	e7cf      	b.n	8031038 <__smakebuf_r+0x18>

08031098 <__sccl>:
 8031098:	b570      	push	{r4, r5, r6, lr}
 803109a:	780b      	ldrb	r3, [r1, #0]
 803109c:	4604      	mov	r4, r0
 803109e:	2b5e      	cmp	r3, #94	@ 0x5e
 80310a0:	bf0b      	itete	eq
 80310a2:	784b      	ldrbeq	r3, [r1, #1]
 80310a4:	1c4a      	addne	r2, r1, #1
 80310a6:	1c8a      	addeq	r2, r1, #2
 80310a8:	2100      	movne	r1, #0
 80310aa:	bf08      	it	eq
 80310ac:	2101      	moveq	r1, #1
 80310ae:	3801      	subs	r0, #1
 80310b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80310b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80310b8:	42a8      	cmp	r0, r5
 80310ba:	d1fb      	bne.n	80310b4 <__sccl+0x1c>
 80310bc:	b90b      	cbnz	r3, 80310c2 <__sccl+0x2a>
 80310be:	1e50      	subs	r0, r2, #1
 80310c0:	bd70      	pop	{r4, r5, r6, pc}
 80310c2:	f081 0101 	eor.w	r1, r1, #1
 80310c6:	54e1      	strb	r1, [r4, r3]
 80310c8:	4610      	mov	r0, r2
 80310ca:	4602      	mov	r2, r0
 80310cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80310d0:	2d2d      	cmp	r5, #45	@ 0x2d
 80310d2:	d005      	beq.n	80310e0 <__sccl+0x48>
 80310d4:	2d5d      	cmp	r5, #93	@ 0x5d
 80310d6:	d016      	beq.n	8031106 <__sccl+0x6e>
 80310d8:	2d00      	cmp	r5, #0
 80310da:	d0f1      	beq.n	80310c0 <__sccl+0x28>
 80310dc:	462b      	mov	r3, r5
 80310de:	e7f2      	b.n	80310c6 <__sccl+0x2e>
 80310e0:	7846      	ldrb	r6, [r0, #1]
 80310e2:	2e5d      	cmp	r6, #93	@ 0x5d
 80310e4:	d0fa      	beq.n	80310dc <__sccl+0x44>
 80310e6:	42b3      	cmp	r3, r6
 80310e8:	dcf8      	bgt.n	80310dc <__sccl+0x44>
 80310ea:	3002      	adds	r0, #2
 80310ec:	461a      	mov	r2, r3
 80310ee:	3201      	adds	r2, #1
 80310f0:	4296      	cmp	r6, r2
 80310f2:	54a1      	strb	r1, [r4, r2]
 80310f4:	dcfb      	bgt.n	80310ee <__sccl+0x56>
 80310f6:	1af2      	subs	r2, r6, r3
 80310f8:	3a01      	subs	r2, #1
 80310fa:	1c5d      	adds	r5, r3, #1
 80310fc:	42b3      	cmp	r3, r6
 80310fe:	bfa8      	it	ge
 8031100:	2200      	movge	r2, #0
 8031102:	18ab      	adds	r3, r5, r2
 8031104:	e7e1      	b.n	80310ca <__sccl+0x32>
 8031106:	4610      	mov	r0, r2
 8031108:	e7da      	b.n	80310c0 <__sccl+0x28>

0803110a <__submore>:
 803110a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803110e:	460c      	mov	r4, r1
 8031110:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8031112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8031116:	4299      	cmp	r1, r3
 8031118:	d11d      	bne.n	8031156 <__submore+0x4c>
 803111a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 803111e:	f7fb fbd7 	bl	802c8d0 <_malloc_r>
 8031122:	b918      	cbnz	r0, 803112c <__submore+0x22>
 8031124:	f04f 30ff 	mov.w	r0, #4294967295
 8031128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803112c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8031130:	63a3      	str	r3, [r4, #56]	@ 0x38
 8031132:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8031136:	6360      	str	r0, [r4, #52]	@ 0x34
 8031138:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 803113c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8031140:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8031144:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8031148:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 803114c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8031150:	6020      	str	r0, [r4, #0]
 8031152:	2000      	movs	r0, #0
 8031154:	e7e8      	b.n	8031128 <__submore+0x1e>
 8031156:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8031158:	0077      	lsls	r7, r6, #1
 803115a:	463a      	mov	r2, r7
 803115c:	f000 fbcb 	bl	80318f6 <_realloc_r>
 8031160:	4605      	mov	r5, r0
 8031162:	2800      	cmp	r0, #0
 8031164:	d0de      	beq.n	8031124 <__submore+0x1a>
 8031166:	eb00 0806 	add.w	r8, r0, r6
 803116a:	4601      	mov	r1, r0
 803116c:	4632      	mov	r2, r6
 803116e:	4640      	mov	r0, r8
 8031170:	f7fc fee3 	bl	802df3a <memcpy>
 8031174:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8031178:	f8c4 8000 	str.w	r8, [r4]
 803117c:	e7e9      	b.n	8031152 <__submore+0x48>

0803117e <_raise_r>:
 803117e:	291f      	cmp	r1, #31
 8031180:	b538      	push	{r3, r4, r5, lr}
 8031182:	4605      	mov	r5, r0
 8031184:	460c      	mov	r4, r1
 8031186:	d904      	bls.n	8031192 <_raise_r+0x14>
 8031188:	2316      	movs	r3, #22
 803118a:	6003      	str	r3, [r0, #0]
 803118c:	f04f 30ff 	mov.w	r0, #4294967295
 8031190:	bd38      	pop	{r3, r4, r5, pc}
 8031192:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8031194:	b112      	cbz	r2, 803119c <_raise_r+0x1e>
 8031196:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803119a:	b94b      	cbnz	r3, 80311b0 <_raise_r+0x32>
 803119c:	4628      	mov	r0, r5
 803119e:	f000 f853 	bl	8031248 <_getpid_r>
 80311a2:	4622      	mov	r2, r4
 80311a4:	4601      	mov	r1, r0
 80311a6:	4628      	mov	r0, r5
 80311a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80311ac:	f000 b83a 	b.w	8031224 <_kill_r>
 80311b0:	2b01      	cmp	r3, #1
 80311b2:	d00a      	beq.n	80311ca <_raise_r+0x4c>
 80311b4:	1c59      	adds	r1, r3, #1
 80311b6:	d103      	bne.n	80311c0 <_raise_r+0x42>
 80311b8:	2316      	movs	r3, #22
 80311ba:	6003      	str	r3, [r0, #0]
 80311bc:	2001      	movs	r0, #1
 80311be:	e7e7      	b.n	8031190 <_raise_r+0x12>
 80311c0:	2100      	movs	r1, #0
 80311c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80311c6:	4620      	mov	r0, r4
 80311c8:	4798      	blx	r3
 80311ca:	2000      	movs	r0, #0
 80311cc:	e7e0      	b.n	8031190 <_raise_r+0x12>
	...

080311d0 <raise>:
 80311d0:	4b02      	ldr	r3, [pc, #8]	@ (80311dc <raise+0xc>)
 80311d2:	4601      	mov	r1, r0
 80311d4:	6818      	ldr	r0, [r3, #0]
 80311d6:	f7ff bfd2 	b.w	803117e <_raise_r>
 80311da:	bf00      	nop
 80311dc:	2000013c 	.word	0x2000013c

080311e0 <_fstat_r>:
 80311e0:	b538      	push	{r3, r4, r5, lr}
 80311e2:	4d07      	ldr	r5, [pc, #28]	@ (8031200 <_fstat_r+0x20>)
 80311e4:	2300      	movs	r3, #0
 80311e6:	4604      	mov	r4, r0
 80311e8:	4608      	mov	r0, r1
 80311ea:	4611      	mov	r1, r2
 80311ec:	602b      	str	r3, [r5, #0]
 80311ee:	f7e1 fd89 	bl	8012d04 <_fstat>
 80311f2:	1c43      	adds	r3, r0, #1
 80311f4:	d102      	bne.n	80311fc <_fstat_r+0x1c>
 80311f6:	682b      	ldr	r3, [r5, #0]
 80311f8:	b103      	cbz	r3, 80311fc <_fstat_r+0x1c>
 80311fa:	6023      	str	r3, [r4, #0]
 80311fc:	bd38      	pop	{r3, r4, r5, pc}
 80311fe:	bf00      	nop
 8031200:	2000db0c 	.word	0x2000db0c

08031204 <_isatty_r>:
 8031204:	b538      	push	{r3, r4, r5, lr}
 8031206:	4d06      	ldr	r5, [pc, #24]	@ (8031220 <_isatty_r+0x1c>)
 8031208:	2300      	movs	r3, #0
 803120a:	4604      	mov	r4, r0
 803120c:	4608      	mov	r0, r1
 803120e:	602b      	str	r3, [r5, #0]
 8031210:	f7e1 fd88 	bl	8012d24 <_isatty>
 8031214:	1c43      	adds	r3, r0, #1
 8031216:	d102      	bne.n	803121e <_isatty_r+0x1a>
 8031218:	682b      	ldr	r3, [r5, #0]
 803121a:	b103      	cbz	r3, 803121e <_isatty_r+0x1a>
 803121c:	6023      	str	r3, [r4, #0]
 803121e:	bd38      	pop	{r3, r4, r5, pc}
 8031220:	2000db0c 	.word	0x2000db0c

08031224 <_kill_r>:
 8031224:	b538      	push	{r3, r4, r5, lr}
 8031226:	4d07      	ldr	r5, [pc, #28]	@ (8031244 <_kill_r+0x20>)
 8031228:	2300      	movs	r3, #0
 803122a:	4604      	mov	r4, r0
 803122c:	4608      	mov	r0, r1
 803122e:	4611      	mov	r1, r2
 8031230:	602b      	str	r3, [r5, #0]
 8031232:	f7e1 fd07 	bl	8012c44 <_kill>
 8031236:	1c43      	adds	r3, r0, #1
 8031238:	d102      	bne.n	8031240 <_kill_r+0x1c>
 803123a:	682b      	ldr	r3, [r5, #0]
 803123c:	b103      	cbz	r3, 8031240 <_kill_r+0x1c>
 803123e:	6023      	str	r3, [r4, #0]
 8031240:	bd38      	pop	{r3, r4, r5, pc}
 8031242:	bf00      	nop
 8031244:	2000db0c 	.word	0x2000db0c

08031248 <_getpid_r>:
 8031248:	f7e1 bcf4 	b.w	8012c34 <_getpid>
 803124c:	0000      	movs	r0, r0
	...

08031250 <nan>:
 8031250:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8031258 <nan+0x8>
 8031254:	4770      	bx	lr
 8031256:	bf00      	nop
 8031258:	00000000 	.word	0x00000000
 803125c:	7ff80000 	.word	0x7ff80000

08031260 <rshift>:
 8031260:	6903      	ldr	r3, [r0, #16]
 8031262:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8031266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803126a:	ea4f 1261 	mov.w	r2, r1, asr #5
 803126e:	f100 0414 	add.w	r4, r0, #20
 8031272:	dd45      	ble.n	8031300 <rshift+0xa0>
 8031274:	f011 011f 	ands.w	r1, r1, #31
 8031278:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803127c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8031280:	d10c      	bne.n	803129c <rshift+0x3c>
 8031282:	f100 0710 	add.w	r7, r0, #16
 8031286:	4629      	mov	r1, r5
 8031288:	42b1      	cmp	r1, r6
 803128a:	d334      	bcc.n	80312f6 <rshift+0x96>
 803128c:	1a9b      	subs	r3, r3, r2
 803128e:	009b      	lsls	r3, r3, #2
 8031290:	1eea      	subs	r2, r5, #3
 8031292:	4296      	cmp	r6, r2
 8031294:	bf38      	it	cc
 8031296:	2300      	movcc	r3, #0
 8031298:	4423      	add	r3, r4
 803129a:	e015      	b.n	80312c8 <rshift+0x68>
 803129c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80312a0:	f1c1 0820 	rsb	r8, r1, #32
 80312a4:	40cf      	lsrs	r7, r1
 80312a6:	f105 0e04 	add.w	lr, r5, #4
 80312aa:	46a1      	mov	r9, r4
 80312ac:	4576      	cmp	r6, lr
 80312ae:	46f4      	mov	ip, lr
 80312b0:	d815      	bhi.n	80312de <rshift+0x7e>
 80312b2:	1a9a      	subs	r2, r3, r2
 80312b4:	0092      	lsls	r2, r2, #2
 80312b6:	3a04      	subs	r2, #4
 80312b8:	3501      	adds	r5, #1
 80312ba:	42ae      	cmp	r6, r5
 80312bc:	bf38      	it	cc
 80312be:	2200      	movcc	r2, #0
 80312c0:	18a3      	adds	r3, r4, r2
 80312c2:	50a7      	str	r7, [r4, r2]
 80312c4:	b107      	cbz	r7, 80312c8 <rshift+0x68>
 80312c6:	3304      	adds	r3, #4
 80312c8:	1b1a      	subs	r2, r3, r4
 80312ca:	42a3      	cmp	r3, r4
 80312cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80312d0:	bf08      	it	eq
 80312d2:	2300      	moveq	r3, #0
 80312d4:	6102      	str	r2, [r0, #16]
 80312d6:	bf08      	it	eq
 80312d8:	6143      	streq	r3, [r0, #20]
 80312da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80312de:	f8dc c000 	ldr.w	ip, [ip]
 80312e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80312e6:	ea4c 0707 	orr.w	r7, ip, r7
 80312ea:	f849 7b04 	str.w	r7, [r9], #4
 80312ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80312f2:	40cf      	lsrs	r7, r1
 80312f4:	e7da      	b.n	80312ac <rshift+0x4c>
 80312f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80312fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80312fe:	e7c3      	b.n	8031288 <rshift+0x28>
 8031300:	4623      	mov	r3, r4
 8031302:	e7e1      	b.n	80312c8 <rshift+0x68>

08031304 <__hexdig_fun>:
 8031304:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8031308:	2b09      	cmp	r3, #9
 803130a:	d802      	bhi.n	8031312 <__hexdig_fun+0xe>
 803130c:	3820      	subs	r0, #32
 803130e:	b2c0      	uxtb	r0, r0
 8031310:	4770      	bx	lr
 8031312:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8031316:	2b05      	cmp	r3, #5
 8031318:	d801      	bhi.n	803131e <__hexdig_fun+0x1a>
 803131a:	3847      	subs	r0, #71	@ 0x47
 803131c:	e7f7      	b.n	803130e <__hexdig_fun+0xa>
 803131e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8031322:	2b05      	cmp	r3, #5
 8031324:	d801      	bhi.n	803132a <__hexdig_fun+0x26>
 8031326:	3827      	subs	r0, #39	@ 0x27
 8031328:	e7f1      	b.n	803130e <__hexdig_fun+0xa>
 803132a:	2000      	movs	r0, #0
 803132c:	4770      	bx	lr
	...

08031330 <__gethex>:
 8031330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031334:	b085      	sub	sp, #20
 8031336:	468a      	mov	sl, r1
 8031338:	9302      	str	r3, [sp, #8]
 803133a:	680b      	ldr	r3, [r1, #0]
 803133c:	9001      	str	r0, [sp, #4]
 803133e:	4690      	mov	r8, r2
 8031340:	1c9c      	adds	r4, r3, #2
 8031342:	46a1      	mov	r9, r4
 8031344:	f814 0b01 	ldrb.w	r0, [r4], #1
 8031348:	2830      	cmp	r0, #48	@ 0x30
 803134a:	d0fa      	beq.n	8031342 <__gethex+0x12>
 803134c:	eba9 0303 	sub.w	r3, r9, r3
 8031350:	f1a3 0b02 	sub.w	fp, r3, #2
 8031354:	f7ff ffd6 	bl	8031304 <__hexdig_fun>
 8031358:	4605      	mov	r5, r0
 803135a:	2800      	cmp	r0, #0
 803135c:	d168      	bne.n	8031430 <__gethex+0x100>
 803135e:	49a0      	ldr	r1, [pc, #640]	@ (80315e0 <__gethex+0x2b0>)
 8031360:	2201      	movs	r2, #1
 8031362:	4648      	mov	r0, r9
 8031364:	f7fc fc5c 	bl	802dc20 <strncmp>
 8031368:	4607      	mov	r7, r0
 803136a:	2800      	cmp	r0, #0
 803136c:	d167      	bne.n	803143e <__gethex+0x10e>
 803136e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8031372:	4626      	mov	r6, r4
 8031374:	f7ff ffc6 	bl	8031304 <__hexdig_fun>
 8031378:	2800      	cmp	r0, #0
 803137a:	d062      	beq.n	8031442 <__gethex+0x112>
 803137c:	4623      	mov	r3, r4
 803137e:	7818      	ldrb	r0, [r3, #0]
 8031380:	2830      	cmp	r0, #48	@ 0x30
 8031382:	4699      	mov	r9, r3
 8031384:	f103 0301 	add.w	r3, r3, #1
 8031388:	d0f9      	beq.n	803137e <__gethex+0x4e>
 803138a:	f7ff ffbb 	bl	8031304 <__hexdig_fun>
 803138e:	fab0 f580 	clz	r5, r0
 8031392:	096d      	lsrs	r5, r5, #5
 8031394:	f04f 0b01 	mov.w	fp, #1
 8031398:	464a      	mov	r2, r9
 803139a:	4616      	mov	r6, r2
 803139c:	3201      	adds	r2, #1
 803139e:	7830      	ldrb	r0, [r6, #0]
 80313a0:	f7ff ffb0 	bl	8031304 <__hexdig_fun>
 80313a4:	2800      	cmp	r0, #0
 80313a6:	d1f8      	bne.n	803139a <__gethex+0x6a>
 80313a8:	498d      	ldr	r1, [pc, #564]	@ (80315e0 <__gethex+0x2b0>)
 80313aa:	2201      	movs	r2, #1
 80313ac:	4630      	mov	r0, r6
 80313ae:	f7fc fc37 	bl	802dc20 <strncmp>
 80313b2:	2800      	cmp	r0, #0
 80313b4:	d13f      	bne.n	8031436 <__gethex+0x106>
 80313b6:	b944      	cbnz	r4, 80313ca <__gethex+0x9a>
 80313b8:	1c74      	adds	r4, r6, #1
 80313ba:	4622      	mov	r2, r4
 80313bc:	4616      	mov	r6, r2
 80313be:	3201      	adds	r2, #1
 80313c0:	7830      	ldrb	r0, [r6, #0]
 80313c2:	f7ff ff9f 	bl	8031304 <__hexdig_fun>
 80313c6:	2800      	cmp	r0, #0
 80313c8:	d1f8      	bne.n	80313bc <__gethex+0x8c>
 80313ca:	1ba4      	subs	r4, r4, r6
 80313cc:	00a7      	lsls	r7, r4, #2
 80313ce:	7833      	ldrb	r3, [r6, #0]
 80313d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80313d4:	2b50      	cmp	r3, #80	@ 0x50
 80313d6:	d13e      	bne.n	8031456 <__gethex+0x126>
 80313d8:	7873      	ldrb	r3, [r6, #1]
 80313da:	2b2b      	cmp	r3, #43	@ 0x2b
 80313dc:	d033      	beq.n	8031446 <__gethex+0x116>
 80313de:	2b2d      	cmp	r3, #45	@ 0x2d
 80313e0:	d034      	beq.n	803144c <__gethex+0x11c>
 80313e2:	1c71      	adds	r1, r6, #1
 80313e4:	2400      	movs	r4, #0
 80313e6:	7808      	ldrb	r0, [r1, #0]
 80313e8:	f7ff ff8c 	bl	8031304 <__hexdig_fun>
 80313ec:	1e43      	subs	r3, r0, #1
 80313ee:	b2db      	uxtb	r3, r3
 80313f0:	2b18      	cmp	r3, #24
 80313f2:	d830      	bhi.n	8031456 <__gethex+0x126>
 80313f4:	f1a0 0210 	sub.w	r2, r0, #16
 80313f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80313fc:	f7ff ff82 	bl	8031304 <__hexdig_fun>
 8031400:	f100 3cff 	add.w	ip, r0, #4294967295
 8031404:	fa5f fc8c 	uxtb.w	ip, ip
 8031408:	f1bc 0f18 	cmp.w	ip, #24
 803140c:	f04f 030a 	mov.w	r3, #10
 8031410:	d91e      	bls.n	8031450 <__gethex+0x120>
 8031412:	b104      	cbz	r4, 8031416 <__gethex+0xe6>
 8031414:	4252      	negs	r2, r2
 8031416:	4417      	add	r7, r2
 8031418:	f8ca 1000 	str.w	r1, [sl]
 803141c:	b1ed      	cbz	r5, 803145a <__gethex+0x12a>
 803141e:	f1bb 0f00 	cmp.w	fp, #0
 8031422:	bf0c      	ite	eq
 8031424:	2506      	moveq	r5, #6
 8031426:	2500      	movne	r5, #0
 8031428:	4628      	mov	r0, r5
 803142a:	b005      	add	sp, #20
 803142c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031430:	2500      	movs	r5, #0
 8031432:	462c      	mov	r4, r5
 8031434:	e7b0      	b.n	8031398 <__gethex+0x68>
 8031436:	2c00      	cmp	r4, #0
 8031438:	d1c7      	bne.n	80313ca <__gethex+0x9a>
 803143a:	4627      	mov	r7, r4
 803143c:	e7c7      	b.n	80313ce <__gethex+0x9e>
 803143e:	464e      	mov	r6, r9
 8031440:	462f      	mov	r7, r5
 8031442:	2501      	movs	r5, #1
 8031444:	e7c3      	b.n	80313ce <__gethex+0x9e>
 8031446:	2400      	movs	r4, #0
 8031448:	1cb1      	adds	r1, r6, #2
 803144a:	e7cc      	b.n	80313e6 <__gethex+0xb6>
 803144c:	2401      	movs	r4, #1
 803144e:	e7fb      	b.n	8031448 <__gethex+0x118>
 8031450:	fb03 0002 	mla	r0, r3, r2, r0
 8031454:	e7ce      	b.n	80313f4 <__gethex+0xc4>
 8031456:	4631      	mov	r1, r6
 8031458:	e7de      	b.n	8031418 <__gethex+0xe8>
 803145a:	eba6 0309 	sub.w	r3, r6, r9
 803145e:	3b01      	subs	r3, #1
 8031460:	4629      	mov	r1, r5
 8031462:	2b07      	cmp	r3, #7
 8031464:	dc0a      	bgt.n	803147c <__gethex+0x14c>
 8031466:	9801      	ldr	r0, [sp, #4]
 8031468:	f7fd fc1c 	bl	802eca4 <_Balloc>
 803146c:	4604      	mov	r4, r0
 803146e:	b940      	cbnz	r0, 8031482 <__gethex+0x152>
 8031470:	4b5c      	ldr	r3, [pc, #368]	@ (80315e4 <__gethex+0x2b4>)
 8031472:	4602      	mov	r2, r0
 8031474:	21e4      	movs	r1, #228	@ 0xe4
 8031476:	485c      	ldr	r0, [pc, #368]	@ (80315e8 <__gethex+0x2b8>)
 8031478:	f7fb f9c6 	bl	802c808 <__assert_func>
 803147c:	3101      	adds	r1, #1
 803147e:	105b      	asrs	r3, r3, #1
 8031480:	e7ef      	b.n	8031462 <__gethex+0x132>
 8031482:	f100 0a14 	add.w	sl, r0, #20
 8031486:	2300      	movs	r3, #0
 8031488:	4655      	mov	r5, sl
 803148a:	469b      	mov	fp, r3
 803148c:	45b1      	cmp	r9, r6
 803148e:	d337      	bcc.n	8031500 <__gethex+0x1d0>
 8031490:	f845 bb04 	str.w	fp, [r5], #4
 8031494:	eba5 050a 	sub.w	r5, r5, sl
 8031498:	10ad      	asrs	r5, r5, #2
 803149a:	6125      	str	r5, [r4, #16]
 803149c:	4658      	mov	r0, fp
 803149e:	f7fd fcf3 	bl	802ee88 <__hi0bits>
 80314a2:	016d      	lsls	r5, r5, #5
 80314a4:	f8d8 6000 	ldr.w	r6, [r8]
 80314a8:	1a2d      	subs	r5, r5, r0
 80314aa:	42b5      	cmp	r5, r6
 80314ac:	dd54      	ble.n	8031558 <__gethex+0x228>
 80314ae:	1bad      	subs	r5, r5, r6
 80314b0:	4629      	mov	r1, r5
 80314b2:	4620      	mov	r0, r4
 80314b4:	f7fe f887 	bl	802f5c6 <__any_on>
 80314b8:	4681      	mov	r9, r0
 80314ba:	b178      	cbz	r0, 80314dc <__gethex+0x1ac>
 80314bc:	1e6b      	subs	r3, r5, #1
 80314be:	1159      	asrs	r1, r3, #5
 80314c0:	f003 021f 	and.w	r2, r3, #31
 80314c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80314c8:	f04f 0901 	mov.w	r9, #1
 80314cc:	fa09 f202 	lsl.w	r2, r9, r2
 80314d0:	420a      	tst	r2, r1
 80314d2:	d003      	beq.n	80314dc <__gethex+0x1ac>
 80314d4:	454b      	cmp	r3, r9
 80314d6:	dc36      	bgt.n	8031546 <__gethex+0x216>
 80314d8:	f04f 0902 	mov.w	r9, #2
 80314dc:	4629      	mov	r1, r5
 80314de:	4620      	mov	r0, r4
 80314e0:	f7ff febe 	bl	8031260 <rshift>
 80314e4:	442f      	add	r7, r5
 80314e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80314ea:	42bb      	cmp	r3, r7
 80314ec:	da42      	bge.n	8031574 <__gethex+0x244>
 80314ee:	9801      	ldr	r0, [sp, #4]
 80314f0:	4621      	mov	r1, r4
 80314f2:	f7fd fc17 	bl	802ed24 <_Bfree>
 80314f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80314f8:	2300      	movs	r3, #0
 80314fa:	6013      	str	r3, [r2, #0]
 80314fc:	25a3      	movs	r5, #163	@ 0xa3
 80314fe:	e793      	b.n	8031428 <__gethex+0xf8>
 8031500:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8031504:	2a2e      	cmp	r2, #46	@ 0x2e
 8031506:	d012      	beq.n	803152e <__gethex+0x1fe>
 8031508:	2b20      	cmp	r3, #32
 803150a:	d104      	bne.n	8031516 <__gethex+0x1e6>
 803150c:	f845 bb04 	str.w	fp, [r5], #4
 8031510:	f04f 0b00 	mov.w	fp, #0
 8031514:	465b      	mov	r3, fp
 8031516:	7830      	ldrb	r0, [r6, #0]
 8031518:	9303      	str	r3, [sp, #12]
 803151a:	f7ff fef3 	bl	8031304 <__hexdig_fun>
 803151e:	9b03      	ldr	r3, [sp, #12]
 8031520:	f000 000f 	and.w	r0, r0, #15
 8031524:	4098      	lsls	r0, r3
 8031526:	ea4b 0b00 	orr.w	fp, fp, r0
 803152a:	3304      	adds	r3, #4
 803152c:	e7ae      	b.n	803148c <__gethex+0x15c>
 803152e:	45b1      	cmp	r9, r6
 8031530:	d8ea      	bhi.n	8031508 <__gethex+0x1d8>
 8031532:	492b      	ldr	r1, [pc, #172]	@ (80315e0 <__gethex+0x2b0>)
 8031534:	9303      	str	r3, [sp, #12]
 8031536:	2201      	movs	r2, #1
 8031538:	4630      	mov	r0, r6
 803153a:	f7fc fb71 	bl	802dc20 <strncmp>
 803153e:	9b03      	ldr	r3, [sp, #12]
 8031540:	2800      	cmp	r0, #0
 8031542:	d1e1      	bne.n	8031508 <__gethex+0x1d8>
 8031544:	e7a2      	b.n	803148c <__gethex+0x15c>
 8031546:	1ea9      	subs	r1, r5, #2
 8031548:	4620      	mov	r0, r4
 803154a:	f7fe f83c 	bl	802f5c6 <__any_on>
 803154e:	2800      	cmp	r0, #0
 8031550:	d0c2      	beq.n	80314d8 <__gethex+0x1a8>
 8031552:	f04f 0903 	mov.w	r9, #3
 8031556:	e7c1      	b.n	80314dc <__gethex+0x1ac>
 8031558:	da09      	bge.n	803156e <__gethex+0x23e>
 803155a:	1b75      	subs	r5, r6, r5
 803155c:	4621      	mov	r1, r4
 803155e:	9801      	ldr	r0, [sp, #4]
 8031560:	462a      	mov	r2, r5
 8031562:	f7fd fdf7 	bl	802f154 <__lshift>
 8031566:	1b7f      	subs	r7, r7, r5
 8031568:	4604      	mov	r4, r0
 803156a:	f100 0a14 	add.w	sl, r0, #20
 803156e:	f04f 0900 	mov.w	r9, #0
 8031572:	e7b8      	b.n	80314e6 <__gethex+0x1b6>
 8031574:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8031578:	42bd      	cmp	r5, r7
 803157a:	dd6f      	ble.n	803165c <__gethex+0x32c>
 803157c:	1bed      	subs	r5, r5, r7
 803157e:	42ae      	cmp	r6, r5
 8031580:	dc34      	bgt.n	80315ec <__gethex+0x2bc>
 8031582:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8031586:	2b02      	cmp	r3, #2
 8031588:	d022      	beq.n	80315d0 <__gethex+0x2a0>
 803158a:	2b03      	cmp	r3, #3
 803158c:	d024      	beq.n	80315d8 <__gethex+0x2a8>
 803158e:	2b01      	cmp	r3, #1
 8031590:	d115      	bne.n	80315be <__gethex+0x28e>
 8031592:	42ae      	cmp	r6, r5
 8031594:	d113      	bne.n	80315be <__gethex+0x28e>
 8031596:	2e01      	cmp	r6, #1
 8031598:	d10b      	bne.n	80315b2 <__gethex+0x282>
 803159a:	9a02      	ldr	r2, [sp, #8]
 803159c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80315a0:	6013      	str	r3, [r2, #0]
 80315a2:	2301      	movs	r3, #1
 80315a4:	6123      	str	r3, [r4, #16]
 80315a6:	f8ca 3000 	str.w	r3, [sl]
 80315aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80315ac:	2562      	movs	r5, #98	@ 0x62
 80315ae:	601c      	str	r4, [r3, #0]
 80315b0:	e73a      	b.n	8031428 <__gethex+0xf8>
 80315b2:	1e71      	subs	r1, r6, #1
 80315b4:	4620      	mov	r0, r4
 80315b6:	f7fe f806 	bl	802f5c6 <__any_on>
 80315ba:	2800      	cmp	r0, #0
 80315bc:	d1ed      	bne.n	803159a <__gethex+0x26a>
 80315be:	9801      	ldr	r0, [sp, #4]
 80315c0:	4621      	mov	r1, r4
 80315c2:	f7fd fbaf 	bl	802ed24 <_Bfree>
 80315c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80315c8:	2300      	movs	r3, #0
 80315ca:	6013      	str	r3, [r2, #0]
 80315cc:	2550      	movs	r5, #80	@ 0x50
 80315ce:	e72b      	b.n	8031428 <__gethex+0xf8>
 80315d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80315d2:	2b00      	cmp	r3, #0
 80315d4:	d1f3      	bne.n	80315be <__gethex+0x28e>
 80315d6:	e7e0      	b.n	803159a <__gethex+0x26a>
 80315d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80315da:	2b00      	cmp	r3, #0
 80315dc:	d1dd      	bne.n	803159a <__gethex+0x26a>
 80315de:	e7ee      	b.n	80315be <__gethex+0x28e>
 80315e0:	08034fc0 	.word	0x08034fc0
 80315e4:	08034e59 	.word	0x08034e59
 80315e8:	0803514d 	.word	0x0803514d
 80315ec:	1e6f      	subs	r7, r5, #1
 80315ee:	f1b9 0f00 	cmp.w	r9, #0
 80315f2:	d130      	bne.n	8031656 <__gethex+0x326>
 80315f4:	b127      	cbz	r7, 8031600 <__gethex+0x2d0>
 80315f6:	4639      	mov	r1, r7
 80315f8:	4620      	mov	r0, r4
 80315fa:	f7fd ffe4 	bl	802f5c6 <__any_on>
 80315fe:	4681      	mov	r9, r0
 8031600:	117a      	asrs	r2, r7, #5
 8031602:	2301      	movs	r3, #1
 8031604:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8031608:	f007 071f 	and.w	r7, r7, #31
 803160c:	40bb      	lsls	r3, r7
 803160e:	4213      	tst	r3, r2
 8031610:	4629      	mov	r1, r5
 8031612:	4620      	mov	r0, r4
 8031614:	bf18      	it	ne
 8031616:	f049 0902 	orrne.w	r9, r9, #2
 803161a:	f7ff fe21 	bl	8031260 <rshift>
 803161e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8031622:	1b76      	subs	r6, r6, r5
 8031624:	2502      	movs	r5, #2
 8031626:	f1b9 0f00 	cmp.w	r9, #0
 803162a:	d047      	beq.n	80316bc <__gethex+0x38c>
 803162c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8031630:	2b02      	cmp	r3, #2
 8031632:	d015      	beq.n	8031660 <__gethex+0x330>
 8031634:	2b03      	cmp	r3, #3
 8031636:	d017      	beq.n	8031668 <__gethex+0x338>
 8031638:	2b01      	cmp	r3, #1
 803163a:	d109      	bne.n	8031650 <__gethex+0x320>
 803163c:	f019 0f02 	tst.w	r9, #2
 8031640:	d006      	beq.n	8031650 <__gethex+0x320>
 8031642:	f8da 3000 	ldr.w	r3, [sl]
 8031646:	ea49 0903 	orr.w	r9, r9, r3
 803164a:	f019 0f01 	tst.w	r9, #1
 803164e:	d10e      	bne.n	803166e <__gethex+0x33e>
 8031650:	f045 0510 	orr.w	r5, r5, #16
 8031654:	e032      	b.n	80316bc <__gethex+0x38c>
 8031656:	f04f 0901 	mov.w	r9, #1
 803165a:	e7d1      	b.n	8031600 <__gethex+0x2d0>
 803165c:	2501      	movs	r5, #1
 803165e:	e7e2      	b.n	8031626 <__gethex+0x2f6>
 8031660:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8031662:	f1c3 0301 	rsb	r3, r3, #1
 8031666:	930f      	str	r3, [sp, #60]	@ 0x3c
 8031668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 803166a:	2b00      	cmp	r3, #0
 803166c:	d0f0      	beq.n	8031650 <__gethex+0x320>
 803166e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8031672:	f104 0314 	add.w	r3, r4, #20
 8031676:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 803167a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 803167e:	f04f 0c00 	mov.w	ip, #0
 8031682:	4618      	mov	r0, r3
 8031684:	f853 2b04 	ldr.w	r2, [r3], #4
 8031688:	f1b2 3fff 	cmp.w	r2, #4294967295
 803168c:	d01b      	beq.n	80316c6 <__gethex+0x396>
 803168e:	3201      	adds	r2, #1
 8031690:	6002      	str	r2, [r0, #0]
 8031692:	2d02      	cmp	r5, #2
 8031694:	f104 0314 	add.w	r3, r4, #20
 8031698:	d13c      	bne.n	8031714 <__gethex+0x3e4>
 803169a:	f8d8 2000 	ldr.w	r2, [r8]
 803169e:	3a01      	subs	r2, #1
 80316a0:	42b2      	cmp	r2, r6
 80316a2:	d109      	bne.n	80316b8 <__gethex+0x388>
 80316a4:	1171      	asrs	r1, r6, #5
 80316a6:	2201      	movs	r2, #1
 80316a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80316ac:	f006 061f 	and.w	r6, r6, #31
 80316b0:	fa02 f606 	lsl.w	r6, r2, r6
 80316b4:	421e      	tst	r6, r3
 80316b6:	d13a      	bne.n	803172e <__gethex+0x3fe>
 80316b8:	f045 0520 	orr.w	r5, r5, #32
 80316bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80316be:	601c      	str	r4, [r3, #0]
 80316c0:	9b02      	ldr	r3, [sp, #8]
 80316c2:	601f      	str	r7, [r3, #0]
 80316c4:	e6b0      	b.n	8031428 <__gethex+0xf8>
 80316c6:	4299      	cmp	r1, r3
 80316c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80316cc:	d8d9      	bhi.n	8031682 <__gethex+0x352>
 80316ce:	68a3      	ldr	r3, [r4, #8]
 80316d0:	459b      	cmp	fp, r3
 80316d2:	db17      	blt.n	8031704 <__gethex+0x3d4>
 80316d4:	6861      	ldr	r1, [r4, #4]
 80316d6:	9801      	ldr	r0, [sp, #4]
 80316d8:	3101      	adds	r1, #1
 80316da:	f7fd fae3 	bl	802eca4 <_Balloc>
 80316de:	4681      	mov	r9, r0
 80316e0:	b918      	cbnz	r0, 80316ea <__gethex+0x3ba>
 80316e2:	4b1a      	ldr	r3, [pc, #104]	@ (803174c <__gethex+0x41c>)
 80316e4:	4602      	mov	r2, r0
 80316e6:	2184      	movs	r1, #132	@ 0x84
 80316e8:	e6c5      	b.n	8031476 <__gethex+0x146>
 80316ea:	6922      	ldr	r2, [r4, #16]
 80316ec:	3202      	adds	r2, #2
 80316ee:	f104 010c 	add.w	r1, r4, #12
 80316f2:	0092      	lsls	r2, r2, #2
 80316f4:	300c      	adds	r0, #12
 80316f6:	f7fc fc20 	bl	802df3a <memcpy>
 80316fa:	4621      	mov	r1, r4
 80316fc:	9801      	ldr	r0, [sp, #4]
 80316fe:	f7fd fb11 	bl	802ed24 <_Bfree>
 8031702:	464c      	mov	r4, r9
 8031704:	6923      	ldr	r3, [r4, #16]
 8031706:	1c5a      	adds	r2, r3, #1
 8031708:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 803170c:	6122      	str	r2, [r4, #16]
 803170e:	2201      	movs	r2, #1
 8031710:	615a      	str	r2, [r3, #20]
 8031712:	e7be      	b.n	8031692 <__gethex+0x362>
 8031714:	6922      	ldr	r2, [r4, #16]
 8031716:	455a      	cmp	r2, fp
 8031718:	dd0b      	ble.n	8031732 <__gethex+0x402>
 803171a:	2101      	movs	r1, #1
 803171c:	4620      	mov	r0, r4
 803171e:	f7ff fd9f 	bl	8031260 <rshift>
 8031722:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8031726:	3701      	adds	r7, #1
 8031728:	42bb      	cmp	r3, r7
 803172a:	f6ff aee0 	blt.w	80314ee <__gethex+0x1be>
 803172e:	2501      	movs	r5, #1
 8031730:	e7c2      	b.n	80316b8 <__gethex+0x388>
 8031732:	f016 061f 	ands.w	r6, r6, #31
 8031736:	d0fa      	beq.n	803172e <__gethex+0x3fe>
 8031738:	4453      	add	r3, sl
 803173a:	f1c6 0620 	rsb	r6, r6, #32
 803173e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8031742:	f7fd fba1 	bl	802ee88 <__hi0bits>
 8031746:	42b0      	cmp	r0, r6
 8031748:	dbe7      	blt.n	803171a <__gethex+0x3ea>
 803174a:	e7f0      	b.n	803172e <__gethex+0x3fe>
 803174c:	08034e59 	.word	0x08034e59

08031750 <L_shift>:
 8031750:	f1c2 0208 	rsb	r2, r2, #8
 8031754:	0092      	lsls	r2, r2, #2
 8031756:	b570      	push	{r4, r5, r6, lr}
 8031758:	f1c2 0620 	rsb	r6, r2, #32
 803175c:	6843      	ldr	r3, [r0, #4]
 803175e:	6804      	ldr	r4, [r0, #0]
 8031760:	fa03 f506 	lsl.w	r5, r3, r6
 8031764:	432c      	orrs	r4, r5
 8031766:	40d3      	lsrs	r3, r2
 8031768:	6004      	str	r4, [r0, #0]
 803176a:	f840 3f04 	str.w	r3, [r0, #4]!
 803176e:	4288      	cmp	r0, r1
 8031770:	d3f4      	bcc.n	803175c <L_shift+0xc>
 8031772:	bd70      	pop	{r4, r5, r6, pc}

08031774 <__match>:
 8031774:	b530      	push	{r4, r5, lr}
 8031776:	6803      	ldr	r3, [r0, #0]
 8031778:	3301      	adds	r3, #1
 803177a:	f811 4b01 	ldrb.w	r4, [r1], #1
 803177e:	b914      	cbnz	r4, 8031786 <__match+0x12>
 8031780:	6003      	str	r3, [r0, #0]
 8031782:	2001      	movs	r0, #1
 8031784:	bd30      	pop	{r4, r5, pc}
 8031786:	f813 2b01 	ldrb.w	r2, [r3], #1
 803178a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 803178e:	2d19      	cmp	r5, #25
 8031790:	bf98      	it	ls
 8031792:	3220      	addls	r2, #32
 8031794:	42a2      	cmp	r2, r4
 8031796:	d0f0      	beq.n	803177a <__match+0x6>
 8031798:	2000      	movs	r0, #0
 803179a:	e7f3      	b.n	8031784 <__match+0x10>

0803179c <__hexnan>:
 803179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80317a0:	680b      	ldr	r3, [r1, #0]
 80317a2:	6801      	ldr	r1, [r0, #0]
 80317a4:	115e      	asrs	r6, r3, #5
 80317a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80317aa:	f013 031f 	ands.w	r3, r3, #31
 80317ae:	b087      	sub	sp, #28
 80317b0:	bf18      	it	ne
 80317b2:	3604      	addne	r6, #4
 80317b4:	2500      	movs	r5, #0
 80317b6:	1f37      	subs	r7, r6, #4
 80317b8:	4682      	mov	sl, r0
 80317ba:	4690      	mov	r8, r2
 80317bc:	9301      	str	r3, [sp, #4]
 80317be:	f846 5c04 	str.w	r5, [r6, #-4]
 80317c2:	46b9      	mov	r9, r7
 80317c4:	463c      	mov	r4, r7
 80317c6:	9502      	str	r5, [sp, #8]
 80317c8:	46ab      	mov	fp, r5
 80317ca:	784a      	ldrb	r2, [r1, #1]
 80317cc:	1c4b      	adds	r3, r1, #1
 80317ce:	9303      	str	r3, [sp, #12]
 80317d0:	b342      	cbz	r2, 8031824 <__hexnan+0x88>
 80317d2:	4610      	mov	r0, r2
 80317d4:	9105      	str	r1, [sp, #20]
 80317d6:	9204      	str	r2, [sp, #16]
 80317d8:	f7ff fd94 	bl	8031304 <__hexdig_fun>
 80317dc:	2800      	cmp	r0, #0
 80317de:	d151      	bne.n	8031884 <__hexnan+0xe8>
 80317e0:	9a04      	ldr	r2, [sp, #16]
 80317e2:	9905      	ldr	r1, [sp, #20]
 80317e4:	2a20      	cmp	r2, #32
 80317e6:	d818      	bhi.n	803181a <__hexnan+0x7e>
 80317e8:	9b02      	ldr	r3, [sp, #8]
 80317ea:	459b      	cmp	fp, r3
 80317ec:	dd13      	ble.n	8031816 <__hexnan+0x7a>
 80317ee:	454c      	cmp	r4, r9
 80317f0:	d206      	bcs.n	8031800 <__hexnan+0x64>
 80317f2:	2d07      	cmp	r5, #7
 80317f4:	dc04      	bgt.n	8031800 <__hexnan+0x64>
 80317f6:	462a      	mov	r2, r5
 80317f8:	4649      	mov	r1, r9
 80317fa:	4620      	mov	r0, r4
 80317fc:	f7ff ffa8 	bl	8031750 <L_shift>
 8031800:	4544      	cmp	r4, r8
 8031802:	d952      	bls.n	80318aa <__hexnan+0x10e>
 8031804:	2300      	movs	r3, #0
 8031806:	f1a4 0904 	sub.w	r9, r4, #4
 803180a:	f844 3c04 	str.w	r3, [r4, #-4]
 803180e:	f8cd b008 	str.w	fp, [sp, #8]
 8031812:	464c      	mov	r4, r9
 8031814:	461d      	mov	r5, r3
 8031816:	9903      	ldr	r1, [sp, #12]
 8031818:	e7d7      	b.n	80317ca <__hexnan+0x2e>
 803181a:	2a29      	cmp	r2, #41	@ 0x29
 803181c:	d157      	bne.n	80318ce <__hexnan+0x132>
 803181e:	3102      	adds	r1, #2
 8031820:	f8ca 1000 	str.w	r1, [sl]
 8031824:	f1bb 0f00 	cmp.w	fp, #0
 8031828:	d051      	beq.n	80318ce <__hexnan+0x132>
 803182a:	454c      	cmp	r4, r9
 803182c:	d206      	bcs.n	803183c <__hexnan+0xa0>
 803182e:	2d07      	cmp	r5, #7
 8031830:	dc04      	bgt.n	803183c <__hexnan+0xa0>
 8031832:	462a      	mov	r2, r5
 8031834:	4649      	mov	r1, r9
 8031836:	4620      	mov	r0, r4
 8031838:	f7ff ff8a 	bl	8031750 <L_shift>
 803183c:	4544      	cmp	r4, r8
 803183e:	d936      	bls.n	80318ae <__hexnan+0x112>
 8031840:	f1a8 0204 	sub.w	r2, r8, #4
 8031844:	4623      	mov	r3, r4
 8031846:	f853 1b04 	ldr.w	r1, [r3], #4
 803184a:	f842 1f04 	str.w	r1, [r2, #4]!
 803184e:	429f      	cmp	r7, r3
 8031850:	d2f9      	bcs.n	8031846 <__hexnan+0xaa>
 8031852:	1b3b      	subs	r3, r7, r4
 8031854:	f023 0303 	bic.w	r3, r3, #3
 8031858:	3304      	adds	r3, #4
 803185a:	3401      	adds	r4, #1
 803185c:	3e03      	subs	r6, #3
 803185e:	42b4      	cmp	r4, r6
 8031860:	bf88      	it	hi
 8031862:	2304      	movhi	r3, #4
 8031864:	4443      	add	r3, r8
 8031866:	2200      	movs	r2, #0
 8031868:	f843 2b04 	str.w	r2, [r3], #4
 803186c:	429f      	cmp	r7, r3
 803186e:	d2fb      	bcs.n	8031868 <__hexnan+0xcc>
 8031870:	683b      	ldr	r3, [r7, #0]
 8031872:	b91b      	cbnz	r3, 803187c <__hexnan+0xe0>
 8031874:	4547      	cmp	r7, r8
 8031876:	d128      	bne.n	80318ca <__hexnan+0x12e>
 8031878:	2301      	movs	r3, #1
 803187a:	603b      	str	r3, [r7, #0]
 803187c:	2005      	movs	r0, #5
 803187e:	b007      	add	sp, #28
 8031880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8031884:	3501      	adds	r5, #1
 8031886:	2d08      	cmp	r5, #8
 8031888:	f10b 0b01 	add.w	fp, fp, #1
 803188c:	dd06      	ble.n	803189c <__hexnan+0x100>
 803188e:	4544      	cmp	r4, r8
 8031890:	d9c1      	bls.n	8031816 <__hexnan+0x7a>
 8031892:	2300      	movs	r3, #0
 8031894:	f844 3c04 	str.w	r3, [r4, #-4]
 8031898:	2501      	movs	r5, #1
 803189a:	3c04      	subs	r4, #4
 803189c:	6822      	ldr	r2, [r4, #0]
 803189e:	f000 000f 	and.w	r0, r0, #15
 80318a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80318a6:	6020      	str	r0, [r4, #0]
 80318a8:	e7b5      	b.n	8031816 <__hexnan+0x7a>
 80318aa:	2508      	movs	r5, #8
 80318ac:	e7b3      	b.n	8031816 <__hexnan+0x7a>
 80318ae:	9b01      	ldr	r3, [sp, #4]
 80318b0:	2b00      	cmp	r3, #0
 80318b2:	d0dd      	beq.n	8031870 <__hexnan+0xd4>
 80318b4:	f1c3 0320 	rsb	r3, r3, #32
 80318b8:	f04f 32ff 	mov.w	r2, #4294967295
 80318bc:	40da      	lsrs	r2, r3
 80318be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80318c2:	4013      	ands	r3, r2
 80318c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80318c8:	e7d2      	b.n	8031870 <__hexnan+0xd4>
 80318ca:	3f04      	subs	r7, #4
 80318cc:	e7d0      	b.n	8031870 <__hexnan+0xd4>
 80318ce:	2004      	movs	r0, #4
 80318d0:	e7d5      	b.n	803187e <__hexnan+0xe2>

080318d2 <__ascii_mbtowc>:
 80318d2:	b082      	sub	sp, #8
 80318d4:	b901      	cbnz	r1, 80318d8 <__ascii_mbtowc+0x6>
 80318d6:	a901      	add	r1, sp, #4
 80318d8:	b142      	cbz	r2, 80318ec <__ascii_mbtowc+0x1a>
 80318da:	b14b      	cbz	r3, 80318f0 <__ascii_mbtowc+0x1e>
 80318dc:	7813      	ldrb	r3, [r2, #0]
 80318de:	600b      	str	r3, [r1, #0]
 80318e0:	7812      	ldrb	r2, [r2, #0]
 80318e2:	1e10      	subs	r0, r2, #0
 80318e4:	bf18      	it	ne
 80318e6:	2001      	movne	r0, #1
 80318e8:	b002      	add	sp, #8
 80318ea:	4770      	bx	lr
 80318ec:	4610      	mov	r0, r2
 80318ee:	e7fb      	b.n	80318e8 <__ascii_mbtowc+0x16>
 80318f0:	f06f 0001 	mvn.w	r0, #1
 80318f4:	e7f8      	b.n	80318e8 <__ascii_mbtowc+0x16>

080318f6 <_realloc_r>:
 80318f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80318fa:	4680      	mov	r8, r0
 80318fc:	4615      	mov	r5, r2
 80318fe:	460c      	mov	r4, r1
 8031900:	b921      	cbnz	r1, 803190c <_realloc_r+0x16>
 8031902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031906:	4611      	mov	r1, r2
 8031908:	f7fa bfe2 	b.w	802c8d0 <_malloc_r>
 803190c:	b92a      	cbnz	r2, 803191a <_realloc_r+0x24>
 803190e:	f7fd f97f 	bl	802ec10 <_free_r>
 8031912:	2400      	movs	r4, #0
 8031914:	4620      	mov	r0, r4
 8031916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803191a:	f000 f898 	bl	8031a4e <_malloc_usable_size_r>
 803191e:	4285      	cmp	r5, r0
 8031920:	4606      	mov	r6, r0
 8031922:	d802      	bhi.n	803192a <_realloc_r+0x34>
 8031924:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8031928:	d8f4      	bhi.n	8031914 <_realloc_r+0x1e>
 803192a:	4629      	mov	r1, r5
 803192c:	4640      	mov	r0, r8
 803192e:	f7fa ffcf 	bl	802c8d0 <_malloc_r>
 8031932:	4607      	mov	r7, r0
 8031934:	2800      	cmp	r0, #0
 8031936:	d0ec      	beq.n	8031912 <_realloc_r+0x1c>
 8031938:	42b5      	cmp	r5, r6
 803193a:	462a      	mov	r2, r5
 803193c:	4621      	mov	r1, r4
 803193e:	bf28      	it	cs
 8031940:	4632      	movcs	r2, r6
 8031942:	f7fc fafa 	bl	802df3a <memcpy>
 8031946:	4621      	mov	r1, r4
 8031948:	4640      	mov	r0, r8
 803194a:	f7fd f961 	bl	802ec10 <_free_r>
 803194e:	463c      	mov	r4, r7
 8031950:	e7e0      	b.n	8031914 <_realloc_r+0x1e>
	...

08031954 <_strtoul_l.constprop.0>:
 8031954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031958:	4e34      	ldr	r6, [pc, #208]	@ (8031a2c <_strtoul_l.constprop.0+0xd8>)
 803195a:	4686      	mov	lr, r0
 803195c:	460d      	mov	r5, r1
 803195e:	4628      	mov	r0, r5
 8031960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031964:	5d37      	ldrb	r7, [r6, r4]
 8031966:	f017 0708 	ands.w	r7, r7, #8
 803196a:	d1f8      	bne.n	803195e <_strtoul_l.constprop.0+0xa>
 803196c:	2c2d      	cmp	r4, #45	@ 0x2d
 803196e:	d12f      	bne.n	80319d0 <_strtoul_l.constprop.0+0x7c>
 8031970:	782c      	ldrb	r4, [r5, #0]
 8031972:	2701      	movs	r7, #1
 8031974:	1c85      	adds	r5, r0, #2
 8031976:	f033 0010 	bics.w	r0, r3, #16
 803197a:	d109      	bne.n	8031990 <_strtoul_l.constprop.0+0x3c>
 803197c:	2c30      	cmp	r4, #48	@ 0x30
 803197e:	d12c      	bne.n	80319da <_strtoul_l.constprop.0+0x86>
 8031980:	7828      	ldrb	r0, [r5, #0]
 8031982:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8031986:	2858      	cmp	r0, #88	@ 0x58
 8031988:	d127      	bne.n	80319da <_strtoul_l.constprop.0+0x86>
 803198a:	786c      	ldrb	r4, [r5, #1]
 803198c:	2310      	movs	r3, #16
 803198e:	3502      	adds	r5, #2
 8031990:	f04f 38ff 	mov.w	r8, #4294967295
 8031994:	2600      	movs	r6, #0
 8031996:	fbb8 f8f3 	udiv	r8, r8, r3
 803199a:	fb03 f908 	mul.w	r9, r3, r8
 803199e:	ea6f 0909 	mvn.w	r9, r9
 80319a2:	4630      	mov	r0, r6
 80319a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80319a8:	f1bc 0f09 	cmp.w	ip, #9
 80319ac:	d81c      	bhi.n	80319e8 <_strtoul_l.constprop.0+0x94>
 80319ae:	4664      	mov	r4, ip
 80319b0:	42a3      	cmp	r3, r4
 80319b2:	dd2a      	ble.n	8031a0a <_strtoul_l.constprop.0+0xb6>
 80319b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80319b8:	d007      	beq.n	80319ca <_strtoul_l.constprop.0+0x76>
 80319ba:	4580      	cmp	r8, r0
 80319bc:	d322      	bcc.n	8031a04 <_strtoul_l.constprop.0+0xb0>
 80319be:	d101      	bne.n	80319c4 <_strtoul_l.constprop.0+0x70>
 80319c0:	45a1      	cmp	r9, r4
 80319c2:	db1f      	blt.n	8031a04 <_strtoul_l.constprop.0+0xb0>
 80319c4:	fb00 4003 	mla	r0, r0, r3, r4
 80319c8:	2601      	movs	r6, #1
 80319ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80319ce:	e7e9      	b.n	80319a4 <_strtoul_l.constprop.0+0x50>
 80319d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80319d2:	bf04      	itt	eq
 80319d4:	782c      	ldrbeq	r4, [r5, #0]
 80319d6:	1c85      	addeq	r5, r0, #2
 80319d8:	e7cd      	b.n	8031976 <_strtoul_l.constprop.0+0x22>
 80319da:	2b00      	cmp	r3, #0
 80319dc:	d1d8      	bne.n	8031990 <_strtoul_l.constprop.0+0x3c>
 80319de:	2c30      	cmp	r4, #48	@ 0x30
 80319e0:	bf0c      	ite	eq
 80319e2:	2308      	moveq	r3, #8
 80319e4:	230a      	movne	r3, #10
 80319e6:	e7d3      	b.n	8031990 <_strtoul_l.constprop.0+0x3c>
 80319e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80319ec:	f1bc 0f19 	cmp.w	ip, #25
 80319f0:	d801      	bhi.n	80319f6 <_strtoul_l.constprop.0+0xa2>
 80319f2:	3c37      	subs	r4, #55	@ 0x37
 80319f4:	e7dc      	b.n	80319b0 <_strtoul_l.constprop.0+0x5c>
 80319f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80319fa:	f1bc 0f19 	cmp.w	ip, #25
 80319fe:	d804      	bhi.n	8031a0a <_strtoul_l.constprop.0+0xb6>
 8031a00:	3c57      	subs	r4, #87	@ 0x57
 8031a02:	e7d5      	b.n	80319b0 <_strtoul_l.constprop.0+0x5c>
 8031a04:	f04f 36ff 	mov.w	r6, #4294967295
 8031a08:	e7df      	b.n	80319ca <_strtoul_l.constprop.0+0x76>
 8031a0a:	1c73      	adds	r3, r6, #1
 8031a0c:	d106      	bne.n	8031a1c <_strtoul_l.constprop.0+0xc8>
 8031a0e:	2322      	movs	r3, #34	@ 0x22
 8031a10:	f8ce 3000 	str.w	r3, [lr]
 8031a14:	4630      	mov	r0, r6
 8031a16:	b932      	cbnz	r2, 8031a26 <_strtoul_l.constprop.0+0xd2>
 8031a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8031a1c:	b107      	cbz	r7, 8031a20 <_strtoul_l.constprop.0+0xcc>
 8031a1e:	4240      	negs	r0, r0
 8031a20:	2a00      	cmp	r2, #0
 8031a22:	d0f9      	beq.n	8031a18 <_strtoul_l.constprop.0+0xc4>
 8031a24:	b106      	cbz	r6, 8031a28 <_strtoul_l.constprop.0+0xd4>
 8031a26:	1e69      	subs	r1, r5, #1
 8031a28:	6011      	str	r1, [r2, #0]
 8031a2a:	e7f5      	b.n	8031a18 <_strtoul_l.constprop.0+0xc4>
 8031a2c:	08035019 	.word	0x08035019

08031a30 <_strtoul_r>:
 8031a30:	f7ff bf90 	b.w	8031954 <_strtoul_l.constprop.0>

08031a34 <__ascii_wctomb>:
 8031a34:	4603      	mov	r3, r0
 8031a36:	4608      	mov	r0, r1
 8031a38:	b141      	cbz	r1, 8031a4c <__ascii_wctomb+0x18>
 8031a3a:	2aff      	cmp	r2, #255	@ 0xff
 8031a3c:	d904      	bls.n	8031a48 <__ascii_wctomb+0x14>
 8031a3e:	228a      	movs	r2, #138	@ 0x8a
 8031a40:	601a      	str	r2, [r3, #0]
 8031a42:	f04f 30ff 	mov.w	r0, #4294967295
 8031a46:	4770      	bx	lr
 8031a48:	700a      	strb	r2, [r1, #0]
 8031a4a:	2001      	movs	r0, #1
 8031a4c:	4770      	bx	lr

08031a4e <_malloc_usable_size_r>:
 8031a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031a52:	1f18      	subs	r0, r3, #4
 8031a54:	2b00      	cmp	r3, #0
 8031a56:	bfbc      	itt	lt
 8031a58:	580b      	ldrlt	r3, [r1, r0]
 8031a5a:	18c0      	addlt	r0, r0, r3
 8031a5c:	4770      	bx	lr
	...

08031a60 <_init>:
 8031a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a62:	bf00      	nop
 8031a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a66:	bc08      	pop	{r3}
 8031a68:	469e      	mov	lr, r3
 8031a6a:	4770      	bx	lr

08031a6c <_fini>:
 8031a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a6e:	bf00      	nop
 8031a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a72:	bc08      	pop	{r3}
 8031a74:	469e      	mov	lr, r3
 8031a76:	4770      	bx	lr
